
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УсловноеОфомлениеВремени();
	УсловноеОформлениеНастроения();
	УсловноеОформлениеВажности();
	УсловноеОформлениеВидаЗаписи();
	
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "Зашифрован", ВидСравненияКомпоновкиДанных.Равно, Истина	, "Описание",,, WebЦвета.СеребристоСерый);
	
	УстановитьЗначения();
	
	ТекПользователь 	= ПользователиСлужебный.АвторизованныйПользователь();
	дОбщиеФункцииСервер.УстановитьОтборСписка(Список.Отбор.Элементы, "Автор", ТекПользователь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначения()
	
	ЗаписейЗаЭтотМесяц 			= ПолучитьЗаписейЗаЭтотМесяц();
	ЗаписейЗаПредыдущийМесяц 	= ПолучитьЗаписейЗаПредыдущийМесяц();
	ПоследнийРезультат 			= ПолучитьПоследнийРезультат();
	ДневникЭмоций 				= ПолучитьПоследнююЭмоцию();
	//РазницаВремениЗаписей 		= ПолучитьРазницаВремениЗаписей();
	
	Элементы.ЗаписейЗаЭтотМесяц.Видимость 		= ЗначениеЗаполнено(ЗаписейЗаЭтотМесяц);
	//Элементы.ЗаписейЗаПредыдущийМесяц.Видимость = ЗначениеЗаполнено(ЗаписейЗаПредыдущийМесяц);
	Элементы.ПоследнийРезультат.Видимость 		= ЗначениеЗаполнено(ПоследнийРезультат);

КонецПроцедуры // УстановитьЗначения()

&НаСервере
Функция ПолучитьРазницаВремениЗаписей(Ссылка, Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	дДневник.Ссылка КАК Ссылка,
		|	дДневник.Дата КАК Дата,
		|	РАЗНОСТЬДАТ(дДневник.Дата, &Дата, МЕСЯЦ) КАК ПрошлоМесяцевВремени,
		|	РАЗНОСТЬДАТ(дДневник.Дата, &Дата, ДЕНЬ) КАК ПрошлоДнейВремени,
		|	РАЗНОСТЬДАТ(дДневник.Дата, &Дата, ЧАС) КАК ПрошлоЧасовВремени,
		|	РАЗНОСТЬДАТ(дДневник.Дата, &Дата, МИНУТА) КАК ПрошлоМинутВремени,
		|	РАЗНОСТЬДАТ(дДневник.Дата, &Дата, СЕКУНДА) КАК ПрошлоСекундВремени
		|ИЗ
		|	Документ.дДневник КАК дДневник
		|ГДЕ
		|	дДневник.Дата <= &Дата
		|	И дДневник.Ссылка <> &Ссылка
		|	И дДневник.Автор = &Автор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Дата"	, Дата);
	Запрос.УстановитьПараметр("Ссылка"	, Ссылка);
	Запрос.УстановитьПараметр("Автор"	, ПользователиСлужебный.АвторизованныйПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ВДЗ_ПрошлоМесяцевВремени 	= ВыборкаДетальныеЗаписи.ПрошлоМесяцевВремени;
			ВДЗ_ПрошлоДнейВремени 		= ВыборкаДетальныеЗаписи.ПрошлоДнейВремени; 
			ВДЗ_ПрошлоЧасовВремени 		= ВыборкаДетальныеЗаписи.ПрошлоЧасовВремени;
			ВДЗ_ПрошлоМинутВремени 		= ВыборкаДетальныеЗаписи.ПрошлоМинутВремени; 
			ВДЗ_ПрошлоСекундВремени 	= ВыборкаДетальныеЗаписи.ПрошлоСекундВремени;
			
			Результат = 
			?(ЗначениеЗаполнено(ВДЗ_ПрошлоМесяцевВремени)	, Строка(ВДЗ_ПрошлоМесяцевВремени) + " месяцев, или ", "") +
			?(ЗначениеЗаполнено(ВДЗ_ПрошлоДнейВремени)		, Строка(ВДЗ_ПрошлоДнейВремени) + " дней, или ", "") + 
			?(ЗначениеЗаполнено(ВДЗ_ПрошлоЧасовВремени)		, Строка(ВДЗ_ПрошлоЧасовВремени) + " часов, или ", "") + 
			?(ЗначениеЗаполнено(ВДЗ_ПрошлоМинутВремени)		, Строка(ВДЗ_ПрошлоМинутВремени) + " минут, или ", "") + 
			?(ЗначениеЗаполнено(ВДЗ_ПрошлоСекундВремени)	, Строка(ВДЗ_ПрошлоСекундВремени) + " секунд.", ""); 
		КонецЕсли;
	Иначе
		Результат = "";
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции // ПолучитьРазницаВремениЗаписей()
 
&НаСервере
Функция ПолучитьПоследнийРезультат()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	дРезультат.Период КАК Период,
		|	дРезультат.Регистратор КАК Регистратор,
		|	дРезультат.ИмяРезультата КАК ИмяРезультата,
		|	дРезультат.Параметр КАК Параметр,
		|	дРезультат.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.дРезультат КАК дРезультат
		|ГДЕ
		|	дРезультат.Период В
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(дРезультат.Период) КАК Период
		|			ИЗ
		|				РегистрСведений.дРезультат КАК дРезультат)";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
		Разделитель 			= ", ";
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ИмяРезультатаСтрока 	= Строка(ВыборкаДетальныеЗаписи.ИмяРезультата);
			ИмяРезультатаСтрока 	= ?(НЕ ПустаяСтрока(ИмяРезультатаСтрока), Разделитель + ИмяРезультатаСтрока, ""); 
			
			ПараметрСтрока 	= Строка(ВыборкаДетальныеЗаписи.Параметр);
			ПараметрСтрока 	= ?(НЕ ПустаяСтрока(ПараметрСтрока), Разделитель + ПараметрСтрока, ""); 
			
			ЗначениеСтрока 	= Строка(ВыборкаДетальныеЗаписи.Значение);
			ЗначениеСтрока 	= ?(НЕ ПустаяСтрока(ЗначениеСтрока), Разделитель + ЗначениеСтрока, ""); 
			
			Результат 		= Строка(ВыборкаДетальныеЗаписи.Период) + ИмяРезультатаСтрока + ПараметрСтрока + ЗначениеСтрока;
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли; 
	 	
КонецФункции // ПолучитьПоследнийРезультат()

&НаСервере
Функция ПолучитьЗаписейЗаПредыдущийМесяц()
	
	ТекДата 		= ТекущаяДата();
	НачалоПериода 	= НачалоМесяца(ТекДата);
	ПредМесяцНачало = ДобавитьМесяц(НачалоПериода, -1);
	ПредМесяцКонец 	= КонецМесяца(ПредМесяцНачало);
	
	Результат 		= ПолучитьЗаписейЗаПериод(ПредМесяцНачало, ПредМесяцКонец);
	
	Если Результат <> Неопределено Тогда
		РезультатСтрока = "Записей " + Строка(Результат.Записей) + ", Слов " + Строка(Результат.КоличествоСлов) + ", Символов " + Строка(Результат.КоличествоСимволов);
	КонецЕсли;
	
	Возврат РезультатСтрока;
	
КонецФункции // ПолучитьЗаписейЗаЭтотМесяц()

&НаСервере
Функция ПолучитьЗаписейЗаЭтотМесяц()
	
	ТекДата 		= ТекущаяДата();
	НачалоПериода 	= НачалоМесяца(ТекДата);
	КонецПериода 	= КонецМесяца(ТекДата);
	
	Результат 		= ПолучитьЗаписейЗаПериод(НачалоПериода, КонецПериода);
	
	Если Результат <> Неопределено Тогда
		РезультатСтрока = "Записей " + Строка(Результат.Записей) + ", Слов " + Строка(Результат.КоличествоСлов) + ", Символов " + Строка(Результат.КоличествоСимволов);
	КонецЕсли;
	
	Возврат РезультатСтрока;
	
КонецФункции // ПолучитьЗаписейЗаЭтотМесяц()

&НаСервере
Функция ПолучитьЗаписейЗаПериод(НачалоПериода, КонецПериода)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(дСтатистикаСловОбороты.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ВТ_Количество
	|ИЗ
	|	РегистрНакопления.дСтатистикаСлов.Обороты(&НачалоПериода, &КонецПериода, Регистратор, ) КАК дСтатистикаСловОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	дСтатистикаСловОбороты.КоличествоСловОборот КАК КоличествоСловОборот,
	|	дСтатистикаСловОбороты.КоличествоСимволовОборот КАК КоличествоСимволовОборот
	|ПОМЕСТИТЬ ВТ_СловСимволов
	|ИЗ
	|	РегистрНакопления.дСтатистикаСлов.Обороты(&НачалоПериода, &КонецПериода, , ) КАК дСтатистикаСловОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_Количество.Регистратор КАК Регистратор,
	|	ВТ_СловСимволов.КоличествоСловОборот КАК КоличествоСловОборот,
	|	ВТ_СловСимволов.КоличествоСимволовОборот КАК КоличествоСимволовОборот
	|ИЗ
	|	ВТ_Количество КАК ВТ_Количество,
	|	ВТ_СловСимволов КАК ВТ_СловСимволов";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Результат 	= Новый Структура();
			Результат.Вставить("Записей", ВыборкаДетальныеЗаписи.Регистратор);
			Результат.Вставить("КоличествоСлов", ВыборкаДетальныеЗаписи.КоличествоСловОборот);
			Результат.Вставить("КоличествоСимволов", ВыборкаДетальныеЗаписи.КоличествоСимволовОборот);
			
			Возврат Результат;
		КонецЕсли;
	Иначе
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьЗаписейЗаЭтотМесяц()

&НаСервере
Функция ПолучитьПоследнююЭмоцию()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	дЭмоции.Период КАК Период,
		|	дЭмоции.Регистратор КАК Регистратор,
		|	дЭмоции.ИмяЭмоции КАК ИмяЭмоции,
		|	дЭмоции.Интенсивность КАК Интенсивность,
		|	дЭмоции.Длительность КАК Длительность,
		|	дЭмоции.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.дЭмоции КАК дЭмоции
		|ГДЕ
		|	дЭмоции.Период В
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(дЭмоции.Период) КАК Период
		|			ИЗ
		|				РегистрСведений.дЭмоции КАК дЭмоции)";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Разделитель = ", ";
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			лИмяЭмоции = ВыборкаДетальныеЗаписи.ИмяЭмоции;
			Если ЗначениеЗаполнено(лИмяЭмоции) Тогда
				ИмяЭмоцииСтрока = Строка(ВыборкаДетальныеЗаписи.ИмяЭмоции);
				
				ИнтенсивностьЭмоцииСтрока 	= Строка(ВыборкаДетальныеЗаписи.Интенсивность);
				ЗаполненоИнтенсивностьЭмоцииСтрока = ИнтенсивностьЭмоцииСтрока <> "0" И ЗначениеЗаполнено(ИнтенсивностьЭмоцииСтрока);
				ИнтенсивностьЭмоцииСтрока 	= ?(ЗаполненоИнтенсивностьЭмоцииСтрока, ИнтенсивностьЭмоцииСтрока, ""); 
				
				ДлительностьЭмоцииСтрока 	= Строка(ВыборкаДетальныеЗаписи.Длительность);
				ЗаполненоДлительностьЭмоцииСтрока = ДлительностьЭмоцииСтрока <> "0" И ЗначениеЗаполнено(ДлительностьЭмоцииСтрока);
				ДлительностьЭмоцииСтрока 	= ?(ЗаполненоДлительностьЭмоцииСтрока, ДлительностьЭмоцииСтрока + " мин", "");
				
				КомментарийЭмоцииСтрока 	= Строка(ВыборкаДетальныеЗаписи.Комментарий);
				КомментарийЭмоцииСтрока 	= ?(ЗначениеЗаполнено(КомментарийЭмоцииСтрока), Разделитель + КомментарийЭмоцииСтрока, "");
				
				Если ЗаполненоИнтенсивностьЭмоцииСтрока ИЛИ ЗаполненоДлительностьЭмоцииСтрока Тогда
					Если ЗаполненоИнтенсивностьЭмоцииСтрока И ЗаполненоДлительностьЭмоцииСтрока Тогда
						лПояснениеСкобки = Разделитель + "(" + ИнтенсивностьЭмоцииСтрока + Разделитель + ДлительностьЭмоцииСтрока + ")";
					ИначеЕсли ЗаполненоИнтенсивностьЭмоцииСтрока И НЕ ЗаполненоДлительностьЭмоцииСтрока Тогда
						лПояснениеСкобки = Разделитель + "(" + ИнтенсивностьЭмоцииСтрока + ")";
					Иначе
						лПояснениеСкобки = Разделитель + "(" + ДлительностьЭмоцииСтрока + ")";
					КонецЕсли; 
				КонецЕсли;
				
				Результат = Строка(ВыборкаДетальныеЗаписи.Период) + Разделитель + ИмяЭмоцииСтрока + лПояснениеСкобки + КомментарийЭмоцииСтрока;
				
			КонецЕсли; 
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли; 
	 	
КонецФункции // ПолучитьПоследнююЭмоцию()

//+++ ====== Условное оформление ================================================

&НаСервере
Процедура УсловноеОфомлениеВремени()
	
	Ночь1_3 = Новый Массив;
	Ночь1_3.Добавить(1);
	Ночь1_3.Добавить(2);
	Ночь1_3.Добавить(3);
	
	Ночь4_6 = Новый СписокЗначений;
	Ночь4_6.Добавить(4);
	Ночь4_6.Добавить(5);
	Ночь4_6.Добавить(6);
	
	Утро7_9 = Новый СписокЗначений;
	Утро7_9.Добавить(7);
	Утро7_9.Добавить(8);
	Утро7_9.Добавить(9);
	
	День10_12 = Новый СписокЗначений;
	День10_12.Добавить(10);
	День10_12.Добавить(11);
	День10_12.Добавить(12);
	
	День13_15 = Новый СписокЗначений;
	День13_15.Добавить(13);
	День13_15.Добавить(14);
	День13_15.Добавить(15);
	
	Вечер16_18 = Новый СписокЗначений;
	Вечер16_18.Добавить(16);
	Вечер16_18.Добавить(17);
	Вечер16_18.Добавить(18);
	
	Вечер19_21 = Новый СписокЗначений;
	Вечер19_21.Добавить(19);
	Вечер19_21.Добавить(20);
	Вечер19_21.Добавить(21);
	
	Ночь22_0 = Новый СписокЗначений;
	Ночь22_0.Добавить(22);
	Ночь22_0.Добавить(23);
	Ночь22_0.Добавить(0);
	
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "ЗаписьВремя.ЧастиДат.Час", ВидСравненияКомпоновкиДанных.ВСписке, Ночь1_3	, "ЗаписьВремя", "Ночь1_3"		,, WebЦвета.Васильковый);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "ЗаписьВремя.ЧастиДат.Час", ВидСравненияКомпоновкиДанных.ВСписке, Ночь4_6	, "ЗаписьВремя", "Ночь4_6"		,, WebЦвета.КоролевскиГолубой);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "ЗаписьВремя.ЧастиДат.Час", ВидСравненияКомпоновкиДанных.ВСписке, Утро7_9	, "ЗаписьВремя", "Утро7_9"		,, WebЦвета.БледноСиреневый);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "ЗаписьВремя.ЧастиДат.Час", ВидСравненияКомпоновкиДанных.ВСписке, День10_12	, "ЗаписьВремя", "День10_12"	,, WebЦвета.Лимонный);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "ЗаписьВремя.ЧастиДат.Час", ВидСравненияКомпоновкиДанных.ВСписке, День13_15	, "ЗаписьВремя", "День13_15"	,, WebЦвета.БледноЗолотистый);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "ЗаписьВремя.ЧастиДат.Час", ВидСравненияКомпоновкиДанных.ВСписке, Вечер16_18	, "ЗаписьВремя", "Вечер16_18"	,, WebЦвета.ПесочноКоричневый); // WebЦвета.Сливовый
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "ЗаписьВремя.ЧастиДат.Час", ВидСравненияКомпоновкиДанных.ВСписке, Вечер19_21	, "ЗаписьВремя", "Вечер19_21"	,, WebЦвета.НейтральноПурпурный);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "ЗаписьВремя.ЧастиДат.Час", ВидСравненияКомпоновкиДанных.ВСписке, Ночь22_0	, "ЗаписьВремя", "Ночь22_0"		,, WebЦвета.ГрифельноСиний); // НейтральноГрифельноСиний
	
	
КонецПроцедуры

&НаСервере
Процедура УсловноеОформлениеНастроения()
	
	//ПрименитьУсловноеОфомление("Настроение", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дНастроения.Ужасное, "Настроение", "Настроение_Ужасное",, WebЦвета.НейтральноЗеленый);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "Настроение", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дНастроения.Плохое	, "Настроение", "Настроение_Плохое",, WebЦвета.НейтральноЗеленый);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "Настроение", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дНастроения.Нормальное, "Настроение", "Настроение_Нормальное",, WebЦвета.БледноЗеленый);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "Настроение", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дНастроения.Хорошее, "Настроение", "Настроение_Хорошее",, WebЦвета.ЗеленаяЛужайка);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "Настроение", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дНастроения.Отличное, "Настроение", "Настроение_Отличное",, WebЦвета.ЛимонноЗеленый);
	
КонецПроцедуры

&НаСервере
Процедура УсловноеОформлениеВажности()
	
	// Список Записей
	//ПрименитьУсловноеОфомление("Важность", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВажность.Обычное	, "Дата", "Важность_Обычное",, WebЦвета.НейтральноЗеленый);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "Важность", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВажность.Важное	, "Дата", "Важность_Важное",, WebЦвета.Оранжевый);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "Важность", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВажность.Особое	, "Дата", "Важность_Особое",, WebЦвета.БледноБирюзовый);
	
	// Дерево записей
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(УсловноеОформление.Элементы, "ДеревоЗаписей.Важность", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВажность.Важное	, "ДеревоЗаписейЗаписьДатаМесяц", "ДеревоЗаписейЗаписьДатаМесяц_Важность_Важное",, WebЦвета.Оранжевый);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(УсловноеОформление.Элементы, "ДеревоЗаписей.Важность", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВажность.Особое	, "ДеревоЗаписейЗаписьДатаМесяц", "ДеревоЗаписейЗаписьДатаМесяц_Важность_Особое",, WebЦвета.БледноБирюзовый);
	
КонецПроцедуры

&НаСервере
Процедура УсловноеОформлениеВидаЗаписи()
	
	// Список Записей
	//дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "ВидЗаписи", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВидЗаписи.Обычный	, "Дата", "ВидЗаписи_Обычный",, WebЦвета.Лосось);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "ВидЗаписи", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВидЗаписи.Личный	, "Автор", "ВидЗаписи_Личный",, WebЦвета.БледноКрасноФиолетовый);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "ВидЗаписи", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВидЗаписи.Рабочий	, "Автор", "ВидЗаписи_Рабочий",, WebЦвета.ПесочноКоричневый);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "ВидЗаписи", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВидЗаписи.Общий	, "Автор", "ВидЗаписи_Общий",, WebЦвета.СветлоНебесноГолубой);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "ВидЗаписи", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВидЗаписи.Прочее	, "Автор", "ВидЗаписи_Прочее",, WebЦвета.БледноЗолотистый);
	
	// Дерево записей
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(УсловноеОформление.Элементы, "ДеревоЗаписей.ВидЗаписи", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВидЗаписи.Личный	, "ДеревоЗаписейДата", "ДеревоЗаписейДата_ВидЗаписи_Личный",, WebЦвета.БледноКрасноФиолетовый);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(УсловноеОформление.Элементы, "ДеревоЗаписей.ВидЗаписи", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВидЗаписи.Рабочий	, "ДеревоЗаписейДата", "ДеревоЗаписейДата_ВидЗаписи_Рабочий",, WebЦвета.ПесочноКоричневый);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(УсловноеОформление.Элементы, "ДеревоЗаписей.ВидЗаписи", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВидЗаписи.Общий	, "ДеревоЗаписейДата", "ДеревоЗаписейДата_ВидЗаписи_Общий",, WebЦвета.СветлоНебесноГолубой);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(УсловноеОформление.Элементы, "ДеревоЗаписей.ВидЗаписи", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВидЗаписи.Прочее	, "ДеревоЗаписейДата", "ДеревоЗаписейДата_ВидЗаписи_Прочее",, WebЦвета.БледноЗолотистый);	
	
КонецПроцедуры

//--- ====== Условное оформление ================================================ 

//+++ ====== Открытие отчетов ================================================

&НаСервереБезКонтекста
Функция ПолучитьПользователяНаСервере()
	
	ТекПользователь = ПользователиСлужебный.АвторизованныйПользователь();
	Возврат ТекПользователь;
	
КонецФункции // ПолучитьПользователяНаСервере()

&НаКлиенте
Процедура ЗаписейЗаЭтотМесяцНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекПользователь = ПолучитьПользователяНаСервере();
	ОтборОтчета 	= Новый Структура("РегистраторАвтор", ТекПользователь);
	ПараметрыОтчета = Новый Структура("СформироватьПриОткрытии, Отбор", Истина, ОтборОтчета);
	//ПараметрыОтчета = Новый Структура("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.дЗаписейЗаМесяц.Форма", ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследнийРезультатНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекПользователь = ПолучитьПользователяНаСервере();
	ОтборОтчета 	= Новый Структура("РегистраторАвтор", ТекПользователь);
	ПараметрыОтчета = Новый Структура("СформироватьПриОткрытии, Отбор", Истина, ОтборОтчета);
	//ПараметрыОтчета = Новый Структура("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.дРезультаты.Форма", ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ДневникЭмоцийНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекПользователь = ПолучитьПользователяНаСервере();
	ОтборОтчета 	= Новый Структура("РегистраторАвтор", ТекПользователь);
	ПараметрыОтчета = Новый Структура("СформироватьПриОткрытии, Отбор", Истина, ОтборОтчета);
	//ПараметрыОтчета = Новый Структура("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.дЭмоции.Форма", ПараметрыОтчета);
	
КонецПроцедуры

//--- ====== Открытие отчетов ================================================ 

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	УстановитьЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСоСсылкойНаВыбраннуюЗапись(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	//СписокТекущиеДанные 		= Элементы.Список.ТекущиеДанные;
	СписокТекущиеДанныеСсылка 	= Элементы.Список.ТекущаяСтрока;
	
	дОбщиеФункцииКлиент.СоздатьСоСсылкойНаВыбраннуюЗапись(СписокТекущиеДанныеСсылка);
	//ФормаОбъекта    = ПолучитьФорму("Документ.дДневник.Форма.ФормаДокумента");
	//ДанныеФормы     = ФормаОбъекта.Объект;
	//
	//СоздатьДокументСоСсылкойНаСервере(ДанныеФормы, СписокТекущиеДанныеСсылка);
	//
	//КопироватьДанныеФормы(ДанныеФормы, ФормаОбъекта.Объект);
	//
	//ФормаОбъекта.Открыть();

КонецПроцедуры


&НаСервереБезКонтекста
Процедура СоздатьДокументСоСсылкойНаСервере(НовыйОбъект, СсылкаНаЗапись)
	
	//НовыйРезультат 					= НовыйОбъект.Результат.Добавить();
	//НовыйРезультат.ИмяРезультата 	= Справочники.дРезультат.СсылкаНаЗапись;
	//НовыйРезультат.Параметр 		= СсылкаНаЗапись;
	дОбщиеФункцииСервер.СоздатьДокументСоСсылкой(НовыйОбъект, СсылкаНаЗапись);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	лЭлементТекущиеДанныеДата 	= Элемент.ТекущиеДанные.Дата; 
	РазницаВремениЗаписей 	= ПолучитьРазницаВремениЗаписей(Элемент.ТекущаяСтрока, Элемент.ТекущиеДанные.Дата);
	ПанельКалендаря 		= лЭлементТекущиеДанныеДата;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПанельКалендаря 	= ТекущаяДата();
	
	Элементы.ПанельКалендаря.Видимость 	= Ложь;
	Элементы.ДеревоЗаписей.Видимость 	= Ложь;
	
	Элементы.ДекорацияДлительнойОперации.Видимость 	= Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДеревоЗаписей(Команда)
	
	ПоказатьДеревоЗаписейПометка 			= Элементы.ФормаПоказатьДеревоЗаписей.Пометка;
	
	лПоказатьДеревоЗаписейПометкаСостояние 	= НЕ ПоказатьДеревоЗаписейПометка;
	
	Если лПоказатьДеревоЗаписейПометкаСостояние Тогда  
		ПоказатьДеревоЗаписейНаСервере();
		ДеревоЗаписейРазвернутьПоследнийЭлемент("ДеревоЗаписей", ДеревоЗаписей.ПолучитьЭлементы());
	КонецЕсли;
	
	Элементы.ФормаПоказатьДеревоЗаписей.Пометка = лПоказатьДеревоЗаписейПометкаСостояние;
	Элементы.ДеревоЗаписей.Видимость 			= лПоказатьДеревоЗаписейПометкаСостояние;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаписейРазвернутьПоследнийЭлемент(пДеревоИмя, Строки, МенятьТекущуюПозицию = Ложь, РазворачиватьСПодчиненными = Ложь)
	
	//Если НЕ МенятьТекущуюПозицию Тогда
	//	лЭлементыДеревоИмяТекущаяСтрока 	= Элементы[пДеревоИмя].ТекущаяСтрока; 
	//	Если НЕ лЭлементыДеревоИмяТекущаяСтрока = Неопределено Тогда
	//		Возврат; // т.е. когда что-то выделено	
	//	КонецЕсли;	
	//КонецЕсли; 
	
	// Годы
	лСтрокиКоличество 	= Строки.Количество(); 
	Если лСтрокиКоличество = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ПоследняяСтрокаГода = Строки[лСтрокиКоличество - 1];
	
	Элементы[пДеревоИмя].Развернуть(ПоследняяСтрокаГода.ПолучитьИдентификатор(), РазворачиватьСПодчиненными);
	
	// Месяцы
	ДеревоМесяцы 		= ПоследняяСтрокаГода.ПолучитьЭлементы();
	
	лСтрокиДеревоМесяцыКоличество 	= ДеревоМесяцы.Количество(); 
	Если лСтрокиДеревоМесяцыКоличество = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ПоследняяСтрокаМесяца = ДеревоМесяцы[лСтрокиДеревоМесяцыКоличество - 1];
	
	Элементы[пДеревоИмя].Развернуть(ПоследняяСтрокаМесяца.ПолучитьИдентификатор(), РазворачиватьСПодчиненными);
	
	// Дни
	ДеревоДни 			= ПоследняяСтрокаМесяца.ПолучитьЭлементы();
	
	лСтрокиДеревоДниКоличество 	= ДеревоДни.Количество(); 
	Если лСтрокиДеревоДниКоличество = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ПоследняяСтрокаДня = ДеревоДни[лСтрокиДеревоДниКоличество - 1];
	
	Элементы[пДеревоИмя].Развернуть(ПоследняяСтрокаДня.ПолучитьИдентификатор(), РазворачиватьСПодчиненными);
	
	Элементы[пДеревоИмя].ТекущаяСтрока = ПоследняяСтрокаДня.ПолучитьИдентификатор(); // Выберем последнюю запись
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьДеревоЗаписейНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГОД(дДневник.Дата) КАК ЗаписьДатаГод,
		|	МЕСЯЦ(дДневник.Дата) КАК ЗаписьДатаМесяцЧисло,
		|	дДневник.Дата КАК Дата,
		|	дДневник.Ссылка КАК Запись,
		|	дДневник.Важность КАК Важность,
		|	дДневник.ВидЗаписи КАК ВидЗаписи,
		|	дДневник.Заголовок КАК Заголовок
		|ИЗ
		|	Документ.дДневник КАК дДневник
		|ГДЕ
		|	дДневник.Автор = &Автор
		|
		|СГРУППИРОВАТЬ ПО
		|	ГОД(дДневник.Дата),
		|	МЕСЯЦ(дДневник.Дата),
		|	дДневник.Дата,
		|	дДневник.Ссылка,
		|	дДневник.Важность,
		|	дДневник.ВидЗаписи
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаписьДатаГод,
		|	ЗаписьДатаМесяцЧисло,
		|	Дата,
		|	Запись
		|ИТОГИ
		|	КОЛИЧЕСТВО(Запись)
		|ПО
		|	ЗаписьДатаГод ИЕРАРХИЯ,
		|	ЗаписьДатаМесяцЧисло ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Автор"	, ПараметрыСеанса.ТекущийПользователь);
	
	Выгрузка 		= Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	рфДеревоЗаписей = РеквизитФормыВЗначение("ДеревоЗаписей");
	
	рфДеревоЗаписей = Выгрузка;
	
	ЗначениеВРеквизитФормы(рфДеревоЗаписей, "ДеревоЗаписей");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	лЭлементТекущиеДанные 	= Элемент.ТекущиеДанные; 
	Если лЭлементТекущиеДанные <> Неопределено Тогда
		Элементы.Список.ТекущаяСтрока = лЭлементТекущиеДанные.Запись;	
	КонецЕсли;
	
КонецПроцедуры

//+++ ====== Управление деревом записей ================================================

&НаКлиенте
Процедура ДеревоЗаписейСвернутьВсе(Команда)
	
	СвернутьВсе(ДеревоЗаписей, "ДеревоЗаписей");
	
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(пДеревоИмя)
	Элементы[пДеревоИмя].Свернуть(Элементы[пДеревоИмя].ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВерхниеСтроки(пДерево)
	тЭлементы = пДерево.ПолучитьЭлементы();
	Для Каждого тСтр Из тЭлементы Цикл
		Элементы.пДерево.Свернуть(тСтр.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(пДерево, пДеревоИмя)
	тЭлементы = пДерево.ПолучитьЭлементы();
	СвернутьРекурсия(пДерево, пДеревоИмя, тЭлементы); 
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРекурсия(пДерево, пДеревоИмя, тЭлементы)
	Для Каждого тСтр Из тЭлементы Цикл
		тСтрЭлементы = тСтр.ПолучитьЭлементы();
		СвернутьРекурсия(пДерево, пДеревоИмя, тСтрЭлементы);
		
		Элементы[пДеревоИмя].Свернуть(тСтр.ПолучитьИдентификатор());
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаписейРазвернутьВсе(Команда)
	
	РазвернутьВсе(ДеревоЗаписей, "ДеревоЗаписей");
	
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(пДеревоИмя)
	Элементы[пДеревоИмя].Развернуть(Элементы[пДеревоИмя].ТекущаяСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(пДерево, пДеревоИмя)
	тЭлементы = пДерево.ПолучитьЭлементы();
	Для Каждого тСтр Из тЭлементы Цикл
		Элементы[пДеревоИмя].Развернуть(тСтр.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаписейПоследняяЗапись(Команда)
	
	ДеревоЗаписейРазвернутьПоследнийЭлемент("ДеревоЗаписей", ДеревоЗаписей.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаписейПерваяЗапись(Команда)
	
	Если ДеревоЗаписей.ПолучитьЭлементы().Количество() > 0 Тогда
		Элементы.ДеревоЗаписей.ТекущаяСтрока = 0;
	КонецЕсли; 
	
КонецПроцедуры

//--- ====== Управление деревом записей ================================================ 

&НаКлиенте
Процедура ПанельДатыПриАктивизацииДаты(Элемент)
	
	ЗаписьДневникаНаБлижайшуюВыбраннуюДату 	= ПолучитьЗаписьДневникаНаБлижайшуюВыбраннуюДату(ПанельКалендаря);
	Если ЗаписьДневникаНаБлижайшуюВыбраннуюДату <> Неопределено Тогда
		Элементы.Список.ТекущаяСтрока = ЗаписьДневникаНаБлижайшуюВыбраннуюДату;	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаписьДневникаНаБлижайшуюВыбраннуюДату(пДата)
	
	лРезультат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	дДневник.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА дДневник.Дата > &ВыбраннаяДата
		|			ТОГДА РАЗНОСТЬДАТ(&ВыбраннаяДата, дДневник.Дата, СЕКУНДА)
		|		ИНАЧЕ РАЗНОСТЬДАТ(дДневник.Дата, &ВыбраннаяДата, СЕКУНДА)
		|	КОНЕЦ КАК РазностьДат
		|ИЗ
		|	Документ.дДневник КАК дДневник
		|
		|УПОРЯДОЧИТЬ ПО
		|	РазностьДат";
	
	Запрос.УстановитьПараметр("ВыбраннаяДата", пДата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			лРезультат = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПанельКалендаря(Команда)
	
	ПоказатьПанельКалендаряПометка 				= Элементы.ФормаПоказатьПанельКалендаря.Пометка;
	
	лПоказатьПанельКалендаряПометкаСостояние 	= НЕ ПоказатьПанельКалендаряПометка;
	
	Если лПоказатьПанельКалендаряПометкаСостояние Тогда // т.е активируется кнопка 
		
	КонецЕсли;
	
	Элементы.ФормаПоказатьПанельКалендаря.Пометка 	= лПоказатьПанельКалендаряПометкаСостояние;
	Элементы.ПанельКалендаря.Видимость 				= лПоказатьПанельКалендаряПометкаСостояние;
	
КонецПроцедуры

//+++ ====== Быстрое добавление новой записи ================================================

&НаКлиенте
Процедура НоваяБыстраяЗаписьОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	лЭлементТекстРедактирования 	= Элемент.ТекстРедактирования;
	
	//Откроем простую форму
	ЗаписьФорма 		= ПолучитьФорму("Документ.дДневник.Форма.ФормаДокументаПростая");
	ЗаписьДанныеФормы 	= ЗаписьФорма.Объект; // Получаем объект формы в переменную
	ЗаписьДанныеФормы.Описание = лЭлементТекстРедактирования;
	ЗаписьФорма.Открыть();
	
	НоваяБыстраяЗапись = "";
	
	НоваяБыстраяЗаписьУстановитьМногострочныйРежим(Элементы.НоваяБыстраяЗапись, Ложь);
	
	//Откроем совсем простое типовое окно
	//Если ВвестиСтроку(лЭлементТекстРедактирования, "Введите описание записи", 0, Истина) Тогда
	//	Если ЗначениеЗаполнено(лЭлементТекстРедактирования) Тогда
	//		НоваяБыстраяЗапись 	= лЭлементТекстРедактирования; // Это здесь не меняет реквизит
	//		СоздатьНовуюЗапись(лЭлементТекстРедактирования);
	//	КонецЕсли; 
	//КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗаписей()
	
	// ОБНОВИМ динамический список файлы
	Элементы.Список.Обновить();
	//// для обновления Реквизитов
	//ЭтаФорма.Прочитать();
	//// Обновление данных
	//ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры // ОбновитьСписокЗаписей()
 
&НаКлиенте
Процедура НоваяБыстраяЗаписьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НоваяБыстраяЗаписьУстановитьМногострочныйРежим(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяБыстраяЗаписьУстановитьМногострочныйРежим(пЭлемент, пРазворачивать = Истина)

	Если пРазворачивать Тогда
		НоваяБыстраяЗапись = пЭлемент.ТекстРедактирования;
	КонецЕсли; 
	
	лЭлементМногострочныйРежим 	= пЭлемент.МногострочныйРежим; 
	Если ТипЗнч(лЭлементМногострочныйРежим) = Тип("Булево") Тогда
		Если НЕ лЭлементМногострочныйРежим И пРазворачивать Тогда
			пЭлемент.МногострочныйРежим = Истина;
			пЭлемент.Высота = 5;
		Иначе
			пЭлемент.МногострочныйРежим = Ложь;
			пЭлемент.Высота = 0;
		КонецЕсли; 
	ИначеЕсли ?(пРазворачивать, пЭлемент.МногострочныйРежим = Неопределено, Ложь) Тогда
		Если пРазворачивать Тогда
			пЭлемент.МногострочныйРежим = Истина;
			пЭлемент.Высота = 5;
		КонецЕсли; 
	КонецЕсли;  
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДобавитьНовуюБыструюЗапись(Команда)
	
	Если ЗначениеЗаполнено(НоваяБыстраяЗапись) Тогда
		СоздатьНовуюЗапись(НоваяБыстраяЗапись);
		УстановитьЗначения();
	КонецЕсли;
	
КонецПроцедуры

//--- ====== Быстрое добавление новой записи ================================================ 

//+++ ====== Фоновое задания добавления записи ================================================

&НаКлиенте
Процедура СоздатьНовуюЗапись(пОписание)
	
	//лНоваяЗапись = дОбщиеФункцииСервер.СоздатьНовуюЗаписьНаСервере(пОписание);
	
	// Фоновое задание на добавление новой записи
	ВыполнитьЭтапОбновленияДанных();
	НоваяБыстраяЗаписьУстановитьМногострочныйРежим(Элементы.НоваяБыстраяЗапись, Ложь);
	
КонецПроцедуры // СоздатьНовуюЗапись()

&НаКлиенте
Процедура ВыполнитьЭтапОбновленияДанных()

	ПоказатьСостояниеОбновления(ЭтапОбновленияДанных);
	
	Если ЭтапОбновленияДанных = "" Тогда
		// Старт обновления данных
		
		ЭтапОбновленияДанных = "Старт";
		//ПоказатьСостояниеОбновления(ЭтапОбновленияДанных);
		ТекущийИнтервалОжидания        = 0.1;
		
	ИначеЕсли ЭтапОбновленияДанных = "Старт" Тогда
		// Ожидание завершения фонового задания
		
		ВыполнитьОбновлениеДанныхНаСервере();
		ТекущийИнтервалОжидания        = 0.5;
		
	ИначеЕсли ЭтапОбновленияДанных = "Ожидание" Тогда
		// Ожидание завершения фонового задания
		//Состояние("Добавляется новая запись");
		Если ФоновоеЗаданиеВыполненоКлиент() Тогда
			ЭтапОбновленияДанных = "Завершение";
			ТекущийИнтервалОжидания = 0.1;
		Иначе
			ТекущийИнтервалОжидания = Мин(ТекущийИнтервалОжидания + 0.5, 4);
		КонецЕсли;
		
	ИначеЕсли ЭтапОбновленияДанных = "Завершение" Или ЭтапОбновленияДанных = "ОтменаЗадания" Тогда
		// Фоновое задание завершено, нужно обновить показатели на форме
		
		ТекстОшибки = "";
		ОбновитьСписокЗаписей();
		ОбновитьПоказателиНовойЗаписи(ТекстОшибки);
		
		Если ЭтапОбновленияДанных = "" Тогда
			ТекущийИнтервалОжидания    = 0;
			ТекущийИнтервалДоступности = 0;
		Иначе
			ТекущийИнтервалОжидания = 0.1;
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ПоказатьПредупреждение(, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭтапОбновленияДанных = "Ошибка" Тогда
		// Выполнение завершено с ошибкой
		
		//ПоказатьСостояниеОбновления(ЭтапОбновленияДанных);
		ТекущийИнтервалОжидания    = 0;
		ТекущийИнтервалДоступности = 0;
		ЭтапОбновленияДанных = "";
		
	КонецЕсли;
	
	Если ТекущийИнтервалОжидания > 0 Тогда
		ПодключитьОбработчикОжидания("ВыполнитьЭтапОбновленияДанных", ТекущийИнтервалОжидания, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбновлениеДанныхНаСервере()

	// Проверяем текущее состояние фонового задания
	ОтменитьОбновлениеДанныхНаСервере();

	// Готовим параметры для фонового задания
	лБыстраяЗаписьКомментарий 	= Константы.дБыстраяЗаписьКомментарий.Получить();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("пОписание"	, НоваяБыстраяЗапись);
	СтруктураПараметров.Вставить("пКомментарий"	, лБыстраяЗаписьКомментарий);
	
	// Запускаем фоновое задание
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"дОбщиеФункцииСервер.СоздатьНовуюЗаписьНаСервереВФоне", 
		СтруктураПараметров, 
		НСтр("ru='Добавление записи и обновление списка'"));
		
	// Разбираем результат
	АдресФоновогоЗадания    = РезультатВыполнения.АдресХранилища;
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		Если ЭтоАдресВременногоХранилища(АдресФоновогоЗадания) И ПолучитьИзВременногоХранилища(АдресФоновогоЗадания) <> Неопределено Тогда
			ЭтапОбновленияДанных = "Завершение";
		Иначе
			ЭтапОбновленияДанных = "Ошибка";
		КонецЕсли;
	Иначе
		ИДФоновогоЗадания = РезультатВыполнения.ИдентификаторЗадания;
		ЭтапОбновленияДанных = "Ожидание";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказателиНовойЗаписи(ТекстОшибки)

	лНоваяЗапись = Неопределено;
	Если ЭтоАдресВременногоХранилища(АдресФоновогоЗадания) Тогда
		лНоваяЗапись = ПолучитьИзВременногоХранилища(АдресФоновогоЗадания);
	КонецЕсли;
	
	Если лНоваяЗапись <> Неопределено Тогда
		
		Попытка
			
			НоваяБыстраяЗапись 				= "";
			ЭтапОбновленияДанных 			= "";
			Элементы.Список.ТекущаяСтрока 	= лНоваяЗапись;
			
		Исключение
			
			Ошибка = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Записи дневника. Добавление быстрой записи завершилось с ошибкой'"),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(Ошибка));
				
			ЭтапОбновленияДанных = "Ошибка";
			ТекстОшибки = КраткоеПредставлениеОшибки(Ошибка);
			
		КонецПопытки;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Неопределено, АдресФоновогоЗадания);
	АдресФоновогоЗадания = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСостояниеОбновления(Этап)

	Если Этап = "Старт" или Этап = "Ожидание" Тогда
		
		//Элементы.Подзаголовок.Доступность 			= Ложь;
		Элементы.НоваяБыстраяЗапись.Доступность 		= Ложь;
		Элементы.ДобавитьНовуюБыструюЗапись.Доступность = Ложь; 
		
		Элементы.ДобавитьНовуюБыструюЗапись.Видимость 	= Ложь;
		Элементы.ДекорацияДлительнойОперации.Видимость 	= Истина;
		
	ИначеЕсли Этап = "Ошибка" Тогда
		
		//Элементы.Подзаголовок.Доступность 			= Ложь;
		Элементы.НоваяБыстраяЗапись.Доступность 		= Истина;
		Элементы.ДобавитьНовуюБыструюЗапись.Доступность = Истина;
		
		Элементы.ДобавитьНовуюБыструюЗапись.Видимость 	= Истина; 
		Элементы.ДекорацияДлительнойОперации.Видимость 	= Ложь;
		
	Иначе
		
		//Элементы.Подзаголовок.Доступность 			= Истина;
		Элементы.НоваяБыстраяЗапись.Доступность 		= Истина;
		Элементы.ДобавитьНовуюБыструюЗапись.Доступность = Истина;
		
		Элементы.ДобавитьНовуюБыструюЗапись.Видимость 	= Истина;
		Элементы.ДекорацияДлительнойОперации.Видимость 	= Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтменитьОбновлениеДанныхНаСервере()

	Если ЗначениеЗаполнено(ИДФоновогоЗадания) Тогда
		
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИДФоновогоЗадания);
		ИДФоновогоЗадания    = "";
		АдресФоновогоЗадания = "";
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ФоновоеЗаданиеВыполненоКлиент()

	Если Не ЗначениеЗаполнено(ИДФоновогоЗадания) Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат ФоновоеЗаданиеВыполненоСервер();
	
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеВыполненоСервер()

	Попытка
	
		Выполнено = ДлительныеОперации.ЗаданиеВыполнено(ИДФоновогоЗадания);
		Если Выполнено Тогда
			ИДФоновогоЗадания = Неопределено;
		КонецЕсли;
	
	Исключение
		// запись в журнал регистрации сделана в прверке выполнения
		// Устанавливаем этап в "ошибку" и выводим сообщение
		ЭтапОбновленияДанных = "Ошибка";
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;

	КонецПопытки; 

	Возврат Выполнено;
	
КонецФункции

&НаКлиенте
Процедура БыстроИзменитьЗапись(Команда)
	
	//Откроем простую форму
	лПараметры = Новый Структура("Ключ", Элементы.Список.ТекущаяСтрока);
	ЗаписьФорма = ПолучитьФорму("Документ.дДневник.Форма.ФормаДокументаПростая", лПараметры);
	ЗаписьФорма.Открыть();
	
КонецПроцедуры

//--- ====== Фоновое задания добавления записи ================================================ 

