
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	лДатаНачалаЗамера = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
	
	ТекДата 	= ТекущаяДата();
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата 			= ТекДата;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончание) Тогда
		Объект.ДатаОкончание 	= ТекДата;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
		СоздатьЭлементыРасширенногоВвода();
		КлючСохраненияПоложенияОкна = "РасширенныйВвод";
	КонецЕсли;
	
	СобытияУНФКлиентСервер.ЗаполнитьСписокВыбораВремени(Элементы.НачалоВремя);
	СобытияУНФКлиентСервер.ЗаполнитьСписокВыбораВремени(Элементы.ОкончаниеВремя);
	
	лЗначенияЗаполнения 	= Параметры.ЗначенияЗаполнения;
	Если ЗначениеЗаполнено(лЗначенияЗаполнения) Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметры.ЗначенияЗаполнения); //Хотя передаётся типовым методом, само не заполняется
		
		Если лЗначенияЗаполнения.Свойство("ДанныеЗаписиКалендаря") Тогда
			лДанныеЗаписиКалендаря 	= лЗначенияЗаполнения.ДанныеЗаписиКалендаря;
			Если ЗначениеЗаполнено(лДанныеЗаписиКалендаря) Тогда
				ЗаполнитьЗначенияСвойств(Объект, лДанныеЗаписиКалендаря); 
				
				Если ЗначениеЗаполнено(лДанныеЗаписиКалендаря.ЗаписьКалендаря) Тогда
					Объект.Основание 	= лДанныеЗаписиКалендаря.ЗаписьКалендаря;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли; 
	КонецЕсли; 
	
	Элементы.Основание.Видимость 	= ЗначениеЗаполнено(Объект.Основание); 
	
	ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.КлючевыеОперации.СозданиеПростойФормыДневника, лДатаНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыРасширенногоВвода()
	
	ЗначениеВРеквизитФормы(Справочники.ЗаписиКалендаряСотрудника.ОписаниеРасширенногоВводаЗаписей(), "ОписаниеРасширенногоВвода");
	
	Для Индекс = 0 По ОписаниеРасширенногоВвода.Количество()-1 Цикл
		
		СтрокаОписания = ОписаниеРасширенногоВвода[Индекс];
		
		ГруппаРодитель = ?(Индекс <= ОписаниеРасширенногоВвода.Количество() / 2, Элементы.Колонка_1, Элементы.Колонка_2);
		
		ИмяЭлемента = "ВводТипа_" + Индекс;
		ДекорацияНадпись = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаРодитель);
		ДекорацияНадпись.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияНадпись.Заголовок = СтрокаОписания.Представление;
		ДекорацияНадпись.Гиперссылка = Истина;
		ДекорацияНадпись.УстановитьДействие("Нажатие", "Подключаемый_ВводТипаНажатие");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВводТипаНажатие(Элемент)
	
	ДанныеЗаписиКалендаря = Новый Структура;
	ДанныеЗаписиКалендаря.Вставить("Наименование",	Объект.Описание);
	ДанныеЗаписиКалендаря.Вставить("Календарь",		Объект.Календарь);
	ДанныеЗаписиКалендаря.Вставить("Начало",		Объект.Дата);
	ДанныеЗаписиКалендаря.Вставить("Окончание",		Объект.ДатаОкончание);
	ДанныеЗаписиКалендаря.Вставить("Описание",		Объект.Описание);
	
	Индекс = Число(Сред(Элемент.Имя, СтрДлина("ВводТипа_")+1));
	СтрокаОписания = ОписаниеРасширенногоВвода[Индекс];
	
	Если Не СтрокаОписания.ПараметрыФормы.Свойство("ЗначенияЗаполнения") Тогда
		СтрокаОписания.ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
	КонецЕсли;
	
	СтрокаОписания.ПараметрыФормы.ЗначенияЗаполнения.Вставить("ДанныеЗаписиКалендаря", ДанныеЗаписиКалендаря);
	
	ОткрытьФорму(СтрокаОписания.ИмяФормы, СтрокаОписания.ПараметрыФормы);
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Элементы.Основание.Видимость 	= ЗначениеЗаполнено(Объект.Основание);
	
	Оповестить("Запись_ИсточникЗаписейКалендаряСотрудника");
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВремяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	лДата 		= Объект.Дата;
	лНоваяДата 	= Дата(Год(лДата), Месяц(лДата), День(лДата), Час(ВыбранноеЗначение), Минута(ВыбранноеЗначение), Секунда(ВыбранноеЗначение));
	ВыбранноеЗначение = лНоваяДата;
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеВремяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	лДата 		= Объект.ДатаОкончание;
	лНоваяДата 	= Дата(Год(лДата), Месяц(лДата), День(лДата), Час(ВыбранноеЗначение), Минута(ВыбранноеЗначение), Секунда(ВыбранноеЗначение));
	ВыбранноеЗначение = лНоваяДата;
КонецПроцедуры

&НаКлиенте
Функция ИзменитьВремяТаблиц(пЭлементТекущиеДанные)

	лРезультат = Ложь;
	
	Если пЭлементТекущиеДанные <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(пЭлементТекущиеДанные.Время) Тогда
			пЭлементТекущиеДанные.Время = Объект.Дата;
			лРезультат = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат лРезультат;

КонецФункции // ИзменитьВремяТаблиц()

&НаКлиенте
Процедура РезультатПриИзменении(Элемент)
	
	лЭлементТекущиеДанные 	= Элемент.ТекущиеДанные;
	ИзменитьВремяТаблиц(лЭлементТекущиеДанные);
	
	ПодготовкаСтрокиТаблицы(лЭлементТекущиеДанные, "Значение");
	
	РезультатПараметрПриИзменении(Элемент); //Добавим теги по виду деятельности
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаСтрокиТаблицы(пЭлементТекущиеДанные, пИмяКолонки)

	Если пЭлементТекущиеДанные <> Неопределено Тогда
		лЗначение = пЭлементТекущиеДанные[пИмяКолонки];
		
		Если ТипЗнч(лЗначение) = Тип("Строка") И ЗначениеЗаполнено(лЗначение) Тогда
			пЭлементТекущиеДанные[пИмяКолонки] = СокрЛП(пЭлементТекущиеДанные[пИмяКолонки]);
		КонецЕсли; 
	КонецЕсли;	

КонецПроцедуры // ПодготовкаСтрокиТаблицы()

&НаКлиенте
Процедура РезультатПараметрПриИзменении(Элемент)
	
	лРезультатТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	Если лРезультатТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Обрабатываем Вид Деятельности
	лРезультатТекущиеДанныеПараметр 	= лРезультатТекущиеДанные.Параметр;
	Если ЗначениеЗаполнено(лРезультатТекущиеДанныеПараметр) Тогда
		// Заполняем тип параметра
		лРезультатПараметрТип 			= ТипЗнч(лРезультатТекущиеДанныеПараметр);
		Если лРезультатПараметрТип = Тип("СправочникСсылка.дВидыДеятельности") Тогда
			лРезультатТекущиеДанныеЗначение 	= лРезультатТекущиеДанные.Значение; 
			Если НЕ ЗначениеЗаполнено(лРезультатТекущиеДанныеЗначение) Тогда // И если текущее значение не заполнено, иначе затрём
				ТипЗначенияРезультатаВидаДеятельности 		= ПолучитьТипЗначенияРезультатаВидаДеятельности(лРезультатТекущиеДанныеПараметр);	
				Если ТипЗначенияРезультатаВидаДеятельности <> Неопределено Тогда
					Элементы.Результат.ТекущиеДанные.Значение 	= ТипЗначенияРезультатаВидаДеятельности;
				КонецЕсли; 
			КонецЕсли; 
			
			// Заполняем теги
			//ЗаполнитьТегиНаСервере(лРезультатТекущиеДанныеПараметр);
			//
			//ПересчитатьТеги();
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипЗначенияРезультатаВидаДеятельности(пВидДеятельности)
	
	лРезультат = пВидДеятельности.ТипЗначенияРезультата;
	
	Возврат лРезультат;
	
КонецФункции // ПолучитьВидДеятельности()

&НаКлиенте
Процедура Дополнительно(Команда)
	
	Элементы.ФормаДополнительно.Пометка = НЕ Элементы.ФормаДополнительно.Пометка;
	Элементы.ГруппаДополнительно.Видимость = Элементы.ФормаДополнительно.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаписьСоСсылкой(Команда)
	
	лОбъектСсылка = Объект.Ссылка;
	Если ЗначениеЗаполнено(лОбъектСсылка) Тогда
		дОбщиеФункцииКлиент.СоздатьСоСсылкойНаВыбраннуюЗапись(лОбъектСсылка, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РезультатПодбор(Команда)
	
	ОписаниеОбработчикаВыбора = Новый ОписаниеОповещения("ОбработкаПодбораРезультата", ЭтотОбъект);
	ПараметрыПодбора 	= Новый Структура("Дата", Объект.Дата);
	ОткрытьФорму("Обработка.дФормыПодборов.Форма.ЗаписьПодборРезультата", ПараметрыПодбора, ЭтаФорма, Объект.Ссылка, ,, ОписаниеОбработчикаВыбора); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораРезультата(РезультатПодбора, ДополнительныеПараметры) Экспорт

	Если НЕ ТипЗнч(РезультатПодбора) = Тип("Структура")
		ИЛИ НЕ РезультатПодбора.Свойство("АдресТаблицыВыбора") Тогда
		Возврат;
	КонецЕсли; 
	
	ДобавитьВТаблицуРезультатСтрокиНаСервере(РезультатПодбора);

КонецПроцедуры

&НаСервере
Процедура ДобавитьВТаблицуРезультатСтрокиНаСервере(РезультатПодбора)

	ТаблицаПодбора = ПолучитьИзВременногоХранилища(РезультатПодбора.АдресТаблицыВыбора);
	Для Каждого СтрокаПодбора Из ТаблицаПодбора Цикл
		
		Если ЗначениеЗаполнено(СтрокаПодбора.ИмяРезультата) 
			ИЛИ ЗначениеЗаполнено(СтрокаПодбора.Параметр) 
			ИЛИ ЗначениеЗаполнено(СтрокаПодбора.Значение) Тогда
			НоваяСтрока 				= Объект.Результат.Добавить();
			НоваяСтрока.Время 			= СтрокаПодбора.Время;
			НоваяСтрока.ИмяРезультата 	= СтрокаПодбора.ИмяРезультата;
			НоваяСтрока.Параметр      	= СтрокаПодбора.Параметр;
			НоваяСтрока.Значение   		= СтрокаПодбора.Значение;
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры