
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	лДатаНачалаЗамера = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
	//ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.КлючевыеОперации.СозданиеФормыДневника, лДатаНачалаЗамера);
	
	СобытияУНФКлиентСервер.ЗаполнитьСписокВыбораВремени(Элементы.НачалоВремя);
	СобытияУНФКлиентСервер.ЗаполнитьСписокВыбораВремени(Элементы.ОкончаниеВремя);
	
	лЗначенияЗаполнения 	= Параметры.ЗначенияЗаполнения;
	Если ЗначениеЗаполнено(лЗначенияЗаполнения) Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметры.ЗначенияЗаполнения); //Хотя передаётся типовым методом, само не заполняется
		
		Если лЗначенияЗаполнения.Свойство("ДанныеЗаписиКалендаря") Тогда
			лДанныеЗаписиКалендаря 	= лЗначенияЗаполнения.ДанныеЗаписиКалендаря;
			Если ЗначениеЗаполнено(лДанныеЗаписиКалендаря) Тогда
				ЗаполнитьЗначенияСвойств(Объект, лДанныеЗаписиКалендаря); 
				
				Если ЗначениеЗаполнено(лДанныеЗаписиКалендаря.ЗаписьКалендаря) Тогда
					Объект.Основание 	= лДанныеЗаписиКалендаря.ЗаписьКалендаря;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли; 
	КонецЕсли;
	
	Элементы.Основание.Видимость 	= ЗначениеЗаполнено(Объект.Основание); 
	
	ОбъектСсылка 	= Объект.Ссылка;
	
	ОбъектНастроение = Объект.Настроение;
	Если НЕ ЗначениеЗаполнено(ОбъектНастроение) Тогда
		Объект.Настроение = Перечисления.дНастроения.Нормальное;
	КонецЕсли; 
	
	ТекПользователь 	= ПользователиСлужебный.АвторизованныйПользователь();
	
	ОбъектАвтор = Объект.Автор; 
	Если НЕ ЗначениеЗаполнено(ОбъектАвтор) Тогда
		Объект.Автор = ТекПользователь;
	КонецЕсли;
	
	ТекДата 	= ТекущаяДата();
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата 			= ТекДата;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончание) Тогда
		Объект.ДатаОкончание 	= ТекДата;
	КонецЕсли;
	                   
	ОбъектИмяПользователяСистемы 	= Объект.ИмяПользователяСистемы;
	ОбъектИмяКомпьютераСистемы 		= Объект.ИмяКомпьютераСистемы; 
	КомпьютерИнфо = ОбъектИмяПользователяСистемы 
	+ ?(НЕ ПустаяСтрока(ОбъектИмяКомпьютераСистемы), " (" 
	+ ОбъектИмяКомпьютераСистемы + ")", "");  
	
	//УО
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(УсловноеОформление.Элементы, "Объект.Важность", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВажность.Важное	, "Важность", "Важность_Важное",, WebЦвета.Оранжевый);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(УсловноеОформление.Элементы, "Объект.Важность", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВажность.Особое	, "Важность", "Важность_Особое",, WebЦвета.БледноБирюзовый);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(УсловноеОформление.Элементы, "ДиалогСодержание.Выделить", ВидСравненияКомпоновкиДанных.Равно, Истина					, "ДиалогСодержание", "ДиалогСодержание.Выделить",,, Истина);
	УсловноеОформлениеВидаЗаписи();

	//Цвет
	ПостроительЗапроса 		= ПолучитьТЗЦветаИзМакета();
	РезультатЗапросаЦвет 	= ПостроительЗапроса.Результат;
	РезультатЗапросаТЗЦвет 	= РезультатЗапросаЦвет.Выгрузить();
	
	РезультатЗапросаТЗЦвет.Колонки.Добавить("WebЦвет", Новый ОписаниеТипов("Цвет"));
	
	Для каждого РезультатЗапросаТЗСтрока Из РезультатЗапросаТЗЦвет Цикл
		
		Выполнить("РезультатЗапросаТЗСтрока.WebЦвет = " + РезультатЗапросаТЗСтрока.WebЦветТекст);
		
		//Элементы.ЦветаЦветВид.ЦветФона = РезультатЗапросаТЗСтрока.WebЦвет;
		лРезультатЗапросаТЗСтрокаЦвет 	= РезультатЗапросаТЗСтрока.Цвет; 
		Элементы.ЦветаЦвет.СписокВыбора.Добавить(лРезультатЗапросаТЗСтрокаЦвет, лРезультатЗапросаТЗСтрокаЦвет);
		дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(УсловноеОформление.Элементы, "Объект.Цвета.Цвет", ВидСравненияКомпоновкиДанных.Равно, РезультатЗапросаТЗСтрока.Цвет, "ЦветаЦветВид", РезультатЗапросаТЗСтрока.Цвет,,,, Новый Структура("ЦветФона", РезультатЗапросаТЗСтрока.WebЦвет));
		
		ЦветаОбразецСтрока = ЦветаОбразец.Добавить();
		ЦветаОбразецСтрока.НазваниеЦвета 	= лРезультатЗапросаТЗСтрокаЦвет;
		дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(УсловноеОформление.Элементы, "ЦветаОбразец.НазваниеЦвета", ВидСравненияКомпоновкиДанных.Равно, РезультатЗапросаТЗСтрока.Цвет, "ЦветаОбразецЦвет", "Образец_" + РезультатЗапросаТЗСтрока.Цвет,,,, Новый Структура("ЦветФона", РезультатЗапросаТЗСтрока.WebЦвет));
		
	КонецЦикла;
	
	//Отборы
	дОбщиеФункцииСервер.УстановитьОтборСписка(Диалоги.Отбор.Элементы, "Объект", Объект.Ссылка);
	дОбщиеФункцииСервер.УстановитьОтборСписка(Перевод.Отбор.Элементы, "Объект", Объект.Ссылка);
	дОбщиеФункцииСервер.УстановитьОтборСписка(ПоследниеТеги.Отбор.Элементы		, "Автор", ОбъектАвтор);
	дОбщиеФункцииСервер.УстановитьОтборСписка(ПоследнийРезультат.Отбор.Элементы	, "Автор", ОбъектАвтор);
	
	// Ссылки на запись
	ЕстьСсылкиНаЗапись = Ложь;
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		КоличествоЗаписей 	= 0;
		ЕстьСсылкиНаЗапись 	= ЕстьСсылкиНаЗапись(ОбъектСсылка, КоличествоЗаписей);
		
		Если ЕстьСсылкиНаЗапись Тогда
			НаЗаписьСсылаются.Параметры.УстановитьЗначениеПараметра("Параметр", ОбъектСсылка);
			дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(НаЗаписьСсылаются.УсловноеОформление.Элементы, "ИмяРезультата", ВидСравненияКомпоновкиДанных.Равно, Справочники.дРезультат.СсылкаНаЗапись, "ИмяРезультата",,,, Истина);
			
			КоличествоСсылокНаЗапись = КоличествоЗаписей;
		Иначе
			НаЗаписьСсылаются.Параметры.УстановитьЗначениеПараметра("Параметр", Документы.дДневник.ПустаяСсылка());
		КонецЕсли; 
	Иначе
		НаЗаписьСсылаются.Параметры.УстановитьЗначениеПараметра("Параметр", Документы.дДневник.ПустаяСсылка());
	КонецЕсли; 
	
	// Видимсть элементов
	Элементы.ГруппаНаЗаписьСсылаются.Видимость = ЕстьСсылкиНаЗапись;
	
	ОбновитьЗначениеПогоды(Объект.Дата, Погода); 
	
	СимволовВЗаголовке = СтрДлина(Объект.Заголовок);
	
	Состояние.Параметры.УстановитьЗначениеПараметра("Период", Объект.Дата);
	Состояние.Параметры.УстановитьЗначениеПараметра("Автор"	, ТекПользователь);
	
	ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.КлючевыеОперации.СозданиеФормыДневника, лДатаНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТЗЦветаИзМакета(пСтруктураОтбора = Неопределено)
	
	Макет 	= РеквизитФормыВЗначение("Объект").ПолучитьМакет("Цвета"); 
	
	ПостроительЗапроса 	= Новый ПостроительЗапроса;
	
	ОбластьМакета 	= Макет.Область(1, 1, Макет.ВысотаТаблицы, Макет.ШиринаТаблицы);
	
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьМакета);
	
	// Установим отборы
	Если пСтруктураОтбора <> Неопределено И ТипЗнч(пСтруктураОтбора) = Тип("Структура") Тогда
		Для каждого пСтруктураОтбораЭлем Из пСтруктураОтбора Цикл
			
			//УстановитьОтборПоПолю(ПостроительЗапроса,  пСтруктураОтбораЭлем.Ключ, пСтруктураОтбораЭлем.Значение); //Если через отдельную функцию
			ИмяПоляОтбора 		= пСтруктураОтбораЭлем.Ключ;
			ЗначениеОтбора 		= пСтруктураОтбораЭлем.Значение;
			
			ПолеДокумент 		= ПостроительЗапроса.ДоступныеПоля.Добавить(ИмяПоляОтбора, ИмяПоляОтбора);
			ПолеДокумент.Отбор 	= Истина;
			
			ЭлементОтбора		= ПостроительЗапроса.Отбор.Добавить(ИмяПоляОтбора);
			ЭлементОтбора.Установить(ЗначениеОтбора);
			
		КонецЦикла; 
	КонецЕсли; 
	
	// Возвращаем таблицу значений с отобранными из макета данными 
	ПостроительЗапроса.Выполнить();
	Возврат ПостроительЗапроса;
	
КонецФункции

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	
	
КонецПроцедуры

&НаСервере
Функция ОбновитьЗначениеПогоды(пДата, пПогода)
	
	//Загрузка погоды из регистра
	лОбъектДата = пДата;
	Если ЗначениеЗаполнено(лОбъектДата) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	дПогодаСрезПоследних.Период КАК Период,
		|	дПогодаСрезПоследних.Представление КАК Представление
		|ИЗ
		|	РегистрСведений.дПогода.СрезПоследних(&Период, КодГорода = &КодГорода) КАК дПогодаСрезПоследних";
		
		Запрос.УстановитьПараметр("Период"		, лОбъектДата);
		Запрос.УстановитьПараметр("КодГорода"	, 92); //TODO Доработать, сделав автоматическую загрузку кода города
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда // Значит есть погода на такую дату
			лВыборка 	= РезультатЗапроса.Выбрать();
			
			Если лВыборка.Следующий() Тогда
				лВыборкаПериод 			= лВыборка.Период;
				лПогодаПредставление 	= лВыборка.Представление;
				
				Если ЗначениеЗаполнено(лПогодаПредставление) Тогда
					пПогода 	= лПогодаПредставление;
				КонецЕсли; 
				
				лРазностьДат = НачалоДня(лОбъектДата) - НачалоДня(лВыборкаПериод);
				Если НачалоДня(лВыборкаПериод) = НачалоДня(лОбъектДата) Тогда
					Элементы.Погода.Заголовок = "Погода"; //т.е. типа из регистра
				ИначеЕсли лРазностьДат < 60 * 60 * 24 * 30 Тогда //т.е. 30 дней разница
					Элементы.Погода.Заголовок = "Погода* (" + Строка(лВыборкаПериод) + ")";
				ИначеЕсли лРазностьДат < 60 * 60 * 24 * 60 Тогда
					Элементы.Погода.Заголовок = "Погода** (" + Строка(лВыборкаПериод) + ")"; 
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ОбновитьЗначениеПогоды()
 

&НаКлиенте
Процедура ОбновитьЗаголовокГруппыИнфо()
	
	лОбъектЗаписьИнфо 	= Объект.ЗаписьИнфо;
	лОбъектТегиСписок 	= Объект.ТегиСписок;
	лПогода 			= Погода;                       
	ЗаголовокГруппыИнфо = ?(ЗначениеЗаполнено(лОбъектЗаписьИнфо), лОбъектЗаписьИнфо, "")
	+ ?(ЗначениеЗаполнено(лОбъектТегиСписок), "; " + лОбъектТегиСписок, "")
	+ ?(ЗначениеЗаполнено(лПогода), "; " + лПогода, "");  
	
	Элементы.ГруппаИнфо.Заголовок 	= "Инфо" + ?(ЗначениеЗаполнено(ЗаголовокГруппыИнфо), " (" + ЗаголовокГруппыИнфо + ")", "");
	
КонецПроцедуры // ОбновитьГруппуИнфо()
 
&НаСервере
Процедура УсловноеОформлениеВидаЗаписи()

	//дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(Список.УсловноеОформление.Элементы, "ВидЗаписи", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВидЗаписи.Обычный	, "Дата", "ВидЗаписи_Обычный",, WebЦвета.Лосось);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(УсловноеОформление.Элементы, "Объект.ВидЗаписи", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВидЗаписи.Личный	, "ВидЗаписи", "ВидЗаписи_Личный",, WebЦвета.БледноКрасноФиолетовый);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(УсловноеОформление.Элементы, "Объект.ВидЗаписи", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВидЗаписи.Рабочий	, "ВидЗаписи", "ВидЗаписи_Рабочий",, WebЦвета.ПесочноКоричневый);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(УсловноеОформление.Элементы, "Объект.ВидЗаписи", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВидЗаписи.Общий	, "ВидЗаписи", "ВидЗаписи_Общий",, WebЦвета.СветлоНебесноГолубой);
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(УсловноеОформление.Элементы, "Объект.ВидЗаписи", ВидСравненияКомпоновкиДанных.Равно, Перечисления.дВидЗаписи.Прочее	, "ВидЗаписи", "ВидЗаписи_Прочее",, WebЦвета.БледноЗолотистый);
	
КонецПроцедуры

&НаСервере
Функция ЕстьСсылкиНаЗапись(ОбъектСсылка, КоличествоЗаписей)
	
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		//|	дРезультат.Регистратор КАК Регистратор,
		//|	дРезультат.ИмяРезультата КАК ИмяРезультата,
		//|	дРезультат.Параметр КАК Параметр,
		//|	дРезультат.Значение КАК Значение,
		|	дРезультат.Регистратор.Заголовок КАК РегистраторЗаголовок,
		|	ПОДСТРОКА(дРезультат.Регистратор.Описание, 1, 200) КАК РегистраторОписание,
		|	дРезультат.Период КАК Период
		|ИЗ
		|	РегистрСведений.дРезультат КАК дРезультат
		|ГДЕ
		|	дРезультат.Параметр = &Параметр
		//|	И дРезультат.ИмяРезультата = &ИмяРезультата
		|	И дРезультат.Параметр ССЫЛКА Документ.дДневник";
		
	//Запрос.УстановитьПараметр("ИмяРезультата", ИмяРезультата);
	Запрос.УстановитьПараметр("Параметр", ОбъектСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда // Значит, есть записи
		КоличествоЗаписей 	= РезультатЗапроса.Выбрать().Количество();
		Результат 			= Истина;
	КонецЕсли; 
	 
	Возврат Результат;
	
КонецФункции // ЕстьСсылкиНаЗапись()
 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Заголовок группы Инфо
	ОбновитьЗаголовокГруппыИнфо();
	
	ИскатьЭлементыПредложений 				= Истина;
	
	Элементы.ГруппаПредложения.Видимость 	= Ложь; 
	Элементы.ПредложенныеТеги.Видимость 	= Ложь;
	Элементы.ПредложенныеЭмоции.Видимость 	= Ложь;
	Элементы.ПредложенныеРезультаты.Видимость 	= Ложь;
	
	Элементы.ГруппаСмежныеЗаписи.Видимость 	= Ложь; 
	
	Элементы.ГруппаРегулярныхВыражений.Видимость = Ложь; 
	
	РегулярныеВыраженияИгнорироватьРегистр 	= Истина;
	РегулярныеВыраженияПоискВсехВхождений 	= Истина;
	РегулярныеВыраженияМногострочныйРежим 	= Истина;
	
	Элементы.КомпьютерИнфо.Видимость 		= НЕ ПустаяСтрока(КомпьютерИнфо);
	
	ШаблонРегулярногоВыражения 			= "";
	
	ПредложенныеРезультатыКоличество 	= 20;
	
	ЛичноеПриИзменении(Неопределено);
	
	//ПересчитатьТеги();
	//ПересчитатьЭмоции();
	//ПересчитатьРезультат();
	ПересчитатьЗаголовкиГруппы();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда // При открытии формы при копировании
		ПриЧтенииНаСервере(); // Чтобы заполнить ОписаниеФормат при копировании и открытии формы
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЗаголовкиГруппы()
	
	ПересчитатьЗаголовокГруппы(Объект.Эмоции		, "Эмоции"		, Элементы.ГруппаЭмоциии.Заголовок);
	ПересчитатьЗаголовокГруппы(Объект.Теги			, "Теги"		, Элементы.ГруппаТеги.Заголовок);
	ПересчитатьЗаголовокГруппы(Объект.Результат		, "Результат"	, Элементы.ГруппаРезультат.Заголовок);
	ПересчитатьЗаголовокГруппы(Объект.ЧастотаСлов	, "Частота слов"	, Элементы.ГруппаЧастотаСлов.Заголовок);
	ПересчитатьЗаголовокГруппы(Объект.Вопросы		, "Вопросы"		, Элементы.ГруппаВопросы.Заголовок);
	ПересчитатьЗаголовокГруппы(Объект.ДоступноПользователям		, "Доступно пользователям"		, Элементы.ГруппаДоступноПользователям.Заголовок);
	
	Элементы.ГруппаНаЗаписьСсылаются.Заголовок = УстановитьКоличествоВЗаголовке("На запись ссылаются", КоличествоСсылокНаЗапись); // т.к. задаётся для динамического списка
	
	ОбновитьЗаголовокГруппыИнфо();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьЗначениеПогоды(Объект.Дата, Погода);
	
	ПересчитатьЗаголовкиГруппы();
	
	Элементы.Основание.Видимость 	= ЗначениеЗаполнено(Объект.Основание);
	
	Оповестить("Запись_ИсточникЗаписейКалендаряСотрудника");
	
	Элементы.Перевод.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагружатьПрогнозПогодыНаСервере()

	лРезультат 	= дОбщиеФункцииСервер.ЗагружатьПрогнозПогоды();
	Возврат лРезультат;

КонецФункции // ЗагружатьПрогнозПогодыНаСервере()
 
&НаСервереБезКонтекста
Функция ПолучитьАдресПогодыНаСервере()

	лРезультат 	= дОбщиеФункцииСервер.ПолучитьАдресПогоды();
	Возврат лРезультат;
	
КонецФункции // ПолучитьАдресПогодыНаСервере()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗагружатьПрогнозПогоды 	= ЗагружатьПрогнозПогодыНаСервере();
	Если ЗагружатьПрогнозПогоды Тогда
		АдресПогоды = ПолучитьАдресПогодыНаСервере();
		Если НЕ ЗначениеЗаполнено(АдресПогоды) Тогда 
			//Если Вопрос("Адрес прогноза погоды не заполнен, данные получены не будут. Отменить запись?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			//	Отказ = Истина;
			//КонецЕсли;
			Сообщить("Адрес прогноза погоды не заполнен, данные получены не будут. Заполните константу строкой с сайта https://www.meteoservice.ru/content/export вида https://xml.meteoservice.ru/export/gismeteo/point/92.xml");
			
			//Если Отказ И Вопрос("Перейти на сайт https://www.meteoservice.ru/content/export?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			//	ОткрытьСсылку("https://www.meteoservice.ru/content/export");
			//КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	ПроверитьЗаполненностьТаблицы("Теги"		, "ИмяТега");
	ПроверитьЗаполненностьТаблицы("Эмоции"		, "ИмяЭмоции, Комментарий");
	ПроверитьЗаполненностьТаблицы("Результат"	, "ИмяРезультата, Параметр, Значение");
	ПроверитьЗаполненностьТаблицы("Вопросы"		, "ИмяВопроса");
	ПроверитьЗаполненностьТаблицы("ДоступноПользователям", "ИмяПользователя");
	
	Объект.Результат.Сортировать("Время Возр, ИмяРезультата Возр, Параметр Возр");
	Объект.Эмоции.Сортировать("Время Возр, ИмяЭмоции Возр, Интенсивность Убыв, Длительность Убыв");
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполненностьТаблицы(ИмяТаблицы, ИмяСтрокиДляПроверки)
	
	Таблица 				= Объект[ИмяТаблицы];
	
	ИмяСтрокиДляПроверки 	= СтрЗаменить(ИмяСтрокиДляПроверки, " ", "");
	лЗаполненньстьРеквизита = СтрРазделить(ИмяСтрокиДляПроверки, ",", Ложь);
	
	Для каждого Строка Из Таблица Цикл
		
		лЕстьЗаполненный 		= Ложь;
		
		Для каждого лЗаполненньстьРеквизит Из лЗаполненньстьРеквизита Цикл
		
			Если ЗначениеЗаполнено(Строка[лЗаполненньстьРеквизит]) Тогда
				лЕстьЗаполненный 	= Истина;
			КонецЕсли;
		
		КонецЦикла; 
		
		Если НЕ лЕстьЗаполненный Тогда
			Таблица.Удалить(Строка);
		КонецЕсли;	
		
	КонецЦикла; 
	 
КонецПроцедуры
 
&НаСервереБезКонтекста
Процедура ОткрытьСсылку(Адрес)

	ЗапуститьПриложение(Адрес);

КонецПроцедуры // ОткрытьСсылку()

&НаСервереБезКонтекста
Функция НайденаПодстрока(RegExp, Строка, Шаблон = "", КоличествоНайденных = Неопределено) Экспорт
	
	RegExp.Pattern = Шаблон;
	Matches = RegExp.Execute(Строка);
	
	//Массив = Новый Массив;
	
	MatchesCount = Matches.Count;
	Если MatchesCount > 0 Тогда
		Если КоличествоНайденных <> Неопределено Тогда
			КоличествоНайденных = MatchesCount;	
		КонецЕсли; 
		Возврат	Истина;
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции 

&НаСервереБезКонтекста
Процедура ПредложитьТеги(Ссылка, Описание, Теги, ПредложенныеТеги)
	
	лДатаНачалаЗамера = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дТеги.Ссылка КАК СсылкаТег,
		|	ЕСТЬNULL(дТегиКлючевыеСлова.Слово, """") КАК Слово,
		|	ЕСТЬNULL(дТегиКлючевыеСлова.РегВыражение, """") КАК РегВыражение
		|ИЗ
		|	Справочник.дТеги КАК дТеги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.дТеги.КлючевыеСлова КАК дТегиКлючевыеСлова
		|		ПО (дТегиКлючевыеСлова.Ссылка = дТеги.Ссылка)
		|ГДЕ
		|	(дТегиКлючевыеСлова.Слово <> """" ИЛИ дТегиКлючевыеСлова.РегВыражение <> """")
		|	И НЕ дТеги.Ссылка В
		|				(ВЫБРАТЬ
		|					дДневникТеги.ИмяТега КАК ИмяТега
		|				ИЗ
		|					Документ.дДневник.Теги КАК дДневникТеги
		|				ГДЕ
		|					дДневникТеги.Ссылка = &Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		RegExp 				= Новый COMОбъект("VBScript.RegExp"); //Для 1C v 7.x: CreateObject("VBScript.RegExp") 
		RegExp.IgnoreCase 	= Истина; //Игнорировать регистр 
		RegExp.Global 		= Истина; //Поиск всех вхождений шаблона 
		RegExp.MultiLine 	= Истина; //Многострочный режим
		
		НРегОписание = НРег(СокрЛП(Описание));
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РегВыражение 	= СокрЛП(ВыборкаДетальныеЗаписи.РегВыражение);
			
			ДобавитьТег = Ложь;
			Если НЕ ЗначениеЗаполнено(РегВыражение) Тогда
				НРегСловоТега 	= НРег(СокрЛП(ВыборкаДетальныеЗаписи.Слово));
				Если СтрНайти(НРегОписание, НРегСловоТега) > 0 Тогда // Если слово есть
					ДобавитьТег = Истина; 
				КонецЕсли;
			Иначе
				ДобавитьТег = НайденаПодстрока(RegExp, Описание, РегВыражение); 
			КонецЕсли; 
			
			Если ДобавитьТег Тогда
				СсылкаТег = ВыборкаДетальныеЗаписи.СсылкаТег;
				Если ПредложенныеТеги.НайтиПоЗначению(СсылкаТег) = Неопределено Тогда // т.е. такой ссылки в предложенных ещё нет
					ПараметрыОтбора = Новый Структура("ИмяТега", СсылкаТег);
					НайденныеСтроки = Теги.НайтиСтроки(ПараметрыОтбора);
					
					Если НайденныеСтроки.Количество() = 0 Тогда // и нету такой ссылки в ТЧ
						ПредложенныеТеги.Добавить(СсылкаТег);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли; 
			
		КонецЦикла;
		
		ПредложенныеТеги.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.КлючевыеОперации.ФормаДневникаПредложитьТеги, лДатаНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура ПредложитьЭмоции(Описание)
	
	лДатаНачалаЗамера = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	дЭмоции.Ссылка КАК СсылкаЭмоции,
	|	ЕСТЬNULL(дЭмоцииКлючевыеСлова.Слово, """") КАК Слово,
	|	ЕСТЬNULL(дЭмоцииКлючевыеСлова.РегВыражение, """") КАК РегВыражение
	|ИЗ
	|	Справочник.дЭмоции КАК дЭмоции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.дЭмоции.КлючевыеСлова КАК дЭмоцииКлючевыеСлова
	|		ПО (дЭмоцииКлючевыеСлова.Ссылка = дЭмоции.Ссылка)
	|ГДЕ
	|	(дЭмоцииКлючевыеСлова.Слово <> """" ИЛИ дЭмоцииКлючевыеСлова.РегВыражение <> """")
	|	И НЕ дЭмоции.Ссылка В
	|				(ВЫБРАТЬ
	|					ДневникЭмоциии.ИмяЭмоции КАК ИмяЭмоции
	|				ИЗ
	|					Документ.дДневник.Эмоции КАК ДневникЭмоциии
	|				ГДЕ
	|					ДневникЭмоциии.Ссылка = &Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		НРегОписание = НРег(СокрЛП(Описание));
		
		// сколько повторов синонимов слова
		//ВхожденийСлов = 0;
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//	НРегСловоЭмоции = НРег(СокрЛП(ВыборкаДетальныеЗаписи.Слово));
		//	
		//	НРегСловоЭмоцииЧислоВхождений = СтрЧислоВхождений(НРегОписание, НРегСловоЭмоции);
		//	Если НРегСловоЭмоцииЧислоВхождений > 0 Тогда // Если слово есть
		//		ВхожденийСлов = ВхожденийСлов + 1; 
		//	КонецЕсли;
		//	
		//КонецЦикла;
		
		// сбрасываем и присваиваем
		//ВыборкаДетальныеЗаписи.Сбросить();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РегВыражение 	= СокрЛП(ВыборкаДетальныеЗаписи.РегВыражение);
			
			RegExp 				= Новый COMОбъект("VBScript.RegExp"); //Для 1C v 7.x: CreateObject("VBScript.RegExp") 
			RegExp.IgnoreCase 	= Истина; //Игнорировать регистр 
			RegExp.Global 		= Истина; //Поиск всех вхождений шаблона 
			RegExp.MultiLine 	= Истина; //Многострочный режим
			
			ДобавитьЭмоцию = Ложь;
			НРегСловоЭмоцииЧислоВхождений = 0;
			Если НЕ ЗначениеЗаполнено(РегВыражение) Тогда
				НРегСловоЭмоции = НРег(СокрЛП(ВыборкаДетальныеЗаписи.Слово));
				НРегСловоЭмоцииЧислоВхождений = СтрЧислоВхождений(НРегОписание, НРегСловоЭмоции);
				Если НРегСловоЭмоцииЧислоВхождений > 0 Тогда
					ДобавитьЭмоцию = Истина; 
				КонецЕсли;
			Иначе
				ДобавитьЭмоцию = НайденаПодстрока(RegExp, Описание, РегВыражение, НРегСловоЭмоцииЧислоВхождений); 
			КонецЕсли;
			
			Если ДобавитьЭмоцию Тогда
				СсылкаЭмоции = ВыборкаДетальныеЗаписи.СсылкаЭмоции;
				
				ПараметрыОтбора = Новый Структура("ИмяЭмоции", СсылкаЭмоции);
				НайденныеСтроки = ПредложенныеЭмоции.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденныеСтроки.Количество() = 0 Тогда // т.е. такой ссылки ещё нет в предложенных
					//ПараметрыОтбора = Новый Структура("ИмяЭмоции", СсылкаЭмоции);
					НайденныеСтроки = Объект.Эмоции.НайтиСтроки(ПараметрыОтбора);
					
					Если НайденныеСтроки.Количество() = 0 Тогда // и нету такой ссылки в ТЧ
						НоваяСтрока 				= ПредложенныеЭмоции.Добавить();
						
						НоваяСтрока.ИмяЭмоции 		= СсылкаЭмоции;
						НоваяСтрока.Интенсивность 	= Мин(НРегСловоЭмоцииЧислоВхождений, 10);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли; 
			
		КонецЦикла;
		
		ПредложенныеЭмоции.Сортировать("ИмяЭмоции Возр");
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.КлючевыеОперации.ФормаДневникаПредложитьЭмоции, лДатаНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура ПредложитьРезультаты(Описание)
	
	лДатаНачалаЗамера = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	дРезультат.Ссылка КАК Результат,
	|	ЕСТЬNULL(дРезультатКлючевыеСлова.Слово, """") КАК Слово,
	|	ЕСТЬNULL(дРезультатКлючевыеСлова.РегВыражение, """") КАК РегВыражение
	|ПОМЕСТИТЬ ВТ_ПодходящийРезультат
	|ИЗ
	|	Справочник.дРезультат КАК дРезультат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.дРезультат.КлючевыеСлова КАК дРезультатКлючевыеСлова
	|		ПО (дРезультатКлючевыеСлова.Ссылка = дРезультат.Ссылка)
	|ГДЕ
	|	(дРезультатКлючевыеСлова.Слово <> """"
	|			ИЛИ дРезультатКлючевыеСлова.РегВыражение <> """")
	|	И НЕ дРезультат.Ссылка В
	|				(ВЫБРАТЬ
	|					дДневникРезультат.ИмяРезультата КАК ИмяРезультата
	|				ИЗ
	|					Документ.дДневник.Результат КАК дДневникРезультат
	|				ГДЕ
	|					дДневникРезультат.Ссылка = &Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ &ПредложенныеРезультатыКоличество
	|	дРезультат.ИмяРезультата КАК ИмяРезультата,
	|	дРезультат.Параметр КАК Параметр,
	|	дРезультат.Значение КАК Значение,
	|	ВТ_ПодходящийРезультат.Слово КАК Слово,
	|	ВТ_ПодходящийРезультат.РегВыражение КАК РегВыражение,
	|	дРезультат.Период КАК Период
	|ИЗ
	|	ВТ_ПодходящийРезультат КАК ВТ_ПодходящийРезультат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дРезультат КАК дРезультат
	|		ПО ВТ_ПодходящийРезультат.Результат = дРезультат.ИмяРезультата
	|ГДЕ
	|	дРезультат.Автор = &Автор
	|	И дРезультат.ИмяРезультата В
	|			(ВЫБРАТЬ
	|				ВТ_ПодходящийРезультат.Результат КАК Результат
	|			ИЗ
	|				ВТ_ПодходящийРезультат КАК ВТ_ПодходящийРезультат)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	                
	Если ПредложенныеРезультатыКоличество > 0 Тогда
		лПредложенныеРезультатыКоличество = Формат(ПредложенныеРезультатыКоличество, "ЧГ=");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПредложенныеРезультатыКоличество", лПредложенныеРезультатыКоличество);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ &ПредложенныеРезультатыКоличество", "ВЫБРАТЬ РАЗЛИЧНЫЕ");	
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("Ссылка"	, Объект.Ссылка);
	Запрос.УстановитьПараметр("Автор"	, ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		НРегОписание 	= НРег(СокрЛП(Описание));
		
		// сколько повторов синонимов слова
		//ВхожденийСлов = 0;
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//	НРегСловоЭмоции = НРег(СокрЛП(ВыборкаДетальныеЗаписи.Слово));
		//	
		//	НРегСловоЭмоцииЧислоВхождений = СтрЧислоВхождений(НРегОписание, НРегСловоЭмоции);
		//	Если НРегСловоЭмоцииЧислоВхождений > 0 Тогда // Если слово есть
		//		ВхожденийСлов = ВхожденийСлов + 1; 
		//	КонецЕсли;
		//	
		//КонецЦикла;
		
		// сбрасываем и присваиваем
		//ВыборкаДетальныеЗаписи.Сбросить();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РегВыражение 	= СокрЛП(ВыборкаДетальныеЗаписи.РегВыражение);
			
			RegExp 				= Новый COMОбъект("VBScript.RegExp"); //Для 1C v 7.x: CreateObject("VBScript.RegExp") 
			RegExp.IgnoreCase 	= Истина; //Игнорировать регистр 
			RegExp.Global 		= Истина; //Поиск всех вхождений шаблона 
			RegExp.MultiLine 	= Истина; //Многострочный режим
			
			ДобавитьРезультат = Ложь;
			НРегСловоРезультатЧислоВхождений = 0;
			Если НЕ ЗначениеЗаполнено(РегВыражение) Тогда
				НРегСловоРезультат = НРег(СокрЛП(ВыборкаДетальныеЗаписи.Слово));
				НРегСловоРезультатЧислоВхождений = СтрЧислоВхождений(НРегОписание, НРегСловоРезультат);
				Если НРегСловоРезультатЧислоВхождений > 0 Тогда
					ДобавитьРезультат = Истина; 
				КонецЕсли;
			Иначе
				ДобавитьРезультат = НайденаПодстрока(RegExp, Описание, РегВыражение, НРегСловоРезультатЧислоВхождений); 
			КонецЕсли;
			
			Если ДобавитьРезультат Тогда
				СсылкаРезультат 	= ВыборкаДетальныеЗаписи.ИмяРезультата;
				лВыборкаПараметр 	= ВыборкаДетальныеЗаписи.Параметр;
				лВыборкаЗначение 	= ВыборкаДетальныеЗаписи.Значение;
					
				ПараметрыОтбора 	= Новый Структура("ИмяРезультата, Параметр, Значение", СсылкаРезультат, лВыборкаПараметр, лВыборкаЗначение);
				НайденныеСтроки 	= ПредложенныеРезультаты.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденныеСтроки.Количество() = 0 Тогда // т.е. такой ссылки ещё нет в предложенных
					//ПараметрыОтбора = Новый Структура("ИмяРезультата, Параметр, Значение", СсылкаРезультат, лВыборкаПараметр, лВыборкаЗначение);
					НайденныеСтроки = Объект.Результат.НайтиСтроки(ПараметрыОтбора);
					
					Если НайденныеСтроки.Количество() = 0 Тогда // и нету такой ссылки в ТЧ
						НоваяСтрока 				= ПредложенныеРезультаты.Добавить();
						
						НоваяСтрока.ИмяРезультата 	= СсылкаРезультат;
						НоваяСтрока.Параметр 		= лВыборкаПараметр;
						НоваяСтрока.Значение 		= лВыборкаЗначение;
						НоваяСтрока.Период 			= ВыборкаДетальныеЗаписи.Период;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли; 
			
		КонецЦикла;
		
		ПредложенныеРезультаты.Сортировать("Период Убыв, ИмяРезультата Возр, Параметр Возр, Значение Убыв");
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.КлючевыеОперации.ФормаДневникаПредложитьРезультаты, лДатаНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписание(ТекущийОбъект = Неопределено)
	
	лОписаниеФорматТекст 	= ОписаниеФормат.ПолучитьТекст();
	Если ЗначениеЗаполнено(лОписаниеФорматТекст) Тогда
		Если ТекущийОбъект <> Неопределено Тогда // Вызов из ПередЗаписьюНаСервере
			ТекущийОбъект.ОписаниеФормат 	= Новый ХранилищеЗначения(ОписаниеФормат);
			ТекущийОбъект.Описание 			= ОписаниеФормат.ПолучитьТекст(); // Т.к. анализируется везде просто текст, и именно из этого реквизита
		Иначе
			//ЭтотОбъект.ОписаниеФормат 	= Новый ХранилищеЗначения(ОписаниеФормат);
			Объект.Описание 			= лОписаниеФорматТекст; // Т.к. анализируется везде просто текст, и именно из этого реквизита
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОписание()
 
&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	Если НЕ ИскатьЭлементыПредложений Тогда
		Возврат;	
	КонецЕсли; 
	
	ЗаполнитьОписание();
	
	ОбъектСсылка 	= Объект.Ссылка;
	ОбъектОписание 	= Объект.Описание;
	ОбъектТеги 		= Объект.Теги;
	
	ПредложитьРезультаты(ОбъектОписание);
	ПредложитьТеги(ОбъектСсылка, ОбъектОписание, ОбъектТеги, ПредложенныеТеги);
	ПредложитьЭмоции(ОбъектОписание);
	
	лЕстьПредложенныеТеги 					= ПредложенныеТеги.Количество() > 0; 
	Элементы.ПредложенныеТеги.Видимость 	= лЕстьПредложенныеТеги;
	
	лЕстьПредложенныеЭмоции 				= ПредложенныеЭмоции.Количество() > 0; 
	Элементы.ПредложенныеЭмоции.Видимость 	= лЕстьПредложенныеЭмоции;
	
	лЕстьПредложенныеРезультаты 			= ПредложенныеРезультаты.Количество() > 0; 
	Элементы.ПредложенныеРезультаты.Видимость 	= лЕстьПредложенныеРезультаты;
	Элементы.ПредложенныеРезультатыКоличество.Видимость 	= лЕстьПредложенныеРезультаты;
	
	Если лЕстьПредложенныеТеги 
		ИЛИ лЕстьПредложенныеЭмоции 
		ИЛИ лЕстьПредложенныеРезультаты Тогда
		Элементы.ГруппаПредложения.Видимость = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредложенныеТеги(Команда)
	
	ОбъектТеги = Объект.Теги;
	
	Для каждого ЭлТег Из ПредложенныеТеги Цикл
		
		Если ЭлТег.Пометка Тогда
			ЭлТегЗначение = ЭлТег.Значение;
			
			ПараметрыОтбора = Новый Структура("ИмяТега", ЭлТегЗначение);
			НайденныеСтроки = ОбъектТеги.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				НовыйТег 			= ОбъектТеги.Добавить();
				НовыйТег.ИмяТега 	= ЭлТег.Значение;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
	Элементы.ПредложенныеТеги.Видимость = Ложь;
	ПредложенныеТеги.Очистить();
	ПересчитатьТеги(); //Заголовк вкладки
	
	ПроверитьВидимостьГруппыПредложений();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВидимостьГруппыПредложений()
	
	лРезультат 	= Ложь;
	
	Если Элементы.ПредложенныеТеги.Видимость 
		ИЛИ Элементы.ПредложенныеЭмоции.Видимость 
		ИЛИ Элементы.ПредложенныеРезультаты.Видимость Тогда
		лРезультат 	= Истина;
	КонецЕсли; 
	
	Элементы.ПредложенныеРезультатыКоличество.Видимость = Элементы.ПредложенныеРезультаты.Видимость; //хз куда приткнуть, чтобы норм работало
	
	Элементы.ГруппаПредложения.Видимость 	= лРезультат;
	
	Возврат лРезультат;
	
КонецФункции // ПроверитьВидимостьГруппыПредложений()
 
&НаКлиенте
Процедура СкрытьПредложенныеТеги(Команда)
	
	Элементы.ПредложенныеТеги.Видимость = Ложь;
	ПроверитьВидимостьГруппыПредложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредложенныеЭмоции(Команда)
	
	ОбъектЭмоциии = Объект.Эмоции;
	
	ПараметрыОтбора 			= Новый Структура("Пометка", Истина);
	ПредложенныеЭмоцииПометка 	= ПредложенныеЭмоции.НайтиСтроки(ПараметрыОтбора);
	
	Для каждого ЭлЭмоция Из ПредложенныеЭмоцииПометка Цикл
		
		ЭлЭмоцияИмяЭмоции = ЭлЭмоция.ИмяЭмоции;
		
		ПараметрыОтбора = Новый Структура("ИмяЭмоции", ЭлЭмоцияИмяЭмоции);
		НайденныеСтроки = ОбъектЭмоциии.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока				= ОбъектЭмоциии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлЭмоция);
			НоваяСтрока.Время 		= Объект.Дата;
			//НоваяСтрока.ИмяЭмоции 	= ЭлЭмоция.ИмяЭмоции;
			//НоваяСтрока.Интенсивность 	= ЭлЭмоция.Интенсивность;
			//НоваяСтрока.Комментарий 	= ЭлЭмоция.Комментарий;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ПредложенныеЭмоции.Видимость = Ложь;
	ПредложенныеЭмоции.Очистить();
	ПересчитатьЭмоции(); //Заголовк вкладки
	
	ПроверитьВидимостьГруппыПредложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредложенныеРезультаты(Команда)
	
	ОбъектРезультат 	= Объект.Результат;
	
	ПараметрыОтбора 				= Новый Структура("Пометка", Истина);
	ПредложенныеРезультатыПометка 	= ПредложенныеРезультаты.НайтиСтроки(ПараметрыОтбора);
	
	Для каждого ЭлРезультат Из ПредложенныеРезультатыПометка Цикл
		
		лРезультатИмяРезультат 	= ЭлРезультат.ИмяРезультата;
		лРезультатПараметр 		= ЭлРезультат.Параметр;
		лРезультатЗначение 		= ЭлРезультат.ИмяРезультата;
		
		ПараметрыОтбора = Новый Структура("ИмяРезультата, Параметр, Значение", лРезультатИмяРезультат, лРезультатПараметр, лРезультатЗначение);
		НайденныеСтроки = ОбъектРезультат.НайтиСтроки(ПараметрыОтбора);
				
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока				= ОбъектРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлРезультат);
			НоваяСтрока.Время 		= Объект.Дата;
			//НоваяСтрока.ИмяРезультата 	= ЭлРезультат.ИмяРезультат;
			//НоваяСтрока.Интенсивность 	= ЭлРезультат.Интенсивность;
			//НоваяСтрока.Комментарий 	= ЭлРезультат.Комментарий;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ПредложенныеРезультаты.Видимость = Ложь;
	ПредложенныеРезультаты.Очистить();
	ПересчитатьЗаголовокГруппы(Объект.Результат		, "Результат"	, Элементы.ГруппаРезультат.Заголовок);; //Заголовк вкладки
	
	ПроверитьВидимостьГруппыПредложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЭмоции()
	
	ПересчитатьЗаголовокГруппы(Объект.Эмоции		, "Эмоции"		, Элементы.ГруппаЭмоциии.Заголовок);
	//ОбъектЭмоциии 					= Объект.Эмоции;
	//ОбъектЭмоциииКоличество 		= ОбъектЭмоциии.Количество();
	//База = "Эмоции";
	//Элементы.ГруппаЭмоциии.Заголовок = ?(ОбъектЭмоциииКоличество = 0, База, База + " (" + Строка(ОбъектЭмоциииКоличество) + ")");
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьТеги()
	
	ОбъектТеги 					= Объект.Теги;
	ОбъектТегиКоличество 		= ОбъектТеги.Количество();
	База = "Теги";
	Элементы.ГруппаТеги.Заголовок = ?(ОбъектТегиКоличество = 0, База, База + " (" + Строка(ОбъектТегиКоличество) + ")");
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЗаголовокГруппы(ОбъектПересчета, БазаНазвания, ЭлементыГруппаЗаголовок)
	
	ОбъектПересчетаКоличество = ОбъектПересчета.Количество();
	База = БазаНазвания;
	ЭлементыГруппаЗаголовок = УстановитьКоличествоВЗаголовке(База, ОбъектПересчетаКоличество);
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьКоличествоВЗаголовке(База, ОбъектПересчетаКоличество)
	
	Результат = ?(ОбъектПересчетаКоличество = 0, База, База + " (" + Строка(ОбъектПересчетаКоличество) + ")");
	Возврат Результат;
	
КонецФункции // УстановитьКоличествоВЗаголовке()
 
&НаКлиенте
Процедура СкрытьПредложенныеЭмоции(Команда)
	
	Элементы.ПредложенныеЭмоции.Видимость = Ложь;
	ПроверитьВидимостьГруппыПредложений();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПредложенныеРезультаты(Команда)
	
	Элементы.ПредложенныеРезультаты.Видимость = Ложь;
	ПроверитьВидимостьГруппыПредложений();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Таблица, ЗначениеФлага)
	
	Для каждого Строка Из Таблица Цикл
		
		Строка.Пометка = ЗначениеФлага;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагиПредложенныхЭмоций(Команда)
	УстановитьФлаги(ПредложенныеЭмоции, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагиПредложенныхЭмоций(Команда)
	УстановитьФлаги(ПредложенныеЭмоции, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагиПредложенныхРезультатов(Команда)
	УстановитьФлаги(ПредложенныеРезультаты, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагиПредложенныхРезультатов(Команда)
	УстановитьФлаги(ПредложенныеРезультаты, Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоказатьСмежныеЗаписиНаСервере(Дата, ПредыдущаяЗаписьСсылка, СледующаяЗаписьСсылка, ПредыдущаяЗапись, СледующаяЗапись)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(дДневник.Дата) КАК Дата,
		|	""ПредыдущаяЗаписьСсылка"" КАК Вид
		|ПОМЕСТИТЬ ВТ_СмежныеДаты
		|ИЗ
		|	Документ.дДневник КАК дДневник
		|ГДЕ
		|	дДневник.Дата < &Дата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МИНИМУМ(дДневник.Дата),
		|	""СледующаяЗаписьСсылка""
		|ИЗ
		|	Документ.дДневник КАК дДневник
		|ГДЕ
		|	дДневник.Дата > &Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СмежныеДаты.Дата КАК Дата,
		|	ВТ_СмежныеДаты.Вид КАК Вид,
		|	дДневник.Ссылка КАК Ссылка,
		|	дДневник.Описание КАК Описание
		|ИЗ
		|	ВТ_СмежныеДаты КАК ВТ_СмежныеДаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.дДневник КАК дДневник
		|		ПО ВТ_СмежныеДаты.Дата = дДневник.Дата";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ВыборкаДетальныеЗаписиВид = ВыборкаДетальныеЗаписи.Вид; 
			Если ВыборкаДетальныеЗаписиВид = "ПредыдущаяЗаписьСсылка" Тогда
				ПредыдущаяЗаписьСсылка  = ВыборкаДетальныеЗаписи.Ссылка;
				ПредыдущаяЗапись 		= Строка(ВыборкаДетальныеЗаписи.Дата) + Символы.ПС + ВыборкаДетальныеЗаписи.Описание;
			ИначеЕсли ВыборкаДетальныеЗаписиВид = "СледующаяЗаписьСсылка" Тогда
				СледующаяЗаписьСсылка  	= ВыборкаДетальныеЗаписи.Ссылка;
				СледующаяЗапись 		= Строка(ВыборкаДетальныеЗаписи.Дата) + Символы.ПС + ВыборкаДетальныеЗаписи.Описание;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСмежныеЗаписи(Команда)
	
	ПоказатьСмежныеЗаписи = Элементы.ФормаПоказатьСмежныеЗаписи.Пометка;
	
	Если НЕ ПоказатьСмежныеЗаписи Тогда // Т.е. пометка только включится после нажатия
		ПоказатьСмежныеЗаписиНаСервере(Объект.Дата, ПредыдущаяЗаписьСсылка, СледующаяЗаписьСсылка, ПредыдущаяЗапись, СледующаяЗапись);	
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда // т.е. объект новый, у него нет следующей записи
		ПоказатьСмежныеЗаписиНаСервере(ТекущаяДата(), ПредыдущаяЗаписьСсылка, СледующаяЗаписьСсылка, ПредыдущаяЗапись, СледующаяЗапись);	
	КонецЕсли;
	
	ЗначениеЗаполненоПредыдущаяЗаписьСсылка 	= ЗначениеЗаполнено(ПредыдущаяЗаписьСсылка);
	Элементы.ПредыдущаяЗапись.Видимость 		= ЗначениеЗаполненоПредыдущаяЗаписьСсылка;
	Элементы.ОткрытьПредыдущуюЗапись.Видимость 	= ЗначениеЗаполненоПредыдущаяЗаписьСсылка;
	
	ЗначениеЗаполненоСледующаяЗапись 			= ЗначениеЗаполнено(СледующаяЗапись); 
	Элементы.СледующаяЗапись.Видимость 			= ЗначениеЗаполненоСледующаяЗапись;
	Элементы.ОткрытьСледующуюЗапись.Видимость 	= ЗначениеЗаполненоСледующаяЗапись;
	
	Элементы.ФормаПоказатьСмежныеЗаписи.Пометка = НЕ ПоказатьСмежныеЗаписи;
	
	Элементы.ГруппаСмежныеЗаписи.Видимость 		= НЕ ПоказатьСмежныеЗаписи; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПредыдущуюЗапись(Команда)
	ОткрытьЗначение(ПредыдущаяЗаписьСсылка);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСледующуюЗапись(Команда)
	ОткрытьЗначение(СледующаяЗаписьСсылка);
КонецПроцедуры

&НаКлиенте
Процедура ЛичноеПриИзменении(Элемент)
	
	Элементы.ГруппаДоступноПользователям.Видимость = Объект.Скрытое; 
	
КонецПроцедуры

&НаКлиенте
Процедура НаЗаписьСсылаютсяВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ЭлементТекущиеДанныеРегистратор = Элемент.ТекущиеДанные.Регистратор;
		
		Если ЗначениеЗаполнено(ЭлементТекущиеДанныеРегистратор) Тогда
			ОткрытьЗначение(ЭлементТекущиеДанныеРегистратор);	
		КонецЕсли;	
	КонецЕсли;  
	
КонецПроцедуры

//Проверка и получение метаданных для результата
&НаКлиенте
Процедура РезультатИмяРезультатаПриИзменении(Элемент)
	
	//Элементы.Результат.ТекущаяСтрока
	ЭлементыРезультатТекущиеДанные 	= Элементы.Результат.ТекущиеДанные;
	Если ЭлементыРезультатТекущиеДанные <> Неопределено Тогда
		ЭлементыРезультатТекущиеДанныеИмяРезультата 	= ЭлементыРезультатТекущиеДанные.ИмяРезультата;
		ЭлементыРезультатТекущиеДанныеПараметр 	= Элементы.Результат.ТекущиеДанные.Параметр;
		ЭлементыРезультатТекущиеДанныеЗначение 	= Элементы.Результат.ТекущиеДанные.Значение;
		
		Если ЭлементыРезультатТекущиеДанныеИмяРезультата = ПолучитьРезультатСсылкаНаЗапись() Тогда
			Если НЕ ЗначениеЗаполнено(ЭлементыРезультатТекущиеДанныеПараметр) и НЕ ЗначениеЗаполнено(ЭлементыРезультатТекущиеДанныеЗначение) Тогда
				ДокументПустаяСсылка 						= ПолучитьДневникПустуюСсылку();
				Элементы.Результат.ТекущиеДанные.Параметр 	= ДокументПустаяСсылка;
			КонецЕсли;
		ИначеЕсли ЭлементыРезультатТекущиеДанныеИмяРезультата = ПолучитьРезультатПокупка() Тогда
			Если НЕ ЗначениеЗаполнено(ЭлементыРезультатТекущиеДанныеПараметр) и НЕ ЗначениеЗаполнено(ЭлементыРезультатТекущиеДанныеЗначение) Тогда
				ДокументПустаяСсылка 						= ПолучитьРасходПустуюСсылку();
				Элементы.Результат.ТекущиеДанные.Параметр 	= ДокументПустаяСсылка;
			КонецЕсли;
		ИначеЕсли ЭлементыРезультатТекущиеДанныеИмяРезультата = ПолучитьРезультатПродажа() Тогда
			Если НЕ ЗначениеЗаполнено(ЭлементыРезультатТекущиеДанныеПараметр) и НЕ ЗначениеЗаполнено(ЭлементыРезультатТекущиеДанныеЗначение) Тогда
				ДокументПустаяСсылка 						= ПолучитьПродажаПустуюСсылку();
				Элементы.Результат.ТекущиеДанные.Параметр 	= ДокументПустаяСсылка;
			КонецЕсли;
		ИначеЕсли ЭлементыРезультатТекущиеДанныеИмяРезультата = ПолучитьРезультатСтатьяБазыЗнаний() Тогда
			Если НЕ ЗначениеЗаполнено(ЭлементыРезультатТекущиеДанныеПараметр) и НЕ ЗначениеЗаполнено(ЭлементыРезультатТекущиеДанныеЗначение) Тогда
				ДокументПустаяСсылка 						= ПолучитьБазаЗнанийПустуюСсылку();
				Элементы.Результат.ТекущиеДанные.Параметр 	= ДокументПустаяСсылка;
			КонецЕсли;
		ИначеЕсли ЭлементыРезультатТекущиеДанныеИмяРезультата = ПолучитьРезультатЗадача() Тогда
			Если НЕ ЗначениеЗаполнено(ЭлементыРезультатТекущиеДанныеПараметр) и НЕ ЗначениеЗаполнено(ЭлементыРезультатТекущиеДанныеЗначение) Тогда
				ДокументПустаяСсылка 						= ПолучитьЗадачаПустуюСсылку();
				Элементы.Результат.ТекущиеДанные.Параметр 	= ДокументПустаяСсылка;
			КонецЕсли;
		ИначеЕсли ЭлементыРезультатТекущиеДанныеИмяРезультата = ПолучитьРезультатКонтакты()
			ИЛИ ЭлементыРезультатТекущиеДанныеИмяРезультата = ПолучитьРезультатОбщение()
			ИЛИ ЭлементыРезультатТекущиеДанныеИмяРезультата = ПолучитьРезультатВстреча() Тогда
			Если НЕ ЗначениеЗаполнено(ЭлементыРезультатТекущиеДанныеПараметр) и НЕ ЗначениеЗаполнено(ЭлементыРезультатТекущиеДанныеЗначение) Тогда
				ДокументПустаяСсылка 						= ПолучитьКонтактыПустуюСсылку();
				Элементы.Результат.ТекущиеДанные.Параметр 	= ДокументПустаяСсылка;
			КонецЕсли;
		ИначеЕсли ЭлементыРезультатТекущиеДанныеИмяРезультата = ПолучитьРезультатМентальнаяКарта() Тогда
			Если НЕ ЗначениеЗаполнено(ЭлементыРезультатТекущиеДанныеПараметр) и НЕ ЗначениеЗаполнено(ЭлементыРезультатТекущиеДанныеЗначение) Тогда
				ДокументПустаяСсылка 						= ПолучитьМентальнаяКартаПустуюСсылку();
				Элементы.Результат.ТекущиеДанные.Параметр 	= ДокументПустаяСсылка;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРезультатСсылкаНаЗапись()
	
	Возврат Справочники.дРезультат.СсылкаНаЗапись; //Предопределённый элемент
	
КонецФункции // ПолучитьРезультатСсылкаНаЗапись()

&НаСервереБезКонтекста
Функция ПолучитьДневникПустуюСсылку()
	
	Возврат Документы.дДневник.ПустаяСсылка();
	
КонецФункции // ПолучитьРезультатПустуюСсылку()

&НаСервереБезКонтекста
Функция ПолучитьРезультатПокупка()
	
	ИмяЭлемента 	= "дРезультат";
	Если Метаданные.Справочники.Найти(ИмяЭлемента) <> Неопределено Тогда
		Возврат Справочники[ИмяЭлемента].Расход; 
	КонецЕсли;
	
КонецФункции // ПолучитьРезультатПокупка()

&НаСервереБезКонтекста
Функция ПолучитьРасходПустуюСсылку()
	
	ИмяЭлемента 	= "Расход";
	Если Метаданные.Документы.Найти(ИмяЭлемента) <> Неопределено Тогда
		Возврат Документы[ИмяЭлемента].ПустаяСсылка(); 
	КонецЕсли;
	
КонецФункции // ПолучитьРасходПустуюСсылку()
 
&НаСервереБезКонтекста
Функция ПолучитьРезультатПродажа()
	
	ИмяЭлемента 	= "дРезультат";
	Если Метаданные.Справочники.Найти(ИмяЭлемента) <> Неопределено Тогда
		Возврат Справочники[ИмяЭлемента].Доход; 
	КонецЕсли;
	
КонецФункции // ПолучитьРезультатПродажа()

&НаСервереБезКонтекста
Функция ПолучитьПродажаПустуюСсылку()
	
	ИмяЭлемента 	= "Доход";
	Если Метаданные.Документы.Найти(ИмяЭлемента) <> Неопределено Тогда
		Возврат Документы[ИмяЭлемента].ПустаяСсылка(); 
	КонецЕсли;
	
КонецФункции // ПолучитьРасходПустуюСсылку()

&НаСервереБезКонтекста
Функция ПолучитьРезультатСтатьяБазыЗнаний()
	
	ИмяЭлемента 	= "дРезультат";
	Если Метаданные.Справочники.Найти(ИмяЭлемента) <> Неопределено Тогда
		Возврат Справочники[ИмяЭлемента].БазаЗнаний; //Предопределённый элемент	
	КонецЕсли;
	
КонецФункции // ПолучитьРезультатСтатьяБазыЗнаний()

&НаСервереБезКонтекста
Функция ПолучитьБазаЗнанийПустуюСсылку()
	
	ИмяЭлемента 	= "СтатьиБазыЗнаний";
	Если Метаданные.Справочники.Найти(ИмяЭлемента) <> Неопределено Тогда
		Возврат Справочники[ИмяЭлемента].ПустаяСсылка();	
	КонецЕсли; 
	
КонецФункции // ПолучитьБазаЗнанийПустуюСсылку()

&НаСервереБезКонтекста
Функция ПолучитьРезультатЗадача()
	
	ИмяЭлемента 	= "дРезультат";
	Если Метаданные.Справочники.Найти(ИмяЭлемента) <> Неопределено Тогда
		Возврат Справочники[ИмяЭлемента].Задача; //Предопределённый элемент	
	КонецЕсли;
	
КонецФункции // ПолучитьРезультатЗадачи()

&НаСервереБезКонтекста
Функция ПолучитьЗадачаПустуюСсылку()
	
	ИмяЭлемента 	= "узЗадачи";
	Если Метаданные.Справочники.Найти(ИмяЭлемента) <> Неопределено Тогда
		Возврат Справочники[ИмяЭлемента].ПустаяСсылка(); 
	КонецЕсли;
	
КонецФункции // ПолучитьЗадачиПустуюСсылку()

&НаСервереБезКонтекста
Функция ПолучитьРезультатКонтакты()
	
	ИмяЭлемента 	= "дРезультат";
	Если Метаданные.Справочники.Найти(ИмяЭлемента) <> Неопределено Тогда
		Возврат Справочники[ИмяЭлемента].Контакты; //Предопределённый элемент	
	КонецЕсли;
	
КонецФункции // ПолучитьРезультатЗадачи()

&НаСервереБезКонтекста
Функция ПолучитьРезультатОбщение()
	
	ИмяЭлемента 	= "дРезультат";
	Если Метаданные.Справочники.Найти(ИмяЭлемента) <> Неопределено Тогда
		Возврат Справочники[ИмяЭлемента].Общение; //Предопределённый элемент	
	КонецЕсли;
	
КонецФункции // ПолучитьРезультатОбщение()

&НаСервереБезКонтекста
Функция ПолучитьРезультатВстреча()
	
	ИмяЭлемента 	= "дРезультат";
	Если Метаданные.Справочники.Найти(ИмяЭлемента) <> Неопределено Тогда
		Возврат Справочники[ИмяЭлемента].Встреча; //Предопределённый элемент	
	КонецЕсли;
	
КонецФункции // ПолучитьРезультатОбщение()

&НаСервереБезКонтекста
Функция ПолучитьКонтактыПустуюСсылку()
	
	ИмяЭлемента 	= "Контакты";
	Возврат дОбщиеФункцииСервер.ПроверитьПолучитьСправочникПустаяСсылка(ИмяЭлемента);
	
КонецФункции // ПолучитьКонтактыПустуюСсылку()

&НаСервереБезКонтекста
Функция ПолучитьРезультатМентальнаяКарта()
	
	ИмяЭлемента 	= "дРезультат";
	Если Метаданные.Справочники.Найти(ИмяЭлемента) <> Неопределено Тогда
		Возврат Справочники[ИмяЭлемента].МентальнаяКарта; //Предопределённый элемент	
	КонецЕсли;
	
КонецФункции // ПолучитьРезультатМентальнаяКарта()

&НаСервереБезКонтекста
Функция ПолучитьМентальнаяКартаПустуюСсылку()
	
	ИмяЭлемента 	= "дМентальныеКарты";
	Возврат дОбщиеФункцииСервер.ПроверитьПолучитьСправочникПустаяСсылка(ИмяЭлемента);
	
КонецФункции // ПолучитьКонтактыПустуюСсылку()

//Подбор
&НаКлиенте
Процедура ЭмоцииПодбор(Команда)
	
	ОписаниеОбработчикаВыбора = Новый ОписаниеОповещения("ОбработкаПодбораЭмоций", ЭтотОбъект);
	//ПараметрыПодбора = Новый Структура("ВидимостьФинансовойЦели,ВидимостьКоличестваИЦены,ДатаОтбора,ВалютаКошелька,ДатаОперации,КошелекОперации,СтрокаПоиска",
	//ВидимостьФинансовойЦели, ВидимостьКоличестваИЦены, , ВалютаКошелька, Объект.Дата, Объект.КошелекДолг, "");
	//ПараметрыПодбора = Неопределено;
	ПараметрыПодбора 	= Новый Структура("Дата", Объект.Дата);
	ОткрытьФорму("Обработка.дФормыПодборов.Форма.ЗаписьПодборЭмоций", ПараметрыПодбора, ЭтаФорма, Объект.Ссылка, ,, ОписаниеОбработчикаВыбора); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиПодбор(Команда)
	
	ОписаниеОбработчикаВыбора = Новый ОписаниеОповещения("ОбработкаПодбораТегов", ЭтотОбъект);
	//ПараметрыПодбора = Новый Структура("ВидимостьФинансовойЦели,ВидимостьКоличестваИЦены,ДатаОтбора,ВалютаКошелька,ДатаОперации,КошелекОперации,СтрокаПоиска",
	//ВидимостьФинансовойЦели, ВидимостьКоличестваИЦены, , ВалютаКошелька, Объект.Дата, Объект.КошелекДолг, "");
	ПараметрыПодбора = Неопределено;
	ОткрытьФорму("Обработка.дФормыПодборов.Форма.ЗаписьПодборТегов", ПараметрыПодбора, ЭтаФорма, Объект.Ссылка, ,, ОписаниеОбработчикаВыбора); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросыПодбор(Команда)
	
	ОписаниеОбработчикаВыбора = Новый ОписаниеОповещения("ОбработкаПодбораВопросов", ЭтотОбъект);
	//ПараметрыПодбора = Новый Структура("ВидимостьФинансовойЦели,ВидимостьКоличестваИЦены,ДатаОтбора,ВалютаКошелька,ДатаОперации,КошелекОперации,СтрокаПоиска",
	//ВидимостьФинансовойЦели, ВидимостьКоличестваИЦены, , ВалютаКошелька, Объект.Дата, Объект.КошелекДолг, "");
	ПараметрыПодбора = Неопределено;
	ОткрытьФорму("Обработка.дФормыПодборов.Форма.ЗаписьПодборВопросов", ПараметрыПодбора, ЭтаФорма, Объект.Ссылка, ,, ОписаниеОбработчикаВыбора); 
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПодбор(Команда)
	
	ОписаниеОбработчикаВыбора = Новый ОписаниеОповещения("ОбработкаПодбораРезультата", ЭтотОбъект);
	//ПараметрыПодбора = Новый Структура("ВидимостьФинансовойЦели,ВидимостьКоличестваИЦены,ДатаОтбора,ВалютаКошелька,ДатаОперации,КошелекОперации,СтрокаПоиска",
	//ВидимостьФинансовойЦели, ВидимостьКоличестваИЦены, , ВалютаКошелька, Объект.Дата, Объект.КошелекДолг, "");
	//ПараметрыПодбора = Неопределено;
	ПараметрыПодбора 	= Новый Структура("Дата", Объект.Дата);
	ОткрытьФорму("Обработка.дФормыПодборов.Форма.ЗаписьПодборРезультата", ПараметрыПодбора, ЭтаФорма, Объект.Ссылка, ,, ОписаниеОбработчикаВыбора); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораРезультата(РезультатПодбора, ДополнительныеПараметры) Экспорт

	Если НЕ ТипЗнч(РезультатПодбора) = Тип("Структура")
		ИЛИ НЕ РезультатПодбора.Свойство("АдресТаблицыВыбора") Тогда
		Возврат;
	КонецЕсли; 
	
	ДобавитьВТаблицуРезультатСтрокиНаСервере(РезультатПодбора);

КонецПроцедуры

&НаСервере
Процедура ДобавитьВТаблицуРезультатСтрокиНаСервере(РезультатПодбора)

	ТаблицаПодбора = ПолучитьИзВременногоХранилища(РезультатПодбора.АдресТаблицыВыбора);
	Для Каждого СтрокаПодбора Из ТаблицаПодбора Цикл
		
		Если ЗначениеЗаполнено(СтрокаПодбора.ИмяРезультата) 
			ИЛИ ЗначениеЗаполнено(СтрокаПодбора.Параметр) 
			ИЛИ ЗначениеЗаполнено(СтрокаПодбора.Значение) Тогда
			НоваяСтрока 				= Объект.Результат.Добавить();
			НоваяСтрока.Время 			= СтрокаПодбора.Время;
			НоваяСтрока.ИмяРезультата 	= СтрокаПодбора.ИмяРезультата;
			НоваяСтрока.Параметр      	= СтрокаПодбора.Параметр;
			НоваяСтрока.Значение   		= СтрокаПодбора.Значение;
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораЭмоций(РезультатПодбора, ДополнительныеПараметры) Экспорт

	Если НЕ ТипЗнч(РезультатПодбора) = Тип("Структура")
		ИЛИ НЕ РезультатПодбора.Свойство("АдресТаблицыВыбора") Тогда
		Возврат;
	КонецЕсли; 
	
	ДобавитьВТаблицуЭмоцииСтрокиНаСервере(РезультатПодбора);

КонецПроцедуры

&НаСервере
Процедура ДобавитьВТаблицуЭмоцииСтрокиНаСервере(РезультатПодбора)

	ТаблицаПодбора = ПолучитьИзВременногоХранилища(РезультатПодбора.АдресТаблицыВыбора);
	Для Каждого СтрокаПодбора Из ТаблицаПодбора Цикл
		
		Если ЗначениеЗаполнено(СтрокаПодбора.ИмяЭмоции) 
			ИЛИ ЗначениеЗаполнено(СтрокаПодбора.Комментарий)Тогда
			НоваяСтрока 				= Объект.Эмоции.Добавить();
			НоваяСтрока.Время 			= СтрокаПодбора.Время;
			НоваяСтрока.ИмяЭмоции 		= СтрокаПодбора.ИмяЭмоции;
			НоваяСтрока.Интенсивность 	= СтрокаПодбора.Интенсивность;
			НоваяСтрока.Длительность  	= СтрокаПодбора.Длительность;
			НоваяСтрока.Комментарий  	= СтрокаПодбора.Комментарий;
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораТегов(РезультатПодбора, ДополнительныеПараметры) Экспорт

	Если НЕ ТипЗнч(РезультатПодбора) = Тип("Структура")
		ИЛИ НЕ РезультатПодбора.Свойство("АдресТаблицыВыбора") Тогда
		Возврат;
	КонецЕсли; 
	
	ДобавитьВТаблицуТегиСтрокиНаСервере(РезультатПодбора);

КонецПроцедуры

&НаСервере
Процедура ДобавитьВТаблицуТегиСтрокиНаСервере(РезультатПодбора)

	ТаблицаПодбора = ПолучитьИзВременногоХранилища(РезультатПодбора.АдресТаблицыВыбора);
	Для Каждого СтрокаПодбора Из ТаблицаПодбора Цикл
		
		Если ЗначениеЗаполнено(СтрокаПодбора.ИмяТега) Тогда
			НоваяСтрока 			= Объект.Теги.Добавить();
			НоваяСтрока.ИмяТега 	= СтрокаПодбора.ИмяТега;
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораВопросов(РезультатПодбора, ДополнительныеПараметры) Экспорт

	Если НЕ ТипЗнч(РезультатПодбора) = Тип("Структура")
		ИЛИ НЕ РезультатПодбора.Свойство("АдресТаблицыВыбора") Тогда
		Возврат;
	КонецЕсли; 
	
	ДобавитьВТаблицуВопросыСтрокиНаСервере(РезультатПодбора);

КонецПроцедуры

&НаСервере
Процедура ДобавитьВТаблицуВопросыСтрокиНаСервере(РезультатПодбора)

	ТаблицаПодбора = ПолучитьИзВременногоХранилища(РезультатПодбора.АдресТаблицыВыбора);
	Для Каждого СтрокаПодбора Из ТаблицаПодбора Цикл
		
		Если ЗначениеЗаполнено(СтрокаПодбора.ИмяВопроса) Тогда
			НоваяСтрока 			= Объект.Вопросы.Добавить();
			НоваяСтрока.ИмяВопроса 	= СтрокаПодбора.ИмяВопроса;
			НоваяСтрока.Время      	= СтрокаПодбора.Время;
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

//Загрузка
&НаКлиенте
Процедура ЭмоцииЗагрузка(Команда)
	
	ОписаниеОбработчикаВыбора = Новый ОписаниеОповещения("ОбработкаПодбораЭмоций", ЭтотОбъект);
	//ПараметрыПодбора = Новый Структура("ВидимостьФинансовойЦели,ВидимостьКоличестваИЦены,ДатаОтбора,ВалютаКошелька,ДатаОперации,КошелекОперации,СтрокаПоиска",
	//ВидимостьФинансовойЦели, ВидимостьКоличестваИЦены, , ВалютаКошелька, Объект.Дата, Объект.КошелекДолг, "");
	ПараметрыПодбора = Неопределено;
	ОткрытьФорму("Обработка.дФормыЗагрузки.Форма.ЗаписьЗагрузкаЭмоций", ПараметрыПодбора, ЭтаФорма, Объект.Ссылка, ,, ОписаниеОбработчикаВыбора); 
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатЗагрузка(Команда)
	
	ОписаниеОбработчикаВыбора = Новый ОписаниеОповещения("ОбработкаПодбораРезультата", ЭтотОбъект);
	//ПараметрыПодбора = Новый Структура("ВидимостьФинансовойЦели,ВидимостьКоличестваИЦены,ДатаОтбора,ВалютаКошелька,ДатаОперации,КошелекОперации,СтрокаПоиска",
	//ВидимостьФинансовойЦели, ВидимостьКоличестваИЦены, , ВалютаКошелька, Объект.Дата, Объект.КошелекДолг, "");
	ПараметрыПодбора = Неопределено;
	ОткрытьФорму("Обработка.дФормыЗагрузки.Форма.ЗаписьЗагрузкаРезультата", ПараметрыПодбора, ЭтаФорма, Объект.Ссылка, ,, ОписаниеОбработчикаВыбора); 
	
КонецПроцедуры

&НаСервере
Функция ИзОписаниеВОписаниеФормат(пТекущийОбъектОписание)
	
	лРезультат = "";
	
	Если ЗначениеЗаполнено(пТекущийОбъектОписание) Тогда
		лРезультат = СтрЗаменить(пТекущийОбъектОписание, Символы.ПС, "<br>"); // не ставятся сами переносы
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ИзОписаниеВОписаниеФормат()
 
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект = Неопределено)
	
	ВыводитьОписаниеФормат 	= Константы.дОписаниеФормат.Получить();
	
	Если ВыводитьОписаниеФормат Тогда
		Элементы.Описание.Видимость 			= НЕ ВыводитьОписаниеФормат;
		Элементы.ГруппаОписаниеФормат.Видимость = ВыводитьОписаниеФормат;
		
		Если ТекущийОбъект <> Неопределено Тогда 
			ОписаниеФормат 			= ТекущийОбъект.ОписаниеФормат.Получить();
			лТекущийОбъектОписание 	= ТекущийОбъект.Описание;
			
			лОписаниеФорматТекст 	= ОписаниеФормат.ПолучитьТекст();
			Если НЕ ЗначениеЗаполнено(лОписаниеФорматТекст) Тогда
				лТекущийОбъектОписаниеДляВставки 	= ИзОписаниеВОписаниеФормат(лТекущийОбъектОписание);
				ОписаниеФормат.УстановитьHTML(лТекущийОбъектОписаниеДляВставки, Новый Структура); 
			ИначеЕсли лОписаниеФорматТекст <> лТекущийОбъектОписание Тогда //Коллизия текста
				лПриоритетФорматировнногоОписанияЗаписи = Константы.дПриоритетФорматировнногоОписанияЗаписи.Получить();
				
				Если НЕ лПриоритетФорматировнногоОписанияЗаписи Тогда
					лТекущийОбъектОписаниеДляВставки 	= ИзОписаниеВОписаниеФормат(лТекущийОбъектОписание);
					ОписаниеФормат.УстановитьHTML(лТекущийОбъектОписаниеДляВставки, Новый Структура);
				Иначе
					ТекущийОбъект.Описание 	= лОписаниеФорматТекст;
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда // При открытии формы при копировании
			лТекущийОбъектОписание 				= Объект.Описание; 
			лТекущийОбъектОписаниеДляВставки 	= ИзОписаниеВОписаниеФормат(лТекущийОбъектОписание);
			ОписаниеФормат.УстановитьHTML(лТекущийОбъектОписаниеДляВставки, Новый Структура);
		КонецЕсли;
		
		Элементы.Описание.АктивизироватьПоУмолчанию 		= НЕ ВыводитьОписаниеФормат;
		Элементы.ОписаниеФормат.АктивизироватьПоУмолчанию 	= ВыводитьОписаниеФормат;
	Иначе
		Элементы.Описание.Видимость 			= НЕ ВыводитьОписаниеФормат;
		Элементы.ГруппаОписаниеФормат.Видимость = ВыводитьОписаниеФормат;
		
		Элементы.Описание.АктивизироватьПоУмолчанию 		= НЕ ВыводитьОписаниеФормат;
		Элементы.ОписаниеФормат.АктивизироватьПоУмолчанию 	= ВыводитьОписаниеФормат;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Заполнение Описания (только текст) из ОписаниеФормат для статистики и аналитики и прочего
	ВыводитьОписаниеФормат 		= Константы.дОписаниеФормат.Получить();
	
	Если ВыводитьОписаниеФормат И НЕ Объект.Зашифрован Тогда
		ЗаполнитьОписание(ТекущийОбъект);
		//лОписаниеФорматТекст 	= ОписаниеФормат.ПолучитьТекст();
		//Если ЗначениеЗаполнено(лОписаниеФорматТекст) Тогда
		//	ТекущийОбъект.ОписаниеФормат 	= Новый ХранилищеЗначения(ОписаниеФормат);
		//	ТекущийОбъект.Описание 			= ОписаниеФормат.ПолучитьТекст(); // Т.к. анализируется везде просто текст, и именно из этого реквизита
		//КонецЕсли; 
	Иначе
		ТекущийОбъект.ОписаниеФормат 	= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПараметрПриИзменении(Элемент)
	
	лРезультатТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	Если лРезультатТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Обрабатываем Вид Деятельности
	лРезультатТекущиеДанныеПараметр 	= лРезультатТекущиеДанные.Параметр;
	Если ЗначениеЗаполнено(лРезультатТекущиеДанныеПараметр) Тогда
		// Заполняем тип параметра
		лРезультатПараметрТип 			= ТипЗнч(лРезультатТекущиеДанныеПараметр);
		Если лРезультатПараметрТип = Тип("СправочникСсылка.дВидыДеятельности") Тогда
			лРезультатТекущиеДанныеЗначение 	= лРезультатТекущиеДанные.Значение; 
			Если НЕ ЗначениеЗаполнено(лРезультатТекущиеДанныеЗначение) Тогда // И если текущее значение не заполнено, иначе затрём
				ТипЗначенияРезультатаВидаДеятельности 		= ПолучитьТипЗначенияРезультатаВидаДеятельности(лРезультатТекущиеДанныеПараметр);	
				Если ТипЗначенияРезультатаВидаДеятельности <> Неопределено Тогда
					Элементы.Результат.ТекущиеДанные.Значение 	= ТипЗначенияРезультатаВидаДеятельности;
				КонецЕсли; 
			КонецЕсли; 
			
			// Заполняем теги
			ЗаполнитьТегиНаСервере(лРезультатТекущиеДанныеПараметр);
			
			ПересчитатьТеги();
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТегиНаСервере(пВидыДеятельностиСсылка)
	
	лВидыДеятельностиТеги 	= пВидыДеятельностиСсылка.Теги; 
	Если лВидыДеятельностиТеги.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ОбъектЗначение 			= РеквизитФормыВЗначение("Объект");
	лОбъектЗначениеТеги 	= ОбъектЗначение.Теги; 
	
	// Выполнение операций с Объектом "ОбъектЗначение"
	ОбъектТеги = лОбъектЗначениеТеги.Выгрузить(, "ИмяТега");
	
	// Объединим Теги с формы и теги ВидыДеятельности, всё загрузим в ТЧ тегов Записи
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектТеги.ИмяТега КАК Теги
	|ПОМЕСТИТЬ ВТ_ОбъектТеги
	|ИЗ
	|	&ВТ_ОбъектТеги КАК ОбъектТеги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	дВидыДеятельностиТеги.Тег КАК ИмяТега
	|ИЗ
	|	Справочник.дВидыДеятельности.Теги КАК дВидыДеятельностиТеги
	|ГДЕ
	|	НЕ дВидыДеятельностиТеги.Тег В
	|				(ВЫБРАТЬ
	|					ВТ_ОбъектТеги.Теги КАК Теги
	|				ИЗ
	|					ВТ_ОбъектТеги КАК ВТ_ОбъектТеги)
	|	И дВидыДеятельностиТеги.Ссылка = &Ссылка
	|	И НЕ дВидыДеятельностиТеги.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ОбъектТеги.Теги
	|ИЗ
	|	ВТ_ОбъектТеги КАК ВТ_ОбъектТеги";
	
	Запрос.УстановитьПараметр("ВТ_ОбъектТеги"	, ОбъектТеги);
	Запрос.УстановитьПараметр("Ссылка"			, пВидыДеятельностиСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыгрузкаОбъектТеги = РезультатЗапроса.Выгрузить();
		ВыгрузкаОбъектТеги.Сортировать("ИмяТега Возр");
		
		лОбъектЗначениеТеги.Загрузить(ВыгрузкаОбъектТеги);
	КонецЕсли; 
	
	//Найдём возможные родительские теги
	ЗаполнитьРодительскиеТеги(лОбъектЗначениеТеги, пВидыДеятельностиСсылка);
	
	ЗначениеВРеквизитФормы(ОбъектЗначение, "Объект"); 	
	
КонецПроцедуры // ЗаполнитьТегиНаСервере()

&НаСервере
Функция ПолучитьРодителя(пСправочникСсылка)
	
	лСправочникСсылка = пСправочникСсылка;
	Пока НЕ лСправочникСсылка.Родитель.Пустая() Цикл
		лСправочникСсылка 	= лСправочникСсылка.Родитель;	
	КонецЦикла;
	
	Возврат лСправочникСсылка;
	
КонецФункции

&НаСервере
Функция ЗаполнитьРодительскиеТегиЗапросом(лОбъектЗначениеТеги, пВидыДеятельностиСсылка)

	лСсылкаКорневого 	= ПолучитьРодителя(пВидыДеятельностиСсылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дВидыДеятельности.Ссылка КАК Ссылка,
		|	дВидыДеятельности.Родитель КАК Родитель
		|ПОМЕСТИТЬ ВТ_Родители
		|ИЗ
		|	Справочник.дВидыДеятельности КАК дВидыДеятельности
		|ГДЕ
		|	дВидыДеятельности.БратьРодительскийТег
		|	И дВидыДеятельности.Ссылка В ИЕРАРХИИ(&СсылкаКорневого)
		|	И НЕ дВидыДеятельности.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	дВидыДеятельностиТеги.Тег КАК Тег,
		|	дВидыДеятельностиТеги.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.дВидыДеятельности.Теги КАК дВидыДеятельностиТеги
		|ГДЕ
		|	дВидыДеятельностиТеги.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_Родители.Родитель КАК Родитель
		|			ИЗ
		|				ВТ_Родители КАК ВТ_Родители)
		|	И НЕ дВидыДеятельностиТеги.Тег.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("СсылкаКорневого"	, лСсылкаКорневого);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		лВыборка = РезультатЗапроса.Выбрать();
		Пока лВыборка.Следующий() Цикл
			
			лВыборкаСсылка 	= лВыборка.Ссылка;
			Если пВидыДеятельностиСсылка.ПринадлежитЭлементу(лВыборкаСсылка) Тогда
				лВыборкаТег = лВыборка.Тег;
				Если лОбъектЗначениеТеги.Найти(лВыборкаТег, "ИмяТега") = Неопределено Тогда
					лНоваяСтрока 			= лОбъектЗначениеТеги.Добавить();
					лНоваяСтрока.ИмяТега 	= лВыборкаТег;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

КонецФункции // ЗаполнитьРодительскиеТеги()
 
&НаСервере
Функция ЗаполнитьРодительскиеТеги(лОбъектЗначениеТеги, пВидыДеятельностиСсылка)

	лСправочникСсылка = пВидыДеятельностиСсылка;
	Пока НЕ лСправочникСсылка.Родитель.Пустая() Цикл
		
		лСправочникСсылкаРодитель 	= лСправочникСсылка.Родитель;
		
		Если лСправочникСсылка.БратьРодительскийТег Тогда
			лСправочникСсылкаТаблица 	= лСправочникСсылкаРодитель.Теги;
			
			Для каждого лСправочникСсылкаТаблицаСтрока Из лСправочникСсылкаТаблица Цикл
				
				лТег = лСправочникСсылкаТаблицаСтрока.Тег;
				Если лОбъектЗначениеТеги.Найти(лТег, "ИмяТега") = Неопределено Тогда
					лНоваяСтрока 			= лОбъектЗначениеТеги.Добавить();
					лНоваяСтрока.ИмяТега 	= лТег;
				КонецЕсли;	
				
			КонецЦикла;	
		КонецЕсли; 
		
		лСправочникСсылка 	= лСправочникСсылкаРодитель;
			
	КонецЦикла;
	
КонецФункции // ЗаполнитьРодительскиеТеги()
 

&НаСервереБезКонтекста
Функция ПолучитьТипЗначенияРезультатаВидаДеятельности(пВидДеятельности)
	
	лРезультат = пВидДеятельности.ТипЗначенияРезультата;
	
	Возврат лРезультат;
	
КонецФункции // ПолучитьВидДеятельности()

&НаКлиенте
Процедура СкрытьВсеПредложения(Команда)
	
	Элементы.ГруппаПредложения.Видимость = Ложь; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаПоРегулярномуВыражению(Команда)
	
	лЭлементыГруппаРегулярныхВыраженийВидимость 	= Элементы.ГруппаРегулярныхВыражений.Видимость; 
	Элементы.ГруппаРегулярныхВыражений.Видимость 	= НЕ лЭлементыГруппаРегулярныхВыраженийВидимость;
	Элементы.ОписаниеФорматЗаменаПоРегулярномуВыражению.Пометка = НЕ лЭлементыГруппаРегулярныхВыраженийВидимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаменуПоРегулярномуВыражению(Команда)
	
	лТекст 	= ОписаниеФормат.ПолучитьТекст();
	
	РезультатЗаменыПоРегулярномуВыражению = ЗаменитьСимволыПоШаблону(лТекст, Строка(ШаблонРегулярногоВыражения), ТекстЗаменыПоРегулярномуВыражению);
	
КонецПроцедуры

&НаКлиенте
Функция ЗаменитьСимволыПоШаблону(Строка, ШаблонЗамены, ЗаменитьНа = "")
	
	Если ПустаяСтрока(Строка) ИЛИ ПустаяСтрока(ШаблонЗамены) Тогда
		Возврат Строка; 
	КонецЕсли;
	
	RegExp 				= Новый COMОбъект("VBScript.RegExp"); //Для 1C v 7.x: CreateObject("VBScript.RegExp") 
	RegExp.IgnoreCase 	= РегулярныеВыраженияИгнорироватьРегистр; //Игнорировать регистр 
	RegExp.Global 		= РегулярныеВыраженияПоискВсехВхождений; //Поиск всех вхождений шаблона 
	RegExp.MultiLine 	= РегулярныеВыраженияМногострочныйРежим; //Многострочный режим 
	RegExp.Pattern 		= ШаблонЗамены; 
	
	Возврат RegExp.Replace(Строка, ЗаменитьНа);
	
КонецФункции // ЗаменитьСимволыПоШаблону()

&НаКлиенте
Процедура НайтиСтрокиПоРегулярномуВыражению(Команда)
	
	RegExp = Новый COMОбъект("VBScript.RegExp");    // создаем объект для работы с регулярными выражениями
	
	//Параметры:
	RegExp.MultiLine 	= РегулярныеВыраженияМногострочныйРежим;  // истина — текст многострочный, ложь — одна строка
	RegExp.Global 		= РегулярныеВыраженияПоискВсехВхождений;   // истина — поиск по всей строке, ложь — до первого совпадения
	RegExp.IgnoreCase 	= РегулярныеВыраженияИгнорироватьРегистр; // истина — игнорировать регистр строки при поиске
	
	лТекст 				= ОписаниеФормат.ПолучитьТекст();
	
	RegExp.Pattern 		= Строка(ШаблонРегулярногоВыражения);
	Matches 			= RegExp.Execute(лТекст);
	
	Если Matches.Count > 0 Тогда
		НайденныеЭлементыПоРегулярномуВыражению.Очистить();
		
		Для Сч = 0 По Matches.Count - 1 Цикл
			НайденныеЭлементыПоРегулярномуВыражению.Добавить(Matches.Item(Сч).Value);
		КонецЦикла;
	КонецЕсли; 
	
	RegExp = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭмоциииПриИзменении(Элемент)
	
	лЭлементТекущиеДанные 	= Элемент.ТекущиеДанные;
	ИзменитьВремяТаблиц(лЭлементТекущиеДанные);
	
	ПодготовкаСтрокиТаблицы(лЭлементТекущиеДанные, "Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриИзменении(Элемент)
	
	лЭлементТекущиеДанные 	= Элемент.ТекущиеДанные;
	ИзменитьВремяТаблиц(лЭлементТекущиеДанные);
	
	ПодготовкаСтрокиТаблицы(лЭлементТекущиеДанные, "Значение");
	
	РезультатПараметрПриИзменении(Элемент); //Добавим теги по виду деятельности
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаСтрокиТаблицы(пЭлементТекущиеДанные, пИмяКолонки)

	Если пЭлементТекущиеДанные <> Неопределено Тогда
		лЗначение = пЭлементТекущиеДанные[пИмяКолонки];
		
		Если ТипЗнч(лЗначение) = Тип("Строка") И ЗначениеЗаполнено(лЗначение) Тогда
			пЭлементТекущиеДанные[пИмяКолонки] = СокрЛП(пЭлементТекущиеДанные[пИмяКолонки]);
		КонецЕсли; 
	КонецЕсли;	

КонецПроцедуры // ПодготовкаСтрокиТаблицы()
 

&НаКлиенте
Функция ИзменитьВремяТаблиц(пЭлементТекущиеДанные)

	лРезультат = Ложь;
	
	Если пЭлементТекущиеДанные <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(пЭлементТекущиеДанные.Время) Тогда
			пЭлементТекущиеДанные.Время = Объект.Дата;
			лРезультат = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат лРезультат;

КонецФункции // ИзменитьВремяТаблиц()

&НаКлиенте
Процедура ДобавитьВсеПредложения(Команда)
	
	Если Элементы.ПредложенныеРезультаты.Видимость Тогда
		ДобавитьПредложенныеРезультаты(Команда);
	КонецЕсли;
	
	Если Элементы.ПредложенныеТеги.Видимость Тогда
		ДобавитьПредложенныеТеги(Команда);
	КонецЕсли; 
	
	Если Элементы.ПредложенныеЭмоции.Видимость Тогда
		ДобавитьПредложенныеЭмоции(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложенныеРезультатыКоличествоПриИзменении(Элемент)
	
	ОписаниеПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогиПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПоказатьСодержимоеДиалога(Элемент.ТекущиеДанные.Диалог);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСодержимоеДиалога(пДиалогСсылка)
	
	ДиалогСодержание.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	дДиалогиДиалог.Ссылка КАК Ссылка,
	|	дДиалогиДиалог.НомерСтроки КАК НомерСтроки,
	|	дДиалогиДиалог.АвторТекста КАК АвторТекста,
	|	дДиалогиДиалог.Текст КАК Текст,
	|	дДиалогиДиалог.Комментарий КАК Комментарий,
	|	дДиалогиДиалог.Выделить КАК Выделить
	|ИЗ
	|	Справочник.дДиалоги.Диалог КАК дДиалогиДиалог
	|ГДЕ
	|	дДиалогиДиалог.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", пДиалогСсылка);
	
	РезультатЗапроса 	= Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		лСтрокиДиалога 	= РезультатЗапроса.Выгрузить();
		ДиалогСодержание.Загрузить(лСтрокиДиалога);
		
		//ДиалогСодержание.Сортировать("НомерСтроки Возр");
	КонецЕсли;
	 
КонецПроцедуры // ПоказатьСодержимоеДиалога()

&НаКлиенте
Процедура ДиалогиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДиалог(Команда)
	
	ОткрытьФорму("РегистрСведений.дДиалоги.Форма.ФормаЗаписи",
	Новый Структура("ЗначенияЗаполнения", Новый Структура("Объект", Объект.Ссылка)));
	
КонецПроцедуры

&НаКлиенте
Процедура Шифрование(Команда)
	// Сломаются переносы строк исходного текста. Из-за особенности хтмл документа..
	
	//лОписаниеТекст 	= ОписаниеФормат.ПолучитьТекст();
	лОписаниеТекст 	= Объект.Описание;
	//лОписаниеТекст 	= ИзОписаниеВОписаниеФормат(лОписаниеТекст);
	
	лЗашифрован = Объект.Зашифрован;
	
	Если НЕ лЗашифрован Тогда
		лОписаниеШифрование = дОбщиеФункцииКлиент.ПолучитьЗашифрованныеДанныеBase64(лОписаниеТекст, ПарольШифрования);
		
		Если НЕ ЗначениеЗаполнено(лОписаниеШифрование) Тогда
			Возврат;	
		КонецЕсли;
		Объект.Зашифрован 	= Истина;
	Иначе
		//лОписаниеТекст = СтрЗаменить(лОписаниеТекст, Символы.ПС, "");
		лОписаниеШифрование = дОбщиеФункцииКлиент.ПолучитьРасшифрованныеДанныеBase64(лОписаниеТекст, ПарольШифрования);
		
		Если лОписаниеШифрование = Неопределено Тогда
			Возврат;	
		КонецЕсли;
		Объект.Зашифрован 	= Ложь;
	КонецЕсли;
	
	Если лОписаниеШифрование = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	лТеперьЗашифрован = Объект.Зашифрован;
	
	Если НЕ ПустаяСтрока(лОписаниеШифрование) Тогда			   
		Если НЕ лТеперьЗашифрован Тогда
			ОписаниеФорматУстановитьHTMLНаСервере(лОписаниеШифрование);
			ЗаполнитьОписание();
		Иначе
			Объект.Описание 	= лОписаниеШифрование;
		КонецЕсли;	
	КонецЕсли; 	
	
	Если лТеперьЗашифрован Тогда
		Элементы.Описание.ЦветФона 		= WebЦвета.СеребристоСерый;
		Элементы.Шифрование.ЦветФона 	= WebЦвета.СеребристоСерый;
	Иначе
		Элементы.Описание.ЦветФона 		= Новый Цвет;
		Элементы.Шифрование.ЦветФона 	= Новый Цвет;
	КонецЕсли;
	
	Элементы.ГруппаОписаниеФормат.Видимость 	= НЕ лТеперьЗашифрован;
	
	Элементы.Описание.Видимость 		= лТеперьЗашифрован;
	
	Элементы.Описание.ТолькоПросмотр 		= лТеперьЗашифрован;
	Элементы.ОписаниеФормат.ТолькоПросмотр 	= лТеперьЗашифрован;
	
	Элементы.Шифрование.Пометка 		= лТеперьЗашифрован;
	
КонецПроцедуры

&НаСервере
Процедура ОписаниеФорматУстановитьHTMLНаСервере(лОписаниеШифрование)
	
	ОписаниеФормат.УстановитьHTML(лОписаниеШифрование, Новый Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаписьСоСсылкой(Команда)
	
	лОбъектСсылка = Объект.Ссылка;
	Если ЗначениеЗаполнено(лОбъектСсылка) Тогда
		дОбщиеФункцииКлиент.СоздатьСоСсылкойНаВыбраннуюЗапись(лОбъектСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеДатыКакНачало(Команда)
	Объект.ДатаОкончание = Объект.Дата;
КонецПроцедуры

&НаКлиенте
Процедура ЦветаОбразецВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ЦветаСтрока 		= Объект.Цвета.Добавить();
		ЦветаСтрока.Цвет 	= Элемент.ТекущиеДанные.НазваниеЦвета;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокПриИзменении(Элемент)
	СимволовВЗаголовке = СтрДлина(Объект.Заголовок);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеревод(Команда)
	
	ОткрытьФорму("РегистрСведений.дПеревод.Форма.ФормаЗаписи",
	Новый Структура("ЗначенияЗаполнения", Новый Структура("Объект", Объект.Ссылка)));
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		лСостояние = Элемент.ТекущиеДанные.Состояние;
		
		обСостояния = Объект.Состояния;
		Если НЕ ЗначениеЗаполнено(обСостояния.НайтиСтроки(Новый Структура("ИмяСостояния", лСостояние))) Тогда
			лНоваяСтрока = обСостояния.Добавить();
			лНоваяСтрока.ИмяСостояния = лСостояние;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВремяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	лДата 		= Объект.Дата;
	лНоваяДата 	= Дата(Год(лДата), Месяц(лДата), День(лДата), Час(ВыбранноеЗначение), Минута(ВыбранноеЗначение), Секунда(ВыбранноеЗначение));
	ВыбранноеЗначение = лНоваяДата;
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеВремяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	лДата 		= Объект.ДатаОкончание;
	лНоваяДата 	= Дата(Год(лДата), Месяц(лДата), День(лДата), Час(ВыбранноеЗначение), Минута(ВыбранноеЗначение), Секунда(ВыбранноеЗначение));
	ВыбранноеЗначение = лНоваяДата;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОткрытьЗаписьНачалаСостоянияНаСервере(пАвтор, пДата, пСостояние)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	дСостояние.Регистратор КАК Регистратор,
		|	дСостояние.Состояние КАК Состояние
		|ИЗ
		|	РегистрНакопления.дСостояние КАК дСостояние
		|ГДЕ
		|	дСостояние.Период < &Период
		|	И дСостояние.Состояние = &Состояние
		|	И дСостояние.Автор = &Автор
		|	И дСостояние.Активно = 1
		|	И дСостояние.ВидДвижения = &ВидДвижения
		|
		|УПОРЯДОЧИТЬ ПО
		|	дСостояние.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Период"		, пДата);
	Запрос.УстановитьПараметр("Состояние"	, пСостояние);
	Запрос.УстановитьПараметр("Автор"		, пАвтор);
	Запрос.УстановитьПараметр("ВидДвижения"	, ВидДвиженияНакопления.Приход);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		лЗапись = Выборка.Регистратор;
	КонецЦикла;

	Возврат лЗапись;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьЗаписьНачалаСостояния(Команда)
	
	ТекДанные = Элементы.Состояние.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		лСсылкаНаЗаписьСостояния = ОткрытьЗаписьНачалаСостоянияНаСервере(Объект.Автор, Объект.Дата, Элементы.Состояние.ТекущиеДанные.Состояние);
		Если ЗначениеЗаполнено(лСсылкаНаЗаписьСостояния) Тогда
			ОткрытьЗначение(лСсылкаНаЗаписьСостояния);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследниеТегиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Если Поле.Имя = "ПоследниеТегиПериод" Тогда
			Если Элемент.ТекущиеДанные <> Неопределено Тогда
				ОткрытьЗначение(Элемент.ТекущиеДанные.Регистратор);
			КонецЕсли;
		Иначе	
			лИмяТега = Элемент.ТекущиеДанные.ИмяТега;
			
			обТеги = Объект.Теги;
			Если НЕ ЗначениеЗаполнено(обТеги.НайтиСтроки(Новый Структура("ИмяТега", лИмяТега))) Тогда
				лНоваяСтрока = обТеги.Добавить();
				лНоваяСтрока.ИмяТега = лИмяТега;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследнийРезультатВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		лИмяРезультата = Элемент.ТекущиеДанные.ИмяРезультата;
		
		обРезультат = Объект.Результат;
		Если НЕ ЗначениеЗаполнено(обРезультат.НайтиСтроки(Новый Структура("ИмяРезультата", лИмяРезультата))) Тогда
			лНоваяСтрока = обРезультат.Добавить();
			лНоваяСтрока.Время = Объект.Дата;
			ЗаполнитьЗначенияСвойств(лНоваяСтрока, Элемент.ТекущиеДанные);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры
 








 




 