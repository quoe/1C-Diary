
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	лДатаНачалаЗамера = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
	
	ЗаписьВремя		= Дата;
	ЗаписьЧас		= Час(Дата);
	
	НомерДня 		= День(Дата);
	ВсегоДней 		= День(КонецМесяца(Дата));
	
	МесяцНомер 		= Месяц(Дата);
	Месяц 			= Перечисления.дМесяцы[МесяцНомер - 1];
	
	ДеньНеделиНомер = ДеньНедели(Дата);
	ДеньНедели 		= Перечисления.дДниНедели[ДеньНеделиНомер - 1];
	
	Если ПустаяСтрока(Заголовок) И СтрЧислоСтрок(Описание) >= 1 И НЕ Зашифрован Тогда
		лСтрока 	= СтрПолучитьСтроку(Описание, 1);
		Если Лев(лСтрока, 2) = "**" Тогда //Это надо додумать, может удалять эту строку из описания в этом случае
			Заголовок 	= Сред(лСтрока, 3, 100);
			Описание 	= Сред(Описание, 3);
		ИначеЕсли СтрДлина(лСтрока) >= 100 И НЕ Зашифрован Тогда
			Заголовок 	= Лев(лСтрока, 98) + "..";
		Иначе
			Заголовок 	= лСтрока;
		КонецЕсли; 
	КонецЕсли;
	
	Заголовок 		= СокрЛП(Заголовок);
	Описание 		= СокрЛП(Описание);
	
	КоличествоСлов 		= КоличествоСлов(Описание);
	КоличествоСимволов 	= СтрДлина(Описание);
	
	КоличествоТеги		= Строка(Теги.Количество());
	КоличествоЭмоции	= Строка(Эмоции.Количество());
	КоличествоРезультат	= Строка(Результат.Количество());
	КоличествоВопросы	= Строка(Вопросы.Количество());
	
	КоличествоТегиСтрока		= ?(КоличествоТеги <> "0"		, ", Т: " + КоличествоТеги		, "");
	КоличествоЭмоцииСтрока		= ?(КоличествоЭмоции <> "0"		, ", Э: " + КоличествоЭмоции	, "");
	КоличествоРезультатСтрока	= ?(КоличествоРезультат <> "0"	, ", Р: " + КоличествоРезультат	, "");
	КоличествоВопросыСтрока		= ?(КоличествоВопросы <> "0"	, ", В: " + КоличествоВопросы	, "");
	
	ЗаписьИнфо 	= "С: " + Строка(КоличествоСлов) + ", З: " + Строка(КоличествоСимволов)
	+ КоличествоТегиСтрока + КоличествоЭмоцииСтрока + КоличествоРезультатСтрока + КоличествоВопросыСтрока;
	
	ТегиСписок 	= "";
	Для каждого Тег Из Теги Цикл
		ТегиСписок = ТегиСписок + Тег.ИмяТега.Наименование + ", ";
	КонецЦикла;
	ТегиСписок 	= Лев(ТегиСписок, СтрДлина(ТегиСписок) - 2); // Убираем запятую в конце
	
	// ИндикаторМесяца
	ПредставлениеИндикатора = "";
	
	ПроцентМесяца = Цел(10 * НомерДня / ВсегоДней);
	Для ии = 1 По ПроцентМесяца Цикл
		ПредставлениеИндикатора 	= ПредставлениеИндикатора + "|";
	КонецЦикла;
	
	Для ии = 1 По 10 - ПроцентМесяца Цикл
		ПредставлениеИндикатора 	= ПредставлениеИндикатора + ".";
	КонецЦикла;
	
	ИндикаторМесяца = ПредставлениеИндикатора;
	
	//Присвоим ссылку для этой записи
	Если ЗначениеЗаполнено(Ссылка) Тогда
		СсылкаНаОбъект 		= Ссылка;
		лЭтоНовыйДокумент 	= Ложь;
	Иначе
		СсылкаНаОбъект 		= ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			СсылкаНаОбъект 	= Документы.дДневник.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаНаОбъект);
		КонецЕсли;
		лЭтоНовыйДокумент 	= Истина;
	КонецЕсли;
	
	лЕстьКалендарь 	= ЗначениеЗаполнено(Календарь);
	
	// Данные для нового документа
	Если лЭтоНовыйДокумент Тогда // Т.е. новый документ
		Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда // Т.е. документ по дате создан сегодня
			//Адрес = "https://xml.meteoservice.ru/export/gismeteo/point/92.xml"; //Ярославль
			ИмяПользователяСистемы 	= ПараметрыСеанса.дИмяПользователяСистемы;
			ИмяКомпьютераСистемы 	= ПараметрыСеанса.дИмяКомпьютераСистемы;
			
			// Прогноз погоды
			лЧасовРазница 	= Константы.дПогодаРазницаЧасов.Получить(); // Если больше N часов, то погоду не записывать
			Если НЕ (ТекущаяДата() - Дата >= 60 * 60 * лЧасовРазница) Тогда
				дОбщиеФункцииСервер.ЗаписатьПрогнозПогоды(); 
			КонецЕсли; 
		КонецЕсли; 
		
		//Создаём запись в календаре
		Если лЕстьКалендарь И НЕ ЗначениеЗаполнено(Основание) Тогда //Т.е. форма была открыта из календаря, через планировщик
			лНовыйСправочник 				= Справочники.ЗаписиКалендаряСотрудника.СоздатьЭлемент();
			лНовыйСправочник.Календарь 		= Календарь;
			лНовыйСправочник.Начало 		= Дата;
			лНовыйСправочник.Окончание 		= ДатаОкончание;
			лНовыйСправочник.Наименование 	= Заголовок;
			лНовыйСправочник.Описание 		= Описание;
			лНовыйСправочник.Источник 		= СсылкаНаОбъект;
			
			лНовыйСправочник.Записать();
			
			Основание 	= лНовыйСправочник.Ссылка;
		ИначеЕсли ЗначениеЗаполнено(Основание) И ТипЗнч(Основание) = Тип("СправочникСсылка.ЗаписиКалендаряСотрудника") Тогда
			лЗаписьКалендаряОбъект 			= Основание.ПолучитьОбъект();
			лЗаписьКалендаряОбъект.Источник = СсылкаНаОбъект;
			лЗаписьКалендаряОбъект.Записать();
		КонецЕсли; 
	Иначе
		Если лЕстьКалендарь Тогда
			//Присвоим те же реквизиты записи для календаря
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаписиКалендаряСотрудника.Ссылка КАК ЗаписьКалендаря
			|ИЗ
			|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
			|ГДЕ
			|	ЗаписиКалендаряСотрудника.Источник = &Источник";
			
			Запрос.УстановитьПараметр("Источник", СсылкаНаОбъект);
			
			РезультатЗапроса 		= Запрос.Выполнить();
			ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				лЗаписьКалендаря 		= ВыборкаДетальныеЗаписи.ЗаписьКалендаря;
				лЗаписьКалендаряОбъект 	= лЗаписьКалендаря.ПолучитьОбъект();
				лЗаписьКалендаряОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
				Если НЕ ПометкаУдаления Тогда
					лЗаписьКалендаряОбъект.Начало 		= Дата;
					лЗаписьКалендаряОбъект.Окончание 	= ДатаОкончание;
					лЗаписьКалендаряОбъект.Наименование = Заголовок;
					лЗаписьКалендаряОбъект.Описание 	= Описание;
				КонецЕсли; 
				лЗаписьКалендаряОбъект.Записать();
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	// Заполнение по умолчанию
	Если НЕ ЗначениеЗаполнено(Автор) Тогда
		Автор 		= ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВажностьЗаписи) Тогда
		//Важность 	= Перечисления.дВажность.Обычное;
		ВажностьЗаписи 	= Справочники.дВажностьЗаписи.Обычное;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Категория) Тогда
		//ВидЗаписи 	= Перечисления.дВидЗаписи.Обычный;
		Категория 	= Справочники.дКатегория.Обычный;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Настроение) Тогда
		Настроение = Перечисления.дНастроения.Нормальное;
	КонецЕсли;
	
	Если НЕ Зашифрован Тогда
		// Частота слов
		ОбъектОписание 		= Описание;
		ШаблонЗамены 		= "[^a-zA-Zа-яА-ЯёЁ]";
		ОбъектОписаниеБезЗП = ОбработкаТекстаКлиентСервер.ЗаменитьСимволыПоШаблону(ОбъектОписание, ШаблонЗамены, " ");
		
		МассивИсходныхСлов 	= СтрРазделить(ОбъектОписаниеБезЗП, " ", Ложь);
		ПолучитьЧастотуСлов(МассивИсходныхСлов);
		
		//Предложения
		ШаблонЗамены 		= "[!?\n]";
		ОбъектОписаниеБезЗП = ОбработкаТекстаКлиентСервер.ЗаменитьСимволыПоШаблону(ОбъектОписание, ШаблонЗамены, ".");
		ОбъектОписаниеБезЗП = СтрЗаменить(ОбъектОписаниеБезЗП, "т.к.", "так как");
		ОбъектОписаниеБезЗП = СтрЗаменить(ОбъектОписаниеБезЗП, "т.е.", "то есть");
		ОбъектОписаниеБезЗП = СтрЗаменить(ОбъектОписаниеБезЗП, "т.о.", "таким образом");
		
		Строка = СокрЛП(ОбъектОписаниеБезЗП);
		Пока СтрНайти(Строка, "..") Цикл
			Строка = СтрЗаменить (Строка, "..",".");
		КонецЦикла;
		МассивПредложений 	= СтрРазделить(Строка, ".", Ложь);
		
		Предложения.Очистить();
		Для каждого лПредложение Из МассивПредложений Цикл
			
			Если СтрДлина(лПредложение) > 1 Тогда
				лСтрока 			= Предложения.Добавить();
				лСтрока.Предложение = СокрЛП(лПредложение);
				лСтрока.Слов 		= КоличествоСлов(лПредложение);
				лСтрока.Символов 	= СтрДлина(лПредложение);
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.КлючевыеОперации.МодульДневникаПередЗаписью, лДатаНачалаЗамера);
	
КонецПроцедуры

Функция ПолучитьЧастотуСлов(МассивИсходныхСлов)
	
	МассивСлов = Новый ТаблицаЗначений;
	МассивСлов.Колонки.Добавить("Слово", Новый ОписаниеТипов("Строка"));
	//МассивСлов.ЗагрузитьКолонку(МассивИсходныхСлов, "Слово");
	Для каждого ЭлМасс Из МассивИсходныхСлов Цикл
		
		Строка = МассивСлов.Добавить();
		Строка.Слово = НРег(ЭлМасс);
		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МассивСлов.Слово КАК Слово
	|ПОМЕСТИТЬ ВТ_МассивСлов
	|ИЗ
	|	&ВТ_МассивСлов КАК МассивСлов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПОДСТРОКА(ВТ_МассивСлов.Слово, 1, 50) КАК Слово,
	|	СУММА(1) КАК Частота
	|ИЗ
	|	ВТ_МассивСлов КАК ВТ_МассивСлов
	|
	|СГРУППИРОВАТЬ ПО
	|	ПОДСТРОКА(ВТ_МассивСлов.Слово, 1, 50)";
	
	Запрос.УстановитьПараметр("ВТ_МассивСлов", МассивСлов);		
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбъектЗначениеЧастотаСлов = ЧастотаСлов;
	ОбъектЗначениеЧастотаСловКопия = ЧастотаСлов.Выгрузить();
	
	ОбъектЗначениеЧастотаСлов.Очистить();
	ОбъектЗначениеЧастотаСлов.Загрузить(РезультатЗапроса.Выгрузить());
	
	Для каждого Строка Из ОбъектЗначениеЧастотаСлов Цикл
		
		СтрокаСловоТекущее 	= Строка.Слово; 
		Строка.СловоДлина 	= СтрДлина(СтрокаСловоТекущее);
		
		СтрокаСловаПредыдущее = ОбъектЗначениеЧастотаСловКопия.Найти(СтрокаСловоТекущее, "Слово");
		
		Если ЗначениеЗаполнено(СтрокаСловаПредыдущее) Тогда
			Строка.ВесСлова = СтрокаСловаПредыдущее.ВесСлова;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.ВесСлова) Тогда
			Строка.ВесСлова = 1;
		КонецЕсли; 
		
	КонецЦикла; 
	
	ОбъектЗначениеЧастотаСлов.Сортировать("ВесСлова Убыв, Частота Убыв, Слово Возр, СловоДлина Возр");
	
	//ДокументТовары.Загрузить(СортировкаТЗ);
	//
	//ДокументОбъект.Записать();
	
КонецФункции // ПолучитьЧастотуСлов()

Функция ПолучитьЧастотуСимволов(пСтрока)

	ТаблицаЧастот 	= Новый ТаблицаЗначений;
	ТаблицаЧастот.Колонки.Добавить("Элемент");
	ТаблицаЧастот.Колонки.Добавить("Частота", Новый ОписаниеТипов("Число"));
	
	лДлина 	= СтрДлина(пСтрока);
	
	Для сч = 1 По лДлина Цикл
		
		лЧтоИскать 			= Сред(пСтрока, сч, 1);
		лНайденныйЭлемент 	= ТаблицаЧастот.Найти(лЧтоИскать, "Элемент");
		Если лНайденныйЭлемент <> Неопределено Тогда
			лНайденныйЭлемент.Частота 	= лНайденныйЭлемент.Частота + 1;
		Иначе
			лНоваяСтрока 			= ТаблицаЧастот.Добавить();
			лНоваяСтрока.Элемент 	= лЧтоИскать;
			лНоваяСтрока.Частота 	= 1;
		КонецЕсли;	
	
	КонецЦикла; 
	
	Возврат ТаблицаЧастот;

КонецФункции // ПолучитьЧастотуСлов()
 
Функция КоличествоСлов(Строка)
	
	КоличествоСловВСтроке = ОбработкаТекстаКлиентСервер.КоличествоСлов(Строка);
	
	Возврат КоличествоСловВСтроке;
	
КонецФункции // КоличествоСлов()

Процедура ОбработкаПроведения(Отказ, Режим)

	лДатаНачалаЗамера = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
	
	// регистр дТеги
	Движения.дТеги.Записывать = Истина;
	Для Каждого ТекСтрокаТеги Из Теги Цикл
		Движение 		= Движения.дТеги.Добавить();
		Движение.Период = Дата;
		Движение.Автор 	= Автор;
		Движение.ИмяТега = ТекСтрокаТеги.ИмяТега;
	КонецЦикла;

	// регистр дЭмоции
	Движения.дЭмоции.Записывать = Истина;
	Для Каждого ТекСтрокаЭмоции Из Эмоции Цикл
		Движение 		= Движения.дЭмоции.Добавить();
		Движение.Период = Дата;
		Движение.Автор 	= Автор;
		Движение.Время 	= ТекСтрокаЭмоции.Время;
		Движение.ИмяЭмоции 		= ТекСтрокаЭмоции.ИмяЭмоции;
		Движение.Интенсивность 	= ТекСтрокаЭмоции.Интенсивность;
		Движение.Длительность 	= ТекСтрокаЭмоции.Длительность;
		Движение.Комментарий 	= ТекСтрокаЭмоции.Комментарий;
		Движение.Настроение 	= Настроение;
	КонецЦикла;

	// регистр дРезультат
	Движения.дРезультат.Записывать = Истина;
	Для Каждого ТекСтрокаРезультат Из Результат Цикл
		Движение 		= Движения.дРезультат.Добавить();
		Движение.Период = Дата;
		Движение.Автор 	= Автор;
		Движение.Время 	= ТекСтрокаРезультат.Время;
		Движение.ИмяРезультата 	= ТекСтрокаРезультат.ИмяРезультата;
		Движение.Параметр 		= ТекСтрокаРезультат.Параметр;
		Движение.Значение 		= ТекСтрокаРезультат.Значение;
		Движение.Комментарий 	= ТекСтрокаРезультат.Комментарий;
	КонецЦикла;

	// регистр дВопросОтвет
	Движения.дВопросОтвет.Записывать = Истина;
	Для Каждого ТекСтрокаВопросы Из Вопросы Цикл
		Движение 		= Движения.дВопросОтвет.Добавить();
		Движение.Период = Дата;
		Движение.Автор 	= Автор;
		Движение.Вопрос = ТекСтрокаВопросы.ИмяВопроса;
		Движение.Время 	= ТекСтрокаВопросы.Время;
		Движение.Ответ 	= Описание;
	КонецЦикла;
	
	Если Состояния.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	дСостояниеОстатки.Автор КАК Автор,
		|	дСостояниеОстатки.Состояние КАК Состояние,
		|	дСостояниеОстатки.АктивноОстаток КАК АктивноОстаток
		|ИЗ
		|	РегистрНакопления.дСостояние.Остатки(
		|			&Период,
		|			Автор = &Автор
		|				И Состояние В(&Состояние)) КАК дСостояниеОстатки";
		
		Запрос.УстановитьПараметр("Период"		, Дата);
		Запрос.УстановитьПараметр("Автор"		, Автор);
		Запрос.УстановитьПараметр("Состояние"	, Состояния.ВыгрузитьКолонку("ИмяСостояния"));
		
		РезультатЗапроса 	= Запрос.Выполнить();
		АктивныеСостоянияТЗ = РезультатЗапроса.Выгрузить();
		
		Движения.дСостояние.Записывать = Истина;
		Для Каждого ТекСтрокаСостояния Из Состояния Цикл
			лСостояниеПродолжается 	= ТекСтрокаСостояния.Продолжается;
			ИмяСостояния 			= ТекСтрокаСостояния.ИмяСостояния;
			Комментарий 			= ТекСтрокаСостояния.Комментарий;
			
			Если АктивныеСостоянияТЗ.Найти(ИмяСостояния, "Состояние") = Неопределено Тогда
				Движение 				= Движения.дСостояние.Добавить();
				Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
				Движение.Комментарий 	= Комментарий;
				Движение.Период 		= Дата;
				Движение.Автор 			= Автор;
				Движение.Состояние 		= ИмяСостояния;
				Движение.Активно 		= 1;
			КонецЕсли; 
			
			Если НЕ лСостояниеПродолжается Тогда
				Движение 				= Движения.дСостояние.Добавить();
				Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
				Движение.Комментарий 	= Комментарий;
				Движение.Период 		= ДатаОкончание;
				Движение.Автор 			= Автор;
				Движение.Состояние 		= ИмяСостояния;
				Движение.Активно 		= 1;
			КонецЕсли; 
			
			//лВидДвиженияНакопления = ?(лСостояниеПродолжается, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
		КонецЦикла;
	КонецЕсли; 
	
	// регистр дЗаписьДневника
	Движения.дЗаписьДневника.Записывать = Истина;
	Движение 					= Движения.дЗаписьДневника.Добавить();
	Движение.Период 			= Дата;
	Движение.Автор 				= Автор;
	Движение.Заголовок 			= Заголовок;
	Движение.Описание 			= Описание;
	Движение.КоличествоСимволов = КоличествоСимволов;
	Движение.КоличествоСлов 	= КоличествоСлов;
	Движение.Комментарий 		= Комментарий;
	Движение.Важность 			= Важность;
	Движение.ВидЗаписи 			= ВидЗаписи;
	Движение.Настроение 		= Настроение;
	Движение.Скрытое 			= Скрытое;
	Движение.ТегиСписок 		= ТегиСписок;
	Движение.ВопросыКоличество 	= Вопросы.Количество();
	Движение.ТегиКоличество 	= Теги.Количество();
	Движение.ЭмоцииКоличество 	= Эмоции.Количество();
	Движение.РезультатКоличество = Результат.Количество();
	
	Если НЕ Зашифрован Тогда
		// регистр дСтатистикаСлов 
		Движения.дСтатистикаСлов.Записывать = Истина;
		Движение 		= Движения.дСтатистикаСлов.Добавить();
		Движение.Период = Дата;
		Движение.Автор 	= Автор;
		Движение.КоличествоСлов 	= КоличествоСлов;
		Движение.КоличествоСимволов = КоличествоСимволов;
		
		// регистр дЧастотаСлов 
		Движения.дЧастотаСлов.Записывать = Истина;
		Для Каждого ТекСтрокаЧастотаСлов Из ЧастотаСлов Цикл
			Движение 		= Движения.дЧастотаСлов.Добавить();
			Движение.Период = Дата;
			Движение.Автор 	= Автор;
			Движение.Слово 	= ТекСтрокаЧастотаСлов.Слово;
			Движение.Частота 	= ТекСтрокаЧастотаСлов.Частота;
			Движение.ВесСлова 	= ТекСтрокаЧастотаСлов.ВесСлова;
		КонецЦикла;
		
		// регистр дПредложения
		лНомер = 0;
		Движения.дПредложения.Записывать = Истина;
		Для Каждого ТекСтрокаПредложения Из Предложения Цикл
			лНомер 			= лНомер + 1;
			лПредложение 	= ТекСтрокаПредложения.Предложение;
			
			Движение 		= Движения.дПредложения.Добавить();
			Движение.Период = Дата;
			Движение.Автор 	= Автор;
			Движение.Номер 	= лНомер; //Иначе не записывается
			Движение.Предложение 	= лПредложение;
			Движение.Слов 			= ТекСтрокаПредложения.Слов;
			Движение.Символов 		= ТекСтрокаПредложения.Символов;
		КонецЦикла;
		
		// Заполняем регистр длин слов
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	дДневникЧастотаСлов.Слово КАК Слово,
		|	дДневникЧастотаСлов.СловоДлина КАК СловоДлина
		|ИЗ
		|	Документ.дДневник.ЧастотаСлов КАК дДневникЧастотаСлов
		|ГДЕ
		|	НЕ дДневникЧастотаСлов.Слово В
		|				(ВЫБРАТЬ
		|					дДлинаСлов.Слово КАК Слово
		|				ИЗ
		|					РегистрСведений.дДлинаСлов КАК дДлинаСлов)
		|	И дДневникЧастотаСлов.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Движение = РегистрыСведений.дДлинаСлов.СоздатьНаборЗаписей();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НоваяЗапись 		= Движение.Добавить();
				НоваяЗапись.Слово 	= ВыборкаДетальныеЗаписи.Слово;
				НоваяЗапись.Длина 	= ВыборкаДетальныеЗаписи.СловоДлина;
			КонецЦикла;
			
			Движение.Записать(Ложь);
		КонецЕсли;
		
		//Заполняем частоту символов
		лТаблицаЧастот 	= ПолучитьЧастотуСимволов(Описание);
		
		Если ЗначениеЗаполнено(лТаблицаЧастот) Тогда
			Движения.дЧастотаСимволов.Записывать = Истина;
			Для Каждого ТекСтрокалТаблицаЧастот Из лТаблицаЧастот Цикл
				Движение 		= Движения.дЧастотаСимволов.Добавить();
				Движение.Период = Дата;
				Движение.Автор 	= Автор;
				Движение.Символ = ТекСтрокалТаблицаЧастот.Элемент;
				Движение.Частота= ТекСтрокалТаблицаЧастот.Частота;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	//дПереводитьЗапись
	лПеревод = дОбщиеФункцииСервер.ПеревестиТекстЧерезЯндекс(Описание);
	Если НЕ Зашифрован И НЕ НеПереводить И ЗначениеЗаполнено(лПеревод) Тогда
		лМенеджерЗаписи 				= РегистрыСведений.дПеревод.СоздатьМенеджерЗаписи();
		лМенеджерЗаписи.Объект 			= Ссылка;
		лМенеджерЗаписи.ЯзыкОригинал 	= Справочники.дЯзыки.Русский;
		лМенеджерЗаписи.ЯзыкПеревод 	= Справочники.дЯзыки.АнглийскийМашинный;
		лМенеджерЗаписи.Перевод 		= лПеревод;
		
		лМенеджерЗаписи.Записать(Истина);
	КонецЕсли;

	ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.КлючевыеОперации.МодульДневникаОбработкаПроведения, лДатаНачалаЗамера);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ОбработкаСобытияПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

// Вызывается из события объекта ПриКопировании для контроля заполняемых реквизитов
//
// Параметры
//  НовыйОбъект        - ДокументОбъект - Документ, создаваемый путем копирования
//  ОбъектКопирования  - ДокументОбъект, Структура - копируемый документ
//
Процедура ОбработкаСобытияПриКопировании(НовыйОбъект, ОбъектКопирования) Экспорт
	
	// Заполняем реквизиты из объекта копирования, исключив некоторые реквизиты 
	ЗаполнитьЗначенияСвойств(НовыйОбъект, ОбъектКопирования, "", "Ссылка, Дата, ПометкаУдаления, Проведен, Автор, Скрытое, ИмяКомпьютераСистемы, ИмяПользователяСистемы");
	
КонецПроцедуры

#Область ПрограммныйИнтерфейсКалендаряСотрудника

Процедура ОбновитьЗаписьКалендаряПриЗаписиИсточника(ЗаписиПоИсточнику) Экспорт
	
	//Если ТипЗаписиДневника = Перечисления.ТипыСобытий.Запись Тогда 
	//	Возврат;
	//КонецЕсли;
	//
	//// Запись календаря существует только для Личной встречи, Телефонного звонка и Прочего события.
	//Если ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо
	//	Или ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS Тогда
	//	
	//	Возврат;
	//КонецЕсли;
	//
	//// Отмена всех существующих записей календарей по событию в случае очистки календаря в событии или установки пометки удаления
	//Если ПометкаУдаления Или Не ЗначениеЗаполнено(КалендарьСотрудника) Тогда
	//	
	//	Для Каждого ЗаписьКалендаря Из ЗаписиПоИсточнику Цикл
	//		ЗаписьКалендаря = ЗаписьКалендаря.ПолучитьОбъект();
	//		ЗаписьКалендаря.УстановитьПометкуУдаления(Истина);
	//	КонецЦикла;
	//	
	//	Возврат;
	//	
	//КонецЕсли;
	//
	//Если ЗаписиПоИсточнику.Количество() = 0 Тогда
	//	
	//	ЗаписьКалендаря = Справочники.ЗаписиКалендаряСотрудника.СоздатьЭлемент();
	//	ЗаписьКалендаря.УстановитьНовыйКод();
	//	
	//Иначе
	//	
	//	ЗаписьКалендаря = ЗаписиПоИсточнику[0].ПолучитьОбъект();
	//	
	//	Если ЗаписьКалендаря.ПометкаУдаления Тогда
	//		ЗаписьКалендаря.УстановитьПометкуУдаления(Ложь);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//ОбменСGoogle.ОбработатьСменуКалендаря(ЗаписьКалендаря, КалендарьСотрудника);
	//
	//ЗаписьКалендаря.Наименование	= Тема;
	//ЗаписьКалендаря.Источник		= Ссылка;
	//ЗаписьКалендаря.Календарь		= КалендарьСотрудника;
	//ЗаписьКалендаря.Начало			= Дата;
	//ЗаписьКалендаря.Окончание		= ОкончаниеСобытия;
	//ЗаписьКалендаря.Описание		= Содержание;
	//
	//ЗаписьКалендаря.Записать();
	
КонецПроцедуры

Процедура ОбновитьИсточникПриИзмененииЗаписиКалендаря(ЭлементыПланировщика) Экспорт
	
	Если ЭлементыПланировщика.Количество() > 0 Тогда
		Дата			= ЭлементыПланировщика[0].Начало;
		ДатаОкончание	= ЭлементыПланировщика[0].Конец;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДозаполнитьПоУмолчанию()
	
	//Если ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо
	//	И ТипСобытия <> Перечисления.ТипыСобытий.СообщениеSMS Тогда
	//	
	//	Если НЕ ЗначениеЗаполнено(НачалоСобытия) Тогда
	//		НачалоСобытия = ТекущаяДатаСеанса();
	//	КонецЕсли;
	//	
	//	Если НЕ ЗначениеЗаполнено(ОкончаниеСобытия) Тогда
	//		ОкончаниеСобытия = НачалоСобытия + 1800;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если Не ЗначениеЗаполнено(КалендарьСотрудника) Тогда
	//	КалендарьСотрудника = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойКалендарь");
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти