
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ОписанияОбластейДоступа") Тогда
		ЗаполнитьОбластиДоступа(Параметры.ОписанияОбластейДоступа);
	Иначе
		ЗаполнитьОбластиДоступа(ОписанияВсехОбластейДоступа());
	КонецЕсли;
	
	ИдентификацияПриложения = РегистрыСведений.CRM_СеансовыеДанныеGoogle.ИдентификацияПриложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗапроситьПодтверждениеДоступа();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура БраузерДокументСформирован(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьСобытиеБраузерДокументСформирован", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииОбластиДоступа(Элемент)
	
	ЗапроситьПодтверждениеДоступа();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводТокенаЗапроса(Команда)
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Выполняется обработка токена запроса'"));
	
	ПодключитьОбработчикОжидания("ОбработатьПолучениеТокенаЗапроса", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимАвторизацииВВебКлиентеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.РежимАвторизации.ТекущаяСтраница = Элементы.АвторизацияВВебКлиенте;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция АдресЗапросаНаПодтверждениеДоступа(БраузерВОтдельномОкне)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	"%1?scope=%2&state=%3&redirect_uri=%4&response_type=code&client_id=%5&approval_prompt=force",
	ИдентификацияПриложения.auth_uri,											 // 1
	ПараметрОбластьДоступа(),													 // 2
	ПараметрАвторизации(ИдентификаторАвторизации, БраузерВОтдельномОкне),		 // 3
	CRM_ОбменСGoogleКлиентСервер.АдресПеренаправления(ИдентификацияПриложения),	 // 4
	ИдентификацияПриложения.client_id);											 // 5
	
КонецФункции

&НаКлиенте
Функция ПараметрОбластьДоступа()
	
	Результат = Новый Массив;
	
	Для Каждого ТекОбластьДоступа Из ОбластиДоступа Цикл
		
		Если Не ТекОбластьДоступа.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекОбластьДоступа.ОбластьДоступа) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ТекОбластьДоступа.ОбластьДоступа);
		
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, " ");
	
КонецФункции

// Выполняет заполнение таблицы формы ОбластиДоступа на основании пер
//
// Параметры:
//  ОписанияОбластейДоступа	 - Массив - массив структур,
//  описания полей см. в ОбменСGoogleКлиентСервер.НовоеОписаниеОбластиДоступа()
//
&НаСервере
Процедура ЗаполнитьОбластиДоступа(ОписанияОбластейДоступа)
	
	ОбластиДоступа.Очистить();
	
	Для Каждого ЭлементОбластиДоступа Из Элементы.ОбластиДоступа.ПодчиненныеЭлементы Цикл
		Элементы.Удалить(ЭлементОбластиДоступа);
	КонецЦикла;
	
	Для Индекс = 0 По ОписанияОбластейДоступа.ВГраница() Цикл
		
		ЗаполнитьЗначенияСвойств(ОбластиДоступа.Добавить(), ОписанияОбластейДоступа[Индекс]);
		НовыйЭлемент = Элементы.Добавить(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ОбластьДоступа%1", Формат(Индекс, "ЧГ=")),
		Тип("ПолеФормы"),
		Элементы.ОбластиДоступа);
		
		НовыйЭлемент.ПутьКДанным = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ОбластиДоступа[%1].Использование", Индекс);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		НовыйЭлемент.Заголовок = ОписанияОбластейДоступа[Индекс].Представление;
		НовыйЭлемент.Доступность = ОписанияОбластейДоступа[Индекс].Редактирование;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииОбластиДоступа");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОписанияВсехОбластейДоступа()
	
	Результат = Новый Массив;
	
	Для Каждого ТекОбластьДоступа Из Перечисления.CRM_ОбластиДоступаGoogle Цикл
		
		ОписаниеОбластиДоступа = CRM_ОбменСGoogleКлиентСервер.НовоеОписаниеОбластиДоступа();
		ОписаниеОбластиДоступа.Представление = ТекОбластьДоступа;
		ОписаниеОбластиДоступа.ОбластьДоступа = CRM_ОбменСGoogleКлиентСервер.ОбластьДоступа(ТекОбластьДоступа);
		
		ОписаниеОбластиДоступа.Использование = Ложь;
		ОписаниеОбластиДоступа.Редактирование = Истина;
		
		Результат.Добавить(ОписаниеОбластиДоступа);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗапроситьПодтверждениеДоступа()
	
	ИдентификаторАвторизации = Новый УникальныйИдентификатор;
	
	
	Элементы.РежимАвторизации.ТекущаяСтраница = Элементы.АвторизацияВВебКлиенте;
	
	
	Если ИдентификацияПриложения.ВидИдентификации = "web" Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПараметрыОбработчикаОжидания.МаксимальныйИнтервал = 5;
		ПодключитьОбработчикОжидания("ПроверитьТокенЗапроса", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрАвторизации(ИдентификаторАвторизации, БраузерВОтдельномОкне)
	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	"id=%1;zone=%2%3",
	ИдентификаторАвторизации,
	Формат(ОбщегоНазначения.ЗначениеРазделителяСеанса(), "ЧГ="),
	?(БраузерВОтдельномОкне, ";closebrowser=true", ""));
	
	Возврат КодироватьСтроку(Результат, СпособКодированияСтроки.КодировкаURL);
	
КонецФункции

&НаКлиенте
Процедура АвторизоватьсяВGoogle(Команда)
	
	ПерейтиПоНавигационнойСсылке(АдресЗапросаНаПодтверждениеДоступа(Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеБраузерДокументСформирован()
	
	Если Элементы.Браузер.Документ = Неопределено Тогда
		Элементы.РежимАвторизации.ТекущаяСтраница = Элементы.АвторизацияВВебКлиенте;
		Возврат;
	КонецЕсли;
	
	СтруктураЗаголовка = СтруктураЗаголовка(Элементы.Браузер.Документ.title);
	
	Если СтруктураЗаголовка.Статус=СтатусОтказ() Тогда
		СтруктураЗаголовка.Параметры.Свойство("error", КодОшибки);
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Ошибка при получении токена доступа'"),,
		КодОшибки,
		БиблиотекаКартинок.Ошибка32);
		Закрыть(Новый Структура);
		Возврат;
	КонецЕсли;
	
	СтруктураЗаголовка.Параметры.Свойство("code", ТокенЗапроса);
	
	ОбработатьПолучениеТокенаЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТокенЗапроса()
	
	ТокенЗапроса = ТокенЗапросаНаСервере(ИдентификаторАвторизации);
	
	Если ЗначениеЗаполнено(ТокенЗапроса) Тогда
		ОбработатьПолучениеТокенаЗапроса();
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("ПроверитьТокенЗапроса", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТокенЗапросаНаСервере(ПараметрСеансаАвторизации)
	
	Возврат РегистрыСведений.CRM_ДанныеАвторизацииGoogle.ТокенЗапроса(ПараметрСеансаАвторизации);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолучениеТокенаЗапроса()
	
	Если Не ЗначениеЗаполнено(ТокенЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
	НСтр("ru = 'Токен запроса получен, выполняется обмен на токен доступа...'"),,,
	БиблиотекаКартинок.Информация32);
	
	СеансовыеДанные = ОбменятьТокенЗапросаНаСеансовыеДанные(
	ТокенЗапроса,
	ИдентификацияПриложения,
	ПараметрОбластьДоступа());
	
	Если CRM_ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Ошибка при получении токена доступа'"),,,
		БиблиотекаКартинок.Ошибка32);
	Иначе
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Токен доступа получен успешно'"),,,
		БиблиотекаКартинок.Успешно32);
	КонецЕсли;
	
	Закрыть(СеансовыеДанные);

КонецПроцедуры

Функция ОбменятьТокенЗапросаНаСеансовыеДанные(ТокенЗапроса, ИдентификацияПриложения, ОбластьДанных)
	
	АдресДляПолученияТокенаДоступа = ОбщегоНазначенияКлиентСервер.СтруктураURI(
	ИдентификацияПриложения.token_uri);
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(АдресДляПолученияТокенаДоступа.Схема);

	HTTPСоединение = Новый HTTPСоединение(
		АдресДляПолученияТокенаДоступа.Хост,
		АдресДляПолученияТокенаДоступа.Порт,,,
		ИнтернетПрокси,,
		Новый ЗащищенноеСоединениеOpenSSL);
	
	ЗапросHTTP = Новый HTTPЗапрос;
	ЗапросHTTP.АдресРесурса = АдресДляПолученияТокенаДоступа.ПутьНаСервере;
	ЗапросHTTP.Заголовки["Content-Type"] = "application/x-www-form-urlencoded";
	ЗапросHTTP.УстановитьТелоИзСтроки(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"code=%1&client_id=%2&client_secret=%3&redirect_uri=%4&grant_type=authorization_code",
			ТокенЗапроса,
			ИдентификацияПриложения.client_id,
			ИдентификацияПриложения.client_secret,
			CRM_ОбменСGoogleКлиентСервер.АдресПеренаправления(ИдентификацияПриложения)));
	
	ОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветHTTP.ПолучитьТелоКакСтроку());
	Результат = ПрочитатьJSON(ЧтениеJSON);
	
	Результат.Вставить("scope", СтрЗаменить(ОбластьДанных, " ", "+"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураЗаголовка(Знач ЗаголовокВебСтраницы)
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", "");
	Результат.Вставить("Параметры", Новый Структура);
	
	КомпонентыЗаголовка = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗаголовокВебСтраницы, " ", Ложь);
	
	Если Не ЗначениеЗаполнено(КомпонентыЗаголовка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Статус = КомпонентыЗаголовка[0];
	
	Если КомпонентыЗаголовка.Количество()=1 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Параметры = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(КомпонентыЗаголовка[1], "&");
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусОтказ()
	
	Возврат "Denied"; // Не локализуется
	
КонецФункции

#КонецОбласти
