#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура по переданной ссылке на задачу расчитывает и записывает в регистр сведения о взаимодействиях по задаче.
//
//	Параметры:
//		Задачи - СправочникСсылка.узЗадачи, Массив - задачи, в рамках которых рассчитываются показатели.
//		Отказ - Булево - признак прерывания обработки проведения
//
Процедура ОтразитьСостояниеЗадачи(Задачи, Отказ, Очередь = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Задачи) = Тип("Массив") Тогда
		МассивСсылок = Задачи;
	ИначеЕсли ТипЗнч(Задачи) = Тип("СправочникСсылка.узЗадачи") Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Задачи);
	Иначе
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = СтруктураПоискаПредыдущихСостояний();
	
	ТаблицаСостоянийЗадач = ТаблицаСостоянийЗадач(МассивСсылок);
	ТаблицаПредыдущихСостоянийЗадач = ТаблицаПредыдущихСостоянийЗадач(МассивСсылок);
	
	Для Каждого СтрокаТаблицы Из ТаблицаСостоянийЗадач Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		МассивДействующихСостояний = ТаблицаПредыдущихСостоянийЗадач.НайтиСтроки(СтруктураПоиска);
		
		СостояниеИзменено = НЕ Булево(МассивДействующихСостояний.Количество());
		
		Если СостояниеИзменено Тогда
			
			НаборЗаписей = РегистрыСведений.узСостояниеВзаимодействийПоЗадачам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Задача.Установить(СтрокаТаблицы.Задача);
			
			Если Не ЭтоПустаяЗапись(СтрокаТаблицы) Тогда
				СтрокаНабора = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаТаблицы);
			КонецЕсли;
			
			Попытка
				Если Очередь <> Неопределено Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				Иначе
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось отразить состояние взаимодействий по задаче: %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", СтрокаТаблицы.Задача);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.Справочники.узЗадачи, СтрокаТаблицы.Задача, ТекстСообщения);
			КонецПопытки;
			
		ИначеЕсли Очередь <> Неопределено Тогда
				
			НаборЗаписей = РегистрыСведений.узСостояниеВзаимодействийПоЗадачам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Задача.Установить(СтрокаТаблицы.Задача);
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаСостоянийЗадач(МассивЗадач)
	
	ПакетЗапросов = Новый Массив;	
	ПакетЗапросов.Добавить(ТекстЗапросаКоличестваФайловЗадачи());
	ПакетЗапросов.Добавить(ТекстЗапросаИнформацииОПисьмах("Входящее"));
	ПакетЗапросов.Добавить(ТекстЗапросаИнформацииОПисьмах("Исходящее"));
	ПакетЗапросов.Добавить(ТекстЗапросаСостоянияЗадач());
	
	ТекстЗапроса = СтрСоединить(ПакетЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	
	ТаблицаСостояний = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСостояний;
	
КонецФункции

Функция ТаблицаПредыдущихСостоянийЗадач(МассивЗадач)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостояниеВзаимодействий.Задача КАК Задача,
	|	СостояниеВзаимодействий.КоличествоПрисоединенныхФайлов КАК КоличествоПрисоединенныхФайлов,
	|	СостояниеВзаимодействий.КоличествоВходящихПисем КАК КоличествоВходящихПисем,
	|	СостояниеВзаимодействий.КоличествоИсходящихПисем КАК КоличествоИсходящихПисем,
	|	СостояниеВзаимодействий.ДатаПоследнегоВходящегоПисьма КАК ДатаПоследнегоВходящегоПисьма,
	|	СостояниеВзаимодействий.ДатаПоследнегоИсходящегоПисьма КАК ДатаПоследнегоИсходящегоПисьма,
	|	СостояниеВзаимодействий.КоличествоВложенийПисем КАК КоличествоВложенийПисем
	|ИЗ
	|	РегистрСведений.узСостояниеВзаимодействийПоЗадачам КАК СостояниеВзаимодействий
	|ГДЕ
	|	СостояниеВзаимодействий.Задача В(&МассивЗадач)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТекстЗапросаКоличестваФайловЗадачи()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ФайлыЗадач.ВладелецФайла КАК Задача,
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ПОМЕСТИТЬ ВтПрисоединенныеФайлы
	|ИЗ
	|	ЗадачиПрисоединенныеФайлы КАК ФайлыЗадач
	|ГДЕ
	|	ФайлыЗадач.ВладелецФайла В(&МассивЗадач)
	|	И &ЭтоГруппа = ЛОЖЬ
	|	И &ЭтоСлужебный = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ФайлыЗадач.ВладелецФайла
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Задача";
	
	ПустаяСсылка = Справочники.узЗадачи.ПустаяСсылка();
	ИмяСправочникаФайлов = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ПустаяСсылка);
	МетаданныеСправочникаФайлов = Метаданные.Справочники[ИмяСправочникаФайлов];
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗадачиПрисоединенныеФайлы", 
		МетаданныеСправочникаФайлов.ПолноеИмя());
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоГруппа",
		?(МетаданныеСправочникаФайлов.Иерархический, "ФайлыЗадач.ЭтоГруппа", "ЛОЖЬ"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоСлужебный",
		?(ОбщегоНазначения.ЕстьРеквизитОбъекта("Служебный", МетаданныеСправочникаФайлов), "ФайлыЗадач.Служебный", "ЛОЖЬ"));
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаИнформацииОПисьмах(НаправлениеПисьма)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПредметыВзаимодействий.Предмет КАК Справочник.узЗадачи) КАК Задача,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭлектронноеПисьмо.Ссылка) КАК КоличествоПисем,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенияПисьма.Ссылка) КАК КоличествоВложений,
	|	МАКСИМУМ(ЭлектронноеПисьмо.Дата) КАК ДатаПоследнегоПисьма
	|ПОМЕСТИТЬ ВтВзаимодействие
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыВзаимодействий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументЭлектронноеПисьмо КАК ЭлектронноеПисьмо
	|		ПО ПредметыВзаимодействий.Взаимодействие = ЭлектронноеПисьмо.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЭлектронноеПисьмоПрисоединенныеФайлы КАК ВложенияПисьма
	|		ПО ПредметыВзаимодействий.Взаимодействие = ВложенияПисьма.ВладелецФайла
	|			И &ЭтоГруппа = ЛОЖЬ
	|			И &ЭтоСлужебный = ЛОЖЬ
	|ГДЕ
	|	ПредметыВзаимодействий.Предмет В(&МассивЗадач)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредметыВзаимодействий.Предмет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Задача";
	
	ИмяДокументаПисьма = "ЭлектронноеПисьмо" + НаправлениеПисьма;
	ПустаяСсылка = Документы[ИмяДокументаПисьма].ПустаяСсылка();
	ИмяСправочникаФайлов = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ПустаяСсылка);
	МетаданныеСправочникаФайлов = Метаданные.Справочники[ИмяСправочникаФайлов];
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтВзаимодействие",
		"ВтВзаимодействие" + НаправлениеПисьма);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДокументЭлектронноеПисьмо",
		"Документ." + ИмяДокументаПисьма);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЭлектронноеПисьмо.Дата",
		?(НаправлениеПисьма = "Входящее", "ЭлектронноеПисьмо.ДатаПолучения", "ЭлектронноеПисьмо.ДатаОтправления"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЭлектронноеПисьмоПрисоединенныеФайлы", 
		МетаданныеСправочникаФайлов.ПолноеИмя());
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоГруппа",
		?(МетаданныеСправочникаФайлов.Иерархический, "ВложенияПисьма.ЭтоГруппа", "ЛОЖЬ"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоСлужебный",
		?(ОбщегоНазначения.ЕстьРеквизитОбъекта("Служебный", МетаданныеСправочникаФайлов), "ВложенияПисьма.Служебный", "ЛОЖЬ"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСостоянияЗадач()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СправочникЗадач.Ссылка КАК Задача,
	|	ЕСТЬNULL(ВтПрисоединенныеФайлы.Количество, 0) КАК КоличествоПрисоединенныхФайлов,
	|	ЕСТЬNULL(ВтВзаимодействиеВходящее.КоличествоПисем, 0) КАК КоличествоВходящихПисем,
	|	ЕСТЬNULL(ВтВзаимодействиеИсходящее.КоличествоПисем, 0) КАК КоличествоИсходящихПисем,
	|	ЕСТЬNULL(ВтВзаимодействиеВходящее.ДатаПоследнегоПисьма, ДАТАВРЕМЯ(1,1,1)) КАК ДатаПоследнегоВходящегоПисьма,
	|	ЕСТЬNULL(ВтВзаимодействиеИсходящее.ДатаПоследнегоПисьма, ДАТАВРЕМЯ(1,1,1)) КАК ДатаПоследнегоИсходящегоПисьма,
	|	ЕСТЬNULL(ВтВзаимодействиеВходящее.КоличествоВложений, 0) + ЕСТЬNULL(ВтВзаимодействиеИсходящее.КоличествоВложений, 0) КАК КоличествоВложенийПисем
	|ИЗ
	|	Справочник.узЗадачи КАК СправочникЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПрисоединенныеФайлы КАК ВтПрисоединенныеФайлы
	|		ПО СправочникЗадач.Ссылка = ВтПрисоединенныеФайлы.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтВзаимодействиеВходящее КАК ВтВзаимодействиеВходящее
	|		ПО СправочникЗадач.Ссылка = ВтВзаимодействиеВходящее.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтВзаимодействиеИсходящее КАК ВтВзаимодействиеИсходящее
	|		ПО СправочникЗадач.Ссылка = ВтВзаимодействиеИсходящее.Задача
	|ГДЕ
	|	СправочникЗадач.Ссылка В(&МассивЗадач)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СтруктураПоискаПредыдущихСостояний()
	
	СтруктураПоиска = Новый Структура;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.узСостояниеВзаимодействийПоЗадачам;
	
	Для каждого Поле Из МетаданныеРегистра.Измерения Цикл
		СтруктураПоиска.Вставить(Поле.Имя);
	КонецЦикла; 
	
	Для каждого Поле Из МетаданныеРегистра.Ресурсы Цикл
		СтруктураПоиска.Вставить(Поле.Имя);
	КонецЦикла; 
	
	Возврат СтруктураПоиска;
	
КонецФункции

Функция ЭтоПустаяЗапись(ЗаписьНабора)
	
	Возврат ЗаписьНабора.КоличествоПрисоединенныхФайлов = 0
		И ЗаписьНабора.КоличествоВходящихПисем = 0
		И ЗаписьНабора.КоличествоИсходящихПисем = 0;
	
КонецФункции

#КонецОбласти

#КонецЕсли
