#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// См. СтандартныеПодсистемыСервер.ПараметрРаботыРасширения.
Функция ПараметрРаботыРасширения(ИмяПараметра, БезУчетаВерсииРасширений = Ложь) Экспорт
	
	ВерсияРасширений = ?(БезУчетаВерсииРасширений, Справочники.ВерсииРасширений.ПустаяСсылка(), ПараметрыСеанса.ВерсияРасширений);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВерсияРасширений", ВерсияРасширений);
	Запрос.УстановитьПараметр("ИмяПараметра", ИмяПараметра);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыРаботыВерсийРасширений.ХранилищеПараметра
	|ИЗ
	|	РегистрСведений.ПараметрыРаботыВерсийРасширений КАК ПараметрыРаботыВерсийРасширений
	|ГДЕ
	|	ПараметрыРаботыВерсийРасширений.ВерсияРасширений = &ВерсияРасширений
	|	И ПараметрыРаботыВерсийРасширений.ИмяПараметра = &ИмяПараметра";
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ХранилищеПараметра.Получить();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	Возврат Неопределено;
	
КонецФункции

// См. СтандартныеПодсистемыСервер.УстановитьПараметрРаботыРасширения.
Процедура УстановитьПараметрРаботыРасширения(ИмяПараметра, Значение, БезУчетаВерсииРасширений = Ложь) Экспорт
	
	ВерсияРасширений = ?(БезУчетаВерсииРасширений, Справочники.ВерсииРасширений.ПустаяСсылка(), ПараметрыСеанса.ВерсияРасширений);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВерсияРасширений.Установить(ВерсияРасширений);
	НаборЗаписей.Отбор.ИмяПараметра.Установить(ИмяПараметра);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВерсияРасширений   = ВерсияРасширений;
	НоваяЗапись.ИмяПараметра       = ИмяПараметра;
	НоваяЗапись.ХранилищеПараметра = Новый ХранилищеЗначения(Значение);
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Вызывает принудительное заполнение всех параметров работы для текущей версии расширений.
Процедура ЗаполнитьВсеПараметрыРаботыРасширений() Экспорт
	
	Если Не Справочники.ВерсииРасширений.УстановленныеРасширенияДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнить идентификаторы объектов метаданных расширений.
	Если ЗначениеЗаполнено(ПараметрыСеанса.ПодключенныеРасширения) Тогда
		Обновить = Справочники.ИдентификаторыОбъектовРасширений.ИдентификаторыОбъектовТекущейВерсииРасширенийЗаполнены();
		СтандартныеПодсистемыПовтИсп.ИдентификаторыОбъектовМетаданныхПроверкаИспользования(Истина, Истина);
	Иначе
		Обновить = Истина;
	КонецЕсли;
	
	Если Обновить Тогда
		Справочники.ИдентификаторыОбъектовРасширений.ОбновитьДанныеСправочника();
	КонецЕсли;
	
	ИнтеграцияПодсистемБСП.ПриЗаполненииВсехПараметровРаботыРасширений();
	
КонецПроцедуры

// Вызывает принудительную очистку всех параметров работы для текущей версии расширений.
// Очищаются только регистры, справочники не изменяются. Вызывается, чтобы вызвать
// перезаполнение параметров работы расширений, например, при использовании параметра
// запуска ЗапуститьОбновлениеИнформационнойБазы.
// 
// Общий регистр ПараметрыРаботыВерсийРасширений очищается автоматически. Если используются
// собственные регистры сведений, которых хранят версии кэшей объектов метаданных расширений,
// тогда требуется подключиться к событию ПриОчисткеВсехПараметровРаботыРасширений
// общего модуля ИнтеграцияПодсистемБСП.
//
Процедура ОчиститьВсеПараметрыРаботыРасширений() Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		НаборЗаписей = РегистрыСведений.ИдентификаторыОбъектовВерсийРасширений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВерсияРасширений.Установить(ПараметрыСеанса.ВерсияРасширений);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВерсияРасширений.Установить(ПараметрыСеанса.ВерсияРасширений);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		ИнтеграцияПодсистемБСП.ПриОчисткеВсехПараметровРаботыРасширений();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Для общей формы УстановленныеРасширения.
Процедура ЗаполнитьВсеПараметрыРаботыРасширенийФоновоеЗадание(Параметры) Экспорт
	
	ТекстОшибки = "";
	НеподключенныеРасширения = "";
	
	Если Параметры.ИмяКонфигурации    <> Метаданные.Имя
	 Или Параметры.ВерсияКонфигурации <> Метаданные.Версия Тогда
		ТекстОшибки =
			НСтр("ru = 'Не удалось обновить все параметры работы расширений, так как
			           |изменилось имя или версия конфигурации - требуется перезапуск сеанса.'");
	КонецЕсли;
	
	Если Параметры.УстановленныеРасширения <> ПараметрыСеанса.УстановленныеРасширения Тогда
		ТекстОшибки =
			НСтр("ru = 'Не удалось обновить все параметры работы расширений,
			           |так как указанный состав расширений отличается от текущего.'");
	КонецЕсли;
	
	Если ТипЗнч(Параметры.ПроверяемыеРасширения) = Тип("Соответствие") Тогда
		Расширения = РасширенияКонфигурации.Получить(, ИсточникРасширенийКонфигурации.СеансАктивные);
		ПодключенныеРасширения = Новый Массив;
		Для Каждого Расширение Из Расширения Цикл
			ПодключенныеРасширения.Добавить(Расширение.Имя);
		КонецЦикла;
		Для Каждого ПроверяемоеРасширение Из Параметры.ПроверяемыеРасширения Цикл
			Если ПодключенныеРасширения.Найти(ПроверяемоеРасширение.Ключ) = Неопределено Тогда
				НеподключенныеРасширения = НеподключенныеРасширения
					 + ?(НеподключенныеРасширения = "", "", ", ") + ПроверяемоеРасширение.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		Попытка
			ЗаполнитьВсеПараметрыРаботыРасширений();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки",              ТекстОшибки);
	Результат.Вставить("НеподключенныеРасширения", НеподключенныеРасширения);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли