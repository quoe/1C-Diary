Процедура ЗаполнитьТекущиеДела() Экспорт
	ТЧТекущиеДела.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	узТекущиеДела.Ссылка КАК ТекущееДело,
	|	узТекущиеДела.Выполнено КАК Выполнено,
	|	узТекущиеДела.ГруппаТекущегоДела,
	|	узТекущиеДела.ТекстСодержания,
	|	узТекущиеДела.Автор,
	|	узТекущиеДела.ДатаТекущегоДела,
	|	узТекущиеДела.ДатаСоздания,
	|	узТекущиеДела.ДатаВыполнения,
	|	узТекущиеДела.Задача,
	|	узТекущиеДела.Вопрос,
	|	узТекущиеДела.ВключеноРегламентноеТекущееДело,
	|	узТекущиеДела.ИдентификаторРасписаниеРегламента,
	|	узТекущиеДела.ТекстСодержанияСтарое,	
	|	узТекущиеДела.Порядок КАК Порядок
	|ИЗ
	|	Справочник.узТекущиеДела КАК узТекущиеДела
	|ГДЕ
	|	узТекущиеДела.Автор = &Автор
	|	И НЕ узТекущиеДела.ПометкаУдаления
	|	И узТекущиеДела.ГруппаТекущегоДела В(&МассивГруппыТекущихДел)
	|	И ВЫБОР
	|			КОГДА узТекущиеДела.ДатаВыполнения = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ВЫБОР
	|						КОГДА НАЧАЛОПЕРИОДА(узТекущиеДела.ДатаТекущегоДела, ДЕНЬ) <= &НаДату
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	//|			КОГДА НАЧАЛОПЕРИОДА(узТекущиеДела.ДатаВыполнения, ДЕНЬ) = &НаДату
	|			КОГДА НАЧАЛОПЕРИОДА(узТекущиеДела.ДатаВыполнения, ДЕНЬ) >= &НаДату
	|				И НАЧАЛОПЕРИОДА(узТекущиеДела.ДатаТекущегоДела, ДЕНЬ) <= &НаДату
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Выполнено,
	|	ГруппаТекущегоДела.Порядок,
	|	Порядок
	|";
	
	МассивГруппыТекущихДел = Новый Массив();
	МассивГруппыТекущихДел.Добавить(ПредопределенноеЗначение("Справочник.узГруппыТекущихДел.ПустаяСсылка"));
	Если ПоказыватьСегодня Тогда
		МассивГруппыТекущихДел.Добавить(ПредопределенноеЗначение("Справочник.узГруппыТекущихДел.Сегодня"));
	Конецесли;
	Если ПоказыватьНаНеделе Тогда
		МассивГруппыТекущихДел.Добавить(ПредопределенноеЗначение("Справочник.узГруппыТекущихДел.НаНеделе"));
	Конецесли;
	Если ПоказыватьПозже Тогда
		МассивГруппыТекущихДел.Добавить(ПредопределенноеЗначение("Справочник.узГруппыТекущихДел.Позже"));
	Конецесли;
	Если ПоказыватьРегламентные Тогда
		МассивГруппыТекущихДел.Добавить(ПредопределенноеЗначение("Справочник.узГруппыТекущихДел.Регламентное"));
	Конецесли;
	
	Запрос.УстановитьПараметр("МассивГруппыТекущихДел", МассивГруппыТекущихДел);
	
	Запрос.УстановитьПараметр("Автор", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("НаДату", НаДату);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗРезультат = РезультатЗапроса.Выгрузить();
	//ТЗРезультат.Колонки.Добавить("ПорядокДоп",Новый ОписаниеТипов("Число"));
	//Для каждого СтрокаТЗРезультат из ТЗРезультат цикл
	//	пПорядокДоп = ПолучитьПорядоДоп(СтрокаТЗРезультат.Выполнено,СтрокаТЗРезультат.ДатаВыполнения,НаДату);	
	//	СтрокаТЗРезультат.ПорядокДоп = пПорядокДоп;	
	//Конеццикла;
	//
	//ТЗРезультат.Сортировать("ПорядокДоп,Порядок");
	
	ГруппаТекДел_Регламентное = ПредопределенноеЗначение("Справочник.узГруппыТекущихДел.Регламентное");	
	
	Для каждого СтрокаТЗРезультат из ТЗРезультат цикл
		СтрокаТЧТекущиеДела = ТЧТекущиеДела.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТекущиеДела,СтрокаТЗРезультат);
		СтрокаТЧТекущиеДела.НомерСтрокиОбработка = СтрокаТЧТекущиеДела.НомерСтроки;
		
		ЗаполнитьРасписаниеРегламентногоЗадания(СтрокаТЧТекущиеДела,ГруппаТекДел_Регламентное);
		
	КонецЦикла;
КонецПроцедуры 

Процедура ЗаполнитьРасписаниеРегламентногоЗадания(СтрокаТЧТекущиеДела,ГруппаТекДел_Регламентное)
	пГруппаТекущегоДела = СтрокаТЧТекущиеДела.ГруппаТекущегоДела;	
	
	пРасписаниеРегламентногоЗаданияПредставление = "<Расписание не задано>";
	
	СтрокаТЧТекущиеДела.РасписаниеРегламентногоЗаданияПредставление = пРасписаниеРегламентногоЗаданияПредставление;
	
	Если пГруппаТекущегоДела <> ГруппаТекДел_Регламентное Тогда
		Возврат;
	Конецесли;
	
	пИдентификаторРасписаниеРегламента = СтрокаТЧТекущиеДела.ИдентификаторРасписаниеРегламента;
	
	Если НЕ ЗначениеЗаполнено(пИдентификаторРасписаниеРегламента) Тогда
		СтрокаТЧТекущиеДела.РасписаниеРегламентногоЗаданияПредставление = пРасписаниеРегламентногоЗаданияПредставление;
		Возврат;
	Конецесли;
	
	ВТДопПараметры = Новый Структура();
	ВТДопПараметры.Вставить("ИдентификаторРасписаниеРегламента",пИдентификаторРасписаниеРегламента);
	РезультатФункции = Справочники.узТекущиеДела.ПолучитьРасписаниеРегламентногоЗадания(ВТДопПараметры);
	РасписаниеРегламентногоЗадания = РезультатФункции.РасписаниеРегламентногоЗадания;
	Если РасписаниеРегламентногоЗадания <> Неопределено Тогда
		пРасписаниеРегламентногоЗаданияПредставление = "" + РасписаниеРегламентногоЗадания;
    Конецесли;
	
	СтрокаТЧТекущиеДела.РасписаниеРегламентногоЗаданияПредставление = пРасписаниеРегламентногоЗаданияПредставление;
	
КонецПроцедуры 

Функция ПолучитьПорядоДоп(пВыполнено,пДатаВыполнения,пНаДату) Экспорт
	Возврат Справочники.узТекущиеДела.ПолучитьПорядоДоп(пВыполнено,пДатаВыполнения,пНаДату);
	////Такая же функция есть в форме обработки
	//пПорядокДоп = 10;
	//Если НЕ пВыполнено Тогда
	//	пПорядокДоп = 0;
	//Иначе
	//	Если НачалоДня(пДатаВыполнения) <> пНаДату Тогда
	//		пПорядокДоп = 1;
	//	Иначе
	//		пПорядокДоп = 2;
	//	Конецесли;
	//Конецесли;
	//Возврат пПорядокДоп;	
КонецФункции 

Процедура СохранитьТекущиеДела() Экспорт
	//ЭтоСегодня = НачалоДня(ТекущаяДата()) = НаДату;
	//Если ЭтоСегодня Тогда
		Для каждого СтрокаТЧТекущиеДела из ТЧТекущиеДела цикл
			СтрокаТЧТекущиеДела.НомерСтрокиОбработка = СтрокаТЧТекущиеДела.НомерСтроки;		
		Конеццикла;
		ТЧТекущиеДела.Сортировать("Выполнено,НомерСтрокиОбработка");
	//КонецЕсли;
	
	Для каждого СтрокаТЧТекущиеДела из ТЧТекущиеДела цикл
		СтрокаТЧТекущиеДела.ТекстСодержания = СокрЛП(СтрокаТЧТекущиеДела.ТекстСодержания);
		Если НЕ ЗначениеЗаполнено(СтрокаТЧТекущиеДела.ТекстСодержания) Тогда
			Продолжить;
		Конецесли;
		
		ТекущееДелоОбъект = ПолучитьТекущееДелоОбъект(СтрокаТЧТекущиеДела); 
		
		//Если НЕ ТекущееДелоОбъект.Ссылка.Пустая()
		//	И СокрЛП(ТекущееДелоОбъект.Ссылка.ТекстСодержания) <> СокрЛП(СтрокаТЧТекущиеДела.ТекстСодержания) Тогда
		//	пТекстСодержанияСтарое =  
		//		"----------------------РАНЕЕ-----"+ТекущаяДата()+"--------------------"
		//		+ Символы.ПС
		//		+ ТекущееДелоОбъект.ТекстСодержания
		//		+ Символы.ПС
		//		+ ТекущееДелоОбъект.ТекстСодержанияСтарое
		//		;
		//Конецесли;
		
		ЗаполнитьЗначенияСвойств(ТекущееДелоОбъект,СтрокаТЧТекущиеДела,,"Автор,ДатаСоздания,Порядок");
		
		//ТекущееДелоОбъект.ТекстСодержанияСтарое = пТекстСодержанияСтарое;
		ТекущееДелоОбъект.Наименование = ТекущееДелоОбъект.ТекстСодержания;		
		//Если ЭтоСегодня Тогда
			ТекущееДелоОбъект.Порядок = СтрокаТЧТекущиеДела.НомерСтроки;
		//Конецесли;
		Если СтрокаТЧТекущиеДела.Выполнено = Ложь Тогда
			ТекущееДелоОбъект.ДатаВыполнения = Дата(1,1,1);
		Конецесли;
		Если НЕ ЗначениеЗаполнено(ТекущееДелоОбъект.ДатаТекущегоДела) Тогда
			ТекущееДелоОбъект.ДатаТекущегоДела = ТекущееДелоОбъект.ДатаСоздания;	
		Конецесли;
		
		ТекущееДелоОбъект.Записать();
		СтрокаТЧТекущиеДела.ТекущееДело = ТекущееДелоОбъект.Ссылка;
	Конеццикла;
КонецПроцедуры 

Функция ПолучитьТекущееДелоОбъект(СтрокаТЧТекущиеДела) 
	Перем ТекущееДелоОбъект;
	
	пТекущееДело = СтрокаТЧТекущиеДела.ТекущееДело;
	
	Если ЗначениеЗаполнено(пТекущееДело) Тогда
		ТекущееДелоОбъект = пТекущееДело.ПолучитьОбъект();
		Возврат ТекущееДелоОбъект;		
	Конецесли;
	
	ТекущееДелоОбъект = СоздатьТекущееДело(СтрокаТЧТекущиеДела);
	
	Возврат ТекущееДелоОбъект;
КонецФункции 

Функция СоздатьТекущееДело(СтрокаТЧТекущиеДела) 
	ТекущееДелоОбъект = Справочники.узТекущиеДела.СоздатьЭлемент();
	ТекущееДелоОбъект.Автор = Пользователи.ТекущийПользователь();
	ТекущееДелоОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	ТекущееДелоОбъект.ДатаТекущегоДела = ТекущееДелоОбъект.ДатаСоздания;
	
	Возврат ТекущееДелоОбъект;
КонецФункции 

Процедура УбратьТекущееДело(МассивТекущихДел) Экспорт
	СохранитьТекущиеДела();

	ГруппаТекДел_Регламентное = ПредопределенноеЗначение("Справочник.узГруппыТекущихДел.Регламентное");
	
	Для каждого пТекущееДело из МассивТекущихДел цикл
		Если НЕ ЗначениеЗаполнено(пТекущееДело) Тогда
			Продолжить;
		Конецесли;
		
		ОтключитьРегламентныеТекущееДело(пТекущееДело,ГруппаТекДел_Регламентное);
		
		ТекущееДелоОбъект = пТекущееДело.ПолучитьОбъект();
		ТекущееДелоОбъект.ПометкаУдаления = Истина;
		ТекущееДелоОбъект.Записать();
		//ТекущееДелоОбъект.Удалить();			
	Конеццикла;	
	
	ЗаполнитьТекущиеДела();
КонецПроцедуры 

Процедура ОтключитьРегламентныеТекущееДело(пТекущееДело,ГруппаТекДел_Регламентное)
	
	Если пТекущееДело.ГруппаТекущегоДела <> ГруппаТекДел_Регламентное Тогда
		Возврат;
	Конецесли;
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ИдентификаторРасписаниеРегламента",пТекущееДело.ИдентификаторРасписаниеРегламента);
	ДопПараметры.Вставить("ВключеноРегламентноеТекущееДело",Ложь);
	ДопПараметры.Вставить("ТекущееДело",пТекущееДело);
	ДопПараметры.Вставить("РасписаниеРегламентногоЗадания",Новый РасписаниеРегламентногоЗадания);
	
	РезультатФункции = СоздатьОбновитьРегламентноеЗадание(ДопПараметры);
	
КонецПроцедуры 

Процедура ОбновитьНаСервере() Экспорт
	СохранитьТекущиеДела();
	ЗаполнитьТекущиеДела();
КонецПроцедуры 

Функция СоздатьОбновитьРегламентноеЗадание(ДопПараметры) Экспорт
	
	пВключеноРегламентноеТекущееДело = ДопПараметры.ВключеноРегламентноеТекущееДело;
	пРасписаниеРегламентногоЗадания = ДопПараметры.РасписаниеРегламентногоЗадания;
	пТекущееДело = ДопПараметры.ТекущееДело;
	
	РеглЗаданиеОбъект = ПолучитьРеглЗаданиеОбъект(ДопПараметры);
	
	РеглЗаданиеОбъект.Использование = пВключеноРегламентноеТекущееДело;
	РеглЗаданиеОбъект.Наименование = "Создание текущего дела: " + пТекущееДело;
	РеглЗаданиеОбъект.Расписание = пРасписаниеРегламентногоЗадания;	
	
	РеглЗаданиеОбъект.Записать();
	
	пИдентификаторРасписаниеРегламента = РеглЗаданиеОбъект.УникальныйИдентификатор;
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("ИдентификаторРасписаниеРегламента",пИдентификаторРасписаниеРегламента);
	РезультатФункции.Вставить("РасписаниеРегламентногоЗаданияПредставление",""+пРасписаниеРегламентногоЗадания);
	
	Возврат РезультатФункции;
КонецФункции          

Функция ПолучитьРеглЗаданиеОбъект(ДопПараметры) 
	Перем РеглЗаданиеОбъект;
	
	пИдентификаторРасписаниеРегламента = ДопПараметры.ИдентификаторРасписаниеРегламента;
	Если НЕ ЗначениеЗаполнено(пИдентификаторРасписаниеРегламента) Тогда
		пИдентификаторРасписаниеРегламента = Новый УникальныйИдентификатор();
	Конецесли;
	
	РеглЗаданиеОбъект = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(пИдентификаторРасписаниеРегламента);
	
	Если РеглЗаданиеОбъект = Неопределено Тогда
		РеглЗаданиеОбъект = СоздатьРегламентоеЗадание(ДопПараметры);
	Конецесли;
	
	Возврат РеглЗаданиеОбъект;
КонецФункции 

Функция СоздатьРегламентоеЗадание(ДопПараметры) 
	
	//пИдентификаторРасписаниеРегламента = ДопПараметры.ИдентификаторРасписаниеРегламента;
	//Если НЕ ЗначениеЗаполнено(пИдентификаторРасписаниеРегламента) Тогда
	//	пИдентификаторРасписаниеРегламента = Новый УникальныйИдентификатор();
	//Конецесли;
	
	пТекущееДело = ДопПараметры.ТекущееДело;
	
	//МассивТекРегламентныхДел = Новый Массив();
	//МассивТекРегламентныхДел.Добавить(пТекущееДело);
		
	РеглЗаданиеОбъект = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.узСозданиеТекущихДелПоРегламенту);	
	//РеглЗаданиеОбъект.Ключ = пИдентификаторРасписаниеРегламента;	
	РеглЗаданиеОбъект.Параметры.Добавить(пТекущееДело);
	
	Возврат РеглЗаданиеОбъект;
	
КонецФункции 

Процедура ОбновитьЧасыФактЗаДень() 
	
	ЧасыФактЗаДень = РегистрыНакопления.узФактПоЗадачам.ПолучитьЧасыФактЗаДень();
	
КонецПроцедуры 
