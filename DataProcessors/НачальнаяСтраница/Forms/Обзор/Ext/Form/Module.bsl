////////////////////////////////////////////////////////////////////////////////
//Обработка.НачальнаяСтраница.Форма.Обзор
//  Настраиваемая начальная страница с обзором финансовой ситуации
//
//Параметры формы:
//  Стандартные параметры формы
//  
////////////////////////////////////////////////////////////////////////////////
&НаСервере 
Перем НастройкиИндикаторов;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполнение дополнительных реквизитов
	ЗаполнитьДопРеквизитыФормы();
	
	// Предварительные изменения на форме.
	Элементы.СтраницаДинамикиОбразец.Видимость = Ложь;
	Элементы.СтраницаОстатковОбразец.Видимость = Ложь;
	ОбнулитьЗаголовкиШаблонов();
	
	// Восстанавливаем настройки пользователя
	НастройкиИндикаторов = АктуальныеНастройкиИндикаторов();
	
	ОбновитьЭлементыФормы(НастройкиИндикаторов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыполнитьЭтапОбновленияДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗагрузкаКурсовВалют" Или ИмяСобытия = "Записана операция" Или ИмяСобытия = "Записан элемент справочника" 
		Или ИмяСобытия = "Выполнено обновление ИБ" Или ИмяСобытия = "Изменена валюта учета" Или ИмяСобытия = "Выполнена синхронизация"
		Или ИмяСобытия = "Изменился список операций на период" Или ИмяСобытия = "Изменилась дата плановой операции"
		 Тогда
		
		ОбновитьДанныеСПроверкойДоступностиВвода();
		
	ИначеЕсли ДеньгиКлиент.ЭтоОповещениеОбУдаленииПомеченных(ИмяСобытия, Параметр, Источник) Тогда 
		
		ПеречитатьНастройкиСервер(); // При считывании происходит проверка актуальности ссылок и обновление настроек
		ОбновитьДанныеСПроверкойДоступностиВвода();
		
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти



#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодзаголовокОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЭтапОбновленияДанных = "ОтменаЗадания" Тогда
		ЭтапОбновленияДанных = "";
	КонецЕсли;
	Если Не ФормаДоступнаДляИзменений() И НавигационнаяСсылкаФорматированнойСтроки <> "mny:#ОтменитьОбновление" Тогда
		Возврат;
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "mny:#ОбновитьИндикаторы" Тогда
		ВыполнитьЭтапОбновленияДанных();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "mny:#ОтменитьОбновление" Тогда
		ОтменитьВыполнениеОбновления();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "mny:#ИзменитьНастройки" Тогда
		ОткрытьНастройкиОбзора();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "mny:#ВернутьНастройкиПоУмолчанию" Тогда
		ВернутьНастройкиПоУмолчанию();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "mny:#СообщитьВПоддержку" Тогда
		ОткрытьСообщениеВСлужбуПоддержки();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "mny:#ПредложитьУлучшение" Тогда
		СтандартнаяОбработка = Истина;
		НавигационнаяСсылкаФорматированнойСтроки = "http://goo.gl/forms/8ieBbvFY7yH0h4Iw2"
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияФормыНажатие(Элемент)
	
	СтруктураЭлемента = КлючиИндкатораИзИмениЭлемента(Элемент.Имя);
	
	Если Найти(СтруктураЭлемента.ИмяЭлемента, "ВводОпераций") = 1 Тогда
		ИмяВидаОперации = СтрЗаменить(СтруктураЭлемента.ИмяЭлемента, "ВводОпераций", "");
		Если ИмяВидаОперации = "МыДолжны" Или ИмяВидаОперации = "НамДолжны" Тогда
			ВыбратьИзМенюВидОперацииПоДолгам(Элемент, ИмяВидаОперации, СтруктураЭлемента);
		Иначе
			ОткрытьФормуНовойОперации(ИмяВидаОперации, СтруктураЭлемента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияФормыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(НавигационнаяСсылкаФорматированнойСтроки) Или Не ФормаДоступнаДляИзменений() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента = КлючиИндкатораИзИмениЭлемента(Элемент.Имя, НавигационнаяСсылкаФорматированнойСтроки);
	
	Если СтруктураЭлемента.Ссылка = "МенюНастроек" Тогда
		МенюИндикатораСобытийНажатие(Элемент);
	ИначеЕсли СтруктураЭлемента.Ссылка = "ЗагрузитьКурсы" Тогда
		ОткрытьЗагрузкуКурсовВалют();
	ИначеЕсли СтруктураЭлемента.Ссылка = "ВыбратьПериод" Тогда
		ДиалогВыбораПериодаВИндикаторе(Элемент);
	ИначеЕсли СтруктураЭлемента.Ссылка = "ВыбратьДату" Тогда
		ДиалогВводаДатыВИндикаторе(Элемент);
	ИначеЕсли СтруктураЭлемента.Ссылка = "СписокПросроченныхОпераций" Или СтруктураЭлемента.Ссылка = "СписокОперацийНаСегодня" Тогда
		ОткрытьСписокПлановыхОпераций();
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВиджетТекстЗаголовкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ФормаДоступнаДляИзменений() Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = НавигационнаяСсылкаФорматированнойСтроки;
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента = КлючиИндкатораИзИмениЭлемента(Элемент.Имя, НавигационнаяСсылкаФорматированнойСтроки);
	
	Если СтруктураЭлемента.Ссылка = "МенюНастроек" Тогда
		МенюИндикатораСобытийНажатие(Элемент);
	ИначеЕсли СтруктураЭлемента.Ссылка = "СсылкаЗаголовка" Тогда
		ОткрытьОтчетОстатка(СтруктураЭлемента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВиджетМенюНажатие(Элемент)
	
	СтруктураЭлемента = КлючиИндкатораИзИмениЭлемента(Элемент.Имя);
	Если Не ФормаДоступнаДляИзменений() Тогда
		Возврат;
	КонецЕсли;
	
	Меню = НовоеМенюИндикатора();
	Оповещение = Новый ОписаниеОповещения("МенюИндикатораСобытийНажатиеЗавершение", ЭтотОбъект, СтруктураЭлемента);
	ПоказатьВыборИзМеню(Оповещение, Меню, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура МенюИндикатораСобытийНажатие(Элемент)
	
	СтруктураЭлемента = КлючиИндкатораИзИмениЭлемента(Элемент.Имя);
	Если Не ФормаДоступнаДляИзменений() Тогда
		Возврат;
	КонецЕсли;
	
	Меню = НовоеМенюИндикатора();
	Оповещение = Новый ОписаниеОповещения("МенюИндикатораСобытийНажатиеЗавершение", ЭтотОбъект, СтруктураЭлемента);
	ПоказатьВыборИзМеню(Оповещение, Меню, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НачальнаяСтраницаМенюНажатие(Элемент)
	
	Если Не ФормаДоступнаДляИзменений() Тогда
		Возврат;
	КонецЕсли;
	
	Меню = Новый СписокЗначений;
	Меню.Добавить("НастройкиСтраницы", НСтр("ru='Изменить параметры'"));
	Меню.Добавить("ВернутьПараметрыПоУмолчанию", НСтр("ru='Вернуть параметры по умолчанию'"));
	Оповещение = Новый ОписаниеОповещения("НачальнаяСтраницаМенюНажатиеЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(Оповещение, Меню, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокПанелиОстаткиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(НавигационнаяСсылкаФорматированнойСтроки) Или Не ФормаДоступнаДляИзменений() Тогда
		Возврат;
	КонецЕсли;
	
	Если  НавигационнаяСсылкаФорматированнойСтроки = "mny:#ВыбратьПериод" Тогда
		ДиалогВыбораПериодаВИндикаторе(Элемент);
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаСтруктурыВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ФормаДоступнаДляИзменений() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента = КлючиИндкатораИзИмениЭлемента(Элемент.Имя);
	НастройкаИндикатора = СтруктураНастройкиИндикатораСобытий(СтруктураЭлемента.Ключ);
	Если НастройкаИндикатора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "Основной");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Новый СтандартныйПериод(НастройкаИндикатора.Период.ДатаНачала, НастройкаИндикатора.Период.ДатаОкончания));
	ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаОтчета);
	ПараметрыФормы.Отбор.Вставить("ПоТекущемуКурсу", Ложь);
	ПараметрыФормы.Отбор.Вставить("ИсключитьПеремещения",     Не НастройкаИндикатора.ДополнительныеПараметрыИндикатора.ВключатьПеремещения);
	ПараметрыФормы.Отбор.Вставить("ИсключитьСлужебныеСтатьи", Не НастройкаИндикатора.ДополнительныеПараметрыИндикатора.ОтображатьСлужебныеСтатьи);
	
	Если НастройкаИндикатора.ДополнительныеПараметрыИндикатора.ВидДенег <> ПредопределенноеЗначение("ПланСчетов.РазделыУчета.Деньги") Тогда
		ПараметрыФормы.Отбор.Вставить("ВидДенег", НастройкаИндикатора.ДополнительныеПараметрыИндикатора.ВидДенег);
	КонецЕсли;
	
	Если НастройкаИндикатора.ВидОбъектовУчета = "Расходы" Тогда
		ИмяОтчета = "Отчет.ОтчетПоСписаниямДенег.ФормаОбъекта";
		Если ТипЗнч(ЗначениеДиаграммы.Расшифровка) = Тип("ПеречислениеСсылка.ВидыРасходов") Тогда
			ПараметрыФормы.Отбор.Вставить("ВидРасхода", ЗначениеДиаграммы.Расшифровка);
		Иначе
			ПараметрыФормы.Отбор.Вставить("НазначениеРасхода", ЗначениеДиаграммы.Расшифровка);
		КонецЕсли;
	Иначе
		ИмяОтчета = "Отчет.ОтчетПоПоступлениямДенег.ФормаОбъекта";
		Если ТипЗнч(ЗначениеДиаграммы.Расшифровка) = Тип("ПеречислениеСсылка.ВидыДоходов") Тогда
			ПараметрыФормы.Отбор.Вставить("ВидДохода", ЗначениеДиаграммы.Расшифровка);
		Иначе
			ПараметрыФормы.Отбор.Вставить("ИсточникПоступления", ЗначениеДиаграммы.Расшифровка);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму(ИмяОтчета, ПараметрыФормы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаДинамикиВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ФормаДоступнаДляИзменений() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента = КлючиИндкатораИзИмениЭлемента(Элемент.Имя);
	НастройкаИндикатора = СтруктураНастройкиИндикатораСобытий(СтруктураЭлемента.Ключ);
	Если НастройкаИндикатора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Расшифровка = ЗначениеДиаграммы.Расшифровка;
	Если Расшифровка.ТипПериода = "ДЕНЬ" Тогда
		ПериодОтчета = Новый СтандартныйПериод(Расшифровка.Период, КонецДня(Расшифровка.Период));
	ИначеЕсли Расшифровка.ТипПериода = "МЕСЯЦ" Тогда
		ПериодОтчета = Новый СтандартныйПериод(Расшифровка.Период, КонецМесяца(Расшифровка.Период));
	ИначеЕсли Расшифровка.ТипПериода = "ГОД" Тогда
		ПериодОтчета = Новый СтандартныйПериод(Расшифровка.Период, КонецГода(Расшифровка.Период));
	Иначе
		ПериодОтчета = Новый СтандартныйПериод(НастройкаИндикатора.ДатаНачала, НастройкаИндикатора.ДатаОкончания);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ПериодОтчета", ПериодОтчета);
	ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаОтчета);
	ПараметрыФормы.Отбор.Вставить("ПоТекущемуКурсу", Ложь);
	ПараметрыФормы.Отбор.Вставить("ИсключитьПеремещения",     Не НастройкаИндикатора.ДополнительныеПараметрыИндикатора.ВключатьПеремещения);
	ПараметрыФормы.Отбор.Вставить("ИсключитьСлужебныеСтатьи", Не НастройкаИндикатора.ДополнительныеПараметрыИндикатора.ОтображатьСлужебныеСтатьи);
	
	Если НастройкаИндикатора.ДополнительныеПараметрыИндикатора.ВидДенег <> ПредопределенноеЗначение("ПланСчетов.РазделыУчета.Деньги") Тогда
		ПараметрыФормы.Отбор.Вставить("ВидДенег", НастройкаИндикатора.ДополнительныеПараметрыИндикатора.ВидДенег);
	КонецЕсли;
	
	Если Расшифровка.ВидПоказателя = "Расход" Тогда
		ИмяОтчета = "Отчет.ОтчетПоСписаниямДенег.ФормаОбъекта";
		ПараметрыФормы.Вставить("КлючВарианта", "ИсторияТрат");
	Иначе
		ИмяОтчета = "Отчет.ОтчетПоПоступлениямДенег.ФормаОбъекта";
		ПараметрыФормы.Вставить("КлючВарианта", "ИсторияПоступлений");
	КонецЕсли;
	 
	ОткрытьФорму(ИмяОтчета, ПараметрыФормы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаНакопленийВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ФормаДоступнаДляИзменений() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента = КлючиИндкатораИзИмениЭлемента(Элемент.Имя);
	НастройкаИндикатора = СтруктураНастройкиИндикатораСобытий(СтруктураЭлемента.Ключ);
	Если НастройкаИндикатора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Расшифровка = ЗначениеДиаграммы.Расшифровка;
	
	СтруктураПараметров = Новый Структура("НазначениеПерехода,Отбор,НавигационнаяСсылкаИсточникаПерехода,ТипИсточникаПерехода", 
			"ОбработкаРазделНакопленияОсновнаяФорма", Расшифровка, Неопределено, "РабочийСтол");
	ДеньгиВызовСервера.ЗаписатьПараметрПереходаПоСсылке(СтруктураПараметров);
	
	ПерейтиПоНавигационнойСсылке("e1cib/navigationpoint/desktop/ОбщаяКоманда.ОткрытьРазделНакопления");
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаБюджетаВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ФормаДоступнаДляИзменений() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента = КлючиИндкатораИзИмениЭлемента(Элемент.Имя);
	НастройкаИндикатора = СтруктураНастройкиИндикатораСобытий(СтруктураЭлемента.Ключ);
	Если НастройкаИндикатора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыОтчетаПоБюджету(ЗначениеДиаграммы.Расшифровка, НастройкаИндикатора);
	
	ОткрытьФорму("Отчет.ОтчетПоБюджету.Форма", ПараметрыФормы, ЭтаФорма, ВариантБюджета);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПлановВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ФормаДоступнаДляИзменений() Тогда
		Возврат;
	КонецЕсли;
	
	Расшифровка = ЗначениеДиаграммы.Расшифровка;
	ПараметрыФормы = Новый Структура;
	
	Если Расшифровка.Период = "Просрочено" Тогда
		ПараметрыФормы.Вставить("РазделКалендаря", 2);
	Иначе
		ПараметрыФормы.Вставить("РазделКалендаря", 1);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПлановыеОперации.Форма.ФормаКалендаря", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаКурсовВалютВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ФормаДоступнаДляИзменений() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента = КлючиИндкатораИзИмениЭлемента(Элемент.Имя);
	НастройкаИндикатора = СтруктураНастройкиИндикатораСобытий(СтруктураЭлемента.Ключ);
	Если НастройкаИндикатора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Расшифровка = ЗначениеДиаграммы.Расшифровка;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("Валюта", Расшифровка.Валюта);
	ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Новый СтандартныйПериод(НастройкаИндикатора.Период.ДатаНачала, НастройкаИндикатора.Период.ДатаОкончания));
	ПараметрыФормы.Вставить("КлючВарианта", "Основной");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.ОтчетПоКурсамВалют.Форма", ПараметрыФормы, ЭтотОбъект, Истина);
	
	
КонецПроцедуры

&НаКлиенте
Процедура КурсыВалютДобавитьНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	Если Не ФормаДоступнаДляИзменений() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента = КлючиИндкатораИзИмениЭлемента(Элемент.Имя);
	НастройкаИндикатора = СтруктураНастройкиИндикатораСобытий(СтруктураЭлемента.Ключ);
	Если НастройкаИндикатора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаИндикатора.ДополнительныеПараметрыИндикатора.СписокВалют.Количество() > 4 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента.Вставить("ТекущиеНастройки", НастройкаИндикатора);
	Оповещение = Новый ОписаниеОповещения("КурсыВалютДобавитьНажатиеЗавершение", ЭтотОбъект, СтруктураЭлемента);
	ПоказатьВводЗначения(Оповещение, , НСтр("ru='Выберите валюту'"), Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация3Нажатие(Элемент)
	ВыполнитьЭтапОбновленияДанных();
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокПанелиДинамикиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыполнитьЭтапОбновленияДанных();
КонецПроцедуры

#КонецОбласти



#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьИндикаторДинамики(Команда)
	ОткрытьНастройкуИндикатораСобытий("");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИндикаторОстатка(Команда)
	ОткрытьНастройкуИндикатораОстатка("");
КонецПроцедуры


#КонецОбласти



#Область СлужебныеПроцедурыИФункции

// Изменение, чтение и запись настроек индикаторов
#Область НастройкиИндикаторов

// Возвращает настройки пользователя или настройки по умолчанию, если настроек пользователя нет
&НаСервере
Функция ПрочитатьНастройкиПользователя()

	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(КлючОбъектаНастроекПользователя(), "НастройкиИндикаторов");
	Если СохраненныеНастройки = Неопределено Тогда
		СохраненныеНастройки = НовыеНастройкиИндикаторов();
		ЗаписатьНастройкиПользователя(СохраненныеНастройки);
	КонецЕсли;
	
	// При необходимости следует проверить актуальность настроек перед их использованием
	
	// Обновляем значения универсальных периодов
	ПроверитьНастройкиИндикаторов(СохраненныеНастройки);
	ОбновитьЗначенияВНастройках(СохраненныеНастройки);
	
	Возврат СохраненныеНастройки;

КонецФункции

&НаСервере
Процедура ПеречитатьНастройкиСервер()

	Если Не ПустаяСтрока(АдресНастроек) И ЭтоАдресВременногоХранилища(АдресНастроек) Тогда
		УдалитьИзВременногоХранилища(АдресНастроек);
	КонецЕсли;
	
	АдресНастроек = "";
	НастройкиИндикаторов = АктуальныеНастройкиИндикаторов();

КонецПроцедуры

// Устанавливает абсолютные значения дат по их относительным настройкам
&НаСервере
Процедура ОбновитьЗначенияВНастройках(НастройкиИндикаторов)

	// Обновляем значения реквизитов формы
	ВалютаОтчета             = НастройкиИндикаторов.ВалютаОтчета;
	НеОбновлятьАвтоматически = НастройкиИндикаторов.НеОбновлятьАвтоматически;
	
	//// Обновляем ключи индикаторов
	
	Если ЗначениеЗаполнено(НастройкиИндикаторов.ВариантБюджета) И ЗначениеЗаполнено(НастройкиИндикаторов.ВариантБюджета.ДетальностьПланирования) Тогда
		
		// Обновляем периодичность и даты по выбранному варианту бюджета
		НастройкиИндикаторов.ВидПериодаБюджета = НастройкиИндикаторов.ВариантБюджета.ДетальностьПланирования;
		
		ПериодПланирования = БюджетированиеСервер.НоваяСтрукрураБюджетногоПериода(НастройкиИндикаторов.ВариантБюджета, ТекущаяДата());
		НастройкиИндикаторов.Вставить("НачалоПериодаБюджета", ПериодПланирования.Начало);
		НастройкиИндикаторов.Вставить("КонецПериодаБюджета",  ПериодПланирования.Окончание);
		НастройкиИндикаторов.Вставить("КалендарноеНачалоПериодаБюджета", ПериодПланирования.КалендарноеНачало);
		НастройкиИндикаторов.Вставить("КалендарныйКонецПериодаБюджета",  ПериодПланирования.КалендарноеОкончание);
		
	Иначе
		// по умолчанию все устанавливается на начало месяца
		
		НастройкиИндикаторов.ВидПериодаБюджета = Перечисления.ПериодичностьПланирования.Месяц;
		
		НастройкиИндикаторов.Вставить("НачалоПериодаБюджета", НачалоМесяца(ТекущаяДата()));
		НастройкиИндикаторов.Вставить("КонецПериодаБюджета",  КонецМесяца(НастройкиИндикаторов.НачалоПериодаБюджета));
		НастройкиИндикаторов.Вставить("КалендарноеНачалоПериодаБюджета", НастройкиИндикаторов.НачалоПериодаБюджета);
		НастройкиИндикаторов.Вставить("КалендарныйКонецПериодаБюджета",  НастройкиИндикаторов.КонецПериодаБюджета);
		
	КонецЕсли;
	
	// Обновляем период остатков
	ОбновитьСтруктуруПериода(НастройкиИндикаторов.ПериодОстатков, НастройкиИндикаторов.ПериодОстатков.ВидПериода, 
						НастройкиИндикаторов.НачалоПериодаБюджета, НастройкиИндикаторов.КонецПериодаБюджета);
	
	// Обновляем значения в списке индикаторов динамики (событий)
	Для каждого СтрокаНастроек Из НастройкиИндикаторов.ИндикаторыДинамики Цикл
		
		ОбновитьСтруктуруПериода(СтрокаНастроек.Период, СтрокаНастроек.Период.ВидПериода, 
						НастройкиИндикаторов.НачалоПериодаБюджета, НастройкиИндикаторов.КонецПериодаБюджета);
		СтрокаНастроек.ПредыдущийПериод = ПрерыдущийПериод(СтрокаНастроек.Период, НастройкиИндикаторов);
		
	КонецЦикла;
	 

КонецПроцедуры

// Сохраняет настройки индикаторов в хранилище общих настроек
&НаСервереБезКонтекста 
Функция ЗаписатьНастройкиПользователя(Настройки)

	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(КлючОбъектаНастроекПользователя(), "НастройкиИндикаторов", Настройки);

КонецФункции

// Возвращает ключ настроек для записи в хранилище общих настроек
&НаКлиентеНаСервереБезКонтекста
Функция КлючОбъектаНастроекПользователя()

	Возврат "Обработка/НачальнаяСтраница/Обзор";

КонецФункции

// Возвращает структуру, заполненную по умолчанию настройками показателей
&НаСервере
Функция НовыеНастройкиИндикаторов()

	Возврат Обработки.НачальнаяСтраница.НовыеНастройкиИндикаторов();
	
КонецФункции

// Возвращает структуру настроек из временного хранилища
&НаСервере
Функция АктуальныеНастройкиИндикаторов()

	НастройкиИндикаторов = Неопределено;
	Если Не ПустаяСтрока(АдресНастроек) И ЭтоАдресВременногоХранилища(АдресНастроек) Тогда
		НастройкиИндикаторов = ПолучитьИзВременногоХранилища(АдресНастроек);
	КонецЕсли;
	
	Если НастройкиИндикаторов = Неопределено Тогда
		
		НастройкиИндикаторов = ПрочитатьНастройкиПользователя();
		ОбновитьАктуальныеНастройкиИндикаторов(НастройкиИндикаторов, Ложь);
		
	КонецЕсли;

	Возврат НастройкиИндикаторов;
	
КонецФункции

// Выполняет проверку настроек, удаляет лишние ссылки и неактуальные значения
&НаСервере
Процедура ПроверитьНастройкиИндикаторов(НастройкиИндикаторов)

	СохранитьИзменения = Ложь;
	
	// Проверяем вариант бюджета
	Если Не ЗначениеЗаполнено(НастройкиИндикаторов.ВариантБюджета) Или 
		Не ОбщегоНазначения.СсылкаСуществует(НастройкиИндикаторов.ВариантБюджета) Тогда
		СохранитьИзменения = Истина;
		НастройкиИндикаторов.ВариантБюджета = Константы.ОсновнойВариантБюджета.Получить();
	КонецЕсли;
	
	Если Не НастройкиИндикаторов.Свойство("НеОбновлятьАвтоматически") Тогда
		СохранитьИзменения = Истина;
		НастройкиИндикаторов.Вставить("НеОбновлятьАвтоматически", Ложь);
	КонецЕсли;
	Если Не НастройкиИндикаторов.Свойство("ОтключитьАнимацию") Тогда
		СохранитьИзменения = Истина;
		НастройкиИндикаторов.Вставить("ОтключитьАнимацию", Ложь);
	КонецЕсли;
	Если Не НастройкиИндикаторов.Свойство("ВалютаОтчета") Или Не ЗначениеЗаполнено(НастройкиИндикаторов.ВалютаОтчета) Тогда
		СохранитьИзменения = Истина;
		НастройкиИндикаторов.Вставить("ВалютаОтчета", ПараметрыСеанса.ВалютаУчета);
	КонецЕсли;
	Если Не НастройкиИндикаторов.Свойство("СуммыСКопейками") Тогда
		СохранитьИзменения = Истина;
		НастройкиИндикаторов.Вставить("СуммыСКопейками", Ложь);
	КонецЕсли;
	
	Для каждого НастройкаСобытия Из НастройкиИндикаторов.ИндикаторыДинамики Цикл
		
		Если НастройкаСобытия.ТипИндикатора = "ВводОпераций" Тогда
			НастройкаСобытия.Период = НоваяСтруктураПериода("НачалоПроизвольнойДаты", НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()));
		КонецЕсли;
		
		Если НастройкаСобытия.ДополнительныеПараметры.Свойство("СписокВалют") И НастройкаСобытия.ДополнительныеПараметры.СписокВалют <> Неопределено Тогда
			Если АктуальностьСсылокИзменилась(НастройкаСобытия.ДополнительныеПараметры.СписокВалют) Тогда
				СохранитьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ДопПараметрыПоУмолчанию = Обработки.НачальнаяСтраница.ДополнительныеПараметрыПоТипуИндикатора(НастройкаСобытия.ТипИндикатора);
		Для каждого КлючИЗначение Из ДопПараметрыПоУмолчанию Цикл
			Если Не НастройкаСобытия.ДополнительныеПараметры.Свойство(КлючИЗначение.Ключ) Тогда
				НастройкаСобытия.ДополнительныеПараметры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого НастройкаОстатка Из НастройкиИндикаторов.ИндикаторыОстатков Цикл
		
		Если НастройкаОстатка.Отбор.Свойство("ОбъектУчета") И НастройкаОстатка.Отбор.ОбъектУчета <> Неопределено Тогда
			Если АктуальностьСсылокИзменилась(НастройкаОстатка.Отбор.ОбъектУчета) Тогда
				СохранитьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НастройкаОстатка.Отбор.Свойство("ФинансоваяЦель") И НастройкаОстатка.Отбор.ФинансоваяЦель <> Неопределено Тогда
			Если АктуальностьСсылокИзменилась(НастройкаОстатка.Отбор.ФинансоваяЦель) Тогда
				СохранитьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Если СохранитьИзменения Тогда
		ОбновитьАктуальныеНастройкиИндикаторов(НастройкиИндикаторов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АктуальностьСсылокИзменилась(СписокСсылок)

	Результат = Ложь;
	
	Если СписокСсылокПустой(СписокСсылок) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТипСписка = ТипЗнч(СписокСсылок);
	КонтрольныйМассив = Новый Массив;
	Если ТипСписка = Тип("СписокЗначений") Тогда
		МетаданныеСправочника = СписокСсылок[0].Значение.Метаданные();
		КонтрольныйМассив = СписокСсылок.ВыгрузитьЗначения();
	ИначеЕсли ТипСписка = Тип("Массив") Тогда
		МетаданныеСправочника = СписокСсылок[0].Метаданные();
		КонтрольныйМассив = СписокСсылок;
	Иначе
		МетаданныеСправочника = СписокСсылок.Метаданные();
		КонтрольныйМассив.Добавить(СписокСсылок);
	КонецЕсли;
	
	// Проверяем наличие объекта
	Для каждого ЭлеметМассива Из КонтрольныйМассив Цикл
		Если Не ОбщегоНазначения.СсылкаСуществует(ЭлеметМассива) Тогда
			УдалитьСсылкуИзСпискаСсылок(СписокСсылок, ЭлеметМассива);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокСсылокПустой(СписокСсылок) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверяем активность объектов
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСсылок", СписокСсылок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник." + МетаданныеСправочника.Имя + " КАК Спр
	|ГДЕ
	|	Спр.Ссылка В(&СписокСсылок)
	|	И (Спр.Наименование ЕСТЬ NULL 
	|	  ИЛИ Не Спр.Активность)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		УдалитьСсылкуИзСпискаСсылок(СписокСсылок, Выборка.Ссылка);
		Результат = Истина;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьСсылкуИзСпискаСсылок(СписокСсылок, УдаляемаяСсылка)

	ТипСписка = ТипЗнч(СписокСсылок);
	Если ТипСписка = Тип("СписокЗначений") Тогда
		СписокСсылок.Удалить(СписокСсылок.НайтиПоЗначению(УдаляемаяСсылка));
	ИначеЕсли ТипСписка = Тип("Массив") Тогда
		СписокСсылок.Удалить(СписокСсылок.Найти(УдаляемаяСсылка));
	Иначе
		СписокСсылок = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокСсылокПустой(СписокСсылок)

	ТипСписка = ТипЗнч(СписокСсылок);
	Если СписокСсылок = Неопределено 
		Или ТипСписка = Тип("СписокЗначений") И СписокСсылок.Количество() = 0 
		Или ТипСписка = Тип("Массив") И СписокСсылок.Количество() = 0 Тогда
		
		Возврат Истина;
		
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьКлючиИндикаторов(СписокИндикаторов, Префикс)

	СписокИндикаторов.Сортировать("Порядок");
	Счетчик = 1;
	Для каждого СтрокаИндикатора Из СписокИндикаторов Цикл
		
		СтрокаИндикатора.Ключ = Префикс + "_" + Формат(Счетчик, "ЧДЦ=; ЧГ=");
		Счетчик = Счетчик + 1;
		
	КонецЦикла;

КонецПроцедуры

// Сохраняет во временном хранилище и в настройках пользователя указанные настройки индикаторов
&НаСервере
Процедура ОбновитьАктуальныеНастройкиИндикаторов(НастройкиИндикаторов, ОбновитьНастройкиПользователя = Истина)

	АдресНастроек = ПоместитьВоВременноеХранилище(НастройкиИндикаторов, УникальныйИдентификатор);
	
	// Обновление реквизитов для сокращения обращений на сервер
	ВариантБюджета          = НастройкиИндикаторов.ВариантБюджета;
	НачалоПериодаБюджета    = ?(ЗначениеЗаполнено(НастройкиИндикаторов.НачалоПериодаБюджета), НастройкиИндикаторов.НачалоПериодаБюджета, НачалоМесяца(ТекущаяДата()));
	КонецПериодаБюджета     = ?(ЗначениеЗаполнено(НастройкиИндикаторов.КонецПериодаБюджета), НастройкиИндикаторов.КонецПериодаБюджета, КонецМесяца(ТекущаяДата()));
	
	Если ОбновитьНастройкиПользователя Тогда
		ЗаписатьНастройкиПользователя(НастройкиИндикаторов);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВернутьнастройкиПоУмолчаниюСервер()

	НастройкиИндикаторов = НовыеНастройкиИндикаторов();
	ОбновитьЗначенияВНастройках(НастройкиИндикаторов);
	ОбновитьАктуальныеНастройкиИндикаторов(НастройкиИндикаторов);
	
	ОбновитьЭлементыФормы(НастройкиИндикаторов);

КонецПроцедуры

&НаКлиенте
Процедура ВернутьНастройкиПоУмолчанию()

	#Область ПоказатьВопрос
	ТекстВопроса = НСтр("ru='Все изменения настроек и добавленные индикаторы будут потеряны.
				|Вернуть настройки по умолчанию?'");
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ВернутьНастройкиПоУмолчаниюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Да'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Нет'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, НСтр("ru='Настройки начальной страницы'"));
	#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиОбзораСервер()

	АдресНастроек = "";
	НастройкиИндикаторов = АктуальныеНастройкиИндикаторов();
	ОбновитьЭлементыФормы(НастройкиИндикаторов);

КонецПроцедуры


//////////////////////////////////////////////////////////////////
// настройки индикаторов остатков

// Добавляет и возвращает строку в таблицу настроек индикатора остатков
&НаСервере
Функция НоваяНастройкаИндикаторовОстатков(СписокИндикаторов, РазделУчета, ВидОбъектаУчета, ЗаголовокРаздела = "", СкрыватьЕслиПусто = Ложь)

	Возврат Обработки.НачальнаяСтраница.НоваяНастройкаИндикаторовОстатков(СписокИндикаторов, РазделУчета, ВидОбъектаУчета, ЗаголовокРаздела, СкрыватьЕслиПусто);

КонецФункции


//////////////////////////////////////////////////////////////////
// настройки индикаторов динамики (событий)

// Возвращает строку настройки индикатора динамики
&НаСервере
Функция НоваяНастройкаИндикатораДинамики(СписокИндикаторов, ТипИндикатора, ВидОбъектовУчета, Заголовок = "")

	Возврат Обработки.НачальнаяСтраница.НоваяНастройкаИндикатораДинамики(СписокИндикаторов, ТипИндикатора, ВидОбъектовУчета, Заголовок);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидПериодаНастройкиИндикатораПоУмолчанию(ТипИндикатора, ВидОбъектовУчета)

	Возврат Обработки.НачальнаяСтраница.ВидПериодаНастройкиИндикатораПоУмолчанию(ТипИндикатора, ВидОбъектовУчета);
	
КонецФункции

// Возвращает локализованный заголовок индикатора по его типу и виду объектов учета
&НаСервереБезКонтекста
Функция ПредставлениеИндикатораДинамики(ТипИндикатора, ВидОбъектовУчета)

	Возврат Обработки.НачальнаяСтраница.ПредставлениеИндикатораДинамики(ТипИндикатора, ВидОбъектовУчета);

КонецФункции

#КонецОбласти 


// Обновление реквизитов формы и перерисовка блоков индикаторов
#Область ПерерисовкаИндикаторов

// В соответствии с настройками индикаторов обновляет реквизиты формы и ее элементы
&НаСервере
Процедура ОбновитьЭлементыФормы(НастройкиИндикаторов)

	// Переносим неудаляемые элементы на страницы образцов
	Элементы.Переместить(Элементы.ДобавлениеОстатка,          Элементы.СтраницаОстатковОбразец);
	Элементы.Переместить(Элементы.ГруппаПодзаголовокОстатка,  Элементы.СтраницаОстатковОбразец);
	Элементы.Переместить(Элементы.ДобавлениеДинамики,         Элементы.СтраницаДинамикиОбразец);
	
	// Обновляем ключи индикаторов
	ОбновитьКлючиИндикаторов(НастройкиИндикаторов.ИндикаторыДинамики, "Дин");
	ОбновитьКлючиИндикаторов(НастройкиИндикаторов.ИндикаторыОстатков, "Ост");
	
	// Удаляем все элементы со страниц индикаторов
	УдалитьЭлементыГруппы(Элементы.СтраницаДинамики);
	УдалитьЭлементыГруппы(Элементы.СтраницаОстатков);
	
	// Массивы для изменения реквизитов формы
	УдаляемыеРеквизиты   = Новый Массив;
	ДобавляемыеРеквизиты = Новый Массив;
	
	// Готовим список удаляемых реквизитов
	ВсеРеквизиты = ПолучитьРеквизиты();
	Для каждого Реквизит Из ВсеРеквизиты Цикл
		
		Если Нрег(Лев(Реквизит.Имя, 4)) = Нрег("Ост_") Или Нрег(Лев(Реквизит.Имя, 4)) = Нрег("Дин_") Тогда
			
			УдаляемыеРеквизиты.Добавить(Реквизит.Путь + ?(Реквизит.Путь = "", "", ".") + Реквизит.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Готовим список добавляемых реквизитов
	ДобавитьРеквизитыПоНастройкамИндикаторовДинамики(ДобавляемыеРеквизиты, НастройкиИндикаторов.ИндикаторыДинамики);
	
	// Изменяем реквизиты формы
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	// Добавляем новые элементы на форму
	ДобавитьЭлементыИндикаторовОстатков(НастройкиИндикаторов);
	ДобавитьЭлементыИндикаторовСобытий(НастройкиИндикаторов);
	
	// Переносим неудаляемые элементы на страницы показателей
	Элементы.Переместить(Элементы.ДобавлениеОстатка,          Элементы.СтраницаОстатков);
	Элементы.Переместить(Элементы.ГруппаПодзаголовокОстатка,  Элементы.СтраницаОстатков, Элементы.СтраницаОстатков.ПодчиненныеЭлементы[0]);
	Элементы.Переместить(Элементы.ДобавлениеДинамики,         Элементы.СтраницаДинамики);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыПоНастройкамИндикаторовДинамики(МассивРеквизитов, СписокИндикаторов)

	ТипСумма      = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	ТипПроцент    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 1));
	ТипСтрока     = Новый ОписаниеТипов("Строка");
	ТипФормСтрока = Новый ОписаниеТипов("ФорматированнаяСтрока");
	ТипВалюта     = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	ТипДиаграмма  = Новый ОписаниеТипов("Диаграмма");
	
	Для каждого НастройкаИндикатора Из СписокИндикаторов Цикл
		
		ТипИндикатора    = НастройкаИндикатора.ТипИндикатора;
		ВидОбъектовУчета = НастройкаИндикатора.ВидОбъектовУчета;
		
		Если ТипИндикатора = "Структура" Тогда
			
			// Диаграмма
			Реквизит = Новый РеквизитФормы(НастройкаИндикатора.Ключ + "_ДиаграммаСтруктуры", ТипДиаграмма);
			МассивРеквизитов.Добавить(Реквизит);
			
			
		ИначеЕсли ТипИндикатора = "Динамика" Тогда
			
			// Диаграмма
			Реквизит = Новый РеквизитФормы(НастройкаИндикатора.Ключ + "_ДиаграммаДинамики", ТипДиаграмма);
			МассивРеквизитов.Добавить(Реквизит);
			
		ИначеЕсли ТипИндикатора = "Накопления" Тогда
			
			// Диаграмма
			Реквизит = Новый РеквизитФормы(НастройкаИндикатора.Ключ + "_ДиаграммаНакоплений", ТипДиаграмма);
			МассивРеквизитов.Добавить(Реквизит);
			
		ИначеЕсли ТипИндикатора = "КурсыВалют" Тогда
			
			// Допускается не более 5 валют на индикатор
			ВсегоВалют = МаксимумВалютНаНидикаторе();
			Для Счетчик = 1 По ВсегоВалют Цикл
				
				Суффикс = Строка(Счетчик);
				
				// валюта
				Реквизит = Новый РеквизитФормы(НастройкаИндикатора.Ключ + "_КурсыВалютВалюта" + Суффикс, ТипВалюта);
				МассивРеквизитов.Добавить(Реквизит);
				// курс
				Реквизит = Новый РеквизитФормы(НастройкаИндикатора.Ключ + "_КурсыВалютКурс" + Суффикс, ТипСтрока);
				МассивРеквизитов.Добавить(Реквизит);
				// изменение курса
				Реквизит = Новый РеквизитФормы(НастройкаИндикатора.Ключ + "_КурсыВалютИзменение" + Суффикс, ТипСтрока);
				МассивРеквизитов.Добавить(Реквизит);
				
			КонецЦикла;
			
			// Диаграмма
			Реквизит = Новый РеквизитФормы(НастройкаИндикатора.Ключ + "_ДиаграммаКурсовВалют", ТипДиаграмма);
			МассивРеквизитов.Добавить(Реквизит);
			
		ИначеЕсли ТипИндикатора = "ВводОпераций" Тогда
			
			
		ИначеЕсли ТипИндикатора = "Планы" Тогда
			
			// Диаграмма
			Реквизит = Новый РеквизитФормы(НастройкаИндикатора.Ключ + "_ДиаграммаПланов", ТипДиаграмма);
			МассивРеквизитов.Добавить(Реквизит);
			
		ИначеЕсли ТипИндикатора = "Бюджет" Тогда
			
			// остаток дохода
			Реквизит = Новый РеквизитФормы(НастройкаИндикатора.Ключ + "_БюджетТекстОстатокСрока", ТипСтрока);
			Реквизит.Заголовок = НСтр("ru='До конца'"); 
			МассивРеквизитов.Добавить(Реквизит);
			
			// остаток расхода
			Реквизит = Новый РеквизитФормы(НастройкаИндикатора.Ключ + "_БюджетТекстРекомендаций", ТипФормСтрока);
			Реквизит.Заголовок = НСтр("ru='Максимальный расход в день'"); 
			МассивРеквизитов.Добавить(Реквизит);
			
			// Диаграмма
			Реквизит = Новый РеквизитФормы(НастройкаИндикатора.Ключ + "_ДиаграммаБюджета", ТипДиаграмма);
			МассивРеквизитов.Добавить(Реквизит);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыГруппы(РодительскаяГруппа)

	МассивЭлементов = Новый Массив;
	Для каждого ПодчиненныйЭлемент Из РодительскаяГруппа.ПодчиненныеЭлементы Цикл
		МассивЭлементов.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
	Для каждого ПодчиненныйЭлемент Из МассивЭлементов Цикл
		Элементы.Удалить(ПодчиненныйЭлемент);
	КонецЦикла;

КонецПроцедуры

// Добавляет на форму элементы индикаторов остатков
&НаСервере
Процедура ДобавитьЭлементыИндикаторовОстатков(СписокИндикаторов)

	// Обновим заголовки 
	ПрименитьНастройкиИндикатораОстатков(СписокИндикаторов);
	
	// Группа, элементы которой будут копироваться на страницу показателей
	Образец = Элементы.Виджет;
	Для каждого СтрокаНастройки Из СписокИндикаторов.ИндикаторыОстатков Цикл
		
		КопияЭталона = СкопироватьЭлементФормы(Образец, СтрокаНастройки.Ключ, Элементы.СтраницаОстатков);
		СтрокаНастройки.ИмяБлокаИндикатора = КопияЭталона.Имя;
		
	КонецЦикла;

КонецПроцедуры

// Добавляет на форму элементы индикаторов событий
&НаСервере
Процедура ДобавитьЭлементыИндикаторовСобытий(Настройки)

	СписокИндикаторов = Настройки.ИндикаторыДинамики;
	Для каждого СтрокаНастройки Из СписокИндикаторов Цикл
		
		// Группа, элементы которой будут копироваться на страницу показателей
		ИмяГруппы = "Блок" + СтрокаНастройки.ТипИндикатора;
		Образец = Элементы.Найти(ИмяГруппы);
		Если Образец = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КопияЭталона = СкопироватьЭлементФормы(Образец, СтрокаНастройки.Ключ, Элементы.СтраницаДинамики);
		СтрокаНастройки.ИмяБлокаИндикатора = КопияЭталона.Имя;
		ПрименитьНастройкиКИндикаторамСобытий(Настройки, СтрокаНастройки);
		
	КонецЦикла;

КонецПроцедуры

// Рекурсивное копирование элементов формы
&НаСервере
Функция СкопироватьЭлементФормы(Оригинал, Префикс, РодительКопии)

	ТипЭлемента = ТипЗнч(Оригинал);
	ИмяЭлемета = Префикс + "_" + Оригинал.Имя;
	Копия = Элементы.Добавить(ИмяЭлемета, ТипЭлемента, РодительКопии);
	
	Копия.Вид       = Оригинал.Вид;
	Копия.Видимость = Оригинал.Видимость;
	
	Копия.Высота = Оригинал.Высота;
	Копия.Ширина = Оригинал.Ширина;
	Копия.ГоризонтальноеПоложениеВГруппе = Оригинал.ГоризонтальноеПоложениеВГруппе;
	Копия.ВертикальноеПоложениеВГруппе = Оригинал.ВертикальноеПоложениеВГруппе;
	
	Копия.Доступность                = Оригинал.Доступность;
	Копия.Заголовок                  = Оригинал.Заголовок;
	Копия.ОтображениеПодсказки       = Оригинал.ОтображениеПодсказки;
	Копия.Подсказка                  = Оригинал.Подсказка;
	Копия.РастягиватьПоВертикали     = Оригинал.РастягиватьПоВертикали;
	Копия.РастягиватьПоГоризонтали   = Оригинал.РастягиватьПоГоризонтали;
	
	Если ТипЭлемента = Тип("ГруппаФормы") Тогда
		
		Если Оригинал.Вид = ВидГруппыФормы.Страницы Тогда
			Копия.ОтображениеСтраниц = Оригинал.ОтображениеСтраниц;
		Иначе
			Копия.ГоризонтальноеПоложениеПодчиненных  = Оригинал.ГоризонтальноеПоложениеПодчиненных;
			Копия.ВертикальноеПоложениеПодчиненных    = Оригинал.ВертикальноеПоложениеПодчиненных;
			Копия.ЦветТекстаЗаголовка   = Оригинал.ЦветТекстаЗаголовка;
			Копия.ШрифтЗаголовка   = Оригинал.ШрифтЗаголовка;
			Копия.ТолькоПросмотр   = Оригинал.ТолькоПросмотр;
			Копия.ЦветФона   = Оригинал.ЦветФона;
			Копия.ОтображатьЗаголовок = Оригинал.ОтображатьЗаголовок;
			Копия.Группировка = Оригинал.Группировка;
			Если Не Оригинал.Вид = ВидГруппыФормы.Страница Тогда
				Копия.Объединенная = Оригинал.Объединенная;
				Копия.СквозноеВыравнивание = Оригинал.СквозноеВыравнивание;
			КонецЕсли;
		КонецЕсли;
		
		Для каждого ПодчиненныйЭлемент Из Оригинал.ПодчиненныеЭлементы Цикл
			СкопироватьЭлементФормы(ПодчиненныйЭлемент, Префикс, Копия);
		КонецЦикла;
		
	ИначеЕсли ТипЭлемента = Тип("ПолеФормы") Тогда
		
		Копия.ЦветТекстаЗаголовка   = Оригинал.ЦветТекстаЗаголовка;
		Копия.ЦветФонаЗаголовка     = Оригинал.ЦветФонаЗаголовка;
		Копия.ШрифтЗаголовка        = Оригинал.ШрифтЗаголовка;
		Копия.ТолькоПросмотр        = Оригинал.ТолькоПросмотр;
		
		Копия.ГоризонтальноеПоложение  = Оригинал.ГоризонтальноеПоложение;
		Копия.ВертикальноеПоложение    = Оригинал.ВертикальноеПоложение;
		Копия.ПутьКДанным              = Префикс + "_" + Оригинал.ПутьКДанным;
		Копия.ВысотаЗаголовка          = Оригинал.ВысотаЗаголовка;
		Копия.ПоложениеЗаголовка       = Оригинал.ПоложениеЗаголовка;
		
		Копия.АвтоМаксимальнаяВысота = Оригинал.АвтоМаксимальнаяВысота;
		Копия.МаксимальнаяВысота     = Оригинал.МаксимальнаяВысота;
	
		Копия.АвтоМаксимальнаяШирина = Оригинал.АвтоМаксимальнаяШирина;
		Копия.МаксимальнаяШирина     = Оригинал.МаксимальнаяШирина;
		
		Копия.ПоложениеЗаголовка   = Оригинал.ПоложениеЗаголовка;
		
		Если Не Оригинал.Вид = ВидПоляФормы.ПолеДиаграммы Тогда
			Копия.ЦветРамки           = Оригинал.ЦветРамки;
		КонецЕсли;
		
		Если Оригинал.Вид = ВидПоляФормы.ПолеНадписи Тогда
			Копия.Шрифт               = Оригинал.Шрифт;
			Копия.ШрифтЗаголовка      = Оригинал.ШрифтЗаголовка;
			Копия.ЦветФона            = Копия.ЦветФона;
			Копия.ЦветТекста          = Копия.ЦветТекста;
		КонецЕсли;
		
		Если Оригинал.Вид = ВидПоляФормы.ПолеНадписи Или Оригинал.Вид = ВидПоляФормы.ПолеКартинки Тогда
			Копия.Гиперссылка         = Оригинал.Гиперссылка;
			СкопироватьДействиеСОригинала(Копия, Оригинал, "Нажатие");
		ИначеЕсли Оригинал.Вид = ВидПоляФормы.ПолеHTMLДокумента Тогда 
			СкопироватьДействиеСОригинала(Копия, Оригинал, "ПриНажатии");
		КонецЕсли;
		
		Если Оригинал.Вид = ВидПоляФормы.ПолеДиаграммы Тогда
			СкопироватьДействиеСОригинала(Копия, Оригинал, "Выбор");
			СкопироватьДействиеСОригинала(Копия, Оригинал, "ОбработкаРасшифровки");
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("ДекорацияФормы") Тогда
		
		Если Оригинал.Вид = ВидДекорацииФормы.Картинка Тогда
			Копия.Картинка       = Оригинал.Картинка;
			Копия.РазмерКартинки = Оригинал.РазмерКартинки;
			Копия.Гиперссылка         = Оригинал.Гиперссылка;
		Иначе
			Копия.ГоризонтальноеПоложение = Оригинал.ГоризонтальноеПоложение;
			Копия.ВертикальноеПоложение   = Оригинал.ВертикальноеПоложение;
			Копия.ВысотаЗаголовка         = Оригинал.ВысотаЗаголовка;
			Копия.ЦветФона                = Оригинал.ЦветФона;
		КонецЕсли;
		
		Копия.АвтоМаксимальнаяВысота = Оригинал.АвтоМаксимальнаяВысота;
		Копия.МаксимальнаяВысота     = Оригинал.МаксимальнаяВысота;
	
		Копия.АвтоМаксимальнаяШирина = Оригинал.АвтоМаксимальнаяШирина;
		Копия.МаксимальнаяШирина     = Оригинал.МаксимальнаяШирина;
		
		Копия.ЦветРамки      = Оригинал.ЦветРамки;
		Копия.Рамка          = Оригинал.Рамка;
		Копия.ЦветТекста     = Оригинал.ЦветТекста;
		Копия.Шрифт          = Оригинал.Шрифт;
		Копия.Гиперссылка    = Оригинал.Гиперссылка;
		
		СкопироватьДействиеСОригинала(Копия, Оригинал, "Нажатие");
		СкопироватьДействиеСОригинала(Копия, Оригинал, "ОбработкаНавигационнойСсылки");
		
	КонецЕсли;
	
	
	Возврат Копия; 

КонецФункции

// Копирует указанное действие с оригинального элемента формы в копию
&НаСервере
Процедура СкопироватьДействиеСОригинала(Копия, Оригинал, Действие)

	ИмяОбработчика = Оригинал.ПолучитьДействие(Действие);
	Если Не ПустаяСтрока(ИмяОбработчика) Тогда
		Копия.УстановитьДействие(Действие, ИмяОбработчика);
	КонецЕсли;

КонецПроцедуры

// Устанавливает свойства элементов управления в соответствии с настройками пользователя
&НаСервере
Процедура ПрименитьНастройкиКИндикаторамСобытий(НастройкиОбщие, СтрокаНастроек)

	Если СтрокаНастроек.ТипИндикатора = "ВводОпераций" Тогда
		ПрименитьНастройкиИндикатораВводОпераций(НастройкиОбщие, СтрокаНастроек);
	ИначеЕсли СтрокаНастроек.ТипИндикатора = "Структура" Тогда
		ПрименитьНастройкиИндикатораСтруктуры(НастройкиОбщие, СтрокаНастроек);
	ИначеЕсли СтрокаНастроек.ТипИндикатора = "Динамика" Тогда
		ПрименитьНастройкиИндикатораДинамики(НастройкиОбщие, СтрокаНастроек);
	ИначеЕсли СтрокаНастроек.ТипИндикатора = "Планы" Тогда
		ПрименитьНастройкиИндикатораПланов(НастройкиОбщие, СтрокаНастроек);
	ИначеЕсли СтрокаНастроек.ТипИндикатора = "КурсыВалют" Тогда
		ПрименитьНастройкиИндикатораКурсовВалют(НастройкиОбщие, СтрокаНастроек);
	ИначеЕсли СтрокаНастроек.ТипИндикатора = "Накопления" Тогда
		ПрименитьНастройкиИндикатораНакоплений(НастройкиОбщие, СтрокаНастроек);
	ИначеЕсли СтрокаНастроек.ТипИндикатора = "Бюджет" Тогда
		ПрименитьНастройкиИндикатораБюджета(НастройкиОбщие, СтрокаНастроек);
	Иначе
		
	КонецЕсли;
	 

КонецПроцедуры

// Перемещает блок индикатора вверх или вниз в указанном направлении (<0 - вверх, >0 - вниз)
//
//Параметры:
//	ПараметрыИндикатора - Результат функции КлючиИндкатораИзИмениЭлемента()
//
&НаСервере
Процедура СдвинутьБлокИндикатора(ПараметрыИндикатора, Направление)

	НастройкиИндикаторов = АктуальныеНастройкиИндикаторов();
	
	Если ПараметрыИндикатора.Тип = "Дин" Тогда
		ПереместитьЭлементИСтрокуНастроекИндикатора(НастройкиИндикаторов.ИндикаторыДинамики, ПараметрыИндикатора, Направление);
	ИначеЕсли ПараметрыИндикатора.Тип = "Ост" Тогда
		ПереместитьЭлементИСтрокуНастроекИндикатора(НастройкиИндикаторов.ИндикаторыОстатков, ПараметрыИндикатора, Направление);
	КонецЕсли;
	
	ОбновитьАктуальныеНастройкиИндикаторов(НастройкиИндикаторов);

КонецПроцедуры

// Перемещает блок индикатора вверх или вниз в указанном направлении (<0 - вверх, >0 - вниз)
//
//Параметры:
//	ПараметрыИндикатора - Результат функции КлючиИндкатораИзИмениЭлемента()
//
&НаСервере
Процедура ПереместитьЭлементИСтрокуНастроекИндикатора(СписокИндикаторов, ПараметрыИндикатора, Направление)

	ВсегоИндикаторов = СписокИндикаторов.Количество();
	Если ВсегоИндикаторов < 2 Тогда
		// двигать нечего и некуда
		Возврат;
	КонецЕсли;
	
	СтрокаНастроек = СписокИндикаторов.Найти(ПараметрыИндикатора.Ключ, "Ключ");
	Если СтрокаНастроек = Неопределено Тогда
		// нет строки с указанным ключем
		Возврат;
	КонецЕсли;
	
	ИндексСтроки       = СписокИндикаторов.Индекс(СтрокаНастроек);
	Если Направление < 0 И ИндексСтроки = 0 Тогда
		// Переставить строку в самый низ
		СписокИндикаторов.Сдвинуть(СтрокаНастроек, ВсегоИндикаторов - 1);
	ИначеЕсли Направление > 0 И ИндексСтроки = ВсегоИндикаторов - 1 Тогда
		// Переставить строку в самый низ
		СписокИндикаторов.Сдвинуть(СтрокаНастроек, -ВсегоИндикаторов + 1);
	Иначе
		СписокИндикаторов.Сдвинуть(СтрокаНастроек, Направление);
	КонецЕсли;
	
	ОбновитьПорядокВСпискеИндикаторов(СписокИндикаторов);

	ИндексСтроки       = СписокИндикаторов.Индекс(СтрокаНастроек);
	СледующаяСтрока    = ?(ИндексСтроки < ВсегоИндикаторов - 1, СписокИндикаторов[ИндексСтроки + 1], Неопределено);
	РодительскийЭлемент = ?(ПараметрыИндикатора.Тип = "Дин", Элементы.СтраницаДинамики, Элементы.СтраницаОстатков);
	СледующийЭлемент    = ?(ЗначениеЗаполнено(СледующаяСтрока), Элементы[СледующаяСтрока.ИмяБлокаИндикатора], Неопределено);
	Если СледующийЭлемент = Неопределено Тогда
		СледующийЭлемент = ?(ПараметрыИндикатора.Тип = "Дин", Элементы.ДобавлениеДинамики, Элементы.ДобавлениеОстатка);
	КонецЕсли;
	Элементы.Переместить(Элементы[СтрокаНастроек.ИмяБлокаИндикатора], РодительскийЭлемент, СледующийЭлемент);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИндикатор(ПараметрыИндикатора)

	НастройкиИндикаторов = АктуальныеНастройкиИндикаторов();
	
	Если ПараметрыИндикатора.Тип = "Дин" Тогда
		СписокИндикаторов = НастройкиИндикаторов.ИндикаторыДинамики;
	ИначеЕсли ПараметрыИндикатора.Тип = "Ост" Тогда
		СписокИндикаторов = НастройкиИндикаторов.ИндикаторыОстатков;
	КонецЕсли;
	
	СтрокаНастроек = СписокИндикаторов.Найти(ПараметрыИндикатора.Ключ, "Ключ");
	Если СтрокаНастроек = Неопределено Тогда
		// нет строки с указанным ключем
		Возврат;
	КонецЕсли;
	
	Элементы.Удалить(Элементы[СтрокаНастроек.ИмяБлокаИндикатора]);
	СписокИндикаторов.Удалить(СтрокаНастроек);
	
	ОбновитьПорядокВСпискеИндикаторов(СписокИндикаторов);
	
	ОбновитьАктуальныеНастройкиИндикаторов(НастройкиИндикаторов);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьПорядокВСпискеИндикаторов(СписокИндикаторов)

	Счетчик = 1;
	Для каждого СтрокаПорядка Из СписокИндикаторов Цикл
		СтрокаПорядка.Порядок = Счетчик;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	СписокИндикаторов.Сортировать("Порядок");

КонецПроцедуры
 

#КонецОбласти 


// Выполнение запорсов, обновление значений в реквизитах и элеметах формы
#Область ОбновлениеДанных

&НаКлиенте
Процедура ВыполнитьЭтапОбновленияДанных()

	Если ЭтапОбновленияДанных = "" Тогда
		// Старт обновления данных
		
		ЭтапОбновленияДанных = "Старт";
		ПоказатьСостояниеОбновления(ЭтапОбновленияДанных);
		ТекущийИнтервалОжидания        = 0.1;
		
	ИначеЕсли ЭтапОбновленияДанных = "Старт" Тогда
		// Ожидание завершения фонового задания
		
		ВыполнитьОбновлениеДанныхНаСервере();
		ТекущийИнтервалОжидания        = 0.5;
		
	ИначеЕсли ЭтапОбновленияДанных = "Ожидание" Тогда
		// Ожидание завершения фонового задания
		
		Если ФоновоеЗаданиеВыполненоКлиент() Тогда
			ЭтапОбновленияДанных = "Завершение";
			ТекущийИнтервалОжидания = 0.1;
		Иначе
			ТекущийИнтервалОжидания = Мин(ТекущийИнтервалОжидания + 0.5, 4);
		КонецЕсли;
		
	ИначеЕсли ЭтапОбновленияДанных = "Завершение" Или ЭтапОбновленияДанных = "ОтменаЗадания" Тогда
		// Фоновое задание завершено, нужно обновить показатели на форме
		
		ТекстОшибки = "";
		ОбновитьПоказателиИндикаторов(ТекстОшибки);
		ПоказатьСостояниеОбновления(ЭтапОбновленияДанных);
		Если ЭтапОбновленияДанных = "" Тогда
			ТекущийИнтервалОжидания    = 0;
			ТекущийИнтервалДоступности = 0;
		Иначе
			ТекущийИнтервалОжидания = 0.1;
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ПоказатьПредупреждение(, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭтапОбновленияДанных = "Ошибка" Тогда
		// Выполнение завершено с ошибкой
		
		ПоказатьСостояниеОбновления(ЭтапОбновленияДанных);
		ТекущийИнтервалОжидания    = 0;
		ТекущийИнтервалДоступности = 0;
		ЭтапОбновленияДанных = "";
		
	КонецЕсли;
	
	Если ТекущийИнтервалОжидания > 0 Тогда
		ПодключитьОбработчикОжидания("ВыполнитьЭтапОбновленияДанных", ТекущийИнтервалОжидания, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыполнениеОбновления()

	ОтменитьОбновлениеДанныхНаСервере();
	ЭтапОбновленияДанных = "ОтменаЗадания";
	ПоказатьСостояниеОбновления(ЭтапОбновленияДанных);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСостояниеОбновления(Этап)

	Если Этап = "Старт" Тогда
		
		//Элементы.Подзаголовок.Доступность                  = Ложь;
		Элементы.ЗаголовокПанелиДинамики.Доступность       = Ложь;
		Элементы.ЗаголовокПанелиОстатки.Доступность        = Ложь;
		Элементы.СтраницаОстатков.Доступность              = Ложь;
		
		Если Элементы.ГруппаСтраницДинамики.ТекущаяСтраница = Элементы.СтраницаВосстановлениеНастроек Тогда
			Элементы.ГруппаСтраницДинамики.ТекущаяСтраница = Элементы.СтраницаОбновлениеДанных;
			Элементы.ГруппаСтраницОстатков.ТекущаяСтраница = Элементы.СтраницаОбновлениеОстатков;
		КонецЕсли;
		
		ИзменитьПодзаголовокФормы(ЭтотОбъект, 2);
		
	ИначеЕсли Этап = "Ошибка" Тогда
		
		//Элементы.Подзаголовок.Доступность                  = Ложь;
		Элементы.ЗаголовокПанелиДинамики.Доступность       = Ложь;
		Элементы.ЗаголовокПанелиОстатки.Доступность        = Ложь;
		Элементы.СтраницаОстатков.Доступность              = Ложь;
		
		Элементы.ГруппаСтраницДинамики.ТекущаяСтраница = Элементы.СтраницаВосстановлениеНастроек;
		Элементы.ГруппаСтраницОстатков.ТекущаяСтраница = Элементы.СтраницаОбновлениеОстатков;
		
		ИзменитьПодзаголовокФормы(ЭтотОбъект, 0);
		
	Иначе
		
		//Элементы.Подзаголовок.Доступность                  = Истина;
		Элементы.ЗаголовокПанелиДинамики.Доступность       = Истина;
		Элементы.ЗаголовокПанелиОстатки.Доступность        = Истина;
		Элементы.СтраницаОстатков.Доступность              = Истина;
		
		Элементы.ГруппаСтраницДинамики.ТекущаяСтраница = Элементы.СтраницаДинамики;
		Элементы.ГруппаСтраницОстатков.ТекущаяСтраница = Элементы.СтраницаОстатков;
		
		ИзменитьПодзаголовокФормы(ЭтотОбъект, ?(Этап = "ОтменаЗадания", -1, 0));
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбновлениеДанныхНаСервере()

	// Проверяем текущее состояние фонового задания
	ОтменитьОбновлениеДанныхНаСервере();

	// Готовим параметры для фонового задания
	СтруктураПараметров = Новый Структура;
	НастройкиИндикаторов = АктуальныеНастройкиИндикаторов();
	ОбновитьЗначенияВНастройках(НастройкиИндикаторов);
	СтруктураПараметров.Вставить("НастройкиИндикаторов", НастройкиИндикаторов);
	
	// Запускаем фоновое задание
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Обработки.НачальнаяСтраница.ПодготовитьДанные", 
		СтруктураПараметров, 
		НСтр("ru='Обновление начальной страницы'"));
		
	// Разбираем результат
	АдресФоновогоЗадания    = РезультатВыполнения.АдресХранилища;
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		Если ЭтоАдресВременногоХранилища(АдресФоновогоЗадания) И ПолучитьИзВременногоХранилища(АдресФоновогоЗадания) <> Неопределено Тогда
			ЭтапОбновленияДанных = "Завершение";
		Иначе
			ЭтапОбновленияДанных = "Ошибка";
		КонецЕсли;
	Иначе
		ИДФоновогоЗадания = РезультатВыполнения.ИдентификаторЗадания;
		ЭтапОбновленияДанных = "Ожидание";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ФоновоеЗаданиеВыполненоКлиент()

	Если Не ЗначениеЗаполнено(ИДФоновогоЗадания) Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат ФоновоеЗаданиеВыполненоСервер();
	
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеВыполненоСервер()

	Попытка
	
		Выполнено = ДлительныеОперации.ЗаданиеВыполнено(ИДФоновогоЗадания);
		Если Выполнено Тогда
			ИДФоновогоЗадания = Неопределено;
		КонецЕсли;
	
	Исключение
		// запись в журнал регистрации сделана в прверке выполнения
		// Устанавливаем этап в "ошибку" и выводим сообщение
		ЭтапОбновленияДанных = "Ошибка";
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;

	КонецПопытки; 

	Возврат Выполнено;
	
КонецФункции

&НаСервере
Процедура ОтменитьОбновлениеДанныхНаСервере()

	Если ЗначениеЗаполнено(ИДФоновогоЗадания) Тогда
		
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИДФоновогоЗадания);
		ИДФоновогоЗадания    = "";
		АдресФоновогоЗадания = "";
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСПроверкойДоступностиВвода()

	Если ВводДоступен() И Не ЗначениеЗаполнено(ИДФоновогоЗадания) И Не НеОбновлятьАвтоматически Тогда
		ВыполнитьЭтапОбновленияДанных();
	Иначе
		ИзменитьПодзаголовокФормы(ЭтотОбъект, 1);
		Если Не НеОбновлятьАвтоматически Тогда
			ТекущийИнтервалДоступности = Мин(ТекущийИнтервалДоступности + 0.5, 5);
			ПодключитьОбработчикОжидания("ОбновитьДанныеСПроверкойДоступностиВвода", ТекущийИнтервалДоступности, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьПоказателиИндикаторов(ТекстОшибки)

	ТекЭлемент = ТекущийЭлемент;
	
	Если НастройкиИндикаторов = Неопределено Тогда
		НастройкиИндикаторов = АктуальныеНастройкиИндикаторов();
	КонецЕсли;
	
	СтруктураВыборок = Неопределено;
	Если ЭтоАдресВременногоХранилища(АдресФоновогоЗадания) Тогда
		СтруктураВыборок = ПолучитьИзВременногоХранилища(АдресФоновогоЗадания);
	КонецЕсли;
	
	Если СтруктураВыборок <> Неопределено Тогда
		
		Попытка
			
			ОбновитьИндикаторыСобытий(СтруктураВыборок, НастройкиИндикаторов);
			ОбновитьИндикаторыОстатков(СтруктураВыборок, НастройкиИндикаторов);
			ЭтапОбновленияДанных = "";
			
		Исключение
			
			Ошибка = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Начальная страница.Обновление данных завершилось с ошибкой'"),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(Ошибка));
				
			ЭтапОбновленияДанных = "Ошибка";
			ТекстОшибки = КраткоеПредставлениеОшибки(Ошибка);
			
		КонецПопытки;
		
	КонецЕсли;
	
	ИзменитьПодзаголовокФормы(ЭтотОбъект, ?(ЭтапОбновленияДанных = "ОтменаЗадания" Или ЭтапОбновленияДанных = "Ошибка", -1, 0));
	
	ТекущийЭлемент = ТекЭлемент;
	
	ПоместитьВоВременноеХранилище(Неопределено, АдресФоновогоЗадания);
	АдресФоновогоЗадания = "";
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПодзаголовокФормы(Форма, СостояниеОбновления = 0)

	ТекстОбновить       = НСтр("ru='Обновить'"); 
	ТекстОстановить     = НСтр("ru='Остановить'"); 
	ТекстОбновитьСейчас = НСтр("ru='Обновить сейчас'"); 
	ТекстНастройки      = НСтр("ru='Настройки страницы'"); 
	ТекстСброса         = НСтр("ru='Вернуть настройки по умолчанию'"); 
	ТекстПредложения    = НСтр("ru='Предложить улучшение'"); 
	
	Если СостояниеОбновления = -1 Тогда
		// Отменили обновление
		
		ТекстПодзаголовка = НСтр("ru='Обновление было прервано!'");
		ТекстПодзаголовка = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(ТекстПодзаголовка, , , Форма.ДопРеквизиты.ЦветФонаВыделенияПоля),
				"   ",
				Новый ФорматированнаяСтрока(ТекстОбновить, , , , "mny:#ОбновитьИндикаторы"),
				"   ",
				Новый ФорматированнаяСтрока(ТекстНастройки, , , , "mny:#ИзменитьНастройки"),
				"   ",
				Новый ФорматированнаяСтрока(ТекстСброса, , , , "mny:#ВернутьНастройкиПоУмолчанию")
		);
		
	ИначеЕсли СостояниеОбновления = 1 Тогда
		// Ожидаем доступность ввода
		
		ТекстПодзаголовка = ?(Форма.НеОбновлятьАвтоматически, НСтр("ru='Страницу следует обновить!'"), 
					НСтр("ru='Скоро страница будет обновлена автоматически...'"));
		ТекстПодзаголовка = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(ТекстПодзаголовка, , , Форма.ДопРеквизиты.ЦветФонаВыделенияПоля),
				"   ",
				Новый ФорматированнаяСтрока(ТекстОбновитьСейчас, , , , "mny:#ОбновитьИндикаторы"),
				"   ",
				Новый ФорматированнаяСтрока(ТекстНастройки, , , , "mny:#ИзменитьНастройки"),
				"   ",
				Новый ФорматированнаяСтрока(ТекстСброса, , , , "mny:#ВернутьНастройкиПоУмолчанию")
		);
		
	ИначеЕсли СостояниеОбновления = 2 Тогда
		// Обновление выполняется в фоне
		
		ТекстПодзаголовка = НСтр("ru='Обновление страницы...'");
		ТекстПодзаголовка = Новый ФорматированнаяСтрока(
				"  ",
				Новый ФорматированнаяСтрока(ТекстПодзаголовка, , , Форма.ДопРеквизиты.ЦветФонаВыделенияПоля),
				"   ",
				Новый ФорматированнаяСтрока(ТекстОстановить, , , , "mny:#ОтменитьОбновление")
		);
		
	Иначе
		// Обновление выполнено
		
		ТекстПодзаголовка = НСтр("ru='Последнее обновление: %1'");
		ТекстПодзаголовка = СтрШаблон(ТекстПодзаголовка, Формат(ТекущаяДата(), "Л=ru_RU; ДЛФ=T"));
		ТекстПодзаголовка = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(ТекстПодзаголовка),
				"   ",
				Новый ФорматированнаяСтрока(ТекстОбновить, , , , "mny:#ОбновитьИндикаторы"),
				"   ",
				Новый ФорматированнаяСтрока(ТекстНастройки, , , , "mny:#ИзменитьНастройки"),
				"   ",
				Новый ФорматированнаяСтрока(ТекстСброса, , , , "mny:#ВернутьНастройкиПоУмолчанию")
				//,"   ",
				//Новый ФорматированнаяСтрока(ТекстПредложения, , , , "mny:#ПредложитьУлучшение")
		);
		
	КонецЕсли;
	
	Форма.Элементы.ДекорацияДлительнойОперации1.Видимость = СостояниеОбновления = 2;
	//Форма.Элементы.ГруппаВерхняяСтрокаОбзора.ЦветФона = ?(СостояниеОбновления = 0, Форма.ДопРеквизиты.ЦветФонаФормы, Форма.ДопРеквизиты.ЦветФонаВыделенияПоля);
	Форма.Элементы.Подзаголовок.Заголовок = ТекстПодзаголовка;

КонецПроцедуры

&НаСервере
Процедура ОбновитьИндикаторыСобытий(СтруктураВыборок, НастройкиИндикаторов)

	ТаблицаНакоплений = Неопределено;
	
	СписокИндикаторов = НастройкиИндикаторов.ИндикаторыДинамики;
	Для каждого СтрокаНастройки Из СписокИндикаторов Цикл
		
		ВыборкаИндикатора = Неопределено;
		Если Не СтруктураВыборок.Свойство("Выборка_" + СтрокаНастройки.Ключ, ВыборкаИндикатора) Или ВыборкаИндикатора = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНастройки.ТипИндикатора = "ВводОпераций" Тогда
			
			ОбновитьИндикаторыВводаОпераций(СтрокаНастройки, ВыборкаИндикатора, НастройкиИндикаторов);
			
		ИначеЕсли СтрокаНастройки.ТипИндикатора = "Планы" Тогда
			
			ОбновитьИндикаторыПланов(СтрокаНастройки, ВыборкаИндикатора, НастройкиИндикаторов);
			
		ИначеЕсли СтрокаНастройки.ТипИндикатора = "КурсыВалют" Тогда
			
			ОбновитьИндикаторыКурсовВалют(СтрокаНастройки, ВыборкаИндикатора, НастройкиИндикаторов);
			
		ИначеЕсли СтрокаНастройки.ТипИндикатора = "Структура" Тогда
			
			ОбновитьИндикаторыСтруктуры(СтрокаНастройки, ВыборкаИндикатора, 
							СтруктураВыборок["Выборка_ПредИтог_" + СтрокаНастройки.Ключ], НастройкиИндикаторов);
							
		ИначеЕсли СтрокаНастройки.ТипИндикатора = "Динамика" Тогда
			
			ОбновитьИндикаторыДинамики(СтрокаНастройки, ВыборкаИндикатора, НастройкиИндикаторов);
			
		ИначеЕсли СтрокаНастройки.ТипИндикатора = "Накопления" Тогда
			
			ОбновитьИндикаторНакоплений(СтрокаНастройки, ВыборкаИндикатора, НастройкиИндикаторов, ТаблицаНакоплений);
			
		ИначеЕсли СтрокаНастройки.ТипИндикатора = "Бюджет" Тогда
			
			ОбновитьИндикаторБюджета(СтрокаНастройки, ВыборкаИндикатора, НастройкиИндикаторов);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти 


#Область ИндикаторВводОпераций

&НаСервере
Процедура ПрименитьНастройкиИндикатораВводОпераций(НастройкиОбщие, СтрокаНастроек)

	Префикс = СтрокаНастроек.Ключ + "_";
	ЦветТекста = ЦветЗаголовкаИндикатора();
	
	// Устанавливаем заголовок
	СтрокаФормата = ?(Год(СтрокаНастроек.Период.ДатаНачала), "Л=ru; ДФ='d MMMM'", "Л=ru; ДФ='dd.MM.yyyy'");
	Если Не ЗначениеЗаполнено(СтрокаНастроек.Период.ДатаНачала) Тогда
		СтрокаНастроек.Период.ДатаНачала    = НачалоДня(ТекущаяДата());
		СтрокаНастроек.Период.ДатаОкончания = КонецДня(СтрокаНастроек.Период.ДатаНачала);
	КонецЕсли;
	ПредставлениеДаты = Формат(СтрокаНастроек.Период.ДатаНачала, СтрокаФормата);
	
	ТекстЗаголовка = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(СтрокаНастроек.Заголовок, , ЦветТекста),
			Новый ФорматированнаяСтрока(" " + НСтр("ru='за'")+ " ", , ЦветТекста) ,
			Новый ФорматированнаяСтрока(ПредставлениеДаты, , , , "mny:#ВыбратьДату")
			);
	
	Элементы[Префикс + "ВводОперацийЗаголовок"].Заголовок = ТекстЗаголовка;
	
	ДополнительныеПараметры = СтрокаНастроек.ДополнительныеПараметры;
	
	// Устанавливаем видимость команд ввода операций
	СвойстваЭлемента = Новый Структура("Видимость", Ложь);
	Для каждого КомандаВвода Из ДополнительныеПараметры.КомандыВводаОпераций Цикл
		
		ИмяЭлемента =  Префикс + "ВводОпераций" + КомандаВвода.Значение;
		СвойстваЭлемента.Видимость = КомандаВвода.Пометка;
		ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, ИмяЭлемента, СвойстваЭлемента);
		
	КонецЦикла;
	
	// Устанавливаем видимость группы планов
	ИмяЭлемента =  Префикс + "ВводОперацийГруппаПланов";
	Элемент = Элементы.Найти(ИмяЭлемента);
	Если Элемент <> Неопределено И Элемент.Видимость <> ДополнительныеПараметры.ОтображатьПланы Тогда
		Элемент.Видимость = ДополнительныеПараметры.ОтображатьПланы;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьИндикаторыВводаОпераций(СтрокаНастройки, РезультатЗапроса, НастройкиИндикаторов)

	//ШрифтПоказателя = ШрифтФорматированногоПоказателя(-1);
	ШрифтПоказателя = Новый Шрифт;
	ПрефиксПоля     = СтрокаНастройки.Ключ + "_";
	ЦветТекста      = ЦветаСтиля.ЦветТекстаФормы;
	
	СвойстваЭлемента = Новый Структура("Заголовок", "");
	Если СтрокаНастройки.ДополнительныеПараметры.ОтображатьПланы Тогда
		
		Запланировано = 0;
		Просрочено    = 0;
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Запланировано = Выборка.КоличествоНаСегодня; // запланировано всего, включая просроченные
			Просрочено = Выборка.КоличествоПросрочено; 
		КонецЕсли;
		
		Если Запланировано = 0 И Просрочено = 0 Тогда
			СвойстваЭлемента.Заголовок = "";
		Иначе
			СвойстваЭлемента.Заголовок = Новый ФорматированнаяСтрока(
						Новый ФорматированнаяСтрока(НСтр("ru='Запланировано операций'")),
						": ",
						Новый ФорматированнаяСтрока(Формат(Запланировано, "ЧДЦ=; ЧГ="), ШрифтПоказателя),
						Символы.ПС,
						Новый ФорматированнаяСтрока(НСтр("ru='Открыть список'"), , , , "mny:#СписокОперацийНаСегодня")
						);
		КонецЕсли;
		
		ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, ПрефиксПоля + "ВводОперацийИнформацияОПланах", СвойстваЭлемента);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 


#Область ИндикаторСтруктуры

&НаСервере
Процедура ПрименитьНастройкиИндикатораСтруктуры(НастройкиОбщие, СтрокаНастроек)

	Префикс = СтрокаНастроек.Ключ + "_";
	ЦветТекста = ЦветЗаголовкаИндикатора();
	
	// Заголовок индикатора с ниперссылкой выбора периода
	СвойстваЭлемента = Новый Структура("Заголовок", "");
	СвойстваЭлемента.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(СтрокаНастроек.Заголовок, , ЦветТекста),
			" ",
			//Новый ФорматированнаяСтрока(ПредставлениеПериодаВЗаголовке(НастройкиОбщие, СтрокаНастроек.Период), , ЦветТекста, , "mny:#ВыбратьПериод")
			Новый ФорматированнаяСтрока(ПредставлениеПериодаВЗаголовке(НастройкиОбщие, СтрокаНастроек.Период), , ЦветТекста)
			);
	
	ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, Префикс + "СтруктураЗаголовок", СвойстваЭлемента);

	// Настройки диаграммы
	ИмяОригинальнойДиаграммы = "ДиаграммаСтруктуры";
	Диаграмма = ЭтотОбъект[Префикс + ИмяОригинальнойДиаграммы];
	ОбновитьОбщиеНастройкиДиаграммы(Диаграмма, ЭтотОбъект[ИмяОригинальнойДиаграммы], НастройкиОбщие);
	
	Диаграмма.ФорматПроцентовВПодписях        = "ЧДЦ=1; ЧН=0; ЧГ=";
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндикаторыСтруктуры(СтрокаНастройки, РезультатЗапросаСтруктуры, РезультатЗапросаПредПериода, НастройкиИндикаторов)

	ШрифтПоказателя = ШрифтФорматированногоПоказателя(1);
	//ШрифтИзменений  = ШрифтФорматированногоПоказателя(-1);
	ШрифтИзменений  = Новый Шрифт;
	ПрефиксПоля     = СтрокаНастройки.Ключ + "_";
	ТекстВалютыОтчета    = Строка(НастройкиИндикаторов.ВалютаОтчета);
	СуммыСКопейками      = НастройкиИндикаторов.СуммыСКопейками;
	
	ПредИтог = 0;
	Выборка = РезультатЗапросаПредПериода.Выбрать();
	Если Выборка.Следующий() Тогда
		ПредИтог = ?(ЗначениеЗаполнено(Выборка.Сумма), Выборка.Сумма, 0);
	КонецЕсли;
	
	Диаграмма = ЭтотОбъект[ПрефиксПоля + "ДиаграммаСтруктуры"];
	Диаграмма.Обновление           = Ложь;
	Диаграмма.Автотранспонирование = Ложь;
	Диаграмма.Очистить();
	
	УказанныйТипДиаграммы = Неопределено;
	Если Не СтрокаНастройки.ДополнительныеПараметры.Свойство("ТипДиаграммы", УказанныйТипДиаграммы) Или Не ЗначениеЗаполнено(УказанныйТипДиаграммы) Тогда
		УказанныйТипДиаграммы = "Круговая";
	КонецЕсли;
	Диаграмма.ТипДиаграммы = ТипДиаграммы[УказанныйТипДиаграммы];
	
	ВысотаДиаграммы = ?(СтрокаНастройки.ДополнительныеПараметры.Свойство("МинимальнаяВысотаДиаграммы"), СтрокаНастройки.ДополнительныеПараметры.МинимальнаяВысотаДиаграммы, 6);
	ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, ПрефиксПоля + "ДиаграммаСтруктуры", Новый Структура("Высота", Макс(6, ВысотаДиаграммы)));
	
	ТочкаДиаграммы = Диаграмма.УстановитьТочку("Расход");
	
	ИтогПериода = 0;
	Выборка = РезультатЗапросаСтруктуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Если Выборка.Следующий() Тогда
		
		ИтогПериода = ?(ЗначениеЗаполнено(Выборка.Сумма), Выборка.Сумма, 0);
		
		ВыборкаСтатей = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Статья");
		Пока ВыборкаСтатей.Следующий() Цикл
			
			СерияДиаграммы = Диаграмма.УстановитьСерию(ВыборкаСтатей.Статья);
			Диаграмма.УстановитьЗначение(ТочкаДиаграммы, СерияДиаграммы, 
					ВыборкаСтатей.Сумма, ВыборкаСтатей.Статья, 
					"" + ВыборкаСтатей.Статья + " (" + СокращенноеПредставлениеСуммы(ВыборкаСтатей.Сумма, СуммыСКопейками) + " " + ТекстВалютыОтчета + ")");  
			
		КонецЦикла;
		
	КонецЕсли;
	
	Диаграмма.Автотранспонирование = Истина;
	Диаграмма.Обновление           = Истина;
	
	// Страница зависит от наличия данных
	Если ПредИтог = 0 И ИтогПериода = 0 И Диаграмма.Серии.КОличество() = 0 Тогда
		Элементы[ПрефиксПоля + "СтруктураГруппаСтраниц"].ТекущаяСтраница = Элементы[ПрефиксПоля + "СтруктураСтраницаНетДанных"];
		Возврат;
	Иначе
		Элементы[ПрефиксПоля + "СтруктураГруппаСтраниц"].ТекущаяСтраница = Элементы[ПрефиксПоля + "СтруктураСтраницаПоказатели"];
	КонецЕсли;

	// Обновляем итоговую сумму
	Разница = ИтогПериода - ПредИтог;
	РазницаПроцент = ?(ПредИтог <= 0, 100, Окр((Макс(Разница, -Разница) / Макс(ПредИтог, -ПредИтог)) * 100, 2));
	ПроцентОтПрошлого = ?(ПредИтог <= 0, 100, Окр((Макс(ИтогПериода, -ИтогПериода) / Макс(ПредИтог, -ПредИтог)) * 100, 2));
	ТекстИтога = Новый ФорматированнаяСтрока(
				//Новый ФорматированнаяСтрока(?(СтрокаНастройки.ВидОбъектовУчета = "Расходы", НСтр("ru='расход за период'"), НСтр("ru='доход за период'"))),
				//Символы.ПС,
				Новый ФорматированнаяСтрока(СокращенноеПредставлениеСуммы(ИтогПериода, СуммыСКопейками), ШрифтПоказателя),
				" ",
				ТекстВалютыОтчета,
				" ",
				Новый ФорматированнаяСтрока(НСтр("ru='всего'"))
				);
	Элементы[ПрефиксПоля + "СтруктураТекстСуммы"].Заголовок = ТекстИтога;
	
	// Обновляем текст сравнения
	Если СтрокаНастройки.ВидОбъектовУчета = "Доходы" Тогда
		ЦветОтрицательнойРазницы = ЦветРасходов();
		ЦветПоложительнойРазницы = ЦветаСтиля.ЦветТекстаФормы;
	Иначе
		ЦветОтрицательнойРазницы = ЦветаСтиля.ЦветТекстаФормы;
		ЦветПоложительнойРазницы = ЦветРасходов();
	КонецЕсли;
	
	Если ИтогПериода = 0 Тогда
		
		ТекстИзменений = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(НСтр("ru='за прошлый период'")),
				": ",
				Новый ФорматированнаяСтрока(СокращенноеПредставлениеСуммы(ПредИтог, СуммыСКопейками), ШрифтИзменений),
				" ",
				ТекстВалютыОтчета
		);
		
	ИначеЕсли ПредИтог = 0 Тогда
		
		ТекстИзменений = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(НСтр("ru='за прошлый период данных нет'"), , ЦветОтсутствияДанных())
		);
		
	Иначе
		
		Если Разница < 0 Тогда
			ТекстИзменений = Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(Формат(ПроцентОтПрошлого, "ЧДЦ=1; ЧГ="), ШрифтИзменений, ЦветОтрицательнойРазницы),
					" % ",
					НСтр("ru='от суммы'"),
					" ",
					ПредставлениеПрошлогоПериода(СтрокаНастройки.ПредыдущийПериод)
			);
		ИначеЕсли Разница > 0 Тогда
			ТекстИзменений = Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(Формат(ПроцентОтПрошлого, "ЧДЦ=1; ЧГ="), ШрифтИзменений, ЦветПоложительнойРазницы),
					" % ",
					НСтр("ru='от суммы'"),
					" ",
					ПредставлениеПрошлогоПериода(СтрокаНастройки.ПредыдущийПериод)
			);
		Иначе
			ТекстИзменений = Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(НСтр("ru='столько же, сколько'")),
					" ",
					ПредставлениеПрошлогоПериода(СтрокаНастройки.ПредыдущийПериод)
					);
		КонецЕсли;
		
	КонецЕсли;
	Элементы[ПрефиксПоля + "СтруктураТекстИзменений"].Заголовок = ТекстИзменений;
	
КонецПроцедуры

#КонецОбласти 


#Область ИндикаторДинамики

&НаСервере
Процедура ПрименитьНастройкиИндикатораДинамики(НастройкиОбщие, СтрокаНастроек)

	Префикс = СтрокаНастроек.Ключ + "_";
	ЦветТекста = ЦветЗаголовкаИндикатора();
	
	// Заголовок индикатора с ниперссылкой выбора периода
	СвойстваЭлемента = Новый Структура("Заголовок", "");
	СвойстваЭлемента.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(СтрокаНастроек.Заголовок, , ЦветТекста),
			" ",
			//Новый ФорматированнаяСтрока(ПредставлениеПериодаВЗаголовке(НастройкиОбщие, СтрокаНастроек.Период), , ЦветТекста, , "mny:#ВыбратьПериод")
			Новый ФорматированнаяСтрока(ПредставлениеПериодаВЗаголовке(НастройкиОбщие, СтрокаНастроек.Период), , ЦветТекста)
			);
	
	ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, Префикс + "ДинаимкаЗаголовок", СвойстваЭлемента);

	// Настройки диаграммы
	ИмяОригинальнойДиаграммы = "ДиаграммаДинамики";
	Диаграмма = ЭтотОбъект[Префикс + ИмяОригинальнойДиаграммы];
	ОбновитьОбщиеНастройкиДиаграммы(Диаграмма, ЭтотОбъект[ИмяОригинальнойДиаграммы], НастройкиОбщие);
	
	Диаграмма.ФорматЗначенийВПодписях        = "Л=ru_RU; ЧДЦ=; ЧН=0";
	
	
	СвойстваЭлемента = Новый Структура("Видимость", СтрНайти(СтрокаНастроек.ВидОбъектовУчета, "Доходы") > 0);
	ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, Префикс + "ДинамикаТекстДохода", СвойстваЭлемента);
	СвойстваЭлемента.Видимость = СтрНайти(СтрокаНастроек.ВидОбъектовУчета, "Расходы") > 0;
	ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, Префикс + "ДинамикаТекстРасхода", СвойстваЭлемента);
	СвойстваЭлемента.Видимость = СтрокаНастроек.ВидОбъектовУчета <> "ДоходыИРасходы";
	ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, Префикс + "ДинамикаТекстСреднего", СвойстваЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндикаторыДинамики(СтрокаНастройки, РезультатЗапроса, НастройкиИндикаторов)

	ШрифтПоказателя = ШрифтФорматированногоПоказателя(1);
	ШрифтСреднего   = Новый Шрифт;
	ПрефиксПоля     = СтрокаНастройки.Ключ + "_";
	ТекстВалютыОтчета    = Строка(НастройкиИндикаторов.ВалютаОтчета);
	СуммыСКопейками      = НастройкиИндикаторов.СуммыСКопейками;
	
	ВсегоДоходы        = 0;
	ВсегоРасходы       = 0;
	КоличествоПериодов = 0;
	ЕстьДоходы   = СтрокаНастройки.ВидОбъектовУчета = "ДоходыИРасходы" Или СтрокаНастройки.ВидОбъектовУчета = "Доходы";
	ЕстьРасходы  = СтрокаНастройки.ВидОбъектовУчета = "ДоходыИРасходы" Или СтрокаНастройки.ВидОбъектовУчета = "Расходы";
	
	Диаграмма = ЭтотОбъект[ПрефиксПоля + "ДиаграммаДинамики"];
	Диаграмма.Обновление           = Ложь;
	Диаграмма.Автотранспонирование = Ложь;
	Диаграмма.Очистить();
	
	УказанныйТипДиаграммы = Неопределено;
	Если Не СтрокаНастройки.ДополнительныеПараметры.Свойство("ТипДиаграммы", УказанныйТипДиаграммы) Или Не ЗначениеЗаполнено(УказанныйТипДиаграммы) Тогда
		УказанныйТипДиаграммы = "Гистограмма";
	КонецЕсли;
	Диаграмма.ТипДиаграммы = ТипДиаграммы[УказанныйТипДиаграммы];
	
	ВысотаДиаграммы = ?(СтрокаНастройки.ДополнительныеПараметры.Свойство("МинимальнаяВысотаДиаграммы"), СтрокаНастройки.ДополнительныеПараметры.МинимальнаяВысотаДиаграммы, 6);
	ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, ПрефиксПоля + "ДиаграммаДинамики", Новый Структура("Высота", Макс(6, ВысотаДиаграммы)));
	
	Если ЕстьДоходы Тогда
		СерияДохода = Диаграмма.УстановитьСерию("Доходы");
		СерияДохода.Цвет = ЦветДоходов();
		СерияДохода.Значение = "Доходы";
	КонецЕсли;
	
	Если ЕстьРасходы Тогда
		СерияРасхода = Диаграмма.УстановитьСерию("Расходы");
		СерияРасхода.Цвет = ЦветРасходов();
		СерияРасхода.Значение = "Расходы";
	КонецЕсли;
	
	Если НЕ ЕстьДоходы Или Не ЕстьРасходы Тогда
		СерияСреднее = Диаграмма.УстановитьСерию("Среднее");
		СерияСреднее.Цвет       = ЦветСерииИндикатора();
		СерияСреднее.Значение   = "Среднее";
		СерияСреднее.Индикатор  = Истина;
		СерияСреднее.Маркер     = ТипМаркераДиаграммы.Нет;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Если Выборка.Следующий() Тогда
		ВсегоДоходы = ?(ЕстьДоходы И ЗначениеЗаполнено(Выборка.Поступление), Выборка.Поступление, 0);
		ВсегоРасходы = ?(ЕстьРасходы И ЗначениеЗаполнено(Выборка.Списание), Выборка.Списание, 0);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	КоличествоПериодов = Выборка.Количество();
	СреднееЗаПериод    = 0;
	Если (НЕ ЕстьДоходы Или Не ЕстьРасходы) И КоличествоПериодов > 0 Тогда
		
		Если ЕстьДоходы Тогда
			СреднееЗаПериод = ВсегоДоходы / КоличествоПериодов;
		Иначе
			СреднееЗаПериод = ВсегоРасходы / КоличествоПериодов;
		КонецЕсли;
		
		ПодсказкаСреднего = НСтр("ru='Среднее: %1 %2'");
		ПодсказкаСреднего = СтрШаблон(ПодсказкаСреднего, СокращенноеПредставлениеСуммы(СреднееЗаПериод, СуммыСКопейками), ТекстВалютыОтчета);
		
	КонецЕсли;
	
	ИмяГруппировкиПериода = ОбщегоНазначенияДеньги.ИмяГруппировкиПоДлительности(СтрокаНастройки.Период.ДатаНачала, 
				Мин(НачалоДня(ТекущаяДата()), СтрокаНастройки.Период.ДатаОкончания));
	СтрокаФормата = СтрокаФорматаДляПериода(ИмяГруппировкиПериода);
	
	Пока Выборка.Следующий() Цикл
		
		ПериодСтрокой = Формат(Выборка.Период, СтрокаФормата);
		
		ТочкаДаты = Диаграмма.УстановитьТочку(Выборка.Период);
		ТочкаДаты.Расшифровка = Выборка.Период;
		ТочкаДаты.Текст = ПериодСтрокой;
		
		Если ЕстьДоходы Тогда
			СуммаДохода = ?(ЗначениеЗаполнено(Выборка.Поступление), Выборка.Поступление, 0);
			ТекстПодсказки = НСтр("ru='Поступления за %1 %2 %3'");
			ТекстПодсказки = СтрШаблон(ТекстПодсказки, ПериодСтрокой, СокращенноеПредставлениеСуммы(СуммаДохода, СуммыСКопейками), ТекстВалютыОтчета);
			Диаграмма.УстановитьЗначение(ТочкаДаты, СерияДохода, СуммаДохода, 
					Новый Структура("ТипПериода, Период, ВидПоказателя, Сумма", ИмяГруппировкиПериода, Выборка.Период, "Доход", СуммаДохода), 
					ТекстПодсказки) 
		КонецЕсли;
		 
		Если ЕстьРасходы Тогда
			СуммаРасхода = ?(ЗначениеЗаполнено(Выборка.Списание), Выборка.Списание, 0);
			ТекстПодсказки = НСтр("ru='Платежи за %1 %2 %3'");
			ТекстПодсказки = СтрШаблон(ТекстПодсказки, ПериодСтрокой, СокращенноеПредставлениеСуммы(СуммаРасхода, СуммыСКопейками), ТекстВалютыОтчета);
			Диаграмма.УстановитьЗначение(ТочкаДаты, СерияРасхода, СуммаРасхода, 
					Новый Структура("ТипПериода, Период, ВидПоказателя, Сумма", ИмяГруппировкиПериода, Выборка.Период, "Расход", СуммаРасхода), 
					ТекстПодсказки) 
		КонецЕсли;
		 
		Если Не ЕстьДоходы Или Не ЕстьРасходы Тогда
			Диаграмма.УстановитьЗначение(ТочкаДаты, СерияСреднее, СреднееЗаПериод, 
					Новый Структура("ТипПериода, Период, ВидПоказателя, Сумма", ИмяГруппировкиПериода, Выборка.Период, "Среднее", СреднееЗаПериод), 
					ПодсказкаСреднего) 
		КонецЕсли;
		
	КонецЦикла;
	
	Диаграмма.Автотранспонирование = Истина;
	Диаграмма.Обновление           = Истина;
	
	Если ВсегоРасходы = 0 И ВсегоДоходы = 0 Тогда
		Элементы[ПрефиксПоля + "ДинамикаГруппаСтраниц"].ТекущаяСтраница = Элементы[ПрефиксПоля + "ДинамикаСтраницаНетДанных"];
		Возврат;
	Иначе
		Элементы[ПрефиксПоля + "ДинамикаГруппаСтраниц"].ТекущаяСтраница = Элементы[ПрефиксПоля + "ДинамикаСтраницаПоказатели"];
	КонецЕсли;
	
	Если ЕстьДоходы Тогда
		
		ТекстСуммы = СокращенноеПредставлениеСуммы(ВсегоДоходы, СуммыСКопейками);
		ТекстСуммы = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(ТекстСуммы, ШрифтПоказателя),
				" ",
				Новый ФорматированнаяСтрока(ТекстВалютыОтчета),
				" ",
				Новый ФорматированнаяСтрока(?(ЕстьРасходы, НСтр("ru='получено'"), НСтр("ru='всего'")), "")
		);
		Элементы[ПрефиксПоля + "ДинамикаТекстДохода"].Заголовок = ТекстСуммы;
		
	КонецЕсли;
	
	Если ЕстьРасходы Тогда
		
		ТекстСуммы = СокращенноеПредставлениеСуммы(ВсегоРасходы, СуммыСКопейками);
		ТекстСуммы = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(ТекстСуммы, ШрифтПоказателя),
				" ",
				Новый ФорматированнаяСтрока(ТекстВалютыОтчета),
				" ",
				Новый ФорматированнаяСтрока(?(ЕстьДоходы, НСтр("ru='потрачено'"), НСтр("ru='всего'")), "")
		);
		Элементы[ПрефиксПоля + "ДинамикаТекстРасхода"].Заголовок = ТекстСуммы;
		
	КонецЕсли;
	
	Если Не ЕстьРасходы Или Не ЕстьДоходы Тогда
		
		ТекстСуммы = СокращенноеПредставлениеСуммы(СреднееЗаПериод, СуммыСКопейками);
		ТекстСуммы = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(ТекстСуммы, ШрифтСреднего),
				" ",
				ТекстВалютыОтчета,
				" ",
				ПредставлениеПериодаСреднего(СтрокаНастройки.Период)
		);
		Элементы[ПрефиксПоля + "ДинамикаТекстСреднего"].Заголовок = ТекстСуммы;
		
	КонецЕсли;
	
	СвойстваЭлемента = Новый Структура("Видимость", ЕстьДоходы);
	ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, ПрефиксПоля + "ДинамикаТекстДохода", СвойстваЭлемента);
	СвойстваЭлемента = Новый Структура("Видимость", ЕстьРасходы);
	ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, ПрефиксПоля + "ДинамикаТекстРасхода", СвойстваЭлемента);
	СвойстваЭлемента = Новый Структура("Видимость", Не ЕстьРасходы Или Не ЕстьДоходы);
	ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, ПрефиксПоля + "ДинамикаТекстСреднего", СвойстваЭлемента);
	

КонецПроцедуры
 

#КонецОбласти 


#Область ИндикаторПланов

&НаСервере
Процедура ПрименитьНастройкиИндикатораПланов(НастройкиОбщие, СтрокаНастроек)

	Префикс = СтрокаНастроек.Ключ + "_";
	ЦветТекста = ЦветЗаголовкаИндикатора();
	
	// Заголовок индикатора с ниперссылкой выбора периода
	ТекстЗаголовка = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(СтрокаНастроек.Заголовок, , ЦветТекста),
			" ",
			//Новый ФорматированнаяСтрока(ПредставлениеПериодаВЗаголовке(НастройкиОбщие, СтрокаНастроек.Период), , ЦветТекста, , "mny:#ВыбратьПериод")
			Новый ФорматированнаяСтрока(ПредставлениеПериодаВЗаголовке(НастройкиОбщие, СтрокаНастроек.Период), , ЦветТекста)
			);
	
	Элементы[Префикс + "ПланыЗаголовок"].Заголовок = ТекстЗаголовка;

	// Настройки диаграммы
	ИмяОригинальнойДиаграммы = "ДиаграммаПланов";
	Диаграмма = ЭтотОбъект[Префикс + ИмяОригинальнойДиаграммы];
	ОбновитьОбщиеНастройкиДиаграммы(Диаграмма, ЭтотОбъект[ИмяОригинальнойДиаграммы], НастройкиОбщие);
	
	//Диаграмма.ВидПодписей                     = ВидПодписейКДиаграмме.Значение;
	//Диаграмма.ПоложениеПодписей               = ПоложениеПодписейКДиаграмме.Край;
	Диаграмма.ФорматЗначенийВПодписях        = "Л=ru_RU; ЧДЦ=; ЧН=0";
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндикаторыПланов(СтрокаНастройки, РезультатЗапроса, НастройкиИндикаторов)

	//ШрифтПоказателя    = ШрифтФорматированногоПоказателя(-1);
	ШрифтПоказателя    = Новый Шрифт;
	ПрефиксПоля        = СтрокаНастройки.Ключ + "_";
	ТекстВалютыОтчета  = Строка(НастройкиИндикаторов.ВалютаОтчета);
	СуммыСКопейками      = НастройкиИндикаторов.СуммыСКопейками;
	
	ТаблицаСумм = РезультатЗапроса.Выгрузить();
	
	ВсегоКПолучению   = ТаблицаСумм.Итог("СуммаПоступления");
	ВсегоКОплате      = ТаблицаСумм.Итог("СуммаСписания");
	ВсегоКПеремещению = ТаблицаСумм.Итог("СуммаПеремещения");
	
	Если ВсегоКПолучению = 0 И ВсегоКОплате = 0 И ВсегоКПеремещению = 0 Тогда
		Элементы[ПрефиксПоля + "ПланыГруппаСтраниц"].ТекущаяСтраница = Элементы[ПрефиксПоля + "ПланыСтраницаНетДанных"];
		Возврат;
	Иначе
		Элементы[ПрефиксПоля + "ПланыГруппаСтраниц"].ТекущаяСтраница = Элементы[ПрефиксПоля + "ПланыСтраницаПоказатели"];
	КонецЕсли;
	
	ВсегоНаСегодня    = 0;
	ВсегоПросрочено   = 0;
	ВсегоНаБудущее    = 0;
	
	Для каждого СтрокаСуммы Из ТаблицаСумм Цикл
		Если СтрокаСуммы.Период = "НаСегодня" Тогда
			ВсегоНаСегодня = СтрокаСуммы.СуммаПоступления + СтрокаСуммы.СуммаСписания + СтрокаСуммы.СуммаПеремещения; 
		ИначеЕсли СтрокаСуммы.Период = "Просрочено" Тогда
			ВсегоПросрочено = СтрокаСуммы.СуммаПоступления + СтрокаСуммы.СуммаСписания + СтрокаСуммы.СуммаПеремещения; 
		Иначе
			ВсегоНаБудущее = СтрокаСуммы.СуммаПоступления + СтрокаСуммы.СуммаСписания + СтрокаСуммы.СуммаПеремещения; 
		КонецЕсли;
	КонецЦикла;
	
	// Обновляем итоги:
	Диаграмма = ЭтотОбъект[ПрефиксПоля + "ДиаграммаПланов"];
	Диаграмма.Очистить();
	
	ТочкаПросрочено = ?(ВсегоПросрочено = 0, Неопределено, Диаграмма.Точки.Добавить(НСтр("ru='Просрочено'")));
	ТочкаСегодня = ?(ВсегоНаСегодня = 0, Неопределено, Диаграмма.Точки.Добавить(НСтр("ru='На сегодня'")));
	ТочкаБудущее = ?(ВсегоНаБудущее = 0, Неопределено, Диаграмма.Точки.Добавить(НСтр("ru='На будущее'")));
	
	СерияКПолучению     = Неопределено;
	СерияКОплате        = Неопределено;
	СерияКПеремещению   = Неопределено;
	
	Если ВсегоКПолучению = 0 Тогда
		Элементы[ПрефиксПоля + "ПланыГруппаКПолучению"].Видимость = Ложь;
	Иначе
		
		ТекстПредставления = Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(СокращенноеПредставлениеСуммы(ВсегоКПолучению, СуммыСКопейками), ШрифтПоказателя),
					" ",
					ТекстВалютыОтчета,
					" - ",
					Новый ФорматированнаяСтрока(НСтр("ru='к получению'"))
					);
		СерияКПолучению = Диаграмма.Серии.Добавить(НСтр("ru='К получению'"));
		СерияКПолучению.Цвет = ЦветДоходов();
		Элементы[ПрефиксПоля + "ПланТекстКПолучению"].Заголовок   = ТекстПредставления;
		Элементы[ПрефиксПоля + "ПланыГруппаКПолучению"].Видимость = Истина;
		
	КонецЕсли;
	
	Если ВсегоКОплате = 0 Тогда
		Элементы[ПрефиксПоля + "ПланыГруппаКОплате"].Видимость = Ложь;
	Иначе
		
		ТекстПредставления = Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(СокращенноеПредставлениеСуммы(ВсегоКОплате, СуммыСКопейками), ШрифтПоказателя),
					" ",
					ТекстВалютыОтчета,
					" - ",
					Новый ФорматированнаяСтрока(НСтр("ru='к оплате'"))
					);
		СерияКОплате = Диаграмма.Серии.Добавить(НСтр("ru='К оплате'"));
		СерияКОплате.Цвет = ЦветРасходов();
		Элементы[ПрефиксПоля + "ПланТекстКОплате"].Заголовок   = ТекстПредставления;
		Элементы[ПрефиксПоля + "ПланыГруппаКОплате"].Видимость = Истина;
		
	КонецЕсли;
	
	Если ВсегоКПеремещению = 0 Тогда
		Элементы[ПрефиксПоля + "ПланыГруппаКПеремещению"].Видимость = Ложь;
	Иначе
		
		ТекстПредставления = Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(СокращенноеПредставлениеСуммы(ВсегоКПеремещению, СуммыСКопейками), ШрифтПоказателя),
					" ",
					ТекстВалютыОтчета,
					" - ",
					Новый ФорматированнаяСтрока(НСтр("ru='к перемещению'"))
					);
		СерияКПеремещению = Диаграмма.Серии.Добавить(НСтр("ru='К перемещению'"));
		СерияКПеремещению.Цвет = ЦветПеремещений();
		Элементы[ПрефиксПоля + "ПланТекстКПеремещению"].Заголовок   = ТекстПредставления;
		Элементы[ПрефиксПоля + "ПланыГруппаКПеремещению"].Видимость = Истина;
		
	КонецЕсли;
	
	Для каждого СтрокаСуммы Из ТаблицаСумм Цикл
		
		Если СтрокаСуммы.Период = "НаСегодня" Тогда
			Точка = ТочкаСегодня; 
		ИначеЕсли СтрокаСуммы.Период = "Просрочено" Тогда
			Точка = ТочкаПросрочено; 
		Иначе
			Точка = ТочкаБудущее; 
		КонецЕсли;
		
		Если СтрокаСуммы.СуммаПоступления <> 0 Тогда
			
			Диаграмма.УстановитьЗначение(
				Точка,
				СерияКПолучению,
				СтрокаСуммы.СуммаПоступления,
				Новый Структура("Период,ВидОпераций,Сумма", СтрокаСуммы.Период, "Доход", СтрокаСуммы.СуммаПоступления), // Расшифровка
				НСтр("ru='К получению: '") + " " + СокращенноеПредставлениеСуммы(СтрокаСуммы.СуммаПоступления, СуммыСКопейками)); // Подсказка
			
		КонецЕсли;
		
		Если СтрокаСуммы.СуммаСписания <> 0 Тогда 
			
			Диаграмма.УстановитьЗначение(
				Точка,
				СерияКОплате,
				СтрокаСуммы.СуммаСписания,
				Новый Структура("Период,ВидОпераций,Сумма", СтрокаСуммы.Период, "Расход", СтрокаСуммы.СуммаСписания), // Расшифровка
				НСтр("ru='К оплате: '") + " " + СокращенноеПредставлениеСуммы(СтрокаСуммы.СуммаСписания, СуммыСКопейками)); // Подсказка
			
		КонецЕсли;
		
		Если СтрокаСуммы.СуммаПеремещения <> 0 Тогда 
			
			Диаграмма.УстановитьЗначение(
				Точка,
				СерияКПеремещению,
				СтрокаСуммы.СуммаПеремещения,
				Новый Структура("Период,ВидОпераций,Сумма", СтрокаСуммы.Период, "Перемещение", СтрокаСуммы.СуммаПеремещения), // Расшифровка
				НСтр("ru='К перемещению: '") + " " + СокращенноеПредставлениеСуммы(СтрокаСуммы.СуммаПеремещения, СуммыСКопейками)); // Подсказка
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти 


#Область ИндкаторКурсовВалют

&НаСервере
Процедура ПрименитьНастройкиИндикатораКурсовВалют(НастройкиОбщие, СтрокаНастроек)

	Префикс = СтрокаНастроек.Ключ + "_";
	ЦветТекста = ЦветЗаголовкаИндикатора();
	
	// Заголовок индикатора с ниперссылкой загрузки курса 
	// заполняется из результатов запроса последней датой курса
	СвойстваЭлемента = Новый Структура("Заголовок", "");
	СвойстваЭлемента.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(СтрокаНастроек.Заголовок), , ЦветТекста);
	
	ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, Префикс + "КурсыВалютЗаголовок", СвойстваЭлемента);

	// Настройки диаграммы
	ИмяОригинальнойДиаграммы = "ДиаграммаКурсовВалют";
	Диаграмма = ЭтотОбъект[Префикс + ИмяОригинальнойДиаграммы];
	ОбновитьОбщиеНастройкиДиаграммы(Диаграмма, ЭтотОбъект[ИмяОригинальнойДиаграммы], НастройкиОбщие);
	
	ОтключитьВидимостьКурсовВалют(Префикс, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтключитьВидимостьКурсовВалют(Префикс, Форма)

	ВсегоВалют = МаксимумВалютНаНидикаторе();
	Для Счетчик = 1 По ВсегоВалют Цикл
		
		Суффикс = Строка(Счетчик);
		
		// группа курса валюты
		//ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(Форма, Префикс + "КурсыВалютГруппа" + Счетчик, 
		//			Новый Структура("Видимость", Ложь));
		Форма.Элементы[Префикс + "КурсыВалютГруппа" + Счетчик].Видимость = Ложь;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МаксимумВалютНаНидикаторе()
	Возврат 5;
КонецФункции

&НаСервере
Процедура ОбновитьИндикаторыКурсовВалют(СтрокаНастройки, РезультатЗапроса, НастройкиИндикаторов)

	ПрефиксПоля     = СтрокаНастройки.Ключ + "_";
	ТекстВалютыУчета = " " + ПараметрыСеанса.ВалютаУчета;
	
	ОтключитьВидимостьКурсовВалют(ПрефиксПоля, ЭтотОбъект);
	
	Диаграмма = ЭтотОбъект[ПрефиксПоля + "ДиаграммаКурсовВалют"];
	Диаграмма.Обновление           = Ложь;
	Диаграмма.Автотранспонирование = Ложь;
	Диаграмма.Очистить();
	
	УказанныйТипДиаграммы = Неопределено;
	Если Не СтрокаНастройки.ДополнительныеПараметры.Свойство("ТипДиаграммы", УказанныйТипДиаграммы) Или Не ЗначениеЗаполнено(УказанныйТипДиаграммы) Тогда
		УказанныйТипДиаграммы = "График";
	КонецЕсли;
	Диаграмма.ТипДиаграммы = ТипДиаграммы[УказанныйТипДиаграммы];
	
	ВысотаДиаграммы = ?(СтрокаНастройки.ДополнительныеПараметры.Свойство("МинимальнаяВысотаДиаграммы"), СтрокаНастройки.ДополнительныеПараметры.МинимальнаяВысотаДиаграммы, 6);
	ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, ПрефиксПоля + "ДиаграммаКурсовВалют", Новый Структура("Высота", Макс(6, ВысотаДиаграммы)));
	
	Если СтрокаНастройки.ДополнительныеПараметры.СписокВалют.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МаксДата  = Дата(1,1,1);
	МинКурс   = 9999999;
	Счетчик = 0;
	Завтра  = КонецДня(ТекущаяДата()) + 1;
	
	ВыборкаПоВалютам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
	Пока ВыборкаПоВалютам.Следующий() Цикл
		
		Счетчик = Счетчик + 1;
		
		СерияВалюты = Диаграмма.Серии.Добавить(ВыборкаПоВалютам.Валюта);
		СерияВалюты.Значение   = ВыборкаПоВалютам.Валюта;
		СерияВалюты.Маркер     = ТипМаркераДиаграммы.Нет;
		СерияВалюты.Текст      = Строка(ВыборкаПоВалютам.Валюта);
		Курс           = 0;
		Кратность      = 0;
		ПредыдущийКурс = 0;
		ПредставлениеКурса = "";
		
		ВыборкаПоДатам = ВыборкаПоВалютам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
		Пока ВыборкаПоДатам.Следующий() Цикл
			
			Если ВыборкаПоДатам.Период = Завтра И Не ЗначениеЗаполнено(ВыборкаПоДатам.Курс) Тогда
				Прервать;
			КонецЕсли;
			
			ТочкаДаты = Диаграмма.УстановитьТочку(ВыборкаПоДатам.Период);
			ТочкаДаты.Текст = Формат(ВыборкаПоДатам.Период, "ДФ='d MMM'");
			
			Если ЗначениеЗаполнено(ВыборкаПоДатам.Курс) Тогда
				
				Курс      = ?(ЗначениеЗаполнено(ВыборкаПоДатам.Кратность), ВыборкаПоДатам.Курс / ВыборкаПоДатам.Кратность, 0);
				Кратность = ?(ЗначениеЗаполнено(ВыборкаПоДатам.Кратность), ВыборкаПоДатам.Кратность, 0);
				
				Изменение = Курс - ПредыдущийКурс;
				ПредыдущийКурс = Курс;
				ПредставлениеКурса = НСтр("ru='%1 за %2 %3'");
				ПредставлениеКурса  = СтрШаблон(ПредставлениеКурса, ВыборкаПоДатам.Курс, Кратность, ТекстВалютыУчета);
				
				МинКурс  = Мин(МинКурс, Курс);
				МаксДата = Макс(МаксДата, ВыборкаПоДатам.Период);
				
			КонецЕсли;
			
			Диаграмма.УстановитьЗначение(ТочкаДаты, СерияВалюты, Курс,
						Новый Структура("Валюта,Дата", ВыборкаПоВалютам.Валюта, ВыборкаПоДатам.Период),
						ПредставлениеКурса);
			
		КонецЦикла;
		
		// Обновляем надпись курса
		Если Не ЗначениеЗаполнено(Изменение) Тогда
			Изменение      = 0;
			ТекстИзменения = "--";
		Иначе
			ТекстИзменения = ?(Изменение > 0, "+", "") + Изменение;
		КонецЕсли;
		ЭтотОбъект[ПрефиксПоля + "КурсыВалютВалюта" + Счетчик] = ВыборкаПоВалютам.Валюта;
		ЭтотОбъект[ПрефиксПоля + "КурсыВалютКурс" + Счетчик] = Курс;
		ЭтотОбъект[ПрефиксПоля + "КурсыВалютИзменение" + Счетчик] = ТекстИзменения;
		Элементы[ПрефиксПоля + "КурсыВалютИзменение" + Счетчик].ЦветТекста = ?(Изменение < 0, ЦветРасходов(), ЦветДоходов());
		Элементы[ПрефиксПоля + "КурсыВалютЛегенда" + Счетчик].ЦветФона = СерияВалюты.Цвет;
		Элементы[ПрефиксПоля + "КурсыВалютГруппа" + Счетчик].Видимость = Истина;
		
	КонецЦикла;
	
	// Изменяем базовое значение диаграммы
	Если МинКурс > 0 Тогда
		Диаграмма.БазовоеЗначение = МинКурс - Макс(1, МинКурс * 0.05);
	Иначе
		Диаграмма.БазовоеЗначение = 0;
	КонецЕсли;
	
	Диаграмма.Автотранспонирование = Истина;
	Диаграмма.Обновление           = Истина;
	
	// Обновляем заголовок индикатора
	СвойстваЭлемента = Новый Структура("Заголовок", "");
	ЦветЗаголовка = ЦветЗаголовкаИндикатора();
	СвойстваЭлемента.Заголовок = НСтр("ru='на %1'");
	СвойстваЭлемента.Заголовок = СтрШаблон(СвойстваЭлемента.Заголовок, СокращенноеПредставлениеДаты(МаксДата));
	СвойстваЭлемента.Заголовок = СтрокаНастройки.Заголовок + " " + СвойстваЭлемента.Заголовок;
	СвойстваЭлемента.Заголовок = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(СвойстваЭлемента.Заголовок, , ЦветЗаголовка),
				"   ",
				Новый ФорматированнаяСтрока(НСтр("ru='Загрузить'"), , , , "mny:#ЗагрузитьКурсы")
				);
	
	ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, ПрефиксПоля + "КурсыВалютЗаголовок", СвойстваЭлемента);

КонецПроцедуры


#КонецОбласти 


#Область ИндикаторНакоплений

&НаСервере
Процедура ПрименитьНастройкиИндикатораНакоплений(НастройкиОбщие, СтрокаНастроек)

	Префикс = СтрокаНастроек.Ключ + "_";
	ЦветТекста = ЦветЗаголовкаИндикатора();
	
	// Заголовок индикатора (гиперссылок нет)
	ТекстЗаголовка = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(СтрокаНастроек.Заголовок, , ЦветТекста)
			);
	
	Элементы[Префикс + "НакопленияЗаголовок"].Заголовок = ТекстЗаголовка;

	// Настройки диаграммы
	ИмяОригинальнойДиаграммы = "ДиаграммаНакоплений";
	Диаграмма = ЭтотОбъект[Префикс + ИмяОригинальнойДиаграммы];
	ОбновитьОбщиеНастройкиДиаграммы(Диаграмма, ЭтотОбъект[ИмяОригинальнойДиаграммы], НастройкиОбщие);
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ЗаполнитьТаблицуНакоплений(РезультатЗапроса, ТаблицаНакоплений)

	ОстатокНакопленийВВалютеОтчета = 0;

	ТипЧисло = Новый ОписаниеТипов("Число");
	
	ТаблицаНакоплений = Новый ТаблицаЗначений;
	ТаблицаНакоплений.Колонки.Добавить("ФинансоваяЦель");
	ТаблицаНакоплений.Колонки.Добавить("Приоритет", ТипЧисло);
	ТаблицаНакоплений.Колонки.Добавить("Срок");
	ТаблицаНакоплений.Колонки.Добавить("СрочностьЦели");
	ТаблицаНакоплений.Колонки.Добавить("ОсталосьМесяцев");
	ТаблицаНакоплений.Колонки.Добавить("Предопределенный");
	ТаблицаНакоплений.Колонки.Добавить("Активность");
	ТаблицаНакоплений.Колонки.Добавить("СуммаЦелиВВалютеОтчета", ТипЧисло); //Сумма финансовой цели в валюте отчета
	ТаблицаНакоплений.Колонки.Добавить("ЗарезервированоВВалютеОтчета", ТипЧисло); //сумма накопений, зарезервированных за фин. целью в валюте отчета
	ТаблицаНакоплений.Колонки.Добавить("РаспределеноОбщихНакопленийВВалютеОтчета", ТипЧисло); //сумма накоплений без указания цели, распределенных на данную цель в соответствии с ее приоритетом в валюте отчета
	ТаблицаНакоплений.Колонки.Добавить("ПотраченоНаЦельВВалютеОтчета", ТипЧисло); //сумма уже потраченная на достижение цели в валюте отчета
	ТаблицаНакоплений.Колонки.Добавить("НакопленоВсегоВВалютеОтчета", ТипЧисло); //сумма зарезервированных, распределенных и потраченных в валюте отчета
	ТаблицаНакоплений.Колонки.Добавить("ОткладыватьВМесяцВВалютеОтчета", ТипЧисло); //сколько рекомендуется откладывать ежемесячно для достижения цели в валюте отчета
	ТаблицаНакоплений.Колонки.Добавить("ОсталосьНакопитьВВалютеОтчета", ТипЧисло); 
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Предопределенный Тогда
			// Определяем сумму общих накоплений (без указания конкретной цели)
			ОстатокНакопленийВВалютеОтчета = Выборка.ЗарезервированоВВалютеОтчета;
		КонецЕсли;
		
		//Добавляем цель в таблицу
		СтрокаТаблицы = ТаблицаНакоплений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		
		Если Выборка.Предопределенный Или Не Выборка.Активность Тогда
			// Неактивные цели в расчетах не участвуют
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.ПотраченоНаЦельВВалютеОтчета  = СтрокаТаблицы.ПотраченоНаЦельВВалютеОтчета + Выборка.ПотраченоСвободныхДенегВВалютеОтчета;
		
		// Вычисляем остаток общих накоплений
		Если ЗначениеЗаполнено(Выборка.СуммаЦели) Тогда
			ИзОбщихНакопленийВВалютеОтчета  = Макс(0, Выборка.СуммаЦелиВВалютеОтчета - Выборка.ЗарезервированоВВалютеОтчета - Выборка.ПотраченоНаЦельВВалютеОтчета - Выборка.ПотраченоСвободныхДенегВВалютеОтчета);
			ИзОбщихНакопленийВВалютеОтчета  = Мин(ИзОбщихНакопленийВВалютеОтчета, ОстатокНакопленийВВалютеОтчета);
		Иначе
			ИзОбщихНакопленийВВалютеОтчета = Макс(0, ОстатокНакопленийВВалютеОтчета);
		КонецЕсли;
		ОстатокНакопленийВВалютеОтчета = ОстатокНакопленийВВалютеОтчета - ИзОбщихНакопленийВВалютеОтчета;
		
		СтрокаТаблицы.РаспределеноОбщихНакопленийВВалютеОтчета = ИзОбщихНакопленийВВалютеОтчета;
		СтрокаТаблицы.НакопленоВсегоВВалютеОтчета = СтрокаТаблицы.ЗарезервированоВВалютеОтчета 
						+ СтрокаТаблицы.РаспределеноОбщихНакопленийВВалютеОтчета
						+ СтрокаТаблицы.ПотраченоНаЦельВВалютеОтчета;
		СтрокаТаблицы.ОсталосьНакопитьВВалютеОтчета = ?(Выборка.СуммаЦели = 0, 0, 
				СтрокаТаблицы.СуммаЦелиВВалютеОтчета - СтрокаТаблицы.НакопленоВсегоВВалютеОтчета);
		
		Если Выборка.ОсталосьМесяцев > 0 И ЗначениеЗаполнено(Выборка.СуммаЦели)
			И СтрокаТаблицы.ОсталосьНакопитьВВалютеОтчета > 0 Тогда
			
			СтрокаТаблицы.ОткладыватьВМесяцВВалютеОтчета = СтрокаТаблицы.ОсталосьНакопитьВВалютеОтчета / Выборка.ОсталосьМесяцев;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаНакоплений.Сортировать("Предопределенный УБЫВ, Приоритет УБЫВ");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндикаторНакоплений(СтрокаНастройки, РезультатЗапроса, НастройкиИндикаторов, ТаблицаНакоплений)

	Если ТаблицаНакоплений = Неопределено Тогда
		ЗаполнитьТаблицуНакоплений(РезультатЗапроса, ТаблицаНакоплений);
	КонецЕсли;
	
	ПрефиксПоля     = СтрокаНастройки.Ключ + "_";
	ТекстВалютыОтчета = Строка(НастройкиИндикаторов.ВалютаОтчета);
	СуммыСКопейками      = НастройкиИндикаторов.СуммыСКопейками;
	
	НакопленоБезЦелей     = 0;
	ВсегоНакоплено        = 0;
	СуммаВсехЦелей         = 0;
	БлижайшийСрок         = Неопределено;
	ТребуетсяВМесяц       = 0;
	
	Диаграмма = ЭтотОбъект[ПрефиксПоля + "ДиаграммаНакоплений"];
	Диаграмма.Обновление           = Ложь;
	Диаграмма.Автотранспонирование = Ложь;
	Диаграмма.Очистить();
	
	УказанныйТипДиаграммы = Неопределено;
	Если Не СтрокаНастройки.ДополнительныеПараметры.Свойство("ТипДиаграммы", УказанныйТипДиаграммы) Или Не ЗначениеЗаполнено(УказанныйТипДиаграммы) Тогда
		УказанныйТипДиаграммы = "Гистограмма";
	КонецЕсли;
	Диаграмма.ТипДиаграммы = ТипДиаграммы[УказанныйТипДиаграммы];
	
	ВысотаДиаграммы = ?(СтрокаНастройки.ДополнительныеПараметры.Свойство("МинимальнаяВысотаДиаграммы"), СтрокаНастройки.ДополнительныеПараметры.МинимальнаяВысотаДиаграммы, 6);
	ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, ПрефиксПоля + "ДиаграммаНакоплений", Новый Структура("Высота", Макс(6, ВысотаДиаграммы)));
	
	// Выводим информацию о финансовой цели в диаграмму
	СерияПотрачено = Диаграмма.УстановитьСерию("Потрачено");
	СерияПотрачено.Цвет = ЦветаСтиля.НакопленияПотрачено;
	СерияПотрачено.Текст = НСтр("ru='Потрачено на цель'"); 
	
	СерияЗарезервировано = Диаграмма.УстановитьСерию("Зарезервировано");
	СерияЗарезервировано.Цвет = ЦветаСтиля.НакопленияЗарезервировано;
	СерияЗарезервировано.Текст = НСтр("ru='Зарезервировано на цель'"); 
	
	СерияРаспределено = Диаграмма.УстановитьСерию("Распределено");
	СерияРаспределено.Цвет = ЦветаСтиля.НакопленияОбщие;
	СерияРаспределено.Текст = НСтр("ru='Распределено общих накоплений'"); 
	
	СерияОсталосьНакопить       = Диаграмма.УстановитьСерию("Осталось");
	СерияОсталосьНакопить.Цвет  = ЦветаСтиля.НакопленияОсталосьНакопить;
	СерияОсталосьНакопить.Текст = НСтр("ru='Осталось накопить'"); 
	
	СуммаЦелейСписка  = 0;
	НакопленоНаСписок = 0;
	ОсталосьОтСписка  = 0;
	
	СписокЦелей = ?(СтрокаНастройки.ДополнительныеПараметры.СписокЦелей.Количество() = 0, Неопределено, СтрокаНастройки.ДополнительныеПараметры.СписокЦелей);
	
	Для каждого СтрокаТаблицы Из ТаблицаНакоплений Цикл
		
		ВсегоНакоплено = ВсегоНакоплено + СтрокаТаблицы.ЗарезервированоВВалютеОтчета;
		
		Если СтрокаТаблицы.Предопределенный Тогда
			НакопленоБезЦелей = СтрокаТаблицы.ЗарезервированоВВалютеОтчета;
			Продолжить;
		КонецЕсли;
		
		// Проверяем настройки отбора:
		Если СтрокаНастройки.ДополнительныеПараметры.СрочностьЦели <> "" 
				И СтрокаТаблицы.СрочностьЦели <> СтрокаНастройки.ДополнительныеПараметры.СрочностьЦели Тогда
			Продолжить;
		КонецЕсли;
		Если СписокЦелей <> Неопределено 
				И СписокЦелей.НайтиПоЗначению(СтрокаТаблицы.ФинансоваяЦель) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Активность Тогда
			
			СуммаВсехЦелей = СуммаВсехЦелей + СтрокаТаблицы.СуммаЦелиВВалютеОтчета;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Срок) Тогда
				БлижайшийСрок = ?(БлижайшийСрок = Неопределено, СтрокаТаблицы.Срок, Мин(БлижайшийСрок, СтрокаТаблицы.Срок));
			КонецЕсли;
			
		КонецЕсли;
		
		
		// Добавляем точку на диаграмму
		ТочкаЦели = Диаграмма.УстановитьТочку(СтрокаТаблицы.ФинансоваяЦель);
		ТочкаЦели.Текст = ДеньгиКлиентСервер.СокращенноеПредставление(Строка(СтрокаТаблицы.ФинансоваяЦель), 15, Ложь);
		ТочкаЦели.Расшифровка = СтрокаТаблицы.ФинансоваяЦель;
		
		ПредставлениеЦели = Строка(СтрокаТаблицы.Приоритет) + ". " + ДеньгиКлиентСервер.СокращенноеПредставление(Строка(СтрокаТаблицы.ФинансоваяЦель), 18, Ложь);
		
		//Суммы накоплений и расходов:
		ПотраченоНаЦель   = СтрокаТаблицы.ПотраченоНаЦельВВалютеОтчета;
		РезервНаЦель      = СтрокаТаблицы.ЗарезервированоВВалютеОтчета;
		ОбщихНаЦель       = СтрокаТаблицы.РаспределеноОбщихНакопленийВВалютеОтчета;
		ОсталосьНакопить  = СтрокаТаблицы.ОсталосьНакопитьВВалютеОтчета;
		НакопленоНаСписок = НакопленоНаСписок + Макс(0, СтрокаТаблицы.НакопленоВсегоВВалютеОтчета);
		
		// Заполняем значения на диаграмме
		Если ПотраченоНаЦель > 0 Тогда
			ТекстПодсказки = НСтр("ru='%1, потрачено: %2'"); 
			ТекстПодсказки = СтрШаблон(ТекстПодсказки, ПредставлениеЦели, СокращенноеПредставлениеСуммы(ПотраченоНаЦель, СуммыСКопейками));
			Диаграмма.УстановитьЗначение(ТочкаЦели, СерияПотрачено, ПотраченоНаЦель,
						Новый Структура("ФинансоваяЦель,ТипПоказателя", СтрокаТаблицы.ФинансоваяЦель, "Потрачено"), 
						ТекстПодсказки);
		КонецЕсли;
		Если РезервНаЦель > 0 Тогда
			ТекстПодсказки = НСтр("ru='%1, зарезервировано: %2'"); 
			ТекстПодсказки = СтрШаблон(ТекстПодсказки, ПредставлениеЦели, СокращенноеПредставлениеСуммы(РезервНаЦель, СуммыСКопейками));
			Диаграмма.УстановитьЗначение(ТочкаЦели, СерияЗарезервировано, РезервНаЦель,
						Новый Структура("ФинансоваяЦель,ТипПоказателя", СтрокаТаблицы.ФинансоваяЦель, "Зарезервировано"), 
						ТекстПодсказки);
		КонецЕсли;
		Если ОбщихНаЦель > 0 Тогда
			ТекстПодсказки = НСтр("ru='%1, доступно из общих накоплений: %2'"); 
			ТекстПодсказки = СтрШаблон(ТекстПодсказки, ПредставлениеЦели, СокращенноеПредставлениеСуммы(ОбщихНаЦель, СуммыСКопейками));
			Диаграмма.УстановитьЗначение(ТочкаЦели, СерияРаспределено, ОбщихНаЦель,
						Новый Структура("ФинансоваяЦель,ТипПоказателя", СтрокаТаблицы.ФинансоваяЦель, "Распределено"), 
						ТекстПодсказки);
		КонецЕсли;
		Если ОсталосьНакопить > 0 Тогда
			ТекстПодсказки = НСтр("ru='%1, осталось накопить: %2'"); 
			ТекстПодсказки = СтрШаблон(ТекстПодсказки, ПредставлениеЦели, СокращенноеПредставлениеСуммы(ОсталосьНакопить, СуммыСКопейками));
			Диаграмма.УстановитьЗначение(ТочкаЦели, СерияОсталосьНакопить, ОсталосьНакопить,
						Новый Структура("ФинансоваяЦель,ТипПоказателя", СтрокаТаблицы.ФинансоваяЦель, "Распределено"), 
						ТекстПодсказки);
		КонецЕсли;
		
		// Вычисляем сроки и сумму ежемесячного накопления
		Если ЗначениеЗаполнено(СтрокаТаблицы.Срок) Тогда
			
			Если СтрокаТаблицы.ОсталосьМесяцев > 0 Тогда
				ВМесяцНаЦель = ?(СтрокаТаблицы.ОсталосьНакопитьВВалютеОтчета > 0, СтрокаТаблицы.ОсталосьНакопитьВВалютеОтчета / СтрокаТаблицы.ОсталосьМесяцев, 0);
			Иначе
				ВМесяцНаЦель = Макс(0, СтрокаТаблицы.ОсталосьНакопитьВВалютеОтчета);
			КонецЕсли;
			
			ТребуетсяВМесяц = ТребуетсяВМесяц + ВМесяцНаЦель;
			
			Если СтрокаТаблицы.Срок > ТекущаяДата() Тогда
				БлижайшийСрок = ?(БлижайшийСрок = Неопределено, СтрокаТаблицы.Срок, Мин(СтрокаТаблицы.Срок, БлижайшийСрок));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если Диаграмма.Точки.Количество() = 0 Тогда
		Элементы[ПрефиксПоля + "НакопленияГруппаСтраниц"].ТекущаяСтраница = Элементы[ПрефиксПоля + "НакопленияСтраницаНетДанных"];
		Возврат;
	Иначе
		Элементы[ПрефиксПоля + "НакопленияГруппаСтраниц"].ТекущаяСтраница = Элементы[ПрефиксПоля + "НакопленияСтраницаПоказатели"];
	КонецЕсли;
	 
	Диаграмма.Автотранспонирование = Истина;
	Диаграмма.Обновление           = Истина;
	
	// Обновляем показатели
	ШрифтПоказателя = ШрифтФорматированногоПоказателя(1);
	//ШрифтПодсказки  = ШрифтФорматированногоПоказателя(-1);
	ШрифтТребуется  = ШрифтФорматированногоПоказателя(-1);
	ШрифтПодсказки   = Новый Шрифт;
	
	СвойстваЭлемента = Новый Структура("Заголовок", "");
	ВсегоОсталосьНакопить = СуммаВсехЦелей - НакопленоНаСписок;
	Если ВсегоОсталосьНакопить > 0 Тогда
		СвойстваЭлемента.Заголовок = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(СокращенноеПредставлениеСуммы(ВсегоОсталосьНакопить, СуммыСКопейками), ШрифтПоказателя),
				" ",
				ТекстВалютыОтчета,
				" ",
				НСтр("ru='осталось накопить'")
		);
	Иначе
		СвойстваЭлемента.Заголовок = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(СокращенноеПредставлениеСуммы(ВсегоНакоплено, СуммыСКопейками), ШрифтПоказателя),
				" ",
				ТекстВалютыОтчета,
				" ",
				НСтр("ru='накоплено'")
		);
	КонецЕсли;
	ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, ПрефиксПоля + "НакопленияТекстОсталосьНакопить", СвойстваЭлемента);

	Если ВсегоОсталосьНакопить > 0 Тогда
		СвойстваЭлемента.Заголовок = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(СокращенноеПредставлениеСуммы(ТребуетсяВМесяц, СуммыСКопейками), ШрифтТребуется),
				" ",
				ТекстВалютыОтчета,
				" ",
				НСтр("ru='ежемесячно'"),
				Символы.ПС,
				НСтр("ru='нужно откладывать для достижения целей'")
		);
		ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, ПрефиксПоля + "НакопленияТекстОткладыватьВМесяц", СвойстваЭлемента);
		ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, ПрефиксПоля + "ГруппаГруппаВыделения", Новый Структура("Видимость", Истина));
	Иначе
		ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, ПрефиксПоля + "ГруппаГруппаВыделения", Новый Структура("Видимость", Ложь));
	КонецЕсли;

КонецПроцедуры



#КонецОбласти 


#Область ИндикаторБюджета

&НаСервере
Процедура ПрименитьНастройкиИндикатораБюджета(НастройкиОбщие, СтрокаНастроек)

	Префикс = СтрокаНастроек.Ключ + "_";
	ЦветТекста = ЦветЗаголовкаИндикатора();
	
	// Заголовок индикатора с ниперссылкой выбора варианта бюджета
	СвойстваЭлемента = Новый Структура("Заголовок", "");
	СвойстваЭлемента.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(СтрокаНастроек.Заголовок, , ЦветТекста),
			" ",
			Новый ФорматированнаяСтрока("(" + СокращенноеПредставлениеДаты(НачалоПериодаБюджета), , ЦветТекста),
			Новый ФорматированнаяСтрока(" - ", , ЦветТекста),
			Новый ФорматированнаяСтрока(СокращенноеПредставлениеДаты(КонецПериодаБюджета) + ")", , ЦветТекста)
			);
	
	ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, Префикс + "БюджетЗаголовок", СвойстваЭлемента);

	// Настройки диаграммы
	ИмяОригинальнойДиаграммы = "ДиаграммаБюджета";
	Диаграмма = ЭтотОбъект[Префикс + ИмяОригинальнойДиаграммы];
	ОбновитьОбщиеНастройкиДиаграммы(Диаграмма, ЭтотОбъект[ИмяОригинальнойДиаграммы], НастройкиОбщие);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндикаторБюджета(СтрокаНастройки, РезультатЗапроса, НастройкиИндикаторов)

	ПрефиксПоля       = СтрокаНастройки.Ключ + "_";
	ТекстВалютыОтчета = Строка(НастройкиИндикаторов.ВалютаОтчета);
	СуммыСКопейками      = НастройкиИндикаторов.СуммыСКопейками;
	
	Диаграмма = ЭтотОбъект[ПрефиксПоля + "ДиаграммаБюджета"];
	Диаграмма.Очистить();
	
	СерияФакт = Диаграмма.УстановитьСерию("Факт");
	СерияФакт.Цвет = WebЦвета.Синий;
	СерияФакт.Текст = НСтр("ru='Факт'"); 
	
	СерияПлан = Диаграмма.УстановитьСерию("План");
	СерияПлан.Цвет = WebЦвета.Васильковый;
	СерияПлан.Текст = НСтр("ru='Остаток плана'"); 
	
	СерияСрок = Диаграмма.УстановитьСерию("Срок");
	СерияСрок.Цвет = ЦветСерииИндикатора();
	СерияСрок.Текст = НСтр("ru='Текущая дата'"); 
	СерияСрок.Индикатор = Истина;
	
	СерияСверхПлана = Диаграмма.УстановитьСерию("СверхПлана");
	СерияСверхПлана.Цвет = Новый Цвет(0, 180, 240);
	СерияСверхПлана.Текст = НСтр("ru='Сверх плана'"); 
	
	ТочкаРасхода = Диаграмма.УстановитьТочку(Перечисления.ТипыБюджетныхПоказателей.Списание);
	ТочкаРасхода.Расшифровка = Перечисления.ТипыБюджетныхПоказателей.Списание;
	ТочкаРасхода.Текст = НСтр("ru='Расходы'");
	
	ТочкаДохода = Диаграмма.УстановитьТочку(Перечисления.ТипыБюджетныхПоказателей.Поступление);
	ТочкаДохода.Расшифровка = Перечисления.ТипыБюджетныхПоказателей.Поступление;
	ТочкаДохода.Текст = НСтр("ru='Доходы'");
	
	ДоходПлан    = 0;
	ДоходФакт    = 0;
	ДоходРазница = 0;
	
	РасходПлан    = 0;
	РасходФакт    = 0;
	РасходРазница = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление Тогда
			ДоходПлан    = ДоходПлан + Выборка.СуммаПлан;
			ДоходФакт    = ДоходФакт + Выборка.СуммаФакт;
		ИначеЕсли Выборка.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание Тогда
			РасходПлан    = РасходПлан + Выборка.СуммаПлан;
			РасходФакт    = РасходФакт + Выборка.СуммаФакт;
		КонецЕсли;
		
	КонецЦикла;
	
	ДоходРазница  = ДоходПлан - ДоходФакт;
	РасходРазница = РасходПлан - РасходФакт;
	
	Если ДоходПлан = 0 И РасходПлан = 0 Тогда
		Элементы[ПрефиксПоля + "БюджетГруппаСтраниц"].ТекущаяСтраница = Элементы[ПрефиксПоля + "БюджетСтраницаНетДанных"];
		Возврат;
	Иначе
		Элементы[ПрефиксПоля + "БюджетГруппаСтраниц"].ТекущаяСтраница = Элементы[ПрефиксПоля + "БюджетСтраницаПоказатели"];
	КонецЕсли;
	
	// Стандартная диаграмма с накоплениями выводится как "псевдонормированная":
	//	сумма в пределах плана отображается как на нормированной диаграмме,
	//	а превышение плана - на дополнительном "кусочке" нормированной диаграммы.
	// 100% плана = 100.
	// 100% превышения плана = 20
	// По каждому показателю вычисляется %, который и откладывается на шкале 
	//	в пределах плана или в пределах превышения
	// Положение индикатора срока вычисляется без учета суммы превышения
	
	ВсегоПревышение   = Мин(РасходРазница, 0) + Мин(ДоходРазница, 0);
	ДлинаПревышения   = ?(ВсегоПревышение < 0, 20, 0);
	ДлинаПлана        = 100;
	ДлинаДиаграммы    = ДлинаПлана + ДлинаПревышения;
	
	#Область ОтображениеДохода
	// Вычисляем отноительные величины факта/остатка/превышения плана
	Факт    = 0;
	Остаток = 0;
	Добавка = 0;
	Если ДоходРазница = 0 Тогда
		// план равен факту
		Факт = ?(ДоходПлан > 0, ДлинаПлана, 0);
	ИначеЕсли ДоходРазница > 0 Тогда
		// осталось получить доход
		Факт    = ДоходФакт * ДлинаПлана / ДоходПлан;
		Остаток = ДлинаПлана - Факт;
	Иначе
		// получено сверх плана
		Факт    = ДлинаПлана;
		Добавка = ?(ВсегоПревышение = 0, ДлинаПревышения, ДоходРазница * ДлинаПревышения / ВсегоПревышение);
	КонецЕсли;
	
	Если Факт > 0 Тогда
		ТекстПодсказки = НСтр("ru='Факт: %1 %2'");
		ТекстПодсказки = СтрШаблон(ТекстПодсказки, СокращенноеПредставлениеСуммы(ДоходФакт, СуммыСКопейками), ТекстВалютыОтчета);
		Диаграмма.УстановитьЗначение(ТочкаДохода, СерияФакт, Факт,
					ТочкаДохода.Расшифровка,
					ТекстПодсказки);
	КонецЕсли;
	
	Если Остаток > 0 Тогда
		ТекстПодсказки = НСтр("ru='Остаток плана: %1 %2'");
		ТекстПодсказки = СтрШаблон(ТекстПодсказки, СокращенноеПредставлениеСуммы(ДоходРазница, СуммыСКопейками), ТекстВалютыОтчета);
		Диаграмма.УстановитьЗначение(ТочкаДохода, СерияПлан, Остаток,
					ТочкаДохода.Расшифровка,
					ТекстПодсказки);
	КонецЕсли;
	
	Если Добавка > 0 Тогда
		ТекстПодсказки = НСтр("ru='Сверх плана: %1 %2'");
		ТекстПодсказки = СтрШаблон(ТекстПодсказки, СокращенноеПредставлениеСуммы(-ДоходРазница, СуммыСКопейками), ТекстВалютыОтчета);
		Диаграмма.УстановитьЗначение(ТочкаДохода, СерияСверхПлана, Добавка,
					ТочкаДохода.Расшифровка,
					ТекстПодсказки);
	КонецЕсли;
	
	#КонецОбласти 
	

	#Область ОтображениеРасхода
	// Вычисляем отноительные величины факта/остатка/превышения плана
	Факт    = 0;
	Остаток = 0;
	Добавка = 0;
	Если РасходРазница = 0 Тогда
		// план равен факту
		Факт = ?(РасходПлан > 0, ДлинаПлана, 0);
	ИначеЕсли РасходРазница > 0 Тогда
		// осталось отратить
		Факт    = РасходФакт * ДлинаПлана / РасходПлан;
		Остаток = ДлинаПлана - Факт;
	Иначе
		// потрачено сверх плана
		Факт    = ДлинаПлана;
		Добавка = ?(ВсегоПревышение = 0, ДлинаПревышения, РасходРазница * ДлинаПревышения / ВсегоПревышение);
	КонецЕсли;
	
	Если Факт > 0 Тогда
		ТекстПодсказки = НСтр("ru='Факт: %1 %2'");
		ТекстПодсказки = СтрШаблон(ТекстПодсказки, СокращенноеПредставлениеСуммы(РасходФакт, СуммыСКопейками), ТекстВалютыОтчета);
		Диаграмма.УстановитьЗначение(ТочкаРасхода, СерияФакт, Факт,
					ТочкаРасхода.Расшифровка,
					ТекстПодсказки);
	КонецЕсли;
	
	Если Остаток > 0 Тогда
		ТекстПодсказки = НСтр("ru='Остаток плана: %1 %2'");
		ТекстПодсказки = СтрШаблон(ТекстПодсказки, СокращенноеПредставлениеСуммы(РасходРазница, СуммыСКопейками), ТекстВалютыОтчета);
		Диаграмма.УстановитьЗначение(ТочкаРасхода, СерияПлан, Остаток,
					ТочкаРасхода.Расшифровка,
					ТекстПодсказки);
	КонецЕсли;
	
	Если Добавка > 0 Тогда
		ТекстПодсказки = НСтр("ru='Сверх плана: %1 %2'");
		ТекстПодсказки = СтрШаблон(ТекстПодсказки, СокращенноеПредставлениеСуммы(-РасходРазница, СуммыСКопейками), ТекстВалютыОтчета);
		Диаграмма.УстановитьЗначение(ТочкаРасхода, СерияСверхПлана, Добавка,
					ТочкаРасхода.Расшифровка,
					ТекстПодсказки);
	КонецЕсли;
	
	#КонецОбласти 
	
	
	// Выводим индикатор текущей даты
	ОтНачалаПериода = НачалоДня(ТекущаяДата()) - НастройкиИндикаторов.НачалоПериодаБюджета;
	ДлинаПериода    = НастройкиИндикаторов.КонецПериодаБюджета - НастройкиИндикаторов.НачалоПериодаБюджета;
	ТекПозиция      = Макс(0, ?(ДлинаПериода > 0, ОтНачалаПериода * ДлинаПлана / ДлинаПериода, ДлинаПлана));
	
	ТекстПодсказки = Формат(ТекущаяДата(), "ДФ='д ММММ, дддд'");
	
	Диаграмма.УстановитьЗначение(ТочкаДохода,  СерияСрок, ТекПозиция, ТочкаДохода.Расшифровка, ТекстПодсказки);
	Диаграмма.УстановитьЗначение(ТочкаРасхода, СерияСрок, ТекПозиция, ТочкаРасхода.Расшифровка, ТекстПодсказки);
	
	// Обновляем информацию по бюджету
	// Обновляем показатели
	ШрифтПоказателя = ШрифтФорматированногоПоказателя(1);
	//ШрифтПодсказки  = ШрифтФорматированногоПоказателя(-1);
	ШрифтПодсказки  = Новый Шрифт;
	
	СвойстваЭлемента = Новый Структура("Заголовок", "");
	Если ДоходРазница > 0 Тогда
		СвойстваЭлемента.Заголовок = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(СокращенноеПредставлениеСуммы(ДоходРазница, СуммыСКопейками), ШрифтПоказателя),
				" " + ТекстВалютыОтчета + " ",
				НСтр("ru='осталось получить'")
		);
	Иначе
		СвойстваЭлемента.Заголовок = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(НСтр("ru='Все доходы получены'"))
		);
	КонецЕсли;
	ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, ПрефиксПоля + "БюджетТекстОстаткаДоходов", СвойстваЭлемента);
	 
	Если РасходРазница > 0 Тогда
		СвойстваЭлемента.Заголовок = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(СокращенноеПредставлениеСуммы(РасходРазница, СуммыСКопейками), ШрифтПоказателя),
				" " + ТекстВалютыОтчета + " ",
				НСтр("ru='осталось потратить'")
		);
	ИначеЕсли РасходРазница < 0 Тогда
		СвойстваЭлемента.Заголовок = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(СокращенноеПредставлениеСуммы(-РасходРазница, СуммыСКопейками), ШрифтПоказателя, ЦветРасходов()),
				" ",
				Новый ФорматированнаяСтрока(ТекстВалютыОтчета, , ЦветРасходов()),
				" ",
				НСтр("ru='потрачено сверх бюджета'")
		);
	Иначе
		СвойстваЭлемента.Заголовок = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(НСтр("ru='Все расходы сделаны'"))
		);
	КонецЕсли;
	ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, ПрефиксПоля + "БюджетТекстОстаткаРасходов", СвойстваЭлемента);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОтчетаПоБюджету(Расшифровка, НастройкаИндикатора)

	ПериодОтчета = Новый СтандартныйПериод(НачалоПериодаБюджета, КонецПериодаБюджета);
	ПараметрыОтчета = Новый Структура("СкрыватьНастройкиПриФормировании,СформироватьПриОткрытии,ПериодОтчета,ВалютаОтчета",
				Истина, Истина, ПериодОтчета, ВалютаОтчета);

	Схема = Отчеты.ОтчетПоБюджету.ПолучитьМакет(Метаданные.Отчеты.ОтчетПоБюджету.ОсновнаяСхемаКомпоновкиДанных.Имя);
	
	// Создаем компоновщик настроек и  загружаем в него настройки варианта:
	Вариант = Схема.ВариантыНастроек[0];
	КомпоновщикНКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНКД.ЗагрузитьНастройки(Вариант.Настройки);
	ОтборКомпоновщика = КомпоновщикНКД.Настройки.Отбор;
	
	// Устанавливаем параметры:
	ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(КомпоновщикНКД, "ПериодОтчета",   ПериодОтчета, , Ложь);
	ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(КомпоновщикНКД, "ВариантБюджета", ВариантБюджета, , Ложь);
	ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(КомпоновщикНКД, "РазделБюджета", НастройкаИндикатора.ДополнительныеПараметрыИндикатора.РазделБюджета, , Ложь);
	ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(КомпоновщикНКД, "КоличествоПериодовПросмотра", 1, , Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборКомпоновщика, "ТипПоказателя", Расшифровка, 
			ВидСравненияКомпоновкиДанных.Равно, , Истина);
	
	// Заголовок отчета
	ЗаголовокОтчета = КомпоновщикНКД.Настройки.ПараметрыВывода.Элементы.Найти("Заголовок");
	ЗаголовокОтчетаРасшифровки               = КомпоновщикНКД.Настройки.ПараметрыВывода.Элементы.Найти("Заголовок");
	ЗаголовокОтчетаРасшифровки.Использование = ЗаголовокОтчета.Использование;
	ЗаголовокОтчетаРасшифровки.Значение      = ЗаголовокОтчета.Значение;
	
	// Представление варианта
	ПредставлениеВарианта = ОтчетыКлиентСервер.ПредставлениеВариантаБезСтандартногоПрефикса(Вариант.Представление);
	ПредставлениеВарианта = ПредставлениеВарианта + НСтр("ru = ' - расшифровка по статье'");
	
	ПараметрыОтчета.Вставить("Вариант", ПоместитьВоВременноеХранилище(КомпоновщикНКД.Настройки));
	//ПараметрыОтчета.Вставить("ПредставлениеВарианта", ПредставлениеВарианта);

	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти 


#Область ИндикаторыОстатков

&НаСервере
Процедура ПрименитьНастройкиИндикатораОстатков(НастройкиОбщие)

	ШрифтЗаголовока    = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 12, Истина);
	ШрифтПодЗаголовока = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 8, Истина);
	ЦветПодзаголовка   = Элементы.ЗаголовокПанелиОстатки.ЦветТекста;
	
	// Заголовок индикатора с ниперссылкой выбора варианта бюджета
	ТекстЗаголовка = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='в сравнении '")),
			" ",
			Новый ФорматированнаяСтрока(ПредставлениеПериодаВЗаголовкеОстатков(НастройкиОбщие.ПериодОстатков), , , , "mny:#ВыбратьПериод")
			);
	Элементы.ПодзаголовокНастройкиОстатка.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндикаторыОстатков(СтруктураВыборок, НастройкиИндикаторов)

	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("ВалютаОтчета", НастройкиИндикаторов.ВалютаОтчета);
	ДополнительныеДанные.Вставить("ТекстВалюты", Строка(НастройкиИндикаторов.ВалютаОтчета));
	
	// Текст подсказки для текста изменений
	ТекстПодсказки = НСтр("ru='По сравнению с остатком на %1'");
	ТекстПодсказки = СтрШаблон(ТекстПодсказки, СокращенноеПредставлениеДаты(НастройкиИндикаторов.ПериодОстатков.ДатаНачала));
	ДополнительныеДанные.Вставить("ТекстПодсказкиИзменений", ТекстПодсказки);
	
	// Текст подсказки для основного показателя
	ТекстПодсказки = НСтр("ru='Текущий остаток'");
	ДополнительныеДанные.Вставить("ТекстПодсказкиПоказателя", ТекстПодсказки);
	
	// Текст подсказки для заголовка
	ТекстПодсказки = НСтр("ru='Перейти в список операций'");
	ДополнительныеДанные.Вставить("ТекстПодсказкиЗаголовка", ТекстПодсказки);
	
	// Текст подсказки для кредитного лимита
	ТекстПодсказки = НСтр("ru='Остаток кредитного лимита'");
	ДополнительныеДанные.Вставить("ТекстПодсказкиЛимита", ТекстПодсказки);
	
	// Текст подсказки для финансовой цели
	ТекстПодсказки = НСтр("ru='Ближайший срок финансовой цели'");
	ДополнительныеДанные.Вставить("ТекстПодсказкиФинцели", ТекстПодсказки);
	
	ДополнительныеДанные.Вставить("ШрифтПоказателя", ШрифтФорматированногоПоказателя(1));
	ДополнительныеДанные.Вставить("ШрифтПроцента",   Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 12));
	ДополнительныеДанные.Вставить("ШрифтИзменений",  Новый Шрифт(ШрифтыСтиля.МелкийШрифтТекста, , ));
	ДополнительныеДанные.Вставить("ШрифтДопПоказателя", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 12));
	
	СписокИндикаторов = НастройкиИндикаторов.ИндикаторыОстатков;
	СвойстваЭлемента = Новый Структура("Видимость", Ложь);
	Для каждого СтрокаНастройки Из СписокИндикаторов Цикл
		
		РезультатЗапроса = Неопределено;
		СтруктураВыборок.Свойство("Выборка_" + СтрокаНастройки.Ключ, РезультатЗапроса);
		
		ИндикаторЗаполнен = Ложь;
		ИндикаторЗаполнен = ЗаполнитьИндикаторОстаткаВыборкой(СтрокаНастройки, РезультатЗапроса, ДополнительныеДанные, НастройкиИндикаторов.СуммыСКопейками);
		
		СвойстваЭлемента.Видимость = ИндикаторЗаполнен Или Не СтрокаНастройки.СкрыватьЕслиПусто;
		ДеньгиВызовСервера.ИзменитьСвойстваЭлементаФормы(ЭтотОбъект, СтрокаНастройки.Ключ + "_Виджет", СвойстваЭлемента);
		
	КонецЦикла;
	 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбнулитьПоказателиИндикатораОстатков(ЭлементИндикатора, ЭлементИзменения)

	ЭлементИндикатора.Заголовок = НСтр("ru='нет данных'");
	ЭлементИндикатора.ЦветТекста = ЦветаСтиля.ИнформационнаяНадписьЦвет;
	ЭлементИзменения.Заголовок = "---";
	ЭлементИзменения.ЦветТекста = ЦветаСтиля.ИнформационнаяНадписьЦвет;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьИндикаторОстаткаВыборкой(СтрокаНастройки, РезультатЗапроса, ДополнительныеДанные, СуммыСКопейками)

	Если Элементы.Найти(СтрокаНастройки.Ключ + "_ВиджетТекстЗаголовка") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВиджетТекстЗаголовка              = Элементы[СтрокаНастройки.Ключ + "_ВиджетТекстЗаголовка"];
	ВиджетПоказатель                  = Элементы[СтрокаНастройки.Ключ + "_ВиджетПоказатель"];
	ВиджетИзменение                   = Элементы[СтрокаНастройки.Ключ + "_ВиджетИзменение"];
	ВиджетДополнительныйПоказатель    = Элементы[СтрокаНастройки.Ключ + "_ВиджетДополнительныйПоказатель"];
	
	ВиджетТекстЗаголовка.Заголовок           = Новый ФорматированнаяСтрока(
					СтрокаНастройки.Заголовок, , ЦветаСтиля.ЦветТекстаФормы, , "mny:#СсылкаЗаголовка");
	ВиджетПоказатель.Заголовок               = "";
	ВиджетПоказатель.Подсказка               = ДополнительныеДанные.ТекстПодсказкиПоказателя;
	ВиджетИзменение.Заголовок                = "";
	ВиджетИзменение.Подсказка                = ДополнительныеДанные.ТекстПодсказкиИзменений;
	ВиджетДополнительныйПоказатель.Заголовок = "";
	
	// Если выборка пустая, завершаем вывод текста
	Если РезультатЗапроса = Неопределено Тогда
		ОбнулитьПоказателиИндикатораОстатков(ВиджетПоказатель, ВиджетИзменение);
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Не Выборка.Следующий() Тогда
		ОбнулитьПоказателиИндикатораОстатков(ВиджетПоказатель, ВиджетИзменение);
		Возврат Ложь;
	КонецЕсли;
	
	РазделУчета = ?(СтрокаНастройки.Отбор.Свойство("РазделУчета") И ЗначениеЗаполнено(СтрокаНастройки.Отбор.РазделУчета), 
					СтрокаНастройки.Отбор.РазделУчета, Неопределено);
	ВидОбъектаУчета = ?(СтрокаНастройки.Отбор.Свойство("ВидОбъектаУчета") И ЗначениеЗаполнено(СтрокаНастройки.Отбор.ВидОбъектаУчета), 
					СтрокаНастройки.Отбор.ВидОбъектаУчета, Неопределено);
	
	// Получаем суммы
	Сумма      = ?(ЗначениеЗаполнено(Выборка.АктивныйНаКонец), Окр(Выборка.АктивныйНаКонец, 0), 0);
	НаНачало   = ?(ЗначениеЗаполнено(Выборка.НаНачало), Окр(Выборка.НаНачало, 0), 0);
	Изменение  = ?(ЗначениеЗаполнено(Выборка.Изменение), Окр(Выборка.Изменение, 0), 0);
	Если РазделУчета = ПланыСчетов.РазделыУчета.Капитал Тогда
		Сумма     = - Сумма;
		Изменение = - Изменение;
		НаНачало  = - НаНачало;
	КонецЕсли;
	
	ТекстЗначения = СокращенноеПредставлениеСуммы(Сумма, СуммыСКопейками);
	
	ЦветПоказателя = ?(Сумма < 0, ЦветаСтиля.ЦветОтрицательногоЧисла, ЦветаСтиля.ЦветТекстаФормы);
	ВиджетПоказатель.Заголовок = Новый ФорматированнаяСтрока(
						Новый ФорматированнаяСтрока(ТекстЗначения, ДополнительныеДанные.ШрифтПоказателя, ЦветПоказателя),
						" ",
						Новый ФорматированнаяСтрока(ДополнительныеДанные.ТекстВалюты, , ЦветПоказателя)
		);
	
	// Выводим изменения за период
	Если Наначало = Сумма Тогда
		ТекстПроцента = "--";
	ИначеЕсли Наначало = 0 Тогда 
		ТекстПроцента = "100%";
	Иначе
		ПроцентИзменения =  Макс(Изменение, -Изменение) / Макс(НаНачало, -НаНачало) * 100;
		Если ПроцентИзменения >= 1000 Тогда
			ТекстПроцента = "> 1000%"
		Иначе
			ТекстПроцента = Формат(Окр(ПроцентИзменения, 2), "ЧДЦ=1; ЧГ=")  + "%";
		КонецЕсли;
	КонецЕсли;
	
	ТекстСуммыИзменения = СокращенноеПредставлениеСуммы(Изменение, СуммыСКопейками);
	
	
	Если Изменение = 0 Тогда
		
		ВиджетИзменение.Заголовок = 
				Новый ФорматированнаяСтрока(НСтр("ru='без изменений'"), 
						ДополнительныеДанные.ШрифтИзменений, ЦветаСтиля.ИнформационнаяНадписьЦвет);
		
	Иначе
		
		Если Изменение > 0 Тогда
			ЗнакИзменения  = "▲";
			ЦветИзменения  = ЦветДоходов();
			ТекстСуммыИзменения = "+" + ТекстСуммыИзменения;
		Иначе
			ЗнакИзменения  = "▼";
			ЦветИзменения  = ЦветРасходов();
		КонецЕсли;
		
		ВиджетИзменение.Заголовок = Новый ФорматированнаяСтрока(
						Новый ФорматированнаяСтрока(ЗнакИзменения, ДополнительныеДанные.ШрифтПроцента, ЦветИзменения),
						" ",
						Новый ФорматированнаяСтрока(ТекстПроцента, ДополнительныеДанные.ШрифтПроцента, ЦветИзменения),
						Символы.ПС,
						Новый ФорматированнаяСтрока(ТекстСуммыИзменения, ДополнительныеДанные.ШрифтИзменений, ЦветИзменения)
			);
		
	КонецЕсли;
	
	
	// Если есть дополнительный показатель, выводим его:
	ДопПоказатель = "";
	Лимит         = 0;
	Если ВидОбъектаУчета = "КредитныеКарты" Тогда
		Лимит = ?(ЗначениеЗаполнено(Выборка.АктивныйКредитныйЛимит), Выборка.АктивныйКредитныйЛимит, 0);
		ДопПоказатель = НСтр("ru='лимит'") + ": " + Лимит;
	ИначеЕсли ВидОбъектаУчета = "Накопление" Тогда
		Если ЗначениеЗаполнено(Выборка.АктивныйСрокФинасновойЦели) Тогда
			ДопПоказатель = НСтр("ru='ближайший срок '") + ": " + СокращенноеПредставлениеДаты(Выборка.АктивныйСрокФинасновойЦели, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ВиджетДополнительныйПоказатель.Заголовок = Новый ФорматированнаяСтрока(ДопПоказатель, ДополнительныеДанные.ШрифтДопПоказателя);
	ВиджетДополнительныйПоказатель.Видимость = ЗначениеЗаполнено(ДопПоказатель);
	
	ИндикаторЗаполнен = НаНачало <> 0 Или Сумма <> 0 Или Изменение <> 0 Или Лимит <> 0;
	Возврат ИндикаторЗаполнен;

КонецФункции

#КонецОбласти 


#Область ОбщегоНазначения

// Очищает заголовки в элементах образцов, чтобы при обновлении данных не выводились тестовые данные
&НаСервере
Процедура ОбнулитьЗаголовкиШаблонов()

	Элементы.ВиджетТекстЗаголовка.Заголовок = НСтр("ru='Индикатор остатка'");
	Элементы.ВиджетПоказатель.Заголовок = "";
	Элементы.ВиджетИзменение.Заголовок = "";
	Элементы.ВиджетДополнительныйПоказатель.Заголовок = "";
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьДопРеквизитыФормы()

	ДопРеквизиты = Новый Структура;
	ДопРеквизиты.Вставить("ЦветФонаФормы", ЦветаСтиля.ЦветФонаФормы);
	ДопРеквизиты.Вставить("ЦветФонаВыделенияПоля", ЦветаСтиля.ФонВыделеннойКнопки);

КонецПроцедуры
 
// Возвращает строковое представление указанного в настройках периода
// Отказ от иользования стандартных периодов и стандартной даты начала обусловлен 
//избыточностью вариантов и необходимостью дополнять своими вариантами
//
&НаСервереБезКонтекста
Функция ПредставлениеПериодаВЗаголовке(НастройкиОбщие, СтруктураПериода)

	Если Найти("НачалоГода,НачалоМесяца,НачалоНедели,НачалоДня,КонецДня,КонецНедели,КонецМесяца,КонецГода,ПоследнийГод,ПоследнийМесяц,", СтруктураПериода.ВидПериода + ",") Тогда
		
		СписокВариантов = ДеньгиКлиентСервер.СписокВариантовПеродаИзТекущейДаты(0, Истина);
		ВыбранныйВариант = СписокВариантов.НайтиПоЗначению(СтруктураПериода.ВидПериода);
		Если ВыбранныйВариант <> Неопределено Тогда
			Возврат ВыбранныйВариант.Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Найти(СтруктураПериода.ВидПериода, "Конец") = 1 Или Найти(СтруктураПериода.ВидПериода, "Вперед") > 0 Тогда
		Возврат ПредставлениеДатыВПериодеПо(СтруктураПериода.ДатаОкончания);
	Иначе
		Возврат ПредставлениеДатыВПериодеС(СтруктураПериода.ДатаНачала);
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеПериодаВЗаголовкеОстатков(СтруктураПериода)

	Если СтруктураПериода.ВидПериода = "НачалоДня" Тогда  
		Возврат НСтр("ru='с началом дня'"); 
	
	ИначеЕсли СтруктураПериода.ВидПериода = "НачалоНедели" Тогда  
		Возврат НСтр("ru='с началом недели'"); // с 1-го дня недели
	
	ИначеЕсли СтруктураПериода.ВидПериода = "НачалоМесяца" Тогда  
		Возврат НСтр("ru='с началом месяца'"); // с 1-го числа
	
	ИначеЕсли СтруктураПериода.ВидПериода = "НачалоГода" Тогда  
		Возврат НСтр("ru='с началом года'"); // с 1-го января
	
	ИначеЕсли СтруктураПериода.ВидПериода = "НачалоБюджетногоПериода" Тогда  
		Возврат НСтр("ru='с началом бюдж. периода'"); // с 1-го января
	
	Иначе
		
		Если Год(СтруктураПериода.ДатаНачала) = Год(ТекущаяДата()) Тогда
			СтрокаФормата = "Л=ru_RU; ДФ='d MMMM'";
		Иначе
			СтрокаФормата = "Л=ru_RU; ДФ='dd.MM.yyyy'";
		КонецЕсли;
		
		Результат = НСтр("ru='с %1'");
		Возврат СтрШаблон(Результат, Формат(СтруктураПериода.ДатаНачала, СтрокаФормата));
		
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПрошлогоПериода(СтруктураПериода)

	Если СтруктураПериода.ВидПериода = "НачалоБюджетногоПериода" Тогда
		
		Результат = НСтр("ru='за предыдущий бюджетный период'");
		
	ИначеЕсли СтруктураПериода.ВидПериода = "НачалоГода" Тогда
		
		Результат = НСтр("ru='за %1 год'");
		Результат = СтрШаблон(Результат, Формат(СтруктураПериода.ДатаНачала, "ДФ=yyyy"));
		
	ИначеЕсли СтруктураПериода.ВидПериода = "НачалоМесяца" Тогда
		
		Результат = НСтр("ru='за %1'");
		Результат = СтрШаблон(Результат, Формат(СтруктураПериода.ДатаНачала, "ДФ=MMMM"));
		
	ИначеЕсли СтруктураПериода.ВидПериода = "НачалоНедели" Тогда
		
		Результат = НСтр("ru='за прошлую неделю'");
		
	ИначеЕсли СтруктураПериода.ВидПериода = "НачалоДня" Тогда
		
		Результат = НСтр("ru='за прошлый день'");
		
	Иначе
		
		Результат = НСтр("ru='за период %1'");
		СтрокаФормата = ?(Год(СтруктураПериода.ДатаНачала) = Год(СтруктураПериода.ДатаОкончания), "ДФ='dd MMM'", "ДФ=dd.MM.yyyy");
		Результат = СтрШаблон(Результат, Формат(СтруктураПериода.ДатаНачала, СтрокаФормата) 
								+ " - " + Формат(СтруктураПериода.ДатаОкончания, СтрокаФормата));
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеПериодаСреднего(СтруктураПериода)

	ПериодГруппировки = ОбщегоНазначенияДеньги.ИмяГруппировкиПоДлительности(СтруктураПериода.ДатаНачала, СтруктураПериода.ДатаОкончания);

	Если ПериодГруппировки = "ГОД" Тогда
		Возврат НСтр("ru='в среднем за год'");
	ИначеЕсли ПериодГруппировки = "МЕСЯЦ" Тогда
		Возврат НСтр("ru='в среднем за месяц'");
	ИначеЕсли ПериодГруппировки = "ДЕНЬ" Тогда
		Возврат НСтр("ru='в среднем за день'");
	ИначеЕсли ПериодГруппировки = "ЧАС" Тогда
		Возврат НСтр("ru='в среднем за час'");
	Иначе
		Возврат НСтр("ru='в среднем'");
	КонецЕсли;
	
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДатыВПериодеС(Знач ДатаНачала)

	Результат = "";
	
	НачалоДаты  = НачалоДня(ДатаНачала);
	ТекущаяДата = НачалоДня(ТекущаяДата());
	МесяцДаты   = Месяц(НачалоДаты);
	
	Если НачалоДаты = НачалоГода(ТекущаяДата) Тогда 
		
		Результат = НСтр("ru='с начала года'"); 
		
	ИначеЕсли НачалоДаты = НачалоМесяца(ТекущаяДата) Тогда
		
		Результат = НСтр("ru='с начала месяца'"); 
		
	ИначеЕсли НачалоДаты = НачалоНедели(ТекущаяДата) Тогда 
		
		Результат = НСтр("ru='с начала недели'"); 
		
	ИначеЕсли НачалоДаты = ТекущаяДата Тогда 
		
		Результат = НСтр("ru='за день'"); 
		
	Иначе
		
		Если Год(ДатаНачала) = Год(ТекущаяДата) Тогда
			СтрокаФормата = "Л=ru_RU; ДФ='d MMMM'";
		Иначе
			СтрокаФормата = "Л=ru_RU; ДФ='dd.MM.yyyy'";
		КонецЕсли;
		
		Результат = НСтр("ru='с %1'");
		Результат = СтрШаблон(Результат, Формат(ДатаНачала, СтрокаФормата));
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДатыВПериодеПо(Знач ДатаОкончания)

	Результат = "";
	
	КонецДаты   = КонецДня(ДатаОкончания);
	МесяцДаты   = Месяц(КонецДаты);
	ТекущаяДата = КонецДня(ТекущаяДата());
	
	Если КонецДаты = КонецГода(ТекущаяДата) Тогда 
		
		Результат = НСтр("ru='до конца года'"); 
		
	ИначеЕсли КонецДаты = КонецМесяца(ТекущаяДата) Тогда
		
		Результат = НСтр("ru='до конца месяца'"); 
		
	ИначеЕсли КонецДаты = КонецНедели(ТекущаяДата) Тогда 
		
		Результат = НСтр("ru='до конца недели'"); 
		
	ИначеЕсли КонецДаты = ТекущаяДата Тогда 
		
		Результат = НСтр("ru='за день'"); 
		
	Иначе
		
		Если Год(ДатаОкончания) = Год(ТекущаяДата) Тогда
			СтрокаФормата = "Л=ru_RU; ДФ='d MMMM'";
		Иначе
			СтрокаФормата = "Л=ru_RU; ДФ='dd.MM.yyyy'";
		КонецЕсли;
		
		Результат = НСтр("ru='по %1'");
		Результат = СтрШаблон(Результат, Формат(ДатаОкончания, СтрокаФормата));
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СокращенноеПредставлениеДаты(Дата, СокращатьОтдаленныеСроки = Ложь)

	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	Сегодня = НачалоДня(ТекущаяДата());
	
	Если КодЯзыка = "ru" Тогда
		
		Если Год(Дата) = Год(Сегодня) Тогда
			СтрокаФормата = ?(СокращатьОтдаленныеСроки, "Л=ru_RU; ДФ=dd.MM.yyyy", "Л=ru_RU; ДФ='d MMMM'");
		Иначе
			СтрокаФормата = ?(Не СокращатьОтдаленныеСроки, "Л=ru_RU; ДФ=dd.MM.yyyy", "Л=ru_RU; ДФ='d MMMM'");
		КонецЕсли;
		
	Иначе
		СтрокаФормата = "ДФ=dd.MM.yyyy";
	КонецЕсли;
	
	Возврат Формат(Дата, СтрокаФормата);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СокращенноеПредставлениеСуммы(Сумма, ВыводитьКопейки = Ложь)

	Результат = "";
	
	Если Не ЗначениеЗаполнено(Сумма) Тогда
		Возврат ?(ВыводитьКопейки, "0,00", "0");
	КонецЕсли;
	
	Если Макс(Сумма, -Сумма) >= Pow(10, 9) Тогда
		Результат = Формат(Сумма / Pow(10, 9), "Л=ru_RU; ЧДЦ=2; ЧН=0,00") + " " + НСтр("ru='млрд'");
	ИначеЕсли Макс(Сумма, -Сумма) >= Pow(10, 6) Тогда
		Результат = Формат(Сумма / Pow(10, 6), "Л=ru_RU; ЧДЦ=2; ЧН=0,00") + " " + НСтр("ru='млн'");
	Иначе
		Если ВыводитьКопейки Тогда
			Результат = Формат(Сумма, "Л=ru_RU; ЧДЦ=2; ЧН=0,00");
		Иначе
			Результат = Формат(Сумма, "Л=ru_RU; ЧДЦ=; ЧН=0,00");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруПериода(СтруктураПериода, ВидПериода, НачалоБюджетногоПериода, ОкончаниеБюджетногоПериода)

	Если Найти("НачалоБюджетногоПериода,КонецБюджетногоПериода", ВидПериода) > 0 Тогда
		ДатаНачала    = НачалоБюджетногоПериода;
		ДатаОкончания = ОкончаниеБюджетногоПериода;
	ИначеЕсли Найти("НачалоПроизвольнойДаты,КонецПроизвольнойДаты", ВидПериода) > 0 
		И ТипЗнч(СтруктураПериода) = Тип("Структура") Тогда
		ДатаНачала    = ?(ЗначениеЗаполнено(СтруктураПериода.ДатаНачала), СтруктураПериода.ДатаНачала, НачалоДня(ТекущаяДата()));
		ДатаОкончания = ?(ЗначениеЗаполнено(СтруктураПериода.ДатаОкончания), СтруктураПериода.ДатаОкончания, КонецДня(ДатаНачала));
	Иначе
		ДатаНачала    = Неопределено;
		ДатаОкончания = Неопределено;
	КонецЕсли;
	
	СтруктураПериода = НоваяСтруктураПериода(ВидПериода, ДатаНачала, ДатаОкончания);

КонецПроцедуры

// Возвращает структуру, описыввающую период индикатора
//
//Параметры:
//	НачалоПериода - Дата - используется только для бюджетного и произвольного периодов
//	КонецПериода - Дата - используется только для бюджетного и произвольного периодов
//
&НаКлиентеНаСервереБезКонтекста
Функция НоваяСтруктураПериода(ВидПериода, НачалоПериода = Неопределено, КонецПериода = Неопределено)

	СекундыДня = 86400;
	
	Результат = Новый Структура("ВидПериода, ДатаНачала, ДатаОкончания", ВидПериода, НачалоПериода, КонецПериода);
	
	Если Найти("НачалоБюджетногоПериода,КонецБюджетногоПериода,НачалоПроизвольнойДаты,КонецПроизвольнойДаты", ВидПериода) > 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ВидПериода = "НачалоДня" Или ВидПериода = "КонецДня" Тогда
		
		Результат.ДатаНачала = НачалоДня(ТекущаяДата());
		Результат.ДатаОкончания = КонецДня(Результат.ДатаНачала);
		
	ИначеЕсли ВидПериода = "НачалоНедели" Или ВидПериода = "КонецНедели" Тогда
		
		Результат.ДатаНачала = НачалоНедели(ТекущаяДата());
		Результат.ДатаОкончания = КонецНедели(Результат.ДатаНачала);
		
	ИначеЕсли ВидПериода = "НачалоМесяца" Или ВидПериода = "КонецМесяца" Тогда
		
		Результат.ДатаНачала = НачалоМесяца(ТекущаяДата());
		Результат.ДатаОкончания = КонецМесяца(Результат.ДатаНачала);
		
	ИначеЕсли ВидПериода = "НачалоГода" Или ВидПериода = "КонецГода" Тогда
		
		Результат.ДатаНачала = НачалоГода(ТекущаяДата());
		Результат.ДатаОкончания = КонецГода(Результат.ДатаНачала);
		
	ИначеЕсли ВидПериода = "НачалоПроизвольнойДаты" Или ВидПериода = "КонецПроизвольнойДаты" Тогда
		
		Результат.ДатаНачала = ?(ЗначениеЗаполнено(Результат.ДатаНачала), Результат.ДатаНачала, НачалоМесяца(ТекущаяДата()));
		Результат.ДатаОкончания = ?(ЗначениеЗаполнено(Результат.ДатаОкончания), Результат.ДатаОкончания, КонецМесяца(Результат.ДатаНачала));
		
	ИначеЕсли ВидПериода = "ПоследняяНеделя" Тогда
		
		Результат.ДатаОкончания = КонецДня(ТекущаяДата());
		Результат.ДатаНачала = НачалоДня(Результат.ДатаОкончания - СекундыДня * 7);
		
	ИначеЕсли ВидПериода = "ПоследнийМесяц" Тогда
		
		Результат.ДатаОкончания = КонецДня(ТекущаяДата());
		Результат.ДатаНачала = НачалоДня(ДобавитьМесяц(Результат.ДатаОкончания, -1));
		
	ИначеЕсли ВидПериода = "ПоследнийГод" Тогда
		
		Результат.ДатаОкончания = КонецДня(ТекущаяДата());
		Результат.ДатаНачала = НачалоДня(ДобавитьМесяц(Результат.ДатаОкончания, -12));
		
	ИначеЕсли ВидПериода = "НеделяВперед" Тогда
		
		Результат.ДатаНачала    = НачалоДня(ТекущаяДата());
		Результат.ДатаОкончания = КонецДня(Результат.ДатаНачала + СекундыДня * 7);
		
	ИначеЕсли ВидПериода = "МесяцВперед" Тогда
		
		Результат.ДатаНачала    = НачалоДня(ТекущаяДата());
		Результат.ДатаОкончания = КонецДня(ДобавитьМесяц(Результат.ДатаНачала, 1));
		
	ИначеЕсли ВидПериода = "ГодВперед" Тогда
		
		Результат.ДатаНачала    = НачалоДня(ТекущаяДата());
		Результат.ДатаОкончания = КонецДня(ДобавитьМесяц(Результат.ДатаНачала, 12));
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьОбщиеНастройкиДиаграммы(Диаграмма, Образец, ОбщиеНастройки)

	//Диаграмма = ДиаграммаДинамики;
	Диаграмма.Обновление                      = Ложь;
	
	Если ОбщиеНастройки.Свойство("ОтключитьАнимацию") И ОбщиеНастройки.ОтключитьАнимацию Тогда
		Диаграмма.Анимация = АнимацияДиаграммы.НеИспользовать;
	Иначе
		СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "Анимация");
	КонецЕсли;
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "АвтоТранспонирование");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "АвтоУстановкаТекстаСерий");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "АвтоУстановкаТекстаТочек");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "БазовоеЗначение");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "ВидПодписей");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "Градиент");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "МаксимальноеЗначение");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "МаксимумСерийПроцент");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "МаксимумСерийКоличество");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "МинимальноеЗначение");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "НатяжениеСглаживания");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "Окантовка");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "ПалитраЦветов");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "ПоложениеПодписей");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "ПрозрачныйФон");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "ПрозрачныйФонПодписей");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "ПропускатьБазовоеЗначение");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "РазделительПодписей");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "Рамка");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "РежимПробелов");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "РежимСглаживания");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "РежимПробелов");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "ОтображатьЛегенду");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "ОтображатьЗаголовок");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "Свет");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "СерииВСтроках");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "СоединениеЗначенийПоСериям");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "ТипДиаграммы");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "ФорматЗначенийВПодписях");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "ФорматПроцентовВПодписях");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "ЦветРамки");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "ЦветРамкиПодписей");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "ЦветСоединенияЗначенийПоСериям");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "ЦветТекстаПодписей");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "ЦветФона");
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "ЦветФонаПодписей");
	
	СкопироватьСвойствоДиаграммы(Диаграмма, Образец, "ПроцентПолупрозрачности");
	
	СкопироватьСвойствоДиаграммы(Диаграмма.ОбластьПостроения, Образец.ОбластьПостроения, "ОтображатьШкалу");
	СкопироватьСвойствоДиаграммы(Диаграмма.ОбластьПостроения, Образец.ОбластьПостроения, "ОтображатьЛинииЗначенийШкалы");
	СкопироватьСвойствоДиаграммы(Диаграмма.ОбластьПостроения, Образец.ОбластьПостроения, "ОтображатьПодписиШкалыСерий");
	СкопироватьСвойствоДиаграммы(Диаграмма.ОбластьПостроения, Образец.ОбластьПостроения, "ОтображатьПодписиШкалыТочек");
	СкопироватьСвойствоДиаграммы(Диаграмма.ОбластьПостроения, Образец.ОбластьПостроения, "ОтображатьПодписиШкалыЗначений");
	СкопироватьСвойствоДиаграммы(Диаграмма.ОбластьПостроения, Образец.ОбластьПостроения, "ФорматШкалыЗначений");
	СкопироватьСвойствоДиаграммы(Диаграмма.ОбластьПостроения, Образец.ОбластьПостроения, "Шрифт");
	СкопироватьСвойствоДиаграммы(Диаграмма.ОбластьПостроения, Образец.ОбластьПостроения, "Рамка");
	СкопироватьСвойствоДиаграммы(Диаграмма.ОбластьПостроения, Образец.ОбластьПостроения, "ПрозрачныйФон");
	
	Диаграмма.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	Диаграмма.ОбластьПостроения.Верх          = 0; // Привязана к верхнему краю
	Диаграмма.ОбластьПостроения.Низ           = 1; // Привязана к нижнему краю
	Диаграмма.ОбластьПостроения.Право         = 1; // Привязана к правому краю
	Диаграмма.ОбластьПостроения.Лево          = 0; // Привязана к левому краю
	
	
	Диаграмма.Обновление                      = Истина;

КонецПроцедуры

&НаСервере
Процедура СкопироватьСвойствоДиаграммы(Диаграмма, Образец, ИмяСвойства)

	Диаграмма[ИмяСвойства] = Образец[ИмяСвойства];

КонецПроцедуры

&НаСервереБезКонтекста
Функция ШрифтФорматированногоПоказателя(Величина = 0)

	Если Величина < 0 Тогда
		Возврат Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 12);
	ИначеЕсли Величина > 0 Тогда
		Возврат Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 20);
	Иначе
		Возврат Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 18);
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦветДоходов()

	Возврат Новый Цвет(34, 139, 34);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦветРасходов()

	Возврат Новый Цвет(208, 42, 53);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦветПеремещений()

	Возврат Новый Цвет(65, 105, 225);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦветОтсутствияДанных()

	Возврат Новый Цвет(202, 202, 212);

КонецФункции

&НаСервере
Функция ЦветЗаголовкаИндикатора()

	Возврат Элементы.ЗаголовокПанелиОстатки.ЦветТекста;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦветСерииИндикатора()
	Возврат Новый Цвет(255,215,0)
КонецФункции

&НаСервереБезКонтекста
Функция СтрокаФорматаДляПериода(ИмяПериода)

	Если ИмяПериода = "ЧАС" Тогда
		ТекстФомрата = "ДФ=ЧЧ";
	ИначеЕсли ИмяПериода = "ДЕНЬ" Тогда
		ТекстФомрата = "ДФ='d MMM'";
	ИначеЕсли ИмяПериода = "МЕСЯЦ" Тогда
		ТекстФомрата = "ДФ='MMMM'";
	ИначеЕсли ИмяПериода = "ГОД" Тогда
		ТекстФомрата = "ДФ='yyyy'";
	Иначе
		ТекстФомрата = "ДФ=dd.MM.yy";
	КонецЕсли;
	
	Возврат ТекстФомрата;

КонецФункции

&НаСервереБезКонтекста
Функция ПрерыдущийПериод(Период, НастройкиИндикаторов)

	НовыйПериод = НоваяСтруктураПериода(Период.ВидПериода);
	
	Если Период.ВидПериода = "НачалоБюджетногоПериода" Или Период.ВидПериода = "КонецБюджетногоПериода" Тогда
		
		НоваяДатаНачала           = БюджетированиеСервер.ДобавитьПериодУказанногоТипа(Период.ДатаНачала, НастройкиИндикаторов.ВидПериодаБюджета, -1);
		ПериодПланирования        = БюджетированиеСервер.НоваяСтрукрураБюджетногоПериода(НастройкиИндикаторов.ВариантБюджета, НоваяДатаНачала);
		НовыйПериод.ДатаНачала    = ПериодПланирования.Начало;
		НовыйПериод.ДатаОкончания = ПериодПланирования.Окончание;
		
	ИначеЕсли Период.ВидПериода = "НачалоГода" Или Период.ВидПериода = "КонецГода" 
		Или Период.ВидПериода = "ПоследнийГод" Или Период.ВидПериода = "ГодВперед" Тогда
		
		НовыйПериод.ДатаНачала       = НачалоДня(ДобавитьМесяц(Период.ДатаНачала, -12));
		НовыйПериод.ДатаОкончания    = КонецДня(ДобавитьМесяц(Период.ДатаОкончания, -12));
		
	ИначеЕсли Период.ВидПериода = "НачалоМесяца" Или Период.ВидПериода = "КонецМесяца" 
		Или Период.ВидПериода = "ПоследнийМесяц" Или Период.ВидПериода = "МесяцВперед" Тогда
		
		НовыйПериод.ДатаНачала       = НачалоДня(ДобавитьМесяц(Период.ДатаНачала, -1));
		НовыйПериод.ДатаОкончания    = КонецДня(ДобавитьМесяц(Период.ДатаОкончания, -1));
		
	ИначеЕсли Период.ВидПериода = "НачалоНедели" Или Период.ВидПериода = "КонецНедели" 
		Или Период.ВидПериода = "ПоследняяНеделя" Или Период.ВидПериода = "НеделяВперед" Тогда
		
		НовыйПериод.ДатаНачала       = НачалоДня(Период.ДатаНачала - 604800);
		НовыйПериод.ДатаОкончания    = КонецДня(Период.ДатаОкончания -604800);
		
	ИначеЕсли Период.ВидПериода = "НачалоДня" Или Период.ВидПериода = "КонецДня" Тогда
		
		НовыйПериод.ДатаНачала       = НачалоДня(Период.ДатаНачала - 1);
		НовыйПериод.ДатаОкончания    = КонецДня(НовыйПериод.ДатаНачала);
		
	КонецЕсли;
	
	Возврат НовыйПериод;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючиИндкатораИзИмениЭлемента(ИмяЭлемента, Ссылка = "")

	Результат = Новый Структура("Тип,Индекс,Ключ,ИмяЭлемента,Ссылка", "", 0, "", "", Ссылка);
	
	Позиция1 = СтрНайти(ИмяЭлемента, "_", НаправлениеПоиска.СНачала, 1, 1);
	Если Позиция1 = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Тип = Сред(ИмяЭлемента, 1, Позиция1 - 1);
	
	Позиция2 = СтрНайти(ИмяЭлемента, "_", НаправлениеПоиска.СНачала, 1, 2);
	Если Позиция2 = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Ключ = Сред(ИмяЭлемента, 1, Позиция2 - 1);
	НомерСтрокой = Сред(ИмяЭлемента, Позиция1 + 1, Позиция2 - Позиция1 - 1);
	Результат.Индекс = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НомерСтрокой);
	Результат.ИмяЭлемента = Сред(ИмяЭлемента, Позиция2 + 1);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Результат.Ссылка = СтрЗаменить(Ссылка, "mny:#", "");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовоеМенюИндикатора()

	Меню = Новый СписокЗначений;
	Меню.Добавить("СдвинутьВверх", НСтр("ru='Сдвинуть вверх'"));
	Меню.Добавить("СдвинутьВниз", НСтр("ru='Сдвинуть вниз'"));
	Меню.Добавить("Удалить", НСтр("ru='Удалить'"));
	Меню.Добавить("ИзменитьНастройки", НСтр("ru='Настройки'"));

	Возврат Меню;
	
КонецФункции

&НаСервере
Функция ДатаВводаНовойОперации(ПараметрыЭлементаИндикатора)

	НастройкиИндикаторов = АктуальныеНастройкиИндикаторов();
	СтрокаНастройки = НастройкиИндикаторов.ИндикаторыДинамики.Найти(ПараметрыЭлементаИндикатора.Ключ, "Ключ");
	Если СтрокаНастройки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаНастройки.Период.ДатаНачала;

КонецФункции

&НаКлиенте
Функция ФормаДоступнаДляИзменений()

	Возврат ЭтапОбновленияДанных = "" И Не ЗначениеЗаполнено(ИДФоновогоЗадания);

КонецФункции


#КонецОбласти 


#Область ДиалогиИПереходы

&НаКлиенте
Процедура ОткрытьНастройкуИндикатораСобытий(Ключ)

	ПарметрыФормыНастроек = СтруктураНастройкиИндикатораСобытий(Ключ);
	Оповещение = Новый ОписаниеОповещения("ОткрытьНастройкуИндикатораСобытийЗавершение", ЭтотОбъект, Ключ);
	ОткрытьФорму("Обработка.НачальнаяСтраница.Форма.НастройкаАналитическогоИндикатора", ПарметрыФормыНастроек, , Ключ, , , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуИндикатораОстатка(Ключ)

	ПарметрыФормыНастроек = СтруктураНастройкиИндикатораОстатков(Ключ);
	ПарметрыФормыНастроек.Отбор.Вставить("Заголовок", ПарметрыФормыНастроек.Заголовок);
	ПарметрыФормыНастроек.Отбор.Вставить("Ключ", Ключ);
	ПарметрыФормыНастроек.Отбор.Вставить("СкрыватьЕслиПусто", ПарметрыФормыНастроек.СкрыватьЕслиПусто);
	Оповещение = Новый ОписаниеОповещения("ОткрытьНастройкуИндикатораОстаткаЗавершение", ЭтотОбъект, Ключ);
	ОткрытьФорму("Обработка.НачальнаяСтраница.Форма.НастройкаИндикатораОстатка", ПарметрыФормыНастроек.Отбор, , Ключ, , , Оповещение);

КонецПроцедуры
 

&НаКлиенте
Процедура ОткрытьНастройкуИндикатораСобытийЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьНастройкуИндикатораДинамикиСервер(Результат);
	ЭтапОбновленияДанных = "";
	ВыполнитьЭтапОбновленияДанных();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуИндикатораОстаткаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбновитьНастройкуИндикаторовОстатков(Результат);
	ЭтапОбновленияДанных = "";
	ВыполнитьЭтапОбновленияДанных();

КонецПроцедуры
 
&НаСервере
Процедура ОбновитьНастройкуИндикатораДинамикиСервер(СтруктураНастройки)

	НастройкиИндикаторов = АктуальныеНастройкиИндикаторов();
	ОбновлятьЭлементы = Ложь;
	
	Если ЗначениеЗаполнено(СтруктураНастройки.Ключ) Тогда
		СтрокаНастройки = НастройкиИндикаторов.ИндикаторыДинамики.Найти(СтруктураНастройки.Ключ, "Ключ");
		ОбновлятьЭлементы = СтрокаНастройки.ТипИндикатора <> СтруктураНастройки.ТипИндикатора;
	Иначе
		ОбновлятьЭлементы = Истина;
		СтрокаНастройки = НоваяНастройкаИндикатораДинамики(НастройкиИндикаторов.ИндикаторыДинамики, 
					СтруктураНастройки.ТипИндикатора, СтруктураНастройки.ВидОбъектовУчета, СтруктураНастройки.Заголовок);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаНастройки, СтруктураНастройки, "ТипИндикатора,ВидОбъектовУчета,Заголовок");
	СтрокаНастройки.Период.ВидПериода       = СтруктураНастройки.Период.ВидПериода;
	СтрокаНастройки.Период.ДатаНачала       = СтруктураНастройки.Период.ДатаНачала;
	СтрокаНастройки.Период.ДатаОкончания    = СтруктураНастройки.Период.ДатаОкончания;
	СтрокаНастройки.ДополнительныеПараметры = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураНастройки.ДополнительныеПараметры);
	
	ОбновитьЗначенияВНастройках(НастройкиИндикаторов);
	ОбновитьАктуальныеНастройкиИндикаторов(НастройкиИндикаторов);
	
	Если ОбновлятьЭлементы Тогда
		Элементы.ГруппаСтраницДинамики.ТекущаяСтраница = Элементы.СтраницаОбновлениеДанных;
		Элементы.ГруппаСтраницОстатков.ТекущаяСтраница = Элементы.СтраницаОбновлениеОстатков;
		ОбновитьЭлементыФормы(НастройкиИндикаторов);
		
	Иначе
		
		ПрименитьНастройкиКИндикаторамСобытий(НастройкиИндикаторов, СтрокаНастройки);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПериодИндикатораОстатка(НовыйПериод)

	НастройкиИндикаторов = АктуальныеНастройкиИндикаторов();
	ЗаполнитьЗначенияСвойств(НастройкиИндикаторов.ПериодОстатков, НовыйПериод);
	ОбновитьЗначенияВНастройках(НастройкиИндикаторов);
	ОбновитьАктуальныеНастройкиИндикаторов(НастройкиИндикаторов);
	ПрименитьНастройкиИндикатораОстатков(НастройкиИндикаторов);

КонецПроцедуры
 

&НаСервере
Процедура ОбновитьНастройкуИндикаторовОстатков(СтруктураНастройки)

	НастройкиИндикаторов = АктуальныеНастройкиИндикаторов();
	ОбновлятьЭлементы = Ложь;
	
	Если ЗначениеЗаполнено(СтруктураНастройки.Ключ) Тогда
		СтрокаНастройки = НастройкиИндикаторов.ИндикаторыОстатков.Найти(СтруктураНастройки.Ключ, "Ключ");
	Иначе
		ОбновлятьЭлементы = Истина;
		СтрокаНастройки = НоваяНастройкаИндикаторовОстатков(НастройкиИндикаторов.ИндикаторыОстатков, 
					СтруктураНастройки.РазделУчета, СтруктураНастройки.ВидОбъектаУчета, СтруктураНастройки.Заголовок);
	КонецЕсли;
	
	СтрокаНастройки.Заголовок = СтруктураНастройки.Заголовок;
	СтрокаНастройки.СкрыватьЕслиПусто = СтруктураНастройки.СкрыватьЕслиПусто;
	ЗаполнитьЗначенияСвойств(СтрокаНастройки.Отбор, СтруктураНастройки, "РазделУчета,ВидОбъектаУчета");
	СтрокаНастройки.Отбор.Вставить("ОбъектУчета",    СтруктураНастройки.ОбъектУчета);
	СтрокаНастройки.Отбор.Вставить("ФинансоваяЦель", СтруктураНастройки.ФинансоваяЦель);
	
	ОбновитьЗначенияВНастройках(НастройкиИндикаторов);
	ОбновитьАктуальныеНастройкиИндикаторов(НастройкиИндикаторов);
	
	Если ОбновлятьЭлементы Тогда
		
		Элементы.ГруппаСтраницДинамики.ТекущаяСтраница = Элементы.СтраницаОбновлениеДанных;
		Элементы.ГруппаСтраницОстатков.ТекущаяСтраница = Элементы.СтраницаОбновлениеОстатков;
		ОбновитьЭлементыФормы(НастройкиИндикаторов);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СтруктураНастройкиИндикатораСобытий(Ключ)

	Если НастройкиИндикаторов = Неопределено Тогда
		НастройкиИндикаторов = АктуальныеНастройкиИндикаторов();
	КонецЕсли;
	
	СтрокаНастройки = Неопределено;
	Если ЗначениеЗаполнено(Ключ) Тогда
		СтрокаНастройки = НастройкиИндикаторов.ИндикаторыДинамики.Найти(Ключ, "Ключ");
	КонецЕсли;

	СтруктураНастроек = Новый Структура("ТипИндикатора,ВидОбъектовУчета,Заголовок");
	СтруктураНастроек.Вставить("Ключ",    Ключ);
	
	Если СтрокаНастройки = Неопределено Тогда
		
		СтруктураНастроек.Вставить("ТипИндикатора",    "Структура");
		СтруктураНастроек.Вставить("ВидОбъектовУчета", "Расходы");
		СтруктураНастроек.Вставить("ДополнительныеПараметрыИндикатора", Обработки.НачальнаяСтраница.ДополнительныеПараметрыПоТипуИндикатора(СтруктураНастроек.ТипИндикатора));
		СтруктураНастроек.Вставить("Период", НоваяСтруктураПериода(ВидПериодаНастройкиИндикатораПоУмолчанию(СтруктураНастроек.ТипИндикатора, СтруктураНастроек.ВидОбъектовУчета)));

		СтруктураНастроек.Вставить("Заголовок", ПредставлениеИндикатораДинамики(СтруктураНастроек.ТипИндикатора, СтруктураНастроек.ВидОбъектовУчета));
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(СтруктураНастроек, СтрокаНастройки, "ТипИндикатора,ВидОбъектовУчета,Заголовок");
		СтруктураНастроек.Вставить("ДополнительныеПараметрыИндикатора", ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтрокаНастройки.ДополнительныеПараметры));
		СтруктураНастроек.Вставить("Период", ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтрокаНастройки.Период));

	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
Функция СтруктураНастройкиИндикатораОстатков(Ключ)

	Если НастройкиИндикаторов = Неопределено Тогда
		НастройкиИндикаторов = АктуальныеНастройкиИндикаторов();
	КонецЕсли;
	
	СтрокаНастройки = Неопределено;
	Если ЗначениеЗаполнено(Ключ) Тогда
		СтрокаНастройки = НастройкиИндикаторов.ИндикаторыОстатков.Найти(Ключ, "Ключ");
	КонецЕсли;

	СтруктураНастроек = Новый Структура("РазделУчета,Заголовок,СкрыватьЕслиПусто");
	СтруктураНастроек.Вставить("Ключ",    Ключ);
	СтруктураНастроек.Вставить("Период",  НастройкиИндикаторов.ПериодОстатков);
	
	Если СтрокаНастройки = Неопределено Тогда
		
		СтруктураНастроек.Вставить("РазделУчета",          "Деньги");
		СтруктураНастроек.Вставить("Заголовок",            НСтр("ru='Свободные деньги'"));
		СтруктураНастроек.Вставить("СкрыватьЕслиПусто",    Ложь);
		СтруктураНастроек.Вставить("Отбор",    Новый Структура);
		СтруктураНастроек.Отбор.Вставить("РазделУчета",       СтруктураНастроек.РазделУчета);
		СтруктураНастроек.Отбор.Вставить("ВидОбъектаУчета",   "СвободныеДеньги");
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(СтруктураНастроек, СтрокаНастройки, "РазделУчета,Заголовок,СкрыватьЕслиПусто");
		СтруктураНастроек.Вставить("Отбор", ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтрокаНастройки.Отбор));

	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
Функция ПериодИндикаторовОстатков()

	Если НастройкиИндикаторов = Неопределено Тогда
		НастройкиИндикаторов = АктуальныеНастройкиИндикаторов();
	КонецЕсли;
	
	Возврат НастройкиИндикаторов.ПериодОстатков;

КонецФункции
 

&НаКлиенте
Процедура НачальнаяСтраницаМенюНажатиеЗавершение(ЭлементМеню, ПараметрыЭлементаИндикатора) Экспорт

	Если ЭлементМеню = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементМеню.Значение = "НастройкиСтраницы" Тогда
		ОткрытьНастройкиОбзора();
	ИначеЕсли ЭлементМеню.Значение = "ВернутьПараметрыПоУмолчанию" Тогда
		ВернутьНастройкиПоУмолчанию();
	Иначе
		
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура МенюИндикатораСобытийНажатиеЗавершение(ЭлементМеню, ПараметрыЭлементаИндикатора) Экспорт

	Если ЭлементМеню = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементМеню.Значение = "СдвинутьВверх" Тогда
		СдвинутьБлокИндикатора(ПараметрыЭлементаИндикатора, -1);
	ИначеЕсли ЭлементМеню.Значение = "СдвинутьВниз" Тогда
		СдвинутьБлокИндикатора(ПараметрыЭлементаИндикатора, 1);
	ИначеЕсли ЭлементМеню.Значение = "Удалить" Тогда
		ВывестиДиалогУдаленияИндикатора(ПараметрыЭлементаИндикатора);
	ИначеЕсли ЭлементМеню.Значение = "ИзменитьНастройки" Тогда
		Если ПараметрыЭлементаИндикатора.Тип = "Дин" Тогда
			ОткрытьНастройкуИндикатораСобытий(ПараметрыЭлементаИндикатора.Ключ);
		Иначе
			ОткрытьНастройкуИндикатораОстатка(ПараметрыЭлементаИндикатора.Ключ);
		КонецЕсли;
	Иначе
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиДиалогУдаленияИндикатора(ПараметрыЭлементаИндикатора)

	#Область ПоказатьВопрос
	ТекстВопроса = НСтр("ru='Удалить индикатор с начальной страницы?'");
	
	Оповещение = Новый ОписаниеОповещения("ВывестиДиалогУдаленияИндикатораЗавершение", ЭтотОбъект, ПараметрыЭлементаИндикатора);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Удалить'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Не удалять'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Нет, Заголовок);
	#КонецОбласти

КонецПроцедуры

&НаКлиенте
Процедура ВывестиДиалогУдаленияИндикатораЗавершение(Ответ, ПараметрыЭлементаИндикатора) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		УдалитьИндикатор(ПараметрыЭлементаИндикатора);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗагрузкуКурсовВалют()
	ПараметрыФормы = Новый Структура("ОткрытиеИзСписка");
	ОткрытьФорму("Обработка.ЗагрузкаКурсовВалют.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзМенюВидОперацииПоДолгам(Элемент, ВидДолга, СтруктураЭлемента)

	Меню = Новый СписокЗначений;
	Если ВидДолга = "МыДолжны" Тогда
		Меню.Добавить("МыВзялиВДолг", НСтр("ru='Мы взяли в долг'"));
		Меню.Добавить("МыВернулиДолг", НСтр("ru='Мы вернули долг'"));
	Иначе
		Меню.Добавить("МыДалиВДолг", НСтр("ru='Мы дали в долг'"));
		Меню.Добавить("НамВернулиДолг", НСтр("ru='Нам вернули долг'"));
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИзМенюВидОперацииПоДолгамЗавершение", ЭтотОбъект, СтруктураЭлемента);
	ПоказатьВыборИзМеню(Оповещение, Меню, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзМенюВидОперацииПоДолгамЗавершение(ЭлементМеню, ПараметрыЭлементаИндикатора) Экспорт

	Если ЭлементМеню = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНовойОперации(ЭлементМеню.Значение, ПараметрыЭлементаИндикатора);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНовойОперации(ВидОперации, ПараметрыЭлементаИндикатора)

	ЗначенияЗаполнения = Новый Структура("Дата", ДатаВводаНовойОперации(ПараметрыЭлементаИндикатора));
	
	ПараметрыНовойОперации = Новый Структура;
	ПараметрыНовойОперации.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	РаботаСФормамиДокументовКлиент.ОткрытьФормуНовогоДокументаСУчетомШаблона(ВидОперации, ПараметрыНовойОперации, ЭтотОбъект);
	//ОткрытьФорму("Документ." + ВидОперации + ".ФормаОбъекта", ПараметрыНовойОперации, ЭтотОбъект, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиОбзора()

	Оповещение = Новый ОписаниеОповещения("ОткрытьНастройкиОбзораЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.НачальнаяСтраница.Форма.НастройкаОбзора", , , Истина, , , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиОбзораЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбновитьНастройкиОбзораСервер();
	ЭтапОбновленияДанных = "";
	ВыполнитьЭтапОбновленияДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогВыбораПериодаВИндикаторе(Элемент)

	Если Не ФормаДоступнаДляИзменений() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.Имя = "ЗаголовокПанелиОстатки" Или Элемент.Имя = "ПодзаголовокНастройкиОстатка" Тогда
		
		СтруктураЭлемента = Новый Структура("Тип,Ключ,Период", "Ост", "Ост_ВыборПериода", ПериодИндикаторовОстатков());
		Период = СтруктураЭлемента.Период;
		ДопустимыеВидыПериода = ДеньгиКлиентСервер.СписокВариантовПеродаИзТекущейДаты(-1, Ложь);
		
	Иначе
		
		СтруктураЭлемента = КлючиИндкатораИзИмениЭлемента(Элемент.Имя);
		
		НастройкиИндикатора = СтруктураНастройкиИндикатораСобытий(СтруктураЭлемента.Ключ);
		Период = НастройкиИндикатора.Период;
		Если НастройкиИндикатора.ТипИндикатора = "Планы" Тогда
			ДопустимыеВидыПериода = ДеньгиКлиентСервер.СписокВариантовПеродаИзТекущейДаты(1, Ложь);
		Иначе
			ДопустимыеВидыПериода = ДеньгиКлиентСервер.СписокВариантовПеродаИзТекущейДаты(-1, Ложь);
		КонецЕсли;
		
		СтруктураЭлемента.Вставить("ТекущиеНастройки", НастройкиИндикатора);
		
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура("ВариантБюджета,ВидПериода,ДатаНачала,ДатаОкончания,ДатаНачалаБюджетногоПериода,ДатаОкончанияБюджетногоПериода");
	ЗаполнитьЗначенияСвойств(ПараметрыВыбора, Период, "ВидПериода,ДатаНачала,ДатаОкончания");
	ПараметрыВыбора.ВариантБюджета = ВариантБюджета;
	ПараметрыВыбора.ДатаНачалаБюджетногоПериода    = НачалоПериодаБюджета;
	ПараметрыВыбора.ДатаОкончанияБюджетногоПериода = КонецПериодаБюджета;
	ПараметрыВыбора.Вставить("ДопустимыеВидыПериода", ДопустимыеВидыПериода);
	
	Оповещение = Новый ОписаниеОповещения("ДиалогВыбораПериодаВИндикатореЗавершение", ЭтотОбъект, СтруктураЭлемента);
	ОткрытьФорму("ОбщаяФорма.ВыборПериодаИзТекущейДаты", ПараметрыВыбора, ЭтотОбъект, СтруктураЭлемента.Ключ, , , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ДиалогВыбораПериодаВИндикатореЗавершение(Результат, ПараметрыЭлементаИндикатора) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЭлементаИндикатора.Тип = "Дин" Тогда
		
		Настройка = ПараметрыЭлементаИндикатора.ТекущиеНастройки;
		Настройка.Вставить("ДополнительныеПараметры", Настройка.ДополнительныеПараметрыИндикатора);
		Настройка.Период.ВидПериода    = Результат.ВидПериода;
		Настройка.Период.ДатаНачала    = Результат.ДатаНачала;
		Настройка.Период.ДатаОкончания = Результат.ДатаОкончания;
		ОбновитьНастройкуИндикатораДинамикиСервер(Настройка);
		
	Иначе
		
		ОбновитьПериодИндикатораОстатка(Результат);
		
	КонецЕсли;
	 
	ЭтапОбновленияДанных = "";
	ВыполнитьЭтапОбновленияДанных();

КонецПроцедуры
 
&НаКлиенте
Процедура ДиалогВводаДатыВИндикаторе(Элемент)

	Если Не ФормаДоступнаДляИзменений() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента = КлючиИндкатораИзИмениЭлемента(Элемент.Имя);
	
	Если СтруктураЭлемента.Тип <> "Дин" Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиИндикатора = СтруктураНастройкиИндикатораСобытий(СтруктураЭлемента.Ключ);
	Период = НастройкиИндикатора.Период;
	
	СтруктураЭлемента.Вставить("ТекущиеНастройки", НастройкиИндикатора);
	Оповещение = Новый ОписаниеОповещения("ДиалогВводаДатыВИндикатореЗавершение", ЭтотОбъект, СтруктураЭлемента);
	ПоказатьВводДаты(Оповещение, Период.ДатаНачала, НСтр("ru='Укажите дату ввода новых операций'"), ЧастиДаты.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ДиалогВводаДатыВИндикатореЗавершение(Результат, ПараметрыЭлементаИндикатора) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Настройка = ПараметрыЭлементаИндикатора.ТекущиеНастройки;
	Настройка.Вставить("ДополнительныеПараметры", Настройка.ДополнительныеПараметрыИндикатора);
	Настройка.Период.ВидПериода    = "КонецПроизвольнойДаты";
	Настройка.Период.ДатаНачала    = Результат;
	Настройка.Период.ДатаОкончания = КонецДня(Результат);
	
	ОбновитьНастройкуИндикатораДинамикиСервер(Настройка);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПлановыхОпераций()

	ОткрытьФорму("Обработка.ПлановыеОперации.Форма.СписокНевыполненныхОпераций", , ЭтотОбъект, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура КурсыВалютДобавитьНажатиеЗавершение(Выбор, ПараметрыЭлементаИндикатора) Экспорт

	Если Выбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Настройка = ПараметрыЭлементаИндикатора.ТекущиеНастройки;
	Если Настройка.ДополнительныеПараметрыИндикатора.СписокВалют.НайтиПоЗначению(Выбор) <> Неопределено Тогда
		
		ТекстПреупреждения = НСтр("ru='Валюта %1 уже присутствует в этом индикаторе'");
		ТекстПреупреждения = СтрШаблон(ТекстПреупреждения, Строка(Выбор));
		ПоказатьПредупреждение(, ТекстПреупреждения);
		Возврат;
		
	КонецЕсли;
	
	Настройка.Вставить("ДополнительныеПараметры", Настройка.ДополнительныеПараметрыИндикатора);
	Настройка.ДополнительныеПараметры.СписокВалют.Добавить(Выбор);
	
	ОбновитьНастройкуИндикатораДинамикиСервер(Настройка);
	ЭтапОбновленияДанных = "";
	ВыполнитьЭтапОбновленияДанных();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОстатка(ПараметрыЭлементаИндикатора)

	НастройкаИндикатора = СтруктураНастройкиИндикатораОстатков(ПараметрыЭлементаИндикатора.Ключ);
	Если НастройкаИндикатора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаИндикатора.РазделУчета = ПредопределенноеЗначение("ПланСчетов.РазделыУчета.Деньги") Тогда
		ОткрытьОтчетПоКошелькам(НастройкаИндикатора);
	ИначеЕсли НастройкаИндикатора.РазделУчета = ПредопределенноеЗначение("ПланСчетов.РазделыУчета.Долги") Тогда
		ОткрытьОтчетПоДолгам(НастройкаИндикатора);
	ИначеЕсли НастройкаИндикатора.РазделУчета = ПредопределенноеЗначение("ПланСчетов.РазделыУчета.Имущество") Тогда
		ОткрытьОтчетПоИмуществу(НастройкаИндикатора);
	Иначе
		ОткрытьОтчетПоФинансовомуСостоянию(НастройкаИндикатора);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоКошелькам(НастройкаИндикатора)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "ОперацииПоКошелькам");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Новый СтандартныйПериод(НастройкаИндикатора.Период.ДатаНачала, НастройкаИндикатора.Период.ДатаОкончания));
	ПараметрыФормы.Отбор.Вставить("ВалютаОтчета",    ВалютаОтчета);
	ПараметрыФормы.Отбор.Вставить("КошелекАктуален", Истина);
	
	Если НастройкаИндикатора.Отбор.ВидОбъектаУчета = "" Тогда
		// Все деньги
		
	ИначеЕсли НастройкаИндикатора.Отбор.ВидОбъектаУчета = "СвободныеДеньги" Тогда
		
		ПараметрыФормы.Отбор.Вставить("ВидДенег", ПредопределенноеЗначение("ПланСчетов.РазделыУчета.СвободныеДеньги"));
		ПараметрыФормы.Отбор.Вставить("ТипКошелька", "Деньги");
		
	ИначеЕсли НастройкаИндикатора.Отбор.ВидОбъектаУчета = "Накопление" Тогда
		
		ПараметрыФормы.Отбор.Вставить("ВидДенег", ПредопределенноеЗначение("ПланСчетов.РазделыУчета.Накопления"));
		ПараметрыФормы.Отбор.Вставить("ТипКошелька", "Деньги");
		
	ИначеЕсли НастройкаИндикатора.Отбор.ВидОбъектаУчета = "КредитныеКарты" Тогда
		
		ПараметрыФормы.Отбор.Вставить("ВидДенег", ПредопределенноеЗначение("ПланСчетов.РазделыУчета.СвободныеДеньги"));
		ПараметрыФормы.Отбор.Вставить("ТипКошелька", "Кредитные карты");
		ПараметрыФормы.Отбор.Вставить("ТипКошелька", "Кредитные карты");
		
	КонецЕсли;
	
	Если НастройкаИндикатора.Отбор.Свойство("ОбъектУчета") 
			И НастройкаИндикатора.Отбор.ОбъектУчета <> Неопределено Тогда
		ПараметрыФормы.Отбор.Вставить("Кошелек", НастройкаИндикатора.Отбор.ОбъектУчета);
	КонецЕсли;
	
	ОткрытьФорму("Отчет.ОтчетПоКошелькам.ФормаОбъекта", ПараметрыФормы, , Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоДолгам(НастройкаИндикатора)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "Основной");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Новый СтандартныйПериод(НастройкаИндикатора.Период.ДатаНачала, НастройкаИндикатора.Период.ДатаОкончания));
	ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаОтчета);
	ПараметрыФормы.Отбор.Вставить("Диаграмма", Ложь);
	ПараметрыФормы.Отбор.Вставить("ДолгАктуален", Истина);
	
	Если НастройкаИндикатора.Отбор.ВидОбъектаУчета = "МыДолжны" Тогда
		
		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДолгов.ПолученныйКредит"));
		СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДолгов.ВзаимныйРасчет"));
		ПараметрыФормы.Отбор.Вставить("ВидДолга", СписокТипов);
		
		ПараметрыФормы.Вставить("КлючВарианта", "Взятые долги");
		
	ИначеЕсли НастройкаИндикатора.Отбор.ВидОбъектаУчета = "НамДолжны" Тогда
		
		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДолгов.ВыданныйЗаем"));
		СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДолгов.ВзаимныйРасчет"));
		ПараметрыФормы.Отбор.Вставить("ВидДолга", СписокТипов);
		
		ПараметрыФормы.Вставить("КлючВарианта", "Выданные долги");
		
	КонецЕсли;
	
	Если НастройкаИндикатора.Отбор.Свойство("ОбъектУчета") 
			И НастройкаИндикатора.Отбор.ОбъектУчета <> Неопределено Тогда
		ПараметрыФормы.Отбор.Вставить("Долг", НастройкаИндикатора.Отбор.ОбъектУчета);
	КонецЕсли;
	
	ОткрытьФорму("Отчет.ОтчетПоДолгам.ФормаОбъекта", ПараметрыФормы, , Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоИмуществу(НастройкаИндикатора)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "ОперацииПоИмуществу");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Новый СтандартныйПериод(НастройкаИндикатора.Период.ДатаНачала, НастройкаИндикатора.Период.ДатаОкончания));
	ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаОтчета);
	ПараметрыФормы.Отбор.Вставить("ИмуществоАктуально", Истина);
	
	Если НастройкаИндикатора.Отбор.Свойство("ОбъектУчета") 
			И НастройкаИндикатора.Отбор.ОбъектУчета <> Неопределено Тогда
		ПараметрыФормы.Отбор.Вставить("Имущество", НастройкаИндикатора.Отбор.ОбъектУчета);
	КонецЕсли;
	
	ОткрытьФорму("Отчет.ОтчетПоИмуществу.ФормаОбъекта", ПараметрыФормы, , Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоФинансовомуСостоянию(НастройкаИндикатора)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "ИзменениеПоРазделамУчета");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Новый СтандартныйПериод(НастройкаИндикатора.Период.ДатаНачала, НастройкаИндикатора.Период.ДатаОкончания));
	ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаОтчета);
	
	Если НастройкаИндикатора.Отбор.Свойство("ОбъектУчета") 
			И НастройкаИндикатора.Отбор.ОбъектУчета <> Неопределено Тогда
		ПараметрыФормы.Отбор.Вставить("ОбъектУчета", НастройкаИндикатора.Отбор.ОбъектУчета);
	КонецЕсли;
	
	ОткрытьФорму("Отчет.ОтчетОбИзмененииФинансовогоСостояния.ФормаОбъекта", ПараметрыФормы, , Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВернутьНастройкиПоУмолчаниюЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВернутьнастройкиПоУмолчаниюСервер();
		ВыполнитьЭтапОбновленияДанных();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСообщениеВСлужбуПоддержки()

	Состояние(НСтр("ru='Подготовка технологической информации...'"));
	ПараметрыФормы = ПараметрыСообщения();
	ОткрытьФорму("ОбщаяФорма.ОтправкаСообщенияВСлужбуПоддержки", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор, , );

КонецПроцедуры

&НаСервере
Функция ПараметрыСообщения()

	СтруктураСообщения = ПоддержкаПользователейДеньги.НоваяСтруктураСообщения(ЭтотОбъект);
	СтруктураСообщения.Тема = НСтр("ru='Ошибка при обновлении начальной страницы'");
	
	Возврат СтруктураСообщения;

КонецФункции


#КонецОбласти 


#КонецОбласти
