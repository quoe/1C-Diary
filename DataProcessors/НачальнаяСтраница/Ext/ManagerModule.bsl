////////////////////////////////////////////////////////////////////////////////
// Обработка.НачальнаяСтраница.МодульМенеджера
//  
////////////////////////////////////////////////////////////////////////////////
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура фонового обновления данных на начальной странице
//
//Параметры:
//	СтруктураПараметров	- Структура, передаваемые в процедуру параметры
//	Адрес  - Адрес временного хранилища, в которое следует поместить данные для вывода на начальной странице
//
Процедура ПодготовитьДанные(СтруктураПараметров, Адрес = Неопределено) Экспорт
	
	ПоместитьВоВременноеХранилище(Неопределено, Адрес);
	
	НастройкиИндикаторов = СтруктураПараметров.НастройкиИндикаторов;
	СтруктураВыборок = ВыборкиЗапросаПоказателей(НастройкиИндикаторов);
	
	ПоместитьВоВременноеХранилище(СтруктураВыборок, Адрес);
	
КонецПроцедуры

// Возвращает структуру с дополнительными параметрами, набор которых определяется по типу индикатора
Функция ДополнительныеПараметрыПоТипуИндикатора(ТипИндикатора) Экспорт

	Результат = Новый Структура;
	
	Если ТипИндикатора = "Структура" Тогда
		
		Результат.Вставить("ВидДенег", ПланыСчетов.РазделыУчета.СвободныеДеньги);     // Другие варианты: "ВсеДеньги", "Накопления"
		Результат.Вставить("ВключатьПеремещения",          Ложь); // учитывать ли операции перемещений
		Результат.Вставить("ОтображатьСлужебныеСтатьи",    Ложь); // не учитывать предопределенные статьи типа "УвеличениеОстатка" и "ОбменВалюты"
		Результат.Вставить("ТипДиаграммы",                   "Круговая"); // 
		Результат.Вставить("СписокВидовДвиженияДенег",     Новый СписокЗначений);
		Результат.Вставить("МинимальнаяВысотаДиаграммы",   0);     // 
		
	ИначеЕсли ТипИндикатора = "Динамика" Тогда
		
		Результат.Вставить("ВидДенег", ПланыСчетов.РазделыУчета.СвободныеДеньги);     // Другие варианты: "ВсеДеньги", "Накопления"
		Результат.Вставить("ВключатьПеремещения",         Ложь);     // учитывать ли операции перемещений
		Результат.Вставить("ОтображатьСлужебныеСтатьи",   Ложь); // не учитывать предопределенные статьи типа "УвеличениеОстатка" и "ОбменВалюты"
		Результат.Вставить("ТипДиаграммы",                  "Гистограмма"); // 
		Результат.Вставить("СписокВидовДвиженияДенег",    Новый СписокЗначений);
		Результат.Вставить("МинимальнаяВысотаДиаграммы",   0);     // 
		
	ИначеЕсли ТипИндикатора = "Накопления" Тогда
		
		Результат.Вставить("СрочностьЦели", "");     // Пустая строка - все цели. Истина - только срочные, Ложь - только без сроков
		Результат.Вставить("СписокЦелей", Новый СписокЗначений);     // Пустая строка - все цели. Или массив ссылок на финансовые цели
		Результат.Вставить("ТипДиаграммы", "ГистограммаНормированнаяГоризонтальная"); // 
		Результат.Вставить("МинимальнаяВысотаДиаграммы",   0);     // 
		
	ИначеЕсли ТипИндикатора = "КурсыВалют" Тогда
		
		Результат.Вставить("СписокВалют", Новый СписокЗначений);
		ЗаполнитьСписокВалютПоУмолчанию(Результат.СписокВалют);
		Результат.Вставить("ТипДиаграммы", "График"); // 
		Результат.Вставить("МинимальнаяВысотаДиаграммы",   0);     // 
		
	ИначеЕсли ТипИндикатора = "ВводОпераций" Тогда
		
		Результат.Вставить("ОтображатьПланы", Ложь);
		
		Результат.Вставить("КомандыВводаОпераций", ДеньгиВызовСервера.ПолучитьСписокВидовОпераций("Расход,Доход,Перемещение,ОбменВалюты"));
		Результат.КомандыВводаОпераций.Добавить("НамДолжны", НСтр("ru='Расчеты по долгам выданным'"));
		Результат.КомандыВводаОпераций.Добавить("МыДолжны", НСтр("ru='Расчеты по полученным кредитам'"));
		Результат.Вставить("ТипДиаграммы", Неопределено); // 
		Для каждого ЭлементСписка Из Результат.КомандыВводаОпераций Цикл
			ЭлементСписка.Пометка = Истина;
		КонецЦикла;
		
	ИначеЕсли ТипИндикатора = "Планы" Тогда
		
		Результат.Вставить("ТипДиаграммы", "Гистограмма"); // 
		Результат.Вставить("МинимальнаяВысотаДиаграммы",   0);     // 
		
	ИначеЕсли ТипИндикатора = "Бюджет" Тогда
		
		Результат.Вставить("РазделБюджета", Справочники.ФинансовыеЦели.ПустаяСсылка()); // Свободные деньги
		Результат.Вставить("ТипДиаграммы", Неопределено); // 
		Результат.Вставить("МинимальнаяВысотаДиаграммы",   0);     // 
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает структуру, описыввающую период индикатора
//
//Параметры:
//	НачалоПериода - Дата - используется только для бюджетного и произвольного периодов
//	КонецПериода - Дата - используется только для бюджетного и произвольного периодов
//
Функция НоваяСтруктураПериода(ВидПериода, НачалоПериода = Неопределено, КонецПериода = Неопределено)

	СекундыДня = 86400;
	
	Результат = Новый Структура("ВидПериода, ДатаНачала, ДатаОкончания", ВидПериода, НачалоПериода, КонецПериода);
	
	Если Найти("НачалоБюджетногоПериода,КонецБюджетногоПериода,НачалоПроизвольнойДаты,КонецПроизвольнойДаты", ВидПериода) > 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ВидПериода = "НачалоДня" Или ВидПериода = "КонецДня" Тогда
		
		Результат.ДатаНачала = НачалоДня(ТекущаяДата());
		Результат.ДатаОкончания = КонецДня(Результат.ДатаНачала);
		
	ИначеЕсли ВидПериода = "НачалоНедели" Или ВидПериода = "КонецНедели" Тогда
		
		Результат.ДатаНачала = НачалоНедели(ТекущаяДата());
		Результат.ДатаОкончания = КонецНедели(Результат.ДатаНачала);
		
	ИначеЕсли ВидПериода = "НачалоМесяца" Или ВидПериода = "КонецМесяца" Тогда
		
		Результат.ДатаНачала = НачалоМесяца(ТекущаяДата());
		Результат.ДатаОкончания = КонецМесяца(Результат.ДатаНачала);
		
	ИначеЕсли ВидПериода = "НачалоГода" Или ВидПериода = "КонецГода" Тогда
		
		Результат.ДатаНачала = НачалоГода(ТекущаяДата());
		Результат.ДатаОкончания = КонецГода(Результат.ДатаНачала);
		
	ИначеЕсли ВидПериода = "НачалоПроизвольнойДаты" Или ВидПериода = "КонецПроизвольнойДаты" Тогда
		
		Результат.ДатаНачала = ?(ЗначениеЗаполнено(Результат.ДатаНачала), Результат.ДатаНачала, НачалоМесяца(ТекущаяДата()));
		Результат.ДатаОкончания = ?(ЗначениеЗаполнено(Результат.ДатаОкончания), Результат.ДатаОкончания, КонецМесяца(Результат.ДатаНачала));
		
	ИначеЕсли ВидПериода = "ПоследняяНеделя" Тогда
		
		Результат.ДатаОкончания = КонецДня(ТекущаяДата());
		Результат.ДатаНачала = НачалоДня(Результат.ДатаОкончания - СекундыДня * 7);
		
	ИначеЕсли ВидПериода = "ПоследнийМесяц" Тогда
		
		Результат.ДатаОкончания = КонецДня(ТекущаяДата());
		Результат.ДатаНачала = НачалоДня(ДобавитьМесяц(Результат.ДатаОкончания, -1));
		
	ИначеЕсли ВидПериода = "ПоследнийГод" Тогда
		
		Результат.ДатаОкончания = КонецДня(ТекущаяДата());
		Результат.ДатаНачала = НачалоДня(ДобавитьМесяц(Результат.ДатаОкончания, -12));
		
	ИначеЕсли ВидПериода = "НеделяВперед" Тогда
		
		Результат.ДатаНачала    = НачалоДня(ТекущаяДата());
		Результат.ДатаОкончания = КонецДня(Результат.ДатаНачала + СекундыДня * 7);
		
	ИначеЕсли ВидПериода = "МесяцВперед" Тогда
		
		Результат.ДатаНачала    = НачалоДня(ТекущаяДата());
		Результат.ДатаОкончания = КонецДня(ДобавитьМесяц(Результат.ДатаНачала, 1));
		
	ИначеЕсли ВидПериода = "ГодВперед" Тогда
		
		Результат.ДатаНачала    = НачалоДня(ТекущаяДата());
		Результат.ДатаОкончания = КонецДня(ДобавитьМесяц(Результат.ДатаНачала, 12));
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Возвращает структуру настроек, заполненную значениями по умолчанию
Функция НовыеНастройкиИндикаторов() Экспорт

	Настройки = Новый Структура;
	
	// Настройки, общие для всех индикаторов
	Настройки.Вставить("ОтключитьАнимацию", Ложь);
	Настройки.Вставить("НеОбновлятьАвтоматически", Ложь);
	Настройки.Вставить("СуммыСКопейками", Ложь);
	Настройки.Вставить("ВалютаОтчета", ПараметрыСеанса.ВалютаУчета);
	Настройки.Вставить("ВариантБюджета", Константы.ОсновнойВариантБюджета.Получить());
	Настройки.Вставить("ВидПериодаБюджета", Настройки.ВариантБюджета.ДетальностьПланирования);
	Настройки.Вставить("НачалоПериодаБюджета", БюджетированиеКлиентСервер.КалендарноеНачалоПериода(ТекущаяДата(), Настройки.ВидПериодаБюджета));
	Настройки.Вставить("КонецПериодаБюджета", БюджетированиеКлиентСервер.КалендарноеОкончаниеПериода(ТекущаяДата(), Настройки.ВидПериодаБюджета));
	Настройки.Вставить("КалендарноеНачалоПериодаБюджета", Настройки.НачалоПериодаБюджета);
	Настройки.Вставить("КалендарныйКонецПериодаБюджета", Настройки.КонецПериодаБюджета);

	// Настройки индикаторов остатков (правая колонка)
	Настройки.Вставить("ПериодОстатков", НоваяСтруктураПериода("НачалоБюджетногоПериода", Настройки.НачалоПериодаБюджета, Настройки.КонецПериодаБюджета));
	//   состав индикаторов по умолчанию
	Настройки.Вставить("ИндикаторыОстатков", НовыйСписокИндикаторовОстатков(Истина));
	
	// Настройки индикаторов динамики (левая колонка)
	Настройки.Вставить("ИндикаторыДинамики", НовыйСписокИндикаторовДинамики(Истина));
	
	Возврат Настройки;
	
КонецФункции

// Добавляет и возвращает строку в таблицу настроек индикатора остатков
Функция НоваяНастройкаИндикаторовОстатков(СписокИндикаторов, РазделУчета, ВидОбъектаУчета, ЗаголовокРаздела = "", СкрыватьЕслиПусто = Ложь) Экспорт

	СтрокаНастройки = СписокИндикаторов.Добавить();
	СтрокаНастройки.Порядок          = СписокИндикаторов.Количество();
	СтрокаНастройки.Ключ             = "Ост_" + Формат(СтрокаНастройки.Порядок, "ЧДЦ=; ЧГ=");
	Если ТипЗнч(РазделУчета) = Тип("Строка") Тогда
		СтрокаНастройки.РазделУчета      = ПланыСчетов.РазделыУчета[РазделУчета];
	Иначе
		СтрокаНастройки.РазделУчета      = РазделУчета;
	КонецЕсли;
	СтрокаНастройки.ИмяБлокаИндикатора       = СтрокаНастройки.Ключ + "_Виджет";
	
	СтрокаНастройки.Отбор.Вставить("РазделУчета", СтрокаНастройки.РазделУчета);
	СтрокаНастройки.Отбор.Вставить("ВидОбъектаУчета", ВидОбъектаУчета);
	
	Если ЗначениеЗаполнено(ЗаголовокРаздела) Тогда
		СтрокаНастройки.Заголовок = ЗаголовокРаздела;
	Иначе
		СтрокаНастройки.Заголовок = ПредставлениеПоказателяОстатка(СтрокаНастройки);
	КонецЕсли;
	
	СтрокаНастройки.СкрыватьЕслиПусто = СкрыватьЕслиПусто;
	
	Возврат СтрокаНастройки;

КонецФункции

// Возвращает строку настройки индикатора динамики
Функция НоваяНастройкаИндикатораДинамики(СписокИндикаторов, ТипИндикатора, ВидОбъектовУчета, Заголовок = "") Экспорт

	СтрокаНастройки = СписокИндикаторов.Добавить();
	СтрокаНастройки.Порядок          = СписокИндикаторов.Количество();
	СтрокаНастройки.Ключ             = "Дин_" + Формат(СтрокаНастройки.Порядок, "ЧДЦ=; ЧГ=");
	СтрокаНастройки.ТипИндикатора    = ТипИндикатора;
	СтрокаНастройки.ВидОбъектовУчета = ВидОбъектовУчета;
	СтрокаНастройки.ДополнительныеПараметры = Обработки.НачальнаяСтраница.ДополнительныеПараметрыПоТипуИндикатора(ТипИндикатора);
	СтрокаНастройки.Период           = НоваяСтруктураПериода(ВидПериодаНастройкиИндикатораПоУмолчанию(ТипИндикатора, ВидОбъектовУчета));

	СтрокаНастройки.ИмяБлокаИндикатора       = СтрокаНастройки.Ключ + "_Блок" + ТипИндикатора;
	
	Если ЗначениеЗаполнено(Заголовок) Тогда
		СтрокаНастройки.Заголовок = Заголовок;
	Иначе
		СтрокаНастройки.Заголовок = ПредставлениеИндикатораДинамики(ТипИндикатора, ВидОбъектовУчета);
	КонецЕсли;
	
	Возврат СтрокаНастройки;
	
КонецФункции

// Возвращает локализованный заголовок индикатора по его типу и виду объектов учета
Функция ПредставлениеИндикатораДинамики(ТипИндикатора, ВидОбъектовУчета) Экспорт

	Результат = НСтр("ru='Изменения...'");
	
	Если ТипИндикатора = "Структура" Тогда
		Если ВидОбъектовУчета = "Расходы" Тогда
			Результат = НСтр("ru='Расход денег'");
		ИначеЕсли ВидОбъектовУчета = "Доходы" Тогда
			Результат = НСтр("ru='Приход денег'");
		ИначеЕсли ВидОбъектовУчета = "ФинансовыеЦели" Тогда
			Результат = НСтр("ru='Структура накоплений'");
		ИначеЕсли ВидОбъектовУчета = "СтатьиБюджета" Тогда
			Результат = НСтр("ru='Структура бюджета'");
		Иначе
			ВызватьИсключение НСтр("ru='Для индикатора типа ""Структура"" использован неправильный вид объектов!'");
		КонецЕсли;
	ИначеЕсли ТипИндикатора = "Динамика" Тогда
		Если ВидОбъектовУчета = "Расходы" Тогда
			Результат = НСтр("ru='Динамика расходов'");
		ИначеЕсли ВидОбъектовУчета = "Доходы" Тогда
			Результат = НСтр("ru='Динамика доходов'");
		ИначеЕсли ВидОбъектовУчета = "ФинансовыеЦели" Тогда
			Результат = НСтр("ru='Динамика накоплений'");
		ИначеЕсли ВидОбъектовУчета = "ДоходыИРасходы" Тогда
			Результат = НСтр("ru='Динамика доходов и расходов'");
		Иначе
			ВызватьИсключение НСтр("ru='Для индикатора типа ""Динамика"" использован неправильный вид объектов!'");
		КонецЕсли;
	ИначеЕсли ТипИндикатора = "Накопления" Тогда
		Результат = НСтр("ru='Накопления на финансовые цели'");
	ИначеЕсли ТипИндикатора = "КурсыВалют" Тогда
		Результат = НСтр("ru='Курсы валют'");
	ИначеЕсли ТипИндикатора = "ВводОпераций" Тогда
		Результат = НСтр("ru='Ввод операций'");
	ИначеЕсли ТипИндикатора = "Планы" Тогда
		Результат = НСтр("ru='Планы'");
	ИначеЕсли ТипИндикатора = "Бюджет" Тогда
		Результат = НСтр("ru='Бюджет'");
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ВидПериодаНастройкиИндикатораПоУмолчанию(ТипИндикатора, ВидОбъектовУчета) Экспорт

	Если ТипИндикатора = "Структура" Тогда
		
		Возврат "НачалоБюджетногоПериода";
		
	ИначеЕсли ТипИндикатора = "Динамика" Тогда
		
		Если ВидОбъектовУчета = "ДоходыИРасходы" Тогда
			Возврат "ПоследнийГод";
		Иначе
			Возврат "ПоследнийМесяц";
		КонецЕсли;
		
	ИначеЕсли ТипИндикатора = "Накопления" Тогда
		
		Возврат "ПоследнийГод";
		
	ИначеЕсли ТипИндикатора = "КурсыВалют" Тогда
		
		Возврат "ПоследнийМесяц";
		
	ИначеЕсли ТипИндикатора = "ВводОпераций" Тогда
		
		Возврат "КонецДня";
		
	ИначеЕсли ТипИндикатора = "Планы" Тогда
		
		Возврат "НеделяВперед";
		
	ИначеЕсли ТипИндикатора = "Бюджет" Тогда
		
		Возврат "НачалоБюджетногоПериода";
		
	КонецЕсли;
	
	// по умолчанию
	Возврат "НачалоБюджетногоПериода";

КонецФункции


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ЗапросИВыборки
	
Функция ВыборкиЗапросаПоказателей(НастройкиИндикаторов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ВалютаУчета", ПараметрыСеанса.ВалютаУчета);
	Запрос.УстановитьПараметр("ВалютаОтчета", НастройкиИндикаторов.ВалютаОтчета);
	
	СтруктураЗапроса = Новый Структура;
	
	// Формируем текст пакетного запроса, добавляем параметры
	ОтчетыСервер.ДополнитьЗапросКурсамиВалютНаКонец(Запрос, СтруктураЗапроса, Запрос.Параметры.ТекущаяДата);
	ДополнитьТекстЗапросаОстатками(Запрос, СтруктураЗапроса, НастройкиИндикаторов);
	ДополнитьТекстЗапросаСобытиями(Запрос, СтруктураЗапроса, НастройкиИндикаторов);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	// Заполняем возвращаемую структуру выборками результатов
	Результат = Новый Структура;
	Для каждого КлючИЗначение Из СтруктураЗапроса Цикл
		
		Если Лев(КлючИЗначение.Ключ, 8) = "Выборка_" Тогда
			Результат.Вставить(КлючИЗначение.Ключ, ПакетРезультатов[КлючИЗначение.Значение]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Запросы для индикаторов остатков
// 	Сначала заполняется временная таблица с остатками и сравнением остатков за прошлые периоды
//	Потом для каждого индикатора остатка формируется текст запроса для получения итогов из временной таблицы
//
Процедура ДополнитьТекстЗапросаОстатками(Запрос, СтруктураЗапроса, НастройкиИндикаторов)

	Запрос.УстановитьПараметр("НачалоПериодаОстатков", Мин(Запрос.Параметры.ТекущаяДата, НастройкиИндикаторов.ПериодОстатков.ДатаНачала));
	
	ИмяВремТаблицы = "НачальныеКурсыОстатков";
	#Область ТекстЗапроса
	СтруктураЗапроса.Вставить(ИмяВремТаблицы, СтруктураЗапроса.Количество());
	Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов(ИмяВремТаблицы) + "
	|ВЫБРАТЬ
	|	ТекущиеКурсы.Валюта КАК Валюта,
	|	ТекущиеКурсы.Курс КАК Курс,
	|	ТекущиеКурсы.Кратность КАК Кратность
	|ПОМЕСТИТЬ НачальныеКурсыОстатков
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&НачалоПериодаОстатков, БазоваяВалюта = &ВалютаУчета) КАК ТекущиеКурсы
	|";
	#КонецОбласти 
	
	ИмяВремТаблицы = "КурсыНаНачалоОстатков";
	#Область ТекстЗапроса
	СтруктураЗапроса.Вставить(ИмяВремТаблицы, СтруктураЗапроса.Количество());
	Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов(ИмяВремТаблицы) + "
	|ВЫБРАТЬ
	|	Курсы.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КурсыОтчета.Курс, 0) = 0
	|				ИЛИ ЕСТЬNULL(Курсы.Кратность, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(Курсы.Курс, 0) * ЕСТЬNULL(КурсыОтчета.Кратность, 0) / (КурсыОтчета.Курс * Курсы.Кратность)
	|	КОНЕЦ КАК КурсПересчета
	|ПОМЕСТИТЬ КурсыНаНачалоОстатков
	|ИЗ
	|	НачальныеКурсыОстатков КАК Курсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачальныеКурсыОстатков КАК КурсыОтчета
	|		ПО (КурсыОтчета.Валюта = &ВалютаОтчета)
	|";
	#КонецОбласти 
	
	
	ИмяВремТаблицы = "ТаблицаОстатков";
	#Область ТекстЗапроса
	СтруктураЗапроса.Вставить(ИмяВремТаблицы, СтруктураЗапроса.Количество());
	Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов(ИмяВремТаблицы) + 
	"ВЫБРАТЬ
	|	Подзапрос.РазделУчета КАК РазделУчета,
	|	ВЫБОР
	|		КОГДА Подзапрос.РазделУчета = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)
	|			ТОГДА ВЫБОР
	|					КОГДА Подзапрос.ОбъектУчета.ИспользоватьДляНакоплений
	|						ТОГДА ""Накопление""
	|					КОГДА Подзапрос.ОбъектУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаКредитная)
	|						ТОГДА ""КредитныеКарты""
	|					КОГДА Подзапрос.ОбъектУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаУниверсальная)
	|							И Подзапрос.НаКонец < 0
	|						ТОГДА ""КредитныеКарты""
	|					ИНАЧЕ ""СвободныеДеньги""
	|				КОНЕЦ
	|		КОГДА Подзапрос.РазделУчета = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)
	|			ТОГДА ВЫБОР
	|					КОГДА Подзапрос.ОбъектУчета.ИспользоватьДляУчетаВзятыхДолгов
	|								И НЕ Подзапрос.ОбъектУчета.ИспользоватьДляУчетаВыданныхДолгов
	|							ИЛИ Подзапрос.ОбъектУчета.ИспользоватьДляУчетаВзятыхДолгов
	|								И Подзапрос.ОбъектУчета.ИспользоватьДляУчетаВыданныхДолгов
	|								И Подзапрос.НаКонецВВалюте < 0
	|						ТОГДА ""МыДолжны""
	|					КОГДА НЕ Подзапрос.ОбъектУчета.ИспользоватьДляУчетаВзятыхДолгов
	|								И Подзапрос.ОбъектУчета.ИспользоватьДляУчетаВыданныхДолгов
	|							ИЛИ Подзапрос.ОбъектУчета.ИспользоватьДляУчетаВзятыхДолгов
	|								И Подзапрос.ОбъектУчета.ИспользоватьДляУчетаВыданныхДолгов
	|								И Подзапрос.НаКонецВВалюте > 0
	|						ТОГДА ""НамДолжны""
	|					ИНАЧЕ ""НеизвестныйДолг""
	|				КОНЕЦ
	|		КОГДА Подзапрос.РазделУчета = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Имущество)
	|			ТОГДА ""Имущество""
	|		ИНАЧЕ ""ФинансовыйРезультат""
	|	КОНЕЦ КАК ВидОбъектаУчета,
	|	Подзапрос.ОбъектУчета КАК ОбъектУчета,
	|	Подзапрос.ФинансоваяЦель КАК ФинансоваяЦель,
	|	Подзапрос.Валюта КАК Валюта,
	|	Подзапрос.НаНачалоВВалюте КАК НаНачалоВВалюте,
	|	Подзапрос.НаКонецВВалюте КАК НаКонецВВалюте,
	|	Подзапрос.НаКонецВВалюте - Подзапрос.НаНачалоВВалюте КАК ИзменениеВВалюте,
	|	Подзапрос.НаНачало КАК НаНачало,
	|	Подзапрос.НаКонец КАК НаКонец,
	|	Подзапрос.НаКонец - Подзапрос.НаНачало КАК Изменение,
	|	ВЫБОР
	|		КОГДА Подзапрос.НаКонец = Подзапрос.НаНачало
	|			ТОГДА 0
	|		КОГДА Подзапрос.НаНачало = 0
	|			ТОГДА 100
	|		ИНАЧЕ ВЫРАЗИТЬ((Подзапрос.НаКонец - Подзапрос.НаНачало) / Подзапрос.НаНачало * 100 КАК ЧИСЛО(19, 2))
	|	КОНЕЦ КАК ПроцентИзменения,
	|	Подзапрос.СрокФинасновойЦели КАК СрокФинасновойЦели,
	|	Подзапрос.СуммаФинансовойЦели КАК СуммаФинансовойЦелиВВалюте,
	|	Подзапрос.КредитныйЛимитВВалюте КАК КредитныйЛимитВВалюте,
	|	Подзапрос.СуммаФинансовойЦели * ЕСТЬNULL(ТекКурсыОстатков.КурсПересчета, 1) КАК СуммаФинансовойЦели,
	|	Подзапрос.ВалютаФинансовойЦели КАК ВалютаФинансовойЦели,
	|	Подзапрос.КредитныйЛимит КАК КредитныйЛимит,
	|	Подзапрос.АктивностьОбъекта КАК Активность
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ОстаткиИОбороты.Счет ЕСТЬ NULL 
	|				ТОГДА ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)
	|			КОГДА ОстаткиИОбороты.Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.разделыУчета.ПустаяСсылка)
	|				ТОГДА ОстаткиИОбороты.Счет
	|			ИНАЧЕ ОстаткиИОбороты.Счет.Родитель
	|		КОНЕЦ КАК РазделУчета,
	|		ЕСТЬNULL(ОстаткиИОбороты.Субконто1, КошелькиИСчета.Ссылка) КАК ОбъектУчета,
	|		ЕСТЬNULL(ОстаткиИОбороты.Субконто1.Активность, ЕСТЬNULL(КошелькиИСчета.Активность, ИСТИНА)) КАК АктивностьОбъекта,
	|		ЕСТЬNULL(ОстаткиИОбороты.Субконто2, ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)) КАК ФинансоваяЦель,
	|		ЕСТЬNULL(ОстаткиИОбороты.Субконто2.Валюта, &ВалютаУчета) КАК ВалютаФинансовойЦели,
	|		ЕСТЬNULL(ОстаткиИОбороты.Субконто2.Срок, ДАТАВРЕМЯ(1, 1, 1)) КАК СрокФинасновойЦели,
	|		ЕСТЬNULL(ОстаткиИОбороты.Субконто2.Сумма, 0) КАК СуммаФинансовойЦели,
	|		ЕСТЬNULL(ОстаткиИОбороты.Валюта, КошелькиИСчета.Валюта) КАК Валюта,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ОстаткиИОбороты.Субконто1.КредитныйЛимит, КошелькиИСчета.КредитныйЛимит) = 0
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(ОстаткиИОбороты.Субконто1.КредитныйЛимит, КошелькиИСчета.КредитныйЛимит) - ЕСТЬNULL(ОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт, 0)
	|		КОНЕЦ КАК КредитныйЛимитВВалюте,
	|		ЕСТЬNULL(ОстаткиИОбороты.ВалютнаяСуммаНачальныйОстаток, 0) КАК НаНачалоВВалюте,
	|		ЕСТЬNULL(ОстаткиИОбороты.ВалютнаяСуммаКонечныйОстаток, 0) КАК НаКонецВВалюте,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ОстаткиИОбороты.Субконто1.КредитныйЛимит, КошелькиИСчета.КредитныйЛимит) = 0
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(ОстаткиИОбороты.Субконто1.КредитныйЛимит, КошелькиИСчета.КредитныйЛимит) - ЕСТЬNULL(ОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт, 0)
	|		КОНЕЦ * ЕСТЬNULL(НачКурсыОстатков.КурсПересчета, 1) КАК КредитныйЛимит,
	|		ЕСТЬNULL(ОстаткиИОбороты.ВалютнаяСуммаНачальныйОстаток, 0) * ЕСТЬNULL(НачКурсыОстатков.КурсПересчета, 1) КАК НаНачало,
	|		ЕСТЬNULL(ОстаткиИОбороты.ВалютнаяСуммаКонечныйОстаток, 0) * ЕСТЬNULL(ТекКурсыОстатков.КурсПересчета, 1) КАК НаКонец
	|	ИЗ
	|		РегистрБухгалтерии.ЖурналОпераций.ОстаткиИОбороты(&НачалоПериодаОстатков, КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), Период, ДвиженияИГраницыПериода, , , ) КАК ОстаткиИОбороты
	|			ПОЛНОЕ СОЕДИНЕНИЕ Справочник.КошелькиИСчета КАК КошелькиИСчета
	|			ПО ОстаткиИОбороты.Субконто1 = КошелькиИСчета.Ссылка
	|				И (НЕ КошелькиИСчета.ЭтоГруппа)
	|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыНаНачалоОстатков КАК НачКурсыОстатков
	|			ПО (ЕСТЬNULL(ОстаткиИОбороты.Валюта, КошелькиИСчета.Валюта) = НачКурсыОстатков.Валюта)
	|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыНаКонец КАК ТекКурсыОстатков
	|			ПО (ЕСТЬNULL(ОстаткиИОбороты.Валюта, КошелькиИСчета.Валюта) = ТекКурсыОстатков.Валюта)
	|				И (ТекКурсыОстатков.ВалютаПересчета = &ВалютаОтчета)
	|	ГДЕ
	|		НЕ ЕСТЬNULL(КошелькиИСчета.ЭтоГруппа, ЛОЖЬ)) КАК Подзапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыНаКонец КАК ТекКурсыОстатков
	|		ПО Подзапрос.ВалютаФинансовойЦели = ТекКурсыОстатков.Валюта
	|			И (ТекКурсыОстатков.ВалютаПересчета = &ВалютаОтчета)";
	#КонецОбласти 
	
	// Добавляем условия по каждому индикатору
	Для каждого НастройкаОстатка Из НастройкиИндикаторов.ИндикаторыОстатков Цикл
		
		ИмяВыборки = НастройкаОстатка.Ключ;
		СтруктураЗапроса.Вставить("Выборка_" + ИмяВыборки, СтруктураЗапроса.Количество());
		#Область ТекстЗапроса
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	//ПоляГруппировки
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаОстатков.Валюта) КАК КоличествоВалют,
		|	МАКСИМУМ(ТаблицаОстатков.Валюта) КАК Валюта,
		|	СУММА(ТаблицаОстатков.НаНачалоВВалюте) КАК НаНачалоВВалюте,
		|	СУММА(ТаблицаОстатков.НаКонецВВалюте) КАК НаКонецВВалюте,
		|	СУММА(ТаблицаОстатков.НаНачало) КАК НаНачало,
		|	СУММА(ТаблицаОстатков.НаКонец) КАК НаКонец,
		|	СУММА(ТаблицаОстатков.НаКонец) - СУММА(ТаблицаОстатков.НаНачало) КАК Изменение,
		|	МИНИМУМ(ТаблицаОстатков.СрокФинасновойЦели) КАК СрокФинасновойЦели,
		|	СУММА(ТаблицаОстатков.СуммаФинансовойЦелиВВалюте) КАК СуммаФинансовойЦелиВВалюте,
		|	СУММА(ТаблицаОстатков.КредитныйЛимитВВалюте) КАК КредитныйЛимитВВалюте,
		|	СУММА(ТаблицаОстатков.СуммаФинансовойЦели) КАК СуммаФинансовойЦели,
		|	СУММА(ТаблицаОстатков.КредитныйЛимит) КАК КредитныйЛимит,
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатков.Активность ТОГДА ТаблицаОстатков.НаНачалоВВалюте ИНАЧЕ 0 КОНЕЦ) КАК АктивныйНаНачалоВВалюте,
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатков.Активность ТОГДА ТаблицаОстатков.НаКонецВВалюте ИНАЧЕ 0 КОНЕЦ) КАК АктивныйНаКонецВВалюте,
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатков.Активность ТОГДА ТаблицаОстатков.НаНачало ИНАЧЕ 0 КОНЕЦ) КАК АктивныйНаНачало,
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатков.Активность ТОГДА ТаблицаОстатков.НаКонец ИНАЧЕ 0 КОНЕЦ) КАК АктивныйНаКонец,
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатков.Активность ТОГДА ТаблицаОстатков.НаКонец - ТаблицаОстатков.НаНачало ИНАЧЕ 0 КОНЕЦ) КАК АктивныйИзменение,
		|	МИНИМУМ(ВЫБОР КОГДА ТаблицаОстатков.Активность ТОГДА ТаблицаОстатков.СрокФинасновойЦели ИНАЧЕ 0 КОНЕЦ) КАК АктивныйСрокФинасновойЦели,
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатков.Активность ТОГДА ТаблицаОстатков.СуммаФинансовойЦелиВВалюте ИНАЧЕ 0 КОНЕЦ) КАК АктивныйСуммаФинансовойЦелиВВалюте,
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатков.Активность ТОГДА ТаблицаОстатков.КредитныйЛимитВВалюте ИНАЧЕ 0 КОНЕЦ) КАК КАктивныйредитныйЛимитВВалюте,
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатков.Активность ТОГДА ТаблицаОстатков.СуммаФинансовойЦели ИНАЧЕ 0 КОНЕЦ) КАК АктивныйСуммаФинансовойЦели,
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатков.Активность ТОГДА ТаблицаОстатков.КредитныйЛимит ИНАЧЕ 0 КОНЕЦ) КАК АктивныйКредитныйЛимит
		|ИЗ
		|	ТаблицаОстатков КАК ТаблицаОстатков
		|";
		
		ТекстУсловий          = "";
		ДобавитьПараметрВЗапрос(Запрос,  НастройкаОстатка.Отбор, "РазделУчета", ИмяВыборки, ТекстУсловий);
		ДобавитьПараметрВЗапрос(Запрос,  НастройкаОстатка.Отбор, "ВидОбъектаУчета", ИмяВыборки, ТекстУсловий);
		ДобавитьПараметрВЗапрос(Запрос,  НастройкаОстатка.Отбор, "ОбъектУчета", ИмяВыборки, ТекстУсловий);
		ДобавитьПараметрВЗапрос(Запрос,  НастройкаОстатка.Отбор, "ФинансоваяЦель", ИмяВыборки, ТекстУсловий);
		
		Если НастройкаОстатка.Отбор.ВидОбъектаУчета = "КредитныеКарты" Тогда
			
			// добавляем информацию по кредитному лимиту универсальных банковских карт с положительным или нулевым остатком на конец
			ТекстПодзапроса = "
			|	(ВЫБРАТЬ
			|		ТаблицаОстатков.Валюта КАК КоличествоВалют,
			|		ТаблицаОстатков.Валюта КАК Валюта,
			|		ТаблицаОстатков.НаНачалоВВалюте КАК НаНачалоВВалюте,
			|		ТаблицаОстатков.НаКонецВВалюте КАК НаКонецВВалюте,
			|		ТаблицаОстатков.НаНачало КАК НаНачало,
			|		ТаблицаОстатков.НаКонец КАК НаКонец,
			|		ТаблицаОстатков.НаКонец - ТаблицаОстатков.НаНачало КАК Изменение,
			|		ТаблицаОстатков.СрокФинасновойЦели КАК СрокФинасновойЦели,
			|		ТаблицаОстатков.СуммаФинансовойЦелиВВалюте КАК СуммаФинансовойЦелиВВалюте,
			|		ТаблицаОстатков.КредитныйЛимитВВалюте КАК КредитныйЛимитВВалюте,
			|		ТаблицаОстатков.СуммаФинансовойЦели КАК СуммаФинансовойЦели,
			|		ТаблицаОстатков.КредитныйЛимит КАК КредитныйЛимит,
			|		ТаблицаОстатков.Активность КАК Активность
			|	ИЗ
			|		ТаблицаОстатков КАК ТаблицаОстатков
			|	ГДЕ
			|		ТаблицаОстатков.Активность И //ТекстУсловияОбщий
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ТаблицаОстатков.Валюта,
			|		ТаблицаОстатков.Валюта,
			|		0,
			|		0,
			|		0,
			|		0,
			|		0,
			|		ТаблицаОстатков.СрокФинасновойЦели,
			|		ТаблицаОстатков.СуммаФинансовойЦелиВВалюте,
			|		ТаблицаОстатков.КредитныйЛимитВВалюте,
			|		ТаблицаОстатков.СуммаФинансовойЦели,
			|		ТаблицаОстатков.КредитныйЛимит,
			|		ТаблицаОстатков.Активность КАК Активность
			|	ИЗ
			|		ТаблицаОстатков КАК ТаблицаОстатков
			|	ГДЕ
			|		ТаблицаОстатков.РазделУчета = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)
			|		И ТаблицаОстатков.ВидОбъектаУчета = ""СвободныеДеньги""
			|		И ТаблицаОстатков.ОбъектУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаУниверсальная)
			|		И ТаблицаОстатков.НаКонец >= 0
			|		И ТаблицаОстатков.Активность 
			|		//ТекстУсловияПоКошелькам
			|	) КАК ТаблицаОстатков
			|";
			
			ТекстУсловийПоКошелькам = "";
			ДобавитьПараметрВЗапрос(Запрос,  НастройкаОстатка.Отбор, "ОбъектУчета", ИмяВыборки, ТекстУсловийПоКошелькам);
			Если Не ПустаяСтрока(ТекстУсловийПоКошелькам) Тогда
				ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "//ТекстУсловияПоКошелькам", "И " + ТекстУсловийПоКошелькам);
			КонецЕсли;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОстатков КАК ТаблицаОстатков", ТекстПодзапроса);
			
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	//ТекстУсловияОбщий
			|";
			
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстУсловияОбщий", ТекстУсловий);
		
		Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов(ИмяВыборки) + ТекстЗапроса;
		#КонецОбласти 
		
	КонецЦикла;

КонецПроцедуры

// Запросы для индикаторов событий
// 	На основании настроек индикаторов событий формируется список типов запросов, 
//	для каждого типа запроса добавляется соотвествующие текст и параметры
//
Процедура ДополнитьТекстЗапросаСобытиями(Запрос, СтруктураЗапроса, НастройкиИндикаторов)

	ТипыЗапросов = Новый Структура;
	
	// группируем настройки индикаторов по типам запросов
	Для каждого СтрокаНастройки Из НастройкиИндикаторов.ИндикаторыДинамики Цикл
		
		ОписаниеТипаЗапроса = ПолучитьОписаниеТипаЗапроса(ТипыЗапросов, СтрокаНастройки);
		// для каждого типа определяем граничные (максимальные/минимальные) значения периодов
		ПроверитьПараметрыТипаЗапроса(ОписаниеТипаЗапроса, СтрокаНастройки, НастройкиИндикаторов);
		
	КонецЦикла;
	
	// для каждого типа запроса формируем свои тексты запросов
	Для каждого КлючИЗначение Из ТипыЗапросов Цикл
		
		Если КлючИЗначение.Ключ = "Планы" Тогда
			ДополнитьТекстЗапросаПланами(Запрос, СтруктураЗапроса, КлючИЗначение.Значение, НастройкиИндикаторов);
		ИначеЕсли КлючИЗначение.Ключ = "КурсыВалют" Тогда
			ДополнитьТекстЗапросаКурсамиВалют(Запрос, СтруктураЗапроса, КлючИЗначение.Значение, НастройкиИндикаторов);
		ИначеЕсли КлючИЗначение.Ключ = "История" Тогда
			ДополнитьТекстЗапросаИсторией(Запрос, СтруктураЗапроса, КлючИЗначение.Значение, НастройкиИндикаторов);
		ИначеЕсли КлючИЗначение.Ключ = "Накопления" Тогда
			ДополнитьТекстЗапросаНакоплениями(Запрос, СтруктураЗапроса, КлючИЗначение.Значение, НастройкиИндикаторов);
		ИначеЕсли КлючИЗначение.Ключ = "Бюджет" Тогда
			ДополнитьТекстЗапросаБюджетом(Запрос, СтруктураЗапроса, КлючИЗначение.Значение, НастройкиИндикаторов);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьТекстЗапросаИндикаторомСтруктуры(Запрос, СтруктураЗапроса, СтрокаНастроек, НастройкиИндикаторов)

	ПрефиксПоля             = СтрокаНастроек.Ключ + "_";
	ДополнительныеПараметры = СтрокаНастроек.ДополнительныеПараметры;
	Запрос.УстановитьПараметр(ПрефиксПоля + "ВидДенег", ДополнительныеПараметры.ВидДенег);
	Запрос.УстановитьПараметр(ПрефиксПоля + "ОтображатьСлужебныеСтатьи", ДополнительныеПараметры.ОтображатьСлужебныеСтатьи);
	Запрос.УстановитьПараметр(ПрефиксПоля + "НачалоИстории", СтрокаНастроек.Период.ДатаНачала);
	Запрос.УстановитьПараметр(ПрефиксПоля + "НачалоПредИстории", СтрокаНастроек.ПредыдущийПериод.ДатаНачала);
	Запрос.УстановитьПараметр(ПрефиксПоля + "КонецПредИстории", СтрокаНастроек.ПредыдущийПериод.ДатаОкончания);
	
	СписокВидовДвиженияДенег = Неопределено;
	ДополнительныеПараметры.Свойство("СписокВидовДвиженияДенег", СписокВидовДвиженияДенег);
	Запрос.УстановитьПараметр(ПрефиксПоля + "ВсеВидыДвижений", Не ЗначениеЗаполнено(СписокВидовДвиженияДенег));
	Запрос.УстановитьПараметр(ПрефиксПоля + "ВидыДвиженийДенег", СписокВидовДвиженияДенег);
	
	ТипыОпераций = Новый Массив;
	ТипыОпераций.Добавить(?(СтрокаНастроек.ВидОбъектовУчета = "Доходы", "Поступление", "Списание"));
	Если ДополнительныеПараметры.ВключатьПеремещения Тогда
		ТипыОпераций.Добавить("Перемещение");
	КонецЕсли;
	Запрос.УстановитьПараметр(ПрефиксПоля + "ТипыОпераций", ТипыОпераций);
	
	// Запрос сумм по статьям с учетом заданных условий
	ИмяВыборки = "Выборка_" + СтрокаНастроек.Ключ;
	#Область ТекстЗапроса
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	История.СубконтоДт1 КАК Статья,
	|	СУММА(ВЫБОР
	|			КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|				ТОГДА История.СписаниеДляСвободныхДенег
	|			КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|				ТОГДА История.СписаниеДляНакоплений
	|			ИНАЧЕ История.Списание
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	История КАК История
	|ГДЕ
	|	История.Период МЕЖДУ &УсловиеДаты1 И &КонечнаяДатаИстории
	|	И ВЫБОР
	|			КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|				ТОГДА История.ТипОперацииДляСвободныхДенег
	|			КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|				ТОГДА История.ТипОперацииДляНакоплений
	|			ИНАЧЕ История.ТипОперации
	|		КОНЕЦ В (&СписокТиповОпераций)
	
	|	И (&УсловиеВсеВидыДвижений
	|			ИЛИ ВЫБОР
	|				КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|					ТОГДА История.ВидДвиженияДляСвободныхДенег
	|				КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|					ТОГДА История.ВидДвиженияДляНакоплений
	|				ИНАЧЕ История.ВидДвиженияДенег
	|			КОНЕЦ В (&СписокВидовДвиженийДенег))
	
	|	И (&ОтображатьСлужебныеСтатьи
	|			ИЛИ НЕ История.СубконтоДт1 В (&СписокСлужебныхСтатей)
	|				И НЕ История.СубконтоКт1 В (&СписокСлужебныхСтатей))
	|
	|СГРУППИРОВАТЬ ПО
	|	История.СубконтоДт1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сумма УБЫВ
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ОБЩИЕ,
	|	Статья ИЕРАРХИЯ
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УсловиеДаты1", ПрефиксПоля + "НачалоИстории");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОтображатьСлужебныеСтатьи", ПрефиксПоля + "ОтображатьСлужебныеСтатьи");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УсловиеВидаДенег", ПрефиксПоля + "ВидДенег");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокТиповОпераций", ПрефиксПоля + "ТипыОпераций");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УсловиеВсеВидыДвижений", ПрефиксПоля + "ВсеВидыДвижений");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокВидовДвиженийДенег", ПрефиксПоля + "ВидыДвиженийДенег");
	
	Если СтрокаНастроек.ВидОбъектовУчета = "Доходы" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".Списание", ".Поступление");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СубконтоДт1", "СубконтоКт1");
		
	КонецЕсли;
	
	СтруктураЗапроса.Вставить(ИмяВыборки, СтруктураЗапроса.Количество());
	Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов(ИмяВыборки) + "
	|" + ТекстЗапроса;
	#КонецОбласти
	
	// Запрос итога пердыдущего периода с учетом заданных условий
	ИмяВыборки = "Выборка_ПредИтог_" + СтрокаНастроек.Ключ;
	#Область ТекстЗапроса
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|				ТОГДА История.СписаниеДляСвободныхДенег
	|			КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|				ТОГДА История.СписаниеДляНакоплений
	|			ИНАЧЕ История.Списание
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	История КАК История
	|ГДЕ
	|	История.Период МЕЖДУ &УсловиеДаты1 И &УсловиеДаты2
	|	И ВЫБОР 
	|		КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги) 
	|			ТОГДА История.ТипОперацииДляСвободныхДенег
	|		КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления) 
	|			ТОГДА История.ТипОперацииДляНакоплений
	|		ИНАЧЕ
	|			История.ТипОперации
	|	КОНЕЦ   В (&СписокТиповОпераций)
	
	|	И (&УсловиеВсеВидыДвижений
	|			ИЛИ ВЫБОР
	|				КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|					ТОГДА История.ВидДвиженияДляСвободныхДенег
	|				КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|					ТОГДА История.ВидДвиженияДляНакоплений
	|				ИНАЧЕ История.ВидДвиженияДенег
	|			КОНЕЦ В (&СписокВидовДвиженийДенег))
	
	|	И (&ОтображатьСлужебныеСтатьи ИЛИ НЕ История.СубконтоДт1 В (&СписокСлужебныхСтатей) И НЕ История.СубконтоКт1 В (&СписокСлужебныхСтатей))
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УсловиеДаты1", ПрефиксПоля + "НачалоПредИстории");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УсловиеДаты2", ПрефиксПоля + "КонецПредИстории");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОтображатьСлужебныеСтатьи", ПрефиксПоля + "ОтображатьСлужебныеСтатьи");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УсловиеВидаДенег", ПрефиксПоля + "ВидДенег");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокТиповОпераций", ПрефиксПоля + "ТипыОпераций");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УсловиеВсеВидыДвижений", ПрефиксПоля + "ВсеВидыДвижений");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокВидовДвиженийДенег", ПрефиксПоля + "ВидыДвиженийДенег");
	
	Если СтрокаНастроек.ВидОбъектовУчета = "Доходы" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".Списание", ".Поступление");
		
	КонецЕсли;
	
	СтруктураЗапроса.Вставить(ИмяВыборки, СтруктураЗапроса.Количество());
	Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов(ИмяВыборки) + "
	|" + ТекстЗапроса;
	#КонецОбласти

КонецПроцедуры

Процедура ДополнитьТекстЗапросаИндикаторомДинамики(Запрос, СтруктураЗапроса, СтрокаНастроек, НастройкиИндикаторов)

	ПрефиксПоля             = СтрокаНастроек.Ключ + "_";
	ДополнительныеПараметры = СтрокаНастроек.ДополнительныеПараметры;
	Запрос.УстановитьПараметр(ПрефиксПоля + "ВидДенег", ДополнительныеПараметры.ВидДенег);
	Запрос.УстановитьПараметр(ПрефиксПоля + "ОтображатьСлужебныеСтатьи", ДополнительныеПараметры.ОтображатьСлужебныеСтатьи);
	Запрос.УстановитьПараметр(ПрефиксПоля + "НачалоИстории", СтрокаНастроек.Период.ДатаНачала);
	
	ТипыОпераций = Новый Массив;
	Если ДополнительныеПараметры.ВключатьПеремещения Тогда
		ТипыОпераций.Добавить("Перемещение");
	КонецЕсли;
	
	СписокВидовДвиженияДенег = Неопределено;
	ДополнительныеПараметры.Свойство("СписокВидовДвиженияДенег", СписокВидовДвиженияДенег);
	Запрос.УстановитьПараметр(ПрефиксПоля + "ВсеВидыДвижений", Не ЗначениеЗаполнено(СписокВидовДвиженияДенег));
	Запрос.УстановитьПараметр(ПрефиксПоля + "ВидыДвиженийДенег", СписокВидовДвиженияДенег);
	
	Если  СтрокаНастроек.ВидОбъектовУчета = "ДоходыИРасходы" Тогда
		
		ТипыОпераций.Добавить("Поступление");
		ТипыОпераций.Добавить("Списание");
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(История.Период, ПОЛУГОДИЕ) КАК Период,
		|	СУММА(ВЫБОР
		|			КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
		|				ТОГДА История.ПоступлениеДляСвободныхДенег
		|			КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
		|				ТОГДА История.ПоступлениеДляНакоплений
		|			ИНАЧЕ История.Поступление
		|		КОНЕЦ) КАК Поступление,
		|	СУММА(ВЫБОР
		|			КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
		|				ТОГДА История.СписаниеДляСвободныхДенег
		|			КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
		|				ТОГДА История.СписаниеДляНакоплений
		|			ИНАЧЕ История.Списание
		|		КОНЕЦ) КАК Списание
		|ИЗ
		|	История КАК История
		|ГДЕ
		|	История.Период МЕЖДУ &ПериодДинамики1 И &КонечнаяДатаИстории
		|	И ВЫБОР
		|			КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
		|				ТОГДА История.ТипОперацииДляСвободныхДенег
		|			КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
		|				ТОГДА История.ТипОперацииДляНакоплений
		|			ИНАЧЕ История.ТипОперации
		|		КОНЕЦ В (&СписокТиповОпераций)
	
		|	И (&УсловиеВсеВидыДвижений
		|			ИЛИ ВЫБОР
		|				КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
		|					ТОГДА История.ВидДвиженияДляСвободныхДенег
		|				КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
		|					ТОГДА История.ВидДвиженияДляНакоплений
		|				ИНАЧЕ История.ВидДвиженияДенег
		|			КОНЕЦ В (&СписокВидовДвиженийДенег))
		
		|	И (&ОтображатьСлужебныеСтатьи
		|			ИЛИ НЕ История.СубконтоДт1 В (&СписокСлужебныхСтатей)
		|				И НЕ История.СубконтоКт1 В (&СписокСлужебныхСтатей))
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(История.Период, ПОЛУГОДИЕ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(Поступление),
		|	СУММА(Списание)
		|ПО
		|	ОБЩИЕ,
		|	Период ПЕРИОДАМИ(ПОЛУГОДИЕ, &ПериодДинамики1, &КонечнаяДатаИстории)";
		
	Иначе
		
		ТипыОпераций.Добавить(?(СтрокаНастроек.ВидОбъектовУчета = "Доходы", "Поступление", "Списание"));
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(История.Период, ПОЛУГОДИЕ) КАК Период,
		|	СУММА(ВЫБОР
		|			КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
		|				ТОГДА История.СписаниеДляСвободныхДенег
		|			КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
		|				ТОГДА История.СписаниеДляНакоплений
		|			ИНАЧЕ История.Списание
		|		КОНЕЦ) КАК Списание
		|ИЗ
		|	История КАК История
		|ГДЕ
		|	История.Период МЕЖДУ &ПериодДинамики1 И &КонечнаяДатаИстории
		|	И ВЫБОР
		|			КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
		|				ТОГДА История.ТипОперацииДляСвободныхДенег
		|			КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
		|				ТОГДА История.ТипОперацииДляНакоплений
		|			ИНАЧЕ История.ТипОперации
		|		КОНЕЦ  В (&СписокТиповОпераций)
		
		|	И (&УсловиеВсеВидыДвижений
		|			ИЛИ ВЫБОР
		|				КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
		|					ТОГДА История.ВидДвиженияДляСвободныхДенег
		|				КОГДА &УсловиеВидаДенег = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
		|					ТОГДА История.ВидДвиженияДляНакоплений
		|				ИНАЧЕ История.ВидДвиженияДенег
		|			КОНЕЦ В (&СписокВидовДвиженийДенег))
		
		|	И (&ОтображатьСлужебныеСтатьи ИЛИ НЕ История.СубконтоДт1 В (&СписокСлужебныхСтатей) И НЕ История.СубконтоКт1 В (&СписокСлужебныхСтатей))
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(История.Период, ПОЛУГОДИЕ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(Списание)
		|ПО
		|	ОБЩИЕ,
		|	Период ПЕРИОДАМИ(ПОЛУГОДИЕ, &ПериодДинамики1, &КонечнаяДатаИстории)
		|";
		
		Если СтрокаНастроек.ВидОбъектовУчета = "Доходы" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Списание", "Поступление");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СубконтоДт1", "СубконтоКт1");
		КонецЕсли;
		
	КонецЕсли;
	
	// Укажим типы операций с деньгами
	Запрос.УстановитьПараметр(ПрефиксПоля + "ТипыОпераций", ТипыОпераций);
	
	// Определим величину периода
	ПериодГруппировки = ОбщегоНазначенияДеньги.ИмяГруппировкиПоДлительности(СтрокаНастроек.Период.ДатаНачала, Запрос.Параметры.КонечнаяДатаИстории);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОЛУГОДИЕ", ПериодГруппировки);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПериодДинамики1", ПрефиксПоля + "НачалоИстории");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОтображатьСлужебныеСтатьи", ПрефиксПоля + "ОтображатьСлужебныеСтатьи");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УсловиеВидаДенег", ПрефиксПоля + "ВидДенег");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокТиповОпераций", ПрефиксПоля + "ТипыОпераций");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УсловиеВсеВидыДвижений", ПрефиксПоля + "ВсеВидыДвижений");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокВидовДвиженийДенег", ПрефиксПоля + "ВидыДвиженийДенег");
	
	ИмяВыборки = "Выборка_" + СтрокаНастроек.Ключ;
	#Область ТекстЗапроса
	СтруктураЗапроса.Вставить(ИмяВыборки, СтруктураЗапроса.Количество());
	Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов(ИмяВыборки) + "
	|" + ТекстЗапроса;
	#КонецОбласти 


КонецПроцедуры

Процедура ДополнитьТекстЗапросаПланами(Запрос, СтруктураЗапроса, ОписаниеТипаЗапроса, НастройкиИндикаторов)

	// Устанавливаем параметры для получения планов
	Для каждого КлючИЗначение Из ОписаниеТипаЗапроса.Параметры Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	// создание временной таблицы, из которой следует получать информацию для индикаторов.
	// Все суммы пересчитаны в валюту отчета
	ИмяВремТаблицы = "ВсеПланы";
	#Область ТекстЗапроса
	СтруктураЗапроса.Вставить(ИмяВремТаблицы, СтруктураЗапроса.Количество());
	Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов(ИмяВремТаблицы) + "
	|ВЫБРАТЬ
	|	Подзапрос.ШаблонОперации КАК ШаблонОперации,
	|	Подзапрос.АктуальнаяДата КАК АктуальнаяДата,
	|	Подзапрос.Просрочена КАК Просрочена,
	|	Подзапрос.НаСегодня КАК НаСегодня,
	|	Количество(Подзапрос.ПлановаяДата) КАК КоличествоПлановыхДат,
	|	СУММА(Подзапрос.СуммаПоступления * ВЫБОР
	|			КОГДА ЕСТЬNULL(КурсыПоступлений.Кратность, 0) = 0
	|					ИЛИ ЕСТЬNULL(КурсыОтчета.Курс, 0) = 0
	|				ТОГДА КурсыПоступленияНаКонец.КурсПересчета
	|			ИНАЧЕ КурсыПоступлений.Курс * КурсыОтчета.Кратность / (КурсыПоступлений.Кратность * КурсыОтчета.Курс)
	|		КОНЕЦ) КАК СуммаПоступления,
	|	СУММА(Подзапрос.СуммаСписания * ВЫБОР
	|			КОГДА ЕСТЬNULL(КурсыСписаний.Кратность, 0) = 0
	|					ИЛИ ЕСТЬNULL(КурсыОтчета.Курс, 0) = 0
	|				ТОГДА КурсыСписанийНаКонец.КурсПересчета
	|			ИНАЧЕ КурсыСписаний.Курс * КурсыОтчета.Кратность / (КурсыСписаний.Кратность * КурсыОтчета.Курс)
	|		КОНЕЦ) КАК СуммаСписания,
	|	СУММА(Подзапрос.СуммаПеремещения * ВЫБОР
	|			КОГДА ЕСТЬNULL(КурсыПоступлений.Кратность, 0) = 0
	|					ИЛИ ЕСТЬNULL(КурсыОтчета.Курс, 0) = 0
	|				ТОГДА КурсыПоступленияНаКонец.КурсПересчета
	|			ИНАЧЕ КурсыПоступлений.Курс * КурсыОтчета.Кратность / (КурсыПоступлений.Кратность * КурсыОтчета.Курс)
	|		КОНЕЦ) КАК СуммаПеремещения
	|ПОМЕСТИТЬ ВсеПланы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатыРасписаний.ВладелецРасписания КАК ШаблонОперации,
	|		ДатыРасписаний.ПлановаяДата КАК ПлановаяДата,
	|		ВЫБОР
	|			КОГДА ДатыРасписаний.АктуальнаяДата = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДатыРасписаний.ПлановаяДата
	|			ИНАЧЕ ДатыРасписаний.АктуальнаяДата
	|		КОНЕЦ КАК АктуальнаяДата,
	|		ВЫБОР
	|				КОГДА ДатыРасписаний.АктуальнаяДата = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ДатыРасписаний.ПлановаяДата
	|				ИНАЧЕ ДатыРасписаний.АктуальнаяДата
	|			КОНЕЦ < &ТекущаяДата
	|			И НЕ ДатыРасписаний.Выполнено
	|			И НЕ ДатыРасписаний.Пропустить КАК Просрочена,
	|		НАЧАЛОПЕРИОДА(ВЫБОР
	|					КОГДА ДатыРасписаний.АктуальнаяДата = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА ДатыРасписаний.ПлановаяДата
	|					ИНАЧЕ ДатыРасписаний.АктуальнаяДата
	|				КОНЕЦ, ДЕНЬ) <= КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|			И НЕ ДатыРасписаний.Выполнено
	|			И НЕ ДатыРасписаний.Пропустить КАК НаСегодня,
	|		ВЫБОР
	|			КОГДА ДатыРасписаний.ВладелецРасписания ССЫЛКА Документ.Перемещение
	|				ТОГДА 0
	|			ИНАЧЕ ДатыРасписаний.СуммаДохода
	|		КОНЕЦ КАК СуммаПоступления,
	|		ДатыРасписаний.ВалютаДохода КАК ВалютаПоступления,
	|		ВЫБОР
	|			КОГДА ДатыРасписаний.ВладелецРасписания ССЫЛКА Документ.Перемещение
	|				ТОГДА 0
	|			ИНАЧЕ ДатыРасписаний.СуммаРасхода
	|		КОНЕЦ КАК СуммаСписания,
	|		ДатыРасписаний.ВалютаРасхода КАК ВалютаСписания,
	|		ВЫБОР
	|			КОГДА ДатыРасписаний.ВладелецРасписания ССЫЛКА Документ.Перемещение
	|				ТОГДА ДатыРасписаний.СуммаДохода
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаПеремещения
	|	ИЗ
	|		РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Расписания КАК Расписания
	|			ПО (Расписания.ВладелецРасписания = ДатыРасписаний.ВладелецРасписания)
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА ДатыРасписаний.АктуальнаяДата = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ДатыРасписаний.ПлановаяДата
	|				ИНАЧЕ ДатыРасписаний.АктуальнаяДата
	|			КОНЕЦ <= &ПланыМаксимальнаяДата
	|		И НЕ ДатыРасписаний.Выполнено
	|		И НЕ ДатыРасписаний.Пропустить
	|		И ЕСТЬNULL(Расписания.НеИспользовать, ЛОЖЬ) = ЛОЖЬ) КАК Подзапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыНаКонец КАК КурсыПоступленияНаКонец
	|		ПО Подзапрос.ВалютаПоступления = КурсыПоступленияНаКонец.Валюта
	|				И (КурсыПоступленияНаКонец.ВалютаПересчета = &ВалютаОтчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыНаКонец КАК КурсыСписанийНаКонец
	|		ПО Подзапрос.ВалютаСписания = КурсыСписанийНаКонец.Валюта
	|				И (КурсыСписанийНаКонец.ВалютаПересчета = &ВалютаОтчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыОтчета
	|		ПО НАЧАЛОПЕРИОДА(Подзапрос.АктуальнаяДата, ДЕНЬ) = КурсыОтчета.Период
	|			И (КурсыОтчета.БазоваяВалюта = &ВалютаУчета)
	|			И (КурсыОтчета.Валюта = &ВалютаОтчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыПоступлений
	|		ПО Подзапрос.ВалютаПоступления = КурсыПоступлений.Валюта
	|			И НАЧАЛОПЕРИОДА(Подзапрос.АктуальнаяДата, ДЕНЬ) = КурсыПоступлений.Период
	|			И (КурсыПоступлений.БазоваяВалюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыСписаний
	|		ПО Подзапрос.ВалютаСписания = КурсыСписаний.Валюта
	|			И НАЧАЛОПЕРИОДА(Подзапрос.АктуальнаяДата, ДЕНЬ) = КурсыСписаний.Период
	|			И (КурсыПоступлений.БазоваяВалюта = &ВалютаУчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	Подзапрос.ШаблонОперации,
	|	Подзапрос.АктуальнаяДата,
	|	Подзапрос.Просрочена,
	|	Подзапрос.НаСегодня
	|";
	#КонецОбласти 
	
	// Добавляем запросы для каждого индикатора, испольщзующего планы
	Для каждого КлючИндикатора Из ОписаниеТипаЗапроса.КлючиИндикаторов Цикл
		
		СтрокаНастроек = НастройкиИндикаторов.ИндикаторыДинамики.Найти(КлючИндикатора, "Ключ");
		Если СтрокаНастроек = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНастроек.ТипИндикатора = "ВводОпераций" Тогда
			
			// Параметров запроса не требуется
			ИмяВыборки = "Выборка_" + КлючИндикатора;
			#Область ТекстЗапроса
			СтруктураЗапроса.Вставить(ИмяВыборки, СтруктураЗапроса.Количество());
			Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов(ИмяВыборки) + "
			|ВЫБРАТЬ
			|	СУММА(ВЫБОР
			|			КОГДА ЕСТЬNULL(ВсеПланы.Просрочена, ЛОЖЬ)
			|				ТОГДА ВсеПланы.КоличествоПлановыхДат
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК КоличествоПросрочено,
			|	СУММА(ВЫБОР
			|			КОГДА ЕСТЬNULL(ВсеПланы.НаСегодня, ЛОЖЬ)
			|				ТОГДА ВсеПланы.КоличествоПлановыхДат
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК КоличествоНаСегодня
			|ИЗ
			|	ВсеПланы КАК ВсеПланы
			|";
			#КонецОбласти 
			
		ИначеЕсли СтрокаНастроек.ТипИндикатора = "Планы" Тогда
			
			// Параметров запроса не требуется
			ИмяВыборки = "Выборка_" + КлючИндикатора;
			#Область ТекстЗапроса
			СтруктураЗапроса.Вставить(ИмяВыборки, СтруктураЗапроса.Количество());
			Запрос.УстановитьПараметр(КлючИндикатора + "_КонецДатыПлана", КонецДня(СтрокаНастроек.Период.ДатаОкончания));
			Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов(ИмяВыборки) + "
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ВсеПланы.Просрочена, ЛОЖЬ)
			|			ТОГДА ""Просрочено""
			|		КОГДА ЕСТЬNULL(ВсеПланы.НаСегодня, ЛОЖЬ)
			|			ТОГДА ""НаСегодня""
			|		ИНАЧЕ ""НаБудущее""
			|	КОНЕЦ КАК Период,
			|	СУММА(ЕСТЬNULL(ВсеПланы.СуммаПоступления, 0)) КАК СуммаПоступления,
			|	СУММА(ЕСТЬNULL(ВсеПланы.СуммаСписания, 0)) КАК СуммаСписания,
			|	СУММА(ЕСТЬNULL(ВсеПланы.СуммаПеремещения, 0)) КАК СуммаПеремещения
			|ИЗ
			|	ВсеПланы КАК ВсеПланы
			|ГДЕ
			|	ВсеПланы.АктуальнаяДата <= &УсловиеКонцаПланов
			|
			|СГРУППИРОВАТЬ ПО
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ВсеПланы.Просрочена, ЛОЖЬ)
			|			ТОГДА ""Просрочено""
			|		КОГДА ЕСТЬNULL(ВсеПланы.НаСегодня, ЛОЖЬ)
			|			ТОГДА ""НаСегодня""
			|		ИНАЧЕ ""НаБудущее""
			|	КОНЕЦ
			|";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "УсловиеКонцаПланов", КлючИндикатора + "_КонецДатыПлана");
			#КонецОбласти 
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьТекстЗапросаКурсамиВалют(Запрос, СтруктураЗапроса, ОписаниеТипаЗапроса, НастройкиИндикаторов)

	// Устанавливаем параметры запроса
	Запрос.УстановитьПараметр("ВалютаОкончаниеПериода", КонецДня(ТекущаяДата()) + 1); // Всегда на 1 день вперед, чтобы иметь свежий курс на графике
	Запрос.УстановитьПараметр("ВалютаНачалоПериода",    НачалоДня(ДобавитьМесяц(Запрос.Параметры.ВалютаОкончаниеПериода, -1)));
	
	ИмяВремТаблицы = "ВсеКурсыВалют";
	#Область ТекстЗапроса
	СтруктураЗапроса.Вставить(ИмяВремТаблицы, СтруктураЗапроса.Количество());
	Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов(ИмяВремТаблицы) + "
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(&ВалютаНачалоПериода, ДЕНЬ, -1) КАК Период,
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВсеКурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			&ВалютаНачалоПериода,
	|			БазоваяВалюта = &ВалютаУчета
	|				И Валюта <> &ВалютаУчета) КАК КурсыВалютСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КурсыВалют.Период,
	|	КурсыВалют.Валюта,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Период МЕЖДУ &ВалютаНачалоПериода И &ВалютаОкончаниеПериода
	|	И КурсыВалют.БазоваяВалюта = &ВалютаУчета
	|	И КурсыВалют.Валюта <> &ВалютаУчета
	|";
	#КонецОбласти 
	
	// Добавляем запросы для каждого индикатора, испольщзующего планы
	Для каждого КлючИндикатора Из ОписаниеТипаЗапроса.КлючиИндикаторов Цикл
		
		СтрокаНастроек = НастройкиИндикаторов.ИндикаторыДинамики.Найти(КлючИндикатора, "Ключ");
		Если СтрокаНастроек = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокВалют = СтрокаНастроек.ДополнительныеПараметры.СписокВалют;
		Если СписокВалют.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.УстановитьПараметр(КлючИндикатора + "_СписокВалют", СписокВалют);
		
		// Параметров запроса не требуется
		ИмяВыборки = "Выборка_" + КлючИндикатора;
		#Область ТекстЗапроса
		СтруктураЗапроса.Вставить(ИмяВыборки, СтруктураЗапроса.Количество());
		Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов(ИмяВыборки) + "
		|ВЫБРАТЬ
		|	ВсеКурсыВалют.Период КАК Период,
		|	ВсеКурсыВалют.Валюта КАК Валюта,
		|	ВсеКурсыВалют.Курс КАК Курс,
		|	ВсеКурсыВалют.Кратность КАК Кратность
		|ИЗ
		|	ВсеКурсыВалют КАК ВсеКурсыВалют
		|ГДЕ
		|	ВсеКурсыВалют.Валюта В(&УсловиеПоВалюте)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Валюта,
		|	Период
		|ИТОГИ
		|	СУММА(Курс),
		|	СУММА(Кратность)
		|ПО
		|	Валюта,
		|	Период ПЕРИОДАМИ(ДЕНЬ, &ВалютаНачалоПериода, &ВалютаОкончаниеПериода)
		|";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УсловиеПоВалюте", КлючИндикатора + "_СписокВалют");
			
		#КонецОбласти 
		
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьТекстЗапросаНакоплениями(Запрос, СтруктураЗапроса, ОписаниеТипаЗапроса, НастройкиИндикаторов)

	// Устанавливаем параметры для получения планов
	Для каждого КлючИЗначение Из ОписаниеТипаЗапроса.Параметры Цикл
		Запрос.УстановитьПараметр("Накопления_" + КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Дата2",  КонецДня(Запрос.Параметры.ТекущаяДата));
	Запрос.УстановитьПараметр("ПредельныйПриоритет", 0);
	Запрос.УстановитьПараметр("НомерОтбораПоСостоянию", 1);
	Запрос.УстановитьПараметр("ВалютаВыбраннойЦели", Запрос.Параметры.ВалютаОтчета);
	
	ФинансовыеЦелиСервер.ДополнитьЗапросНакопленийВременнымиТаблицами(Запрос, СтруктураЗапроса);
	
	// Добавляем запросы для каждого индикатора, испольщзующего планы
	Для каждого КлючИндикатора Из ОписаниеТипаЗапроса.КлючиИндикаторов Цикл
		
		СтрокаНастроек = НастройкиИндикаторов.ИндикаторыДинамики.Найти(КлючИндикатора, "Ключ");
		Если СтрокаНастроек = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//Запрос.УстановитьПараметр(КлючИндикатора + "_СрочностьЦели", СтрокаНастроек.ДополнительныеПараметры.СрочностьЦели);
		//Запрос.УстановитьПараметр(КлючИндикатора + "_ФильтрЦелейПуст", СтрокаНастроек.ДополнительныеПараметры.СписокЦелей.Количество() = 0);
		//Запрос.УстановитьПараметр(КлючИндикатора + "_СписокЦелей", СтрокаНастроек.ДополнительныеПараметры.СписокЦелей);
		
		// Параметры запроса не нужны
		ИмяВыборки = "Выборка_" + КлючИндикатора;
		#Область ТекстЗапроса
		СтруктураЗапроса.Вставить(ИмяВыборки, СтруктураЗапроса.Количество());
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СписокЦелей.ФинансоваяЦель КАК ФинансоваяЦель,
		|	СписокЦелей.Наименование КАК Наименование,
		|	СписокЦелей.Активность КАК Активность,
		|	СписокЦелей.РеквизитДопУпорядочивания КАК Приоритет,
		|	СписокЦелей.СуммаЦели КАК СуммаЦели,
		|	СписокЦелей.ПометкаУдаления КАК ПометкаУдаления,
		|	СписокЦелей.ВалютаЦели КАК ВалютаЦели,
		|	СписокЦелей.Срок КАК Срок,
		|	СписокЦелей.СрочностьЦели КАК СрочностьЦели,
		|	СписокЦелей.Предопределенный КАК Предопределенный,
		|	ЕСТЬNULL(НакопленияИРасходы.ЗарезервированоВВалютеВыбраннойЦели, 0) КАК ЗарезервированоВВалютеВыбраннойЦели,
		|	ЕСТЬNULL(НакопленияИРасходы.ЗарезервированоВВалютеОтчета, 0) КАК ЗарезервированоВВалютеОтчета,
		|	ЕСТЬNULL(НакопленияИРасходы.ПотраченоНаЦельВВалютеОтчета, 0) КАК ПотраченоНаЦельВВалютеОтчета,
		|	ЕСТЬNULL(НакопленияИРасходы.ПотраченоСвободныхДенегВВалютеОтчета, 0) КАК ПотраченоСвободныхДенегВВалютеОтчета,
		|	ЕСТЬNULL(НакопленияИРасходы.Зарезервировано, 0) КАК Зарезервировано,
		|	ЕСТЬNULL(НакопленияИРасходы.ПотраченоНаЦель, 0) КАК ПотраченоНаЦель,
		|	ЕСТЬNULL(НакопленияИРасходы.ПотраченоСвободныхДенег, 0) КАК ПотраченоСвободныхДенег,
		|	СписокЦелей.СуммаЦелиВВалютеОтчета КАК СуммаЦелиВВалютеОтчета,
		|	СписокЦелей.СуммаЦелиВВалютеВыбраннойЦели КАК СуммаЦелиВВалютеВыбраннойЦели,
		|	РАЗНОСТЬДАТ(&ТекущаяДата, СписокЦелей.Срок, ГОД) КАК ОсталосьЛет,
		|	РАЗНОСТЬДАТ(&ТекущаяДата, СписокЦелей.Срок, МЕСЯЦ) КАК ОсталосьМесяцев,
		|	РАЗНОСТЬДАТ(&ТекущаяДата, СписокЦелей.Срок, ДЕНЬ) КАК ОсталосьДней,
		|	ЕСТЬNULL(НакопленияИРасходы.ЗапланированоОткладыватьВВалютеОтчета, 0) КАК ЗапланированоОткладыватьВВалютеОтчета,
		|	ЕСТЬNULL(НакопленияИРасходы.ЗапланированоОткладывать, 0) КАК ЗапланированоОткладывать,
		|	ЕСТЬNULL(НакопленияИРасходы.ЗапланированоОткладыватьВВалютеВыбраннойЦели, 0) КАК ЗапланированоОткладыватьВВалютеВыбраннойЦели
		|ИЗ
		|	СписокЦелей КАК СписокЦелей
		|		ЛЕВОЕ СОЕДИНЕНИЕ НакопленияИРасходы КАК НакопленияИРасходы
		|		ПО (СписокЦелей.ФинансоваяЦель = НакопленияИРасходы.ФинансоваяЦель)
		|
		|
		|УПОРЯДОЧИТЬ ПО
		|	Предопределенный УБЫВ,
		|	Приоритет";
		
		Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов(ИмяВыборки) + ТекстЗапроса;
			
		#КонецОбласти 
		
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьТекстЗапросаБюджетом(Запрос, СтруктураЗапроса, ОписаниеТипаЗапроса, НастройкиИндикаторов)

	// Устанавливаем параметры для получения бюджетных показателей
	Для каждого КлючИЗначение Из ОписаниеТипаЗапроса.Параметры Цикл
		Запрос.УстановитьПараметр("Бюджет_" + КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	// Формируем часть запроса, общую для всех бюджетных индикаторов
	ОбщаяЧастьЗапроса = "";
	ПериодБюджета = БюджетированиеСервер.НоваяСтрукрураБюджетногоПериода(НастройкиИндикаторов.ВариантБюджета, НастройкиИндикаторов.НачалоПериодаБюджета);
	
	// Параметры запроса для общей части запроса
	Запрос.УстановитьПараметр("ИндикаторБюджета_ВалютаВарианта",         НастройкиИндикаторов.ВалютаОтчета);
	Запрос.УстановитьПараметр("ИндикаторБюджета_ВариантБюджета",         НастройкиИндикаторов.ВариантБюджета);
	Запрос.УстановитьПараметр("ИндикаторБюджета_ВидПериода",             Врег(ОбщегоНазначения.ИмяЗначенияПеречисления(НастройкиИндикаторов.ВидПериодаБюджета)));
	Запрос.УстановитьПараметр("ИндикаторБюджета_ДатаПоследнихКурсов",    НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ИндикаторБюджета_ДатаОстатков",           ПериодБюджета.Начало);
	Запрос.УстановитьПараметр("ИндикаторБюджета_НачТаблицыПериодов",     ПериодБюджета.Начало);
	Запрос.УстановитьПараметр("ИндикаторБюджета_КонецТаблицыПериодов",   ПериодБюджета.Окончание);
	
	ОбщийПрефикс = "ИндикаторБюджета_";
	// Таблица ключей статей - общая для всех бюджетов и вариантов
	БюджетированиеСервер.ДобавитьВЗапросКлючиСтатейБюджета(ОбщаяЧастьЗапроса, СтруктураЗапроса);
	// Таблица бюджетных периодов общая, т.к. вариант бюджета возможен только один
	БюджетированиеСервер.ДобавитьВЗапросГеренациюТаблицыПериодов(ОбщаяЧастьЗапроса, СтруктураЗапроса, ОбщийПрефикс);
	Если Не ВременнаяТаблицаСуществует(СтруктураЗапроса, "ПоследниеКурсы") Тогда
		БюджетированиеСервер.ДобавитьВЗапросПоследниеКурсыВалют(ОбщаяЧастьЗапроса, СтруктураЗапроса, ОбщийПрефикс);
	КонецЕсли;
	
	ТекстЗапросовИндикаторов = "";
	
	// Добавляем запросы для каждого индикатора, использующего бюджет
	Для каждого КлючИндикатора Из ОписаниеТипаЗапроса.КлючиИндикаторов Цикл
		
		СтрокаНастроек = НастройкиИндикаторов.ИндикаторыДинамики.Найти(КлючИндикатора, "Ключ");
		Если СтрокаНастроек = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПрефиксИмен = КлючИндикатора + "_";
		
		РазделБюджета = СтрокаНастроек.ДополнительныеПараметры.РазделБюджета;
		Запрос.УстановитьПараметр(ПрефиксИмен + "ВариантБюджета",                          НастройкиИндикаторов.ВариантБюджета);
		Запрос.УстановитьПараметр(ПрефиксИмен + "РазделБюджета",                           РазделБюджета);
		Запрос.УстановитьПараметр(ПрефиксИмен + "ВалютаВарианта",                          НастройкиИндикаторов.ВалютаОтчета);
		Запрос.УстановитьПараметр(ПрефиксИмен + "ВалютаУчета",                             ПараметрыСеанса.ВалютаУчета);
		Запрос.УстановитьПараметр(ПрефиксИмен + "БюджетноеНачалоВыборки",                  ПериодБюджета.Начало);
		Запрос.УстановитьПараметр(ПрефиксИмен + "БюджетноеОкончаниеВыборки",               ПериодБюджета.Окончание);
		Запрос.УстановитьПараметр(ПрефиксИмен + "КалендарноеНачалоВыборки",                ПериодБюджета.КалендарноеНачало);
		Запрос.УстановитьПараметр(ПрефиксИмен + "КалендарноеОкончаниеВыборки",             ПериодБюджета.КалендарноеОкончание);
		Запрос.УстановитьПараметр(ПрефиксИмен + "БюджетноеНачалоРедактируемогоПериода",    ПериодБюджета.Начало);
		Запрос.УстановитьПараметр(ПрефиксИмен + "КалендарноеНачалоРедактируемогоПериода",  ПериодБюджета.КалендарноеНачало);
		Запрос.УстановитьПараметр(ПрефиксИмен + "ДатаОстатков",                            ПериодБюджета.Начало);
		Запрос.УстановитьПараметр(ПрефиксИмен + "ДатаОтбораСоставаСтатей",  
					БюджетированиеСервер.МаксимальноеКалендарноеНачалоВарианта(НастройкиИндикаторов.ВариантБюджета, РазделБюджета, ПериодБюджета.КалендарноеОкончание));
		
		// Текст запроса
		ТекстПакета = "";
		БюджетированиеСервер.ДобавитьВЗапросАктуальныеСтатьиБюджета(ТекстПакета, СтруктураЗапроса, ПрефиксИмен);
		БюджетированиеСервер.ДобавитьВЗапросОборотыОпераций(ТекстПакета,         СтруктураЗапроса, ПрефиксИмен);
		БюджетированиеСервер.ДобавитьВЗапросПоказателиПланФакт(ТекстПакета,      СтруктураЗапроса, ПрефиксИмен);
		
		// Восстанавливаем общий префикс у общих временных таблиц
		ТекстПакета = СтрЗаменить(ТекстПакета, ПрефиксИмен + "ПоследниеКурсы", ОбщийПрефикс + "ПоследниеКурсы");
		ТекстПакета = СтрЗаменить(ТекстПакета, ПрефиксИмен + "ТаблицаПериодов", ОбщийПрефикс + "ТаблицаПериодов");
		
		// Параметров запроса не требуется
		ИмяВыборки = "Выборка_" + КлючИндикатора;
		#Область ТекстЗапроса
		СтруктураЗапроса.Вставить(ИмяВыборки, СтруктураЗапроса.Количество());
		ТекстПакета = ТекстПакета + ДеньгиКлиентСервер.ТекстРазделителяЗапросов(ИмяВыборки) + "
		|ВЫБРАТЬ
		|	ГотовыеОборотыПланФакт.ТипПоказателя КАК ТипПоказателя,
		|	СУММА(ГотовыеОборотыПланФакт.СуммаПлан) КАК СуммаПлан,
		|	СУММА(ГотовыеОборотыПланФакт.СуммаФакт) КАК СуммаФакт,
		|	СУММА(ГотовыеОборотыПланФакт.Разница) КАК Разница,
		|	СУММА(ВЫБОР
		|		КОГДА ГотовыеОборотыПланФакт.Разница > 0
		|			ТОГДА ГотовыеОборотыПланФакт.Разница
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК ОсталосьПоСтатье,
		|	СУММА(ВЫБОР
		|		КОГДА ГотовыеОборотыПланФакт.Разница < 0
		|			ТОГДА ГотовыеОборотыПланФакт.Разница
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК Превышение
		|ИЗ
		|	" + ПрефиксИмен + "ГотовыеОборотыПланФакт КАК ГотовыеОборотыПланФакт
		|ГДЕ
		|	ГотовыеОборотыПланФакт.НомерПериода = 1
		|		И ГотовыеОборотыПланФакт.РодительскаяСтатья.ПометкаУдаления ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ГотовыеОборотыПланФакт.ТипПоказателя
		|";
		ТекстЗапросовИндикаторов = ТекстЗапросовИндикаторов + ?(ТекстЗапросовИндикаторов = "", "", ДеньгиКлиентСервер.ТекстРазделителяЗапросов("Обороты по разделу бюджета"))
													+ ТекстПакета;
		#КонецОбласти 
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов("Обороты по разделу бюджета") + ОбщаяЧастьЗапроса;
	Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов("Обороты по разделу бюджета") + ТекстЗапросовИндикаторов;

КонецПроцедуры


Процедура ДополнитьТекстЗапросаИсторией(Запрос, СтруктураЗапроса, ОписаниеТипаЗапроса, НастройкиИндикаторов)

	// Устанавливаем параметры для получения истории
	// ИсторияДатаНачала
	Для каждого КлючИЗначение Из ОписаниеТипаЗапроса.Параметры Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	// Дополнительные параметры запроса
	СлужебныеСтатьи = Новый Массив;
	СлужебныеСтатьи.Добавить(Справочники.СтатьиДоходов.ИзменениеОстатка);
	СлужебныеСтатьи.Добавить(Справочники.СтатьиДоходов.ОбменВалюты);
	СлужебныеСтатьи.Добавить(Справочники.СтатьиРасходов.ИзменениеОстатка);
	СлужебныеСтатьи.Добавить(Справочники.СтатьиРасходов.ОбменВалюты);
	Запрос.УстановитьПараметр("СписокСлужебныхСтатей", СлужебныеСтатьи);
	Запрос.УстановитьПараметр("КонечнаяДатаИстории",   КонецДня(ТекущаяДата()));
	
	ИмяВремТаблицы = "ВидыИТипыДвижений";
	#Область ТекстЗапроса
	Запрос.УстановитьПараметр("Вид_Перемещение", "Перемещение");
	Запрос.УстановитьПараметр("Вид_Поступление", "Поступление");
	Запрос.УстановитьПараметр("Вид_Списание",    "Списание");
	СтруктураЗапроса.Вставить(ИмяВремТаблицы, СтруктураЗапроса.Количество());
	Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов(ИмяВремТаблицы) + "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги) КАК СчетДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги) КАК СчетКт,
	|	"""" КАК ВидДолга,
	|	&Вид_Перемещение КАК ТипОперации,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходов.ПереводИзДругихКошельков) КАК ВидДвиженияДенег
	|ПОМЕСТИТЬ ВидыИТипыДвижений
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги),
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Капитал),
	|	"""",
	|	&Вид_Поступление,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходов.ДоходыПоСтатьям)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги),
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Имущество),
	|	"""",
	|	&Вид_Поступление,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходов.ПродажаИмущества)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги),
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги),
	|	""ВзаимныеРасчеты"",
	|	&Вид_Поступление,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходов.ВзаимныеРасчеты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги),
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги),
	|	""МыДолжны"",
	|	&Вид_Поступление,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходов.ВзятиеДенегВДолг)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги),
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги),
	|	""НамДолжны"",
	|	&Вид_Поступление,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходов.ВозвратВыданныхДолгов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Капитал),
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги),
	|	"""",
	|	&Вид_Списание,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходов.РасходыПоСтатьям)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Имущество),
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги),
	|	"""",
	|	&Вид_Списание,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходов.ПокупкаИмущества)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги),
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги),
	|	""ВзаимныеРасчеты"",
	|	&Вид_Списание,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходов.ВзаимныеРасчеты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги),
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги),
	|	""МыДолжны"",
	|	&Вид_Списание,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходов.ВозвратВзятыхДолгов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги),
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги),
	|	""НамДолжны"",
	|	&Вид_Списание,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходов.ВыдачаВДолг)
	|";
	#КонецОбласти 
	
	ИмяВремТаблицы = "ВсеДвиженияВВалюте";
	#Область ТекстЗапроса
	СтруктураЗапроса.Вставить(ИмяВремТаблицы, СтруктураЗапроса.Количество());
	Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов(ИмяВремТаблицы) + "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Движения.Период, ДЕНЬ) КАК Период,
	|	ВЫБОР
	|		КОГДА Движения.СчетДт.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)
	|			ТОГДА Движения.СчетДт
	|		КОГДА Движения.СчетДт.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)
	|		ИНАЧЕ Движения.СчетДт
	|	КОНЕЦ КАК СчетДт,
	|	Движения.СубконтоДт1 КАК СубконтоДт1,
	|	ВЫБОР
	|		КОГДА Движения.РазделВалютнойОперации.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)
	|			ТОГДА Движения.РазделВалютнойОперации
	|		КОГДА Движения.РазделВалютнойОперации.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)
	|				ИЛИ Движения.СчетКт.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)
	|		ИНАЧЕ Движения.СчетКт
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА Движения.РазделВалютнойОперации.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)
	|				ИЛИ Движения.РазделВалютнойОперации.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)
	|			ТОГДА Движения.ОбъектВалютнойОперации
	|		ИНАЧЕ Движения.СубконтоКт1
	|	КОНЕЦ КАК СубконтоКт1,
	|	СУММА(ВЫБОР
	|			КОГДА Движения.СчетДт.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)
	|				ТОГДА Движения.ВалютнаяСумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПоступлениеВВалюте,
	|	ВЫБОР
	|		КОГДА Движения.СчетДт.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)
	|			ТОГДА Движения.Валюта
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	КОНЕЦ КАК ВалютаПоступления,
	|	СУММА(ВЫБОР
	|			КОГДА Движения.РазделВалютнойОперации.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)
	|				ТОГДА Движения.СуммаВалютнойОперации
	|			КОГДА Движения.СчетКт.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)
	|				ТОГДА Движения.ВалютнаяСумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СписаниеВВалюте,
	|	ВЫБОР
	|		КОГДА Движения.РазделВалютнойОперации.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)
	|			ТОГДА Движения.ВалютаВалютнойОперации
	|		КОГДА Движения.СчетКт.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)
	|			ТОГДА Движения.Валюта
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	КОНЕЦ КАК ВалютаСписания,
	|	ВЫБОР
	|		КОГДА Движения.СубконтоДт1 ССЫЛКА Справочник.Долги
	|			ТОГДА Движения.СубконтоДт1
	|		КОГДА Движения.ОбъектВалютнойОперации ССЫЛКА Справочник.Долги
	|			ТОГДА Движения.ОбъектВалютнойОперации
	|		КОГДА Движения.СубконтоКт1 ССЫЛКА Справочник.Долги
	|			ТОГДА Движения.СубконтоКт1
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Долг
	|ПОМЕСТИТЬ ВсеДвиженияВВалюте
	|ИЗ
	|	РегистрБухгалтерии.ЖурналОпераций.ДвиженияССубконто(
	|			&ИсторияДатаНачала,
	|			КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ),
	|			(Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги))
	|				ИЛИ РазделВалютнойОперации В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)))
	|				И Активность
	|				И НЕ(СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Капитал)
	|						И ЕСТЬNULL(РазделВалютнойОперации.Родитель, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)),
	|			,
	|			) КАК Движения
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Движения.Период, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА Движения.СчетДт.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)
	|			ТОГДА Движения.СчетДт
	|		КОГДА Движения.СчетДт.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)
	|		ИНАЧЕ Движения.СчетДт
	|	КОНЕЦ,
	|	Движения.СубконтоДт1,
	|	ВЫБОР
	|		КОГДА Движения.РазделВалютнойОперации.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)
	|			ТОГДА Движения.РазделВалютнойОперации
	|		КОГДА Движения.РазделВалютнойОперации.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)
	|				ИЛИ Движения.СчетКт.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)
	|		ИНАЧЕ Движения.СчетКт
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Движения.РазделВалютнойОперации.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)
	|				ИЛИ Движения.РазделВалютнойОперации.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)
	|			ТОГДА Движения.ОбъектВалютнойОперации
	|		ИНАЧЕ Движения.СубконтоКт1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Движения.СчетДт.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)
	|			ТОГДА Движения.Валюта
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Движения.РазделВалютнойОперации.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)
	|			ТОГДА Движения.ВалютаВалютнойОперации
	|		КОГДА Движения.СчетКт.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)
	|			ТОГДА Движения.Валюта
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Движения.СубконтоДт1 ССЫЛКА Справочник.Долги
	|			ТОГДА Движения.СубконтоДт1
	|		КОГДА Движения.ОбъектВалютнойОперации ССЫЛКА Справочник.Долги
	|			ТОГДА Движения.ОбъектВалютнойОперации
	|		КОГДА Движения.СубконтоКт1 ССЫЛКА Справочник.Долги
	|			ТОГДА Движения.СубконтоКт1
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	СчетДт,
	|	СчетКт,
	|	ВалютаПоступления,
	|	ВалютаСписания
	|";
	#КонецОбласти 

	ИмяВремТаблицы = "ВсеДвижения";
	#Область ТекстЗапроса
	СтруктураЗапроса.Вставить(ИмяВремТаблицы, СтруктураЗапроса.Количество());
	Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов(ИмяВремТаблицы) + "
	|ВЫБРАТЬ
	|	ВсеДвижения.Период КАК Период,
	|	ВидыИТипыДвижений.ТипОперации КАК ТипОперации,
	|	ВидыИТипыДвижений.ВидДвиженияДенег КАК ВидДвиженияДенег,
	|	ВЫБОР
	|		КОГДА ВидыИТипыДвижений.ТипОперации = &Вид_Перемещение
	|				И ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|				И ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|			ТОГДА &Вид_Поступление
	|		КОГДА ВидыИТипыДвижений.ТипОперации = &Вид_Перемещение
	|				И ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|				И ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|			ТОГДА &Вид_Списание
	|		КОГДА ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|				ИЛИ ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|			ТОГДА ВидыИТипыДвижений.ТипОперации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТипОперацииДляСвободныхДенег,
	|	ВЫБОР
	|		КОГДА ВидыИТипыДвижений.ТипОперации = &Вид_Перемещение
	|				И ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|				И ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоходов.ПереводИзНакоплений)
	|		КОГДА ВидыИТипыДвижений.ТипОперации = &Вид_Перемещение
	|				И ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|				И ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходов.ПереводВНакопления)
	|		КОГДА ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|				ИЛИ ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|			ТОГДА ВидыИТипыДвижений.ВидДвиженияДенег
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидДвиженияДляСвободныхДенег,
	|	ВЫБОР
	|		КОГДА ВидыИТипыДвижений.ТипОперации = &Вид_Перемещение
	|				И ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|				И ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|			ТОГДА &Вид_Списание
	|		КОГДА ВидыИТипыДвижений.ТипОперации = &Вид_Перемещение
	|				И ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|				И ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|			ТОГДА &Вид_Поступление
	|		КОГДА ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|				ИЛИ ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|			ТОГДА ВидыИТипыДвижений.ТипОперации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТипОперацииДляНакоплений,
	|	ВЫБОР
	|		КОГДА ВидыИТипыДвижений.ТипОперации = &Вид_Перемещение
	|				И ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|				И ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходов.ПереводИзНакоплений)
	|		КОГДА ВидыИТипыДвижений.ТипОперации = &Вид_Перемещение
	|				И ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|				И ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоходов.ПереводВНакопления)
	|		КОГДА ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|				ИЛИ ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|			ТОГДА ВидыИТипыДвижений.ВидДвиженияДенег
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидДвиженияДляНакоплений,
	|	ВсеДвижения.СчетДт КАК СчетДт,
	|	ВсеДвижения.СубконтоДт1 КАК СубконтоДт1,
	|	ВсеДвижения.СчетКт КАК СчетКт,
	|	ВсеДвижения.СубконтоКт1 КАК СубконтоКт1,
	|	СУММА(ВсеДвижения.ПоступлениеВВалюте * ВЫБОР
	|			КОГДА ЕСТЬNULL(КурсыДоходов.Кратность, 0) = 0
	|					ИЛИ ЕСТЬNULL(КурсыОтчета.Курс, 0) = 0
	|				ТОГДА КонКурсыДохода.КурсПересчета
	|			ИНАЧЕ КурсыДоходов.Курс * КурсыОтчета.Кратность / (КурсыДоходов.Кратность * КурсыОтчета.Курс)
	|		КОНЕЦ) КАК Поступление,
	|	СУММА(ВсеДвижения.СписаниеВВалюте * ВЫБОР
	|			КОГДА ЕСТЬNULL(КурсыРасходов.Кратность, 0) = 0
	|					ИЛИ ЕСТЬNULL(КурсыОтчета.Курс, 0) = 0
	|				ТОГДА КонКурсыРасхода.КурсПересчета
	|			ИНАЧЕ КурсыРасходов.Курс * КурсыОтчета.Кратность / (КурсыРасходов.Кратность * КурсыОтчета.Курс)
	|		КОНЕЦ) КАК Списание
	|ПОМЕСТИТЬ ВсеДвижения
	|ИЗ
	|	ВсеДвиженияВВалюте КАК ВсеДвижения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыИТипыДвижений КАК ВидыИТипыДвижений
	|		ПО (ВсеДвижения.СчетДт = ВидыИТипыДвижений.СчетДт
	|				ИЛИ ВсеДвижения.СчетДт.Родитель = ВидыИТипыДвижений.СчетДт)
	|			И (ВсеДвижения.СчетКт = ВидыИТипыДвижений.СчетКт
	|				ИЛИ ВсеДвижения.СчетКт.Родитель = ВидыИТипыДвижений.СчетКт)
	|			И (ВидыИТипыДвижений.ВидДолга = ВЫБОР
	|				КОГДА ВсеДвижения.Долг = НЕОПРЕДЕЛЕНО
	|					ТОГДА """"
	|				КОГДА ВсеДвижения.Долг.ИспользоватьДляУчетаВзятыхДолгов
	|						И ВсеДвижения.Долг.ИспользоватьДляУчетаВыданныхДолгов
	|					ТОГДА ""ВзаимныеРасчеты""
	|				КОГДА ВсеДвижения.Долг.ИспользоватьДляУчетаВзятыхДолгов
	|						И НЕ ВсеДвижения.Долг.ИспользоватьДляУчетаВыданныхДолгов
	|					ТОГДА ""МыДолжны""
	|				ИНАЧЕ ""НамДолжны""
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыОтчета
	|		ПО ВсеДвижения.Период = КурсыОтчета.Период
	|			И (КурсыОтчета.Валюта = &ВалютаОтчета)
	|			И (КурсыОтчета.БазоваяВалюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыДоходов
	|		ПО ВсеДвижения.Период = КурсыДоходов.Период
	|			И ВсеДвижения.ВалютаПоступления = КурсыДоходов.Валюта
	|			И (КурсыДоходов.БазоваяВалюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыРасходов
	|		ПО ВсеДвижения.Период = КурсыРасходов.Период
	|			И ВсеДвижения.ВалютаСписания = КурсыРасходов.Валюта
	|			И (КурсыРасходов.БазоваяВалюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыНаКонец КАК КонКурсыДохода
	|		ПО ВсеДвижения.ВалютаПоступления = КонКурсыДохода.Валюта
	|				И (КонКурсыДохода.ВалютаПересчета = &ВалютаОтчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыНаКонец КАК КонКурсыРасхода
	|		ПО ВсеДвижения.ВалютаСписания = КонКурсыРасхода.Валюта
	|				И (КонКурсыРасхода.ВалютаПересчета = &ВалютаОтчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеДвижения.Период,
	|	ВидыИТипыДвижений.ТипОперации,
	|	ВидыИТипыДвижений.ВидДвиженияДенег,
	|	ВЫБОР
	|		КОГДА ВидыИТипыДвижений.ТипОперации = &Вид_Перемещение
	|				И ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|				И ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|			ТОГДА &Вид_Поступление
	|		КОГДА ВидыИТипыДвижений.ТипОперации = &Вид_Перемещение
	|				И ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|				И ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|			ТОГДА &Вид_Списание
	|		КОГДА ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|				ИЛИ ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|			ТОГДА ВидыИТипыДвижений.ТипОперации
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВидыИТипыДвижений.ТипОперации = &Вид_Перемещение
	|				И ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|				И ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|			ТОГДА &Вид_Списание
	|		КОГДА ВидыИТипыДвижений.ТипОперации = &Вид_Перемещение
	|				И ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|				И ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|			ТОГДА &Вид_Поступление
	|		КОГДА ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|				ИЛИ ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|			ТОГДА ВидыИТипыДвижений.ТипОперации
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВидыИТипыДвижений.ТипОперации = &Вид_Перемещение
	|				И ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|				И ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоходов.ПереводИзНакоплений)
	|		КОГДА ВидыИТипыДвижений.ТипОперации = &Вид_Перемещение
	|				И ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|				И ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходов.ПереводВНакопления)
	|		КОГДА ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|				ИЛИ ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|			ТОГДА ВидыИТипыДвижений.ВидДвиженияДенег
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВидыИТипыДвижений.ТипОперации = &Вид_Перемещение
	|				И ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|				И ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходов.ПереводИзНакоплений)
	|		КОГДА ВидыИТипыДвижений.ТипОперации = &Вид_Перемещение
	|				И ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|				И ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДоходов.ПереводВНакопления)
	|		КОГДА ВсеДвижения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|				ИЛИ ВсеДвижения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|			ТОГДА ВидыИТипыДвижений.ВидДвиженияДенег
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВсеДвижения.СчетДт,
	|	ВсеДвижения.СубконтоДт1,
	|	ВсеДвижения.СчетКт,
	|	ВсеДвижения.СубконтоКт1
	|";
	#КонецОбласти 

	ИмяВремТаблицы = "История";
	#Область ТекстЗапроса
	СтруктураЗапроса.Вставить(ИмяВремТаблицы, СтруктураЗапроса.Количество());
	Запрос.Текст = Запрос.Текст + ДеньгиКлиентСервер.ТекстРазделителяЗапросов(ИмяВремТаблицы) + "
	|ВЫБРАТЬ
	|	ВсеДвижения.Период КАК Период,
	|	ВсеДвижения.ТипОперации КАК ТипОперации,
	|	ВсеДвижения.ВидДвиженияДенег КАК ВидДвиженияДенег,
	|	ВсеДвижения.Поступление КАК Поступление,
	|	ВсеДвижения.Списание КАК Списание,
	|	ВсеДвижения.ТипОперацииДляСвободныхДенег КАК ТипОперацииДляСвободныхДенег,
	|	ВсеДвижения.ВидДвиженияДляСвободныхДенег КАК ВидДвиженияДляСвободныхДенег,
	|	ВЫБОР
	|		КОГДА ВсеДвижения.ТипОперацииДляСвободныхДенег = &Вид_Списание
	|				ИЛИ ВсеДвижения.ТипОперацииДляСвободныхДенег = """"
	|			ТОГДА 0
	|		ИНАЧЕ ВсеДвижения.Поступление
	|	КОНЕЦ КАК ПоступлениеДляСвободныхДенег,
	|	ВЫБОР
	|		КОГДА ВсеДвижения.ТипОперацииДляСвободныхДенег = &Вид_Поступление
	|				ИЛИ ВсеДвижения.ТипОперацииДляСвободныхДенег = """"
	|			ТОГДА 0
	|		ИНАЧЕ ВсеДвижения.Списание
	|	КОНЕЦ КАК СписаниеДляСвободныхДенег,
	|	ВсеДвижения.ТипОперацииДляНакоплений КАК ТипОперацииДляНакоплений,
	|	ВсеДвижения.ВидДвиженияДляНакоплений КАК ВидДвиженияДляНакоплений,
	|	ВЫБОР
	|		КОГДА ВсеДвижения.ТипОперацииДляНакоплений = &Вид_Списание
	|				ИЛИ ВсеДвижения.ТипОперацииДляНакоплений = """"
	|			ТОГДА 0
	|		ИНАЧЕ ВсеДвижения.Поступление
	|	КОНЕЦ КАК ПоступлениеДляНакоплений,
	|	ВЫБОР
	|		КОГДА ВсеДвижения.ТипОперацииДляНакоплений = &Вид_Поступление
	|				ИЛИ ВсеДвижения.ТипОперацииДляНакоплений = """"
	|			ТОГДА 0
	|		ИНАЧЕ ВсеДвижения.Списание
	|	КОНЕЦ КАК СписаниеДляНакоплений,
	|	ВсеДвижения.СчетДт КАК СчетДт,
	|	ВсеДвижения.СубконтоДт1 КАК СубконтоДт1,
	|	ВсеДвижения.СчетКт КАК СчетКт,
	|	ВсеДвижения.СубконтоКт1 КАК СубконтоКт1
	|ПОМЕСТИТЬ История
	|ИЗ
	|	ВсеДвижения КАК ВсеДвижения
	|";
	#КонецОбласти 

	
	// Добавляем запросы для каждого индикатора, испольщзующего историю
	Для каждого КлючИндикатора Из ОписаниеТипаЗапроса.КлючиИндикаторов Цикл
		
		СтрокаНастроек = НастройкиИндикаторов.ИндикаторыДинамики.Найти(КлючИндикатора, "Ключ");
		Если СтрокаНастроек = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНастроек.ТипИндикатора = "Структура" Тогда
			ДополнитьТекстЗапросаИндикаторомСтруктуры(Запрос, СтруктураЗапроса, СтрокаНастроек, НастройкиИндикаторов);
		ИначеЕсли СтрокаНастроек.ТипИндикатора = "Динамика" Тогда
			ДополнитьТекстЗапросаИндикаторомДинамики(Запрос, СтруктураЗапроса, СтрокаНастроек, НастройкиИндикаторов);
		КонецЕсли;
		
	КонецЦикла;


КонецПроцедуры

Процедура ДобавитьПараметрВЗапрос(Запрос, Отбор, ИмяПараметра, ИмяВыборки, ТекстУсловий)

	ЗначениеПараметра = Неопределено;
	Если Отбор.Свойство(ИмяПараметра, ЗначениеПараметра) И ЗначениеПараметра <> Неопределено Тогда
		
		ИмяПараметраЗапроса = ИмяВыборки + "_" + ИмяПараметра;
		Запрос.УстановитьПараметр(ИмяПараметраЗапроса, ЗначениеПараметра);
		
		ТекстУсловий = ТекстУсловий + Символы.ПС + ?(ТекстУсловий = "", "", Символы.ПС + "И") + "	";
		
		Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Или ТипЗнч(ЗначениеПараметра) = Тип("СписокЗначений") Тогда
			ТекстУсловий = ТекстУсловий + ИмяПараметра + " В ИЕРАРХИИ(&" + ИмяПараметраЗапроса + ")";
		Иначе
			ТекстУсловий = ТекстУсловий + ИмяПараметра + " = &" + ИмяПараметраЗапроса ;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьОписаниеТипаЗапроса(ТипыЗапросов, СтрокаНастройки)

	Если СтрокаНастройки.ТипИндикатора = "ВводОпераций" Или СтрокаНастройки.ТипИндикатора = "Планы" Тогда
		ИмяТипа = "Планы";
	ИначеЕсли СтрокаНастройки.ТипИндикатора = "Структура" Или СтрокаНастройки.ТипИндикатора = "Динамика" Тогда
		ИмяТипа = "История";
	Иначе
		ИмяТипа = СтрокаНастройки.ТипИндикатора;
	КонецЕсли;
	
	ОписаниеТипаЗапроса = Неопределено;
	Если Не ТипыЗапросов.Свойство(ИмяТипа, ОписаниеТипаЗапроса)  Или ОписаниеТипаЗапроса = Неопределено Тогда
		ТипыЗапросов.Вставить(ИмяТипа, НовоеОписаниеТипаЗапроса());
		ОписаниеТипаЗапроса = ТипыЗапросов[ИмяТипа];
	КонецЕсли;
	
	Возврат ОписаниеТипаЗапроса;

КонецФункции

Функция НовоеОписаниеТипаЗапроса()

	СтруктураТипа = Новый Структура;
	СтруктураТипа.Вставить("КлючиИндикаторов", Новый Массив);
	СтруктураТипа.Вставить("Параметры",        Новый Структура);
	
	Возврат СтруктураТипа;

КонецФункции

Процедура ПроверитьПараметрыТипаЗапроса(ОписаниеТипаЗапроса, СтрокаНастройки, НастройкиИндикаторов)

	ОписаниеТипаЗапроса.КлючиИндикаторов.Добавить(СтрокаНастройки.Ключ);
	
	Если СтрокаНастройки.ТипИндикатора = "ВводОпераций" Тогда
		
		ПроверитьЗначениеПараметраЗапроса(ОписаниеТипаЗапроса.Параметры, "ПланыМаксимальнаяДата", КонецДня(ТекущаяДата()), Ложь);
		
	ИначеЕсли СтрокаНастройки.ТипИндикатора = "Планы" Тогда
		
		ПроверитьЗначениеПараметраЗапроса(ОписаниеТипаЗапроса.Параметры, "ПланыМаксимальнаяДата", КонецДня(СтрокаНастройки.Период.ДатаОкончания), Ложь);
		
	Иначе
		
		Если СтрокаНастройки.ТипИндикатора = "Структура" Тогда
			// Устанавливаем предыдущий период, чтобы получить изменения
			ПроверитьЗначениеПараметраЗапроса(ОписаниеТипаЗапроса.Параметры, "ИсторияДатаНачала", НачалоДня(СтрокаНастройки.ПредыдущийПериод.ДатаНачала), Истина);
		Иначе
			ПроверитьЗначениеПараметраЗапроса(ОписаниеТипаЗапроса.Параметры, "ИсторияДатаНачала", НачалоДня(СтрокаНастройки.Период.ДатаНачала), Истина);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗначениеПараметраЗапроса(СтруктураПараметров, ИмяПараметра, НовоеЗначение, ВыбиратьМеньшее = Истина)

	ТекущееЗначение = Неопределено;
	СтруктураПараметров.Свойство(ИмяПараметра, ТекущееЗначение);
	
	Если Не ЗначениеЗаполнено(ТекущееЗначение) Тогда
		СтруктураПараметров.Вставить(ИмяПараметра, НовоеЗначение);
		Возврат;
	КонецЕсли;
	
	Если ВыбиратьМеньшее И НовоеЗначение < ТекущееЗначение
		Или  (Не ВыбиратьМеньшее И НовоеЗначение > ТекущееЗначение) Тогда
		СтруктураПараметров.Вставить(ИмяПараметра, НовоеЗначение);
	КонецЕсли;

КонецПроцедуры

Функция ВременнаяТаблицаСуществует(СтруктураЗапроса, ИмяТаблицы) 

	Возврат СтруктураЗапроса.Свойство(ИмяТаблицы) И СтруктураЗапроса[ИмяТаблицы] <> Неопределено;

КонецФункции


#КонецОбласти 


Процедура ЗаполнитьСписокВалютПоУмолчанию(СписокВалют)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВалютаУчета", ПараметрыСеанса.ВалютаУчета);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 5
	|	Валюты.Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, БазоваяВалюта = &ВалютаУчета) КАК КурсыВалютСрезПоследних
	|		ПО Валюты.Ссылка = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	Валюты.Активность
	|	И Валюты.Ссылка <> &ВалютаУчета
	|	И КурсыВалютСрезПоследних.Курс > 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюты.ЗагружаетсяИзИнтернета УБЫВ,
	|	Валюты.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВалют.Добавить(Выборка.Ссылка);
	КонецЦикла;

КонецПроцедуры


//////////////////////////////////////////////////////////////////
// настройки индикаторов остатков

// Возвращает таблицу значений для заполнения списком индикаторов остатков
//
//Параметры:
//	ЗаполнятьПоУмолчанию - Булево - если установить, таблица будет заполнена индикаторами по умолчанию
//
//Возвращаемое значение:
//	ТаблицаЗначений
//
Функция НовыйСписокИндикаторовОстатков(ЗаполнятьПоУмолчанию = Ложь) 

	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	СписокИндикаторов = Новый ТаблицаЗначений;
	СписокИндикаторов.Колонки.Добавить("Ключ", ТипСтрока);         // идентификатор конкретного индикатора. Используется в генерации имен реквизитов и элементов форм
	СписокИндикаторов.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число")); // сортировка индикаторов на форме
	СписокИндикаторов.Колонки.Добавить("Заголовок", ТипСтрока);    // заголовок индикатора, задаваемый пользователем
	СписокИндикаторов.Колонки.Добавить("РазделУчета");  // ПланСчетовСсылка.РазделыУчета
	СписокИндикаторов.Колонки.Добавить("Отбор", Новый ОписаниеТипов("Структура")); // отбор, задаваемый пользователем
	СписокИндикаторов.Колонки.Добавить("СкрыватьЕслиПусто", Новый ОписаниеТипов("Булево")); // если Истина, индикатор не будет отображаться при нулевых значениях
	СписокИндикаторов.Колонки.Добавить("ИмяБлокаИндикатора", ТипСтрока); // имя элемента управления (группы) с индикатором

	Если ЗаполнятьПоУмолчанию Тогда
		ЗаполнитьСписокИндикаторовОстатковПоУмолчанию(СписокИндикаторов)
	КонецЕсли;
	
	Возврат СписокИндикаторов;
	
КонецФункции

// Заполняет настройки индикаторов остатков набором по умолчанию
//
//Параметры:
//	<СписокИндикаторов> - результат функции  НовыйСписокИндикаторовОстатков()
//
Процедура ЗаполнитьСписокИндикаторовОстатковПоУмолчанию(СписокИндикаторов) 
	
	СтрокаИндикатора = НоваяНастройкаИндикаторовОстатков(СписокИндикаторов, "Деньги", "СвободныеДеньги");
	СтрокаИндикатора = НоваяНастройкаИндикаторовОстатков(СписокИндикаторов, "Деньги", "Накопление", , Истина);
	СтрокаИндикатора = НоваяНастройкаИндикаторовОстатков(СписокИндикаторов, "Деньги", "КредитныеКарты", , Истина);
	СтрокаИндикатора = НоваяНастройкаИндикаторовОстатков(СписокИндикаторов, "Долги",  "МыДолжны", , Истина);
	СтрокаИндикатора = НоваяНастройкаИндикаторовОстатков(СписокИндикаторов, "Долги",  "НамДолжны", , Истина);
	
	СтрокаИндикатора = НоваяНастройкаИндикаторовОстатков(СписокИндикаторов, "Имущество", "Имущество", , Истина);
	СтрокаИндикатора = НоваяНастройкаИндикаторовОстатков(СписокИндикаторов, "Капитал" ,  "ФинансовыйРезультат", , Истина);
	
КонецПроцедуры

// Возвращает локализованное представление раздела учета
Функция ПредставлениеПоказателяОстатка(СтрокаНастройки)

	Отбор = СтрокаНастройки.Отбор;
	
	ВидОбъектаУчета = Неопределено;
	Отбор.Свойство("ВидОбъектаУчета", ВидОбъектаУчета);
	
	ОбъектУчета = Неопределено;
	Отбор.Свойство("ОбъектУчета", ОбъектУчета);
	
	ФинансоваяЦель = Неопределено;
	Отбор.Свойство("ФинансоваяЦель", ФинансоваяЦель);
	
	Если ЗначениеЗаполнено(ВидОбъектаУчета) Тогда
		Возврат ПредставлениеВидаОбъектаУчета(ВидОбъектаУчета);
	ИначеЕсли ЗначениеЗаполнено(ОбъектУчета) Тогда 
		Возврат Строка(ОбъектУчета);
	ИначеЕсли ЗначениеЗаполнено(ФинансоваяЦель) Тогда 
		Возврат Строка(ФинансоваяЦель);
	Иначе
		Возврат Строка(СтрокаНастройки.РазделУчета);
	КонецЕсли;

КонецФункции

Функция ПредставлениеВидаОбъектаУчета(ВидОбъекта)

	СписокВидов = СписокВидовОбъектовУчета();
	ЭлементСписка = СписокВидов.НайтиПоЗначению(ВидОбъекта);
	Если ЭлементСписка = Неопределено Тогда
		Возврат "???";
	Иначе
		Возврат ЭлементСписка.Представление;
	КонецЕсли;

КонецФункции

Функция СписокВидовОбъектовУчета()

	Результат = Новый СписокЗначений;
	Результат.Добавить("СвободныеДеньги", НСтр("ru='Свободные деньги'"));
	Результат.Добавить("Накопление", НСтр("ru='Накопления'"));
	Результат.Добавить("КредитныеКарты", НСтр("ru='Кредитные карты'"));
	Результат.Добавить("МыДолжны", НСтр("ru='Мы должны'"));
	Результат.Добавить("НамДолжны", НСтр("ru='Нам должны'"));
	Результат.Добавить("Имущество", НСтр("ru='Имущество'"));
	Результат.Добавить("ФинансовыйРезультат", НСтр("ru='Финансовый результат'"));
	
	Возврат Результат;

КонецФункции


//////////////////////////////////////////////////////////////////
// настройки индикаторов динамики (событий)

// Возвращает таблицу значений для заполнения списком индикаторов динамики (событий)
//
//Параметры:
//	ЗаполнятьПоУмолчанию - Булево - если установить, таблица будет заполнена набором индикаторов по умолчанию
//
//Возвращаемое значение:
//	ТаблицаЗначений
//
Функция НовыйСписокИндикаторовДинамики(ЗаполнятьПоУмолчанию = Ложь) 

	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	СписокИндикаторов = Новый ТаблицаЗначений;
	СписокИндикаторов.Колонки.Добавить("Ключ", ТипСтрока);             // идентификатор конкретного индикатора. Используется в генерации имен реквизитов и элементов форм
	СписокИндикаторов.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число")); // сортировка индикаторов на форме
	СписокИндикаторов.Колонки.Добавить("Заголовок", ТипСтрока);        // заголовок индикатора, задаваемый пользователем
	СписокИндикаторов.Колонки.Добавить("ТипИндикатора", ТипСтрока);    // Структура, Динамика, КурсыВалют, Накопления, Планы, ВводОпераций, Бюджет
	СписокИндикаторов.Колонки.Добавить("ВидОбъектовУчета", ТипСтрока); // Расходы, Доходы, ДоходыИРасходы, СтатьиБюджета, ФинансовыеЦели, Валюты
	СписокИндикаторов.Колонки.Добавить("Период", Новый ОписаниеТипов("Структура")); // ВидПериода (Строка), ДатаНачала (Дата), ДатаОкончания (Дата)
	СписокИндикаторов.Колонки.Добавить("ПредыдущийПериод", Новый ОписаниеТипов("Структура")); // ВидПериода (Строка), ДатаНачала (Дата), ДатаОкончания (Дата)
	СписокИндикаторов.Колонки.Добавить("ИмяБлокаИндикатора", ТипСтрока); // имя элемента управления (группы) с индикатором
	
	СписокИндикаторов.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура")); // набор, зависящий от типа индикатора 
	СписокИндикаторов.Колонки.Добавить("Отбор", Новый ОписаниеТипов("Структура")); // отбор, задаваемый пользователем

	Если ЗаполнятьПоУмолчанию Тогда
		ЗаполнитьСписокИндикаторовДинамикиПоУмолчанию(СписокИндикаторов);
	КонецЕсли;
	
	Возврат СписокИндикаторов;
	
КонецФункции

// Заполняет настройки индикаторов динамики набором по умолчанию
Процедура ЗаполнитьСписокИндикаторовДинамикиПоУмолчанию(СписокИндикаторов)

	СтрокаНастройки = НоваяНастройкаИндикатораДинамики(СписокИндикаторов, "ВводОпераций", "");
	СтрокаНастройки = НоваяНастройкаИндикатораДинамики(СписокИндикаторов, "Структура", "Расходы");
	
	СтрокаНастройки = НоваяНастройкаИндикатораДинамики(СписокИндикаторов, "Динамика", "Расходы");
	
	СтрокаНастройки = НоваяНастройкаИндикатораДинамики(СписокИндикаторов, "Динамика", "ДоходыИРасходы");
	СтрокаНастройки = НоваяНастройкаИндикатораДинамики(СписокИндикаторов, "Планы", );
	
	СтрокаНастройки = НоваяНастройкаИндикатораДинамики(СписокИндикаторов, "КурсыВалют", );
	
КонецПроцедуры



#КонецОбласти 


#КонецЕсли
