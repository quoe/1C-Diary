
&НаКлиенте
Процедура ИмяФайлаКлиентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтаФорма);
	
	НачатьПомещениеФайла(Оповещение, , , Истина, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайла(РезультаВыбора, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	Если РезультаВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИмяФайлаКлиент = ВыбранноеИмяФайла;
	Объект.ТЧДанные.Очистить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущаяДатаСеансаНаСервере()
	Возврат ТекущаяДатаСеанса();
КонецФункции 
	
&НаКлиенте
Процедура КомандаПрочитатьФайл(Команда)
	ВремяНачала = ТекущаяДатаСеансаНаСервере();
	
	мТЗПоискКэш.Очистить();
	Объект.ТЧДанные.Очистить();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоWindows = узОбщийМодульСервер.ЭтоWindows();
	
	НомерЛиста = 1;
	Если ЭтоWindows Тогда
		Excel = Новый COMОбъект("Excel.Application");
	Иначе
		ТекстСообщения = НСтр("ru = 'Ошибка! нет алгоритма для работы с Excel не в среде Windows '");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Excel.Workbooks.Open(Объект.ИмяФайлаКлиент);
	
	Попытка
		Excel.WorkSheets(НомерЛиста).select();
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В книге Excel отсутствует лист " + НомерЛиста + ".";
		Сообщение.Сообщить();
		
		Excel.ActiveWorkbook.Save();
		Excel.ActiveWorkbook.Close();
		Excel.Quit();
		Excel = "";
		Возврат;
	КонецПопытки;
	Версия = Лев(Excel.Version, СтрНайти(Excel.Version, ".") - 1);
	
	Если Версия = "8" Тогда
		ФайлСтрок = Excel.Cells.CurrentRegion.Rows.Count;
		ФайлКолонок = Макс(Excel.Cells.CurrentRegion.Columns.Count, 13);
	Иначе
		ФайлСтрок = Excel.Cells(1, 1).SpecialCells(11).Row;
		ФайлКолонок = Excel.Cells(1, 1).SpecialCells(11).Column;
	КонецЕсли;
	
	МассивКолонокТЧДанные = ПолучитьМассивКолонокТЧДанные();
	
	МассивСтрокВФайле = ПрочитатьФайлИЗагрузитьВМассивСтрокВФайле(
		Excel, ФайлСтрок, МассивКолонокТЧДанные);
	
	Excel.ActiveWorkbook.Save();
	Excel.ActiveWorkbook.Close();
	Excel.Quit();
	
	ЗаполнитьТЧОбработкиПоДаннымФайлаНаСервере(МассивСтрокВФайле);
	
	ВремяКонца = ТекущаяДатаСеансаНаСервере();
	
	КоличествоСекундВМинуте = 60;
	ВремяВМинутах = ОКР(((ВремяКонца - ВремяНачала) / КоличествоСекундВМинуте), 2);
	
	МассивСообщений = Новый Массив();
	МассивСообщений.Добавить("------------------------------------------------------------------");
	МассивСообщений.Добавить("ВремяНачала -" + ВремяНачала);
	МассивСообщений.Добавить("ВремяКонца  -" + ВремяКонца);
	МассивСообщений.Добавить("Общее время выполнения - " + ВремяВМинутах + " мин.");
	МассивСообщений.Добавить("------------------------------------------------------------------");
	
	Для Каждого ЭлМассива Из МассивСообщений Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "" + ЭлМассива;
		Сообщение.Сообщить();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьФайлИЗагрузитьВМассивСтрокВФайле(Excel, ФайлСтрок, МассивКолонокТЧДанные)
	
	НомерСтрокиВФайле = 2;
	
	МассивСтрокВФайле = Новый Массив();
	Для Ряд = НомерСтрокиВФайле По ФайлСтрок Цикл
		СтрокаВФайле = Новый Структура();
		
		Для Каждого КолонкаИмя Из МассивКолонокТЧДанные Цикл
			Если НЕ ТребуетсяЗагружатьЗначениеИзЯчейки(КолонкаИмя) Тогда
				Продолжить;
			КонецЕсли;
			
			НомерКолонкиВФайле = ПолучитьНомерКолонкиВФайле(КолонкаИмя);
			Если НЕ ЗначениеЗаполнено(НомерКолонкиВФайле) Тогда
				Продолжить;
			КонецЕсли;
			
			Если КолонкаИмя = "НомерЗадачиРодителя"
				ИЛИ КолонкаИмя = "НомерЗадачи" Тогда
				
				ЗначениеВФайле = Excel.Cells(Ряд, НомерКолонкиВФайле).Value;
				
			ИначеЕсли КолонкаИмя = "ДатаНачалаРаботПоЗадаче" Тогда
				ЗначениеВФайле = Excel.Cells(Ряд, НомерКолонкиВФайле).Value;
				ЗначениеВФайле = ПолучитьДатуИзЗначения(ЗначениеВФайле);
			Иначе
				ЗначениеВФайле = СокрЛП(Excel.Cells(Ряд, НомерКолонкиВФайле).Text);
			КонецЕсли;
			СтрокаВФайле.Вставить(КолонкаИмя, ЗначениеВФайле);
		КонецЦикла;
		
		МассивСтрокВФайле.Добавить(СтрокаВФайле);
		
	КонецЦикла;	
	
	Возврат МассивСтрокВФайле;
	
КонецФункции 

&НаКлиенте
Функция ТребуетсяЗагружатьЗначениеИзЯчейки(КолонкаИмя) 
	ТребуетсяЗагружать = Ложь;
	
	Если КолонкаИмя = "НомерСтроки"
		ИЛИ КолонкаИмя = "ИсходныйНомерСтроки"
		ИЛИ КолонкаИмя = "Пометка"
		ИЛИ КолонкаИмя = "ЗадачаРодитель"
		ИЛИ КолонкаИмя = "Задача" Тогда
		ТребуетсяЗагружать = Ложь;
	Иначе
		ТребуетсяЗагружать = Истина;
	КонецЕсли;
	
	Возврат ТребуетсяЗагружать;
КонецФункции 

&НаСервере
Процедура ЗаполнитьТЧОбработкиПоДаннымФайлаНаСервере(МассивСтрокВФайле) 
	
	Для Каждого СтрокаВФайле Из МассивСтрокВФайле Цикл
		
		СтрокаТЧДанные = Объект.ТЧДанные.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧДанные, СтрокаВФайле);
		
		СтрокаТЧДанные.Статус = ПолучитьСтатус(СтрокаВФайле);
		СтрокаТЧДанные.Исполнитель = ПолучитьИсполнитель(СтрокаВФайле);
		
		СтрокаТЧДанные.Задача = ПолучитьЗадачу(СтрокаВФайле.НомерЗадачи);
		СтрокаТЧДанные.ЗадачаРодитель = ПолучитьЗадачу(СтрокаВФайле.НомерЗадачиРодителя);
		
		СтрокаТЧДанные.Пометка = Ложь;
		Если ЗначениеЗаполнено(СтрокаТЧДанные.Задача) 
			И ЗначениеЗаполнено(СтрокаВФайле.НомерЗадачи) Тогда
			СтрокаТЧДанные.Пометка = Ложь;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЧДанные.ЗадачаРодитель) 
			И ЗначениеЗаполнено(СтрокаВФайле.НомерЗадачиРодителя) Тогда
			СтрокаТЧДанные.Пометка = Ложь;
		Иначе
		    СтрокаТЧДанные.Пометка = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуИзЗначения(Знач ЗначениеВФайле)
	Если НЕ ЗначениеЗаполнено(ЗначениеВФайле) Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	ЗначениеВФайле = Лев(ЗначениеВФайле, 10);
	пГод = Число(Прав(ЗначениеВФайле, 4));
	пМесяц = Число(Сред(ЗначениеВФайле, 4, 2));
	пДень = Число(Лев(ЗначениеВФайле, 2));
	
	ДатаИзЗначения = Дата(пГод, пМесяц, пДень);
	
	Возврат ДатаИзЗначения;
КонецФункции 

&НаСервере
Функция ПолучитьСтатус(СтрокаВФайле) 
	Перем Статус;
	
	Статус = ПолучитьСсылкуНаОбъект("узСтатусыЗадачи", "Наименование", СтрокаВФайле.Статус);
	
	Возврат Статус; 
КонецФункции

&НаСервере
Функция ПолучитьЗадачу(НомерЗадачи) 
	Перем Задача;
	
	Задача = ПолучитьСсылкуНаОбъект("узЗадачи", "Код", НомерЗадачи);
	
	Возврат Задача; 
КонецФункции

&НаСервере
Функция ПолучитьИсполнитель(СтрокаВФайле) 
	Перем Исполнитель;
	
	Исполнитель = ПолучитьСсылкуНаОбъект("Пользователи", "узКороткоеИмя", СтрокаВФайле.Исполнитель);
	
	Возврат Исполнитель; 
КонецФункции

&НаСервере
Функция ПолучитьМассивКолонокТЧДанные() 
	МассивКолонокТЧДанные = Новый Массив();
	
	ВТТЧДанные = Объект.ТЧДанные.Выгрузить();	
	Для Каждого Колонка Из ВТТЧДанные.Колонки Цикл
		КолонкаИмя = Колонка.Имя;
		МассивКолонокТЧДанные.Добавить(КолонкаИмя);
	КонецЦикла;		
	
	Возврат МассивКолонокТЧДанные;
КонецФункции 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьТЧКолонкиФайлаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧКолонкиФайлаНаСервере() Экспорт
	Объект.ТЧКолонкиФайла.Очистить();
	
	ДобавитьСтрокуВТЧКолонкиФайла("НомерЗадачиРодителя", 1);
	ДобавитьСтрокуВТЧКолонкиФайла("НомерЗадачи", 2);
	ДобавитьСтрокуВТЧКолонкиФайла("НаименованиеЗадачи", 3);
	ДобавитьСтрокуВТЧКолонкиФайла("Статус", 4);
	ДобавитьСтрокуВТЧКолонкиФайла("ДатаНачалаРаботПоЗадаче", 5);
	ДобавитьСтрокуВТЧКолонкиФайла("Исполнитель", 6);
	
КонецПроцедуры 

&НаСервере
Процедура ДобавитьСтрокуВТЧКолонкиФайла(КолонкаИмя, НомерКолонкиВФайле) Экспорт
	СтрокаТЧКолонкиФайла = Объект.ТЧКолонкиФайла.Добавить();
	СтрокаТЧКолонкиФайла.КолонкаИмя = КолонкаИмя;
	СтрокаТЧКолонкиФайла.НомерКолонкиВФайле = НомерКолонкиВФайле;
КонецПроцедуры

#Область ПоискИРаботаСКэшем

&НаСервере
Функция ПолучитьЗначениеИзКэша(МетаданныеИмя, ПараметрыПоиска)
	РезультатФункции = Новый Структура();
	пЗначениеИзКэша = Неопределено;
	ЭтоЗначениеИзКэша = Ложь;
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("МетаданныеИмя", МетаданныеИмя);
	ТекстПараметрыПоиска = "";
	Для Каждого СтрокаПараметрыПоиска Из ПараметрыПоиска Цикл
		ПараметрыОтбора.Вставить(СтрокаПараметрыПоиска.Ключ, СтрокаПараметрыПоиска.Значение);
		ТекстПараметрыПоиска = ТекстПараметрыПоиска 
			+ "" + СтрокаПараметрыПоиска.Ключ + " [" + СтрокаПараметрыПоиска.Значение + "]";
	КонецЦикла;
	НайденныеСтроки = мТЗПоискКэш.НайтиСтроки(ПараметрыОтбора);
	
	НайденоЗначенияВКеше = Истина;
	
	Если НайденныеСтроки.Количество() = 1 Тогда
		
		пЗначениеИзКэша = НайденныеСтроки[0].Ссылка;
		ЭтоЗначениеИзКэша = Истина;
		
	ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
		
		ТекстСообщения = "Ошибка! Найдено более 1 значения в кэше МетаданныеИмя ["
			+ МетаданныеИмя + "] По указанным параметрам поиска"
			+ " " + ТекстПараметрыПоиска;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
	Иначе
		НайденоЗначенияВКеше = Ложь;			
	КонецЕсли;
	
	РезультатФункции.Вставить("ЭтоЗначениеИзКэша", ЭтоЗначениеИзКэша);
	РезультатФункции.Вставить("ЗначениеИзКэша", пЗначениеИзКэша);
	Возврат РезультатФункции;
КонецФункции

&НаСервере
Процедура ДобавитьЗначениеВКэш(СсылкаНаОбъект, МетаданныеИмя, ПараметрыПоиска)
	СтрокамТЗПоискКэш = мТЗПоискКэш.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокамТЗПоискКэш, ПараметрыПоиска);
	СтрокамТЗПоискКэш.Ссылка = СсылкаНаОбъект;
	СтрокамТЗПоискКэш.МетаданныеИмя = МетаданныеИмя;
КонецПроцедуры 

&НаСервере
Функция ПолучитьСсылкуНаОбъект(МетаданныеИмя, КлючПоиска, ЗначениеДляПоиска, СтрокаВФайле = Неопределено)
	пСсылкаНаОбъект = Неопределено;
	
	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить(КлючПоиска, ЗначениеДляПоиска);
	РезультатФункции = ПолучитьЗначениеИзКэша(МетаданныеИмя, ПараметрыПоиска);
	Если РезультатФункции.ЭтоЗначениеИзКэша Тогда
		пСсылкаНаОбъект = РезультатФункции.ЗначениеИзКэша;
		Возврат пСсылкаНаОбъект;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЗначениеДляПоиска) Тогда
		ДобавитьЗначениеВКэш(пСсылкаНаОбъект, МетаданныеИмя, ПараметрыПоиска);
		Возврат пСсылкаНаОбъект;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДляПоиска(МетаданныеИмя);
	Запрос.УстановитьПараметр(КлючПоиска, ЗначениеДляПоиска);
	РезультатЗапроса = Запрос.Выполнить();
	
	пСсылкаНаОбъект = ПолучитьЗначениеИзЗапроса(РезультатЗапроса, МетаданныеИмя, ПараметрыПоиска, СтрокаВФайле);
	Возврат пСсылкаНаОбъект;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаДляПоиска(МетаданныеИмя)
	ТекстЗапроса = Неопределено;
	Если МетаданныеИмя = "узСтатусыЗадачи" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
			|	узСтатусыЗадачи.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.узСтатусыЗадачи КАК узСтатусыЗадачи
			|ГДЕ
			|	узСтатусыЗадачи.Наименование = &Наименование";
	ИначеЕсли МетаданныеИмя = "Пользователи" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.узКороткоеИмя = &узКороткоеИмя";
	ИначеЕсли МетаданныеИмя = "узЗадачи" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
			|	узЗадачи.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.узЗадачи КАК узЗадачи
			|ГДЕ
			|	узЗадачи.Код = &Код";
		
	Иначе
		ВызватьИсключение "Ошибка! Нет текста запроса для поиска" + МетаданныеИмя;
	КонецЕсли;
	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ПолучитьЗначениеИзЗапроса(РезультатЗапроса, МетаданныеИмя, ПараметрыПоиска, СтрокаВФайле = Неопределено)
	пЗначениеИзЗапроса = Неопределено;
	Выборка = РезультатЗапроса.Выбрать();
	ВыборкаКоличество = Выборка.Количество();
	Если ВыборкаКоличество = 0 Тогда
		ТекстОшибки = "ВНИМАНИЕ! Не найдена " + МетаданныеИмя + Символы.ПС;
		Для Каждого ЭлПараметрыПоиска Из ПараметрыПоиска Цикл
			ТекстОшибки = ТекстОшибки 
				+ " - Ключ " + ЭлПараметрыПоиска.Ключ 
				+ " Значение [" + ЭлПараметрыПоиска.Значение + "]" + Символы.ПС;
		КонецЦикла;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		ДобавитьЗначениеВКэш(Неопределено, МетаданныеИмя, ПараметрыПоиска);
		
	ИначеЕсли ВыборкаКоличество > 1 Тогда
		ТекстОшибки = "ВНИМАНИЕ! Найдено более 1 " + МетаданныеИмя + Символы.ПС;
		Для Каждого ЭлПараметрыПоиска Из ПараметрыПоиска Цикл
			ТекстОшибки = ТекстОшибки 
				+ " - Ключ " + ЭлПараметрыПоиска.Ключ 
				+ " Значение [" + ЭлПараметрыПоиска.Значение + "]" + Символы.ПС;
		КонецЦикла;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		Пока Выборка.Следующий() Цикл
			ДобавитьЗначениеВКэш(Неопределено, МетаданныеИмя, ПараметрыПоиска);
		КонецЦикла;
	Иначе
		Выборка.Следующий();
		пЗначениеИзЗапроса = Выборка.Ссылка;
		ДобавитьЗначениеВКэш(пЗначениеИзЗапроса, МетаданныеИмя, ПараметрыПоиска);
	КонецЕсли;
	Возврат пЗначениеИзЗапроса;
КонецФункции

#КонецОбласти

&НаКлиенте
Функция ПолучитьНомерКолонкиВФайле(КолонкаИмя) Экспорт
	пНомерКолонкиВФайле = Неопределено;
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("КолонкаИмя", КолонкаИмя);
	НайденныеСтроки = Объект.ТЧКолонкиФайла.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 1 Тогда
		пНомерКолонкиВФайле = НайденныеСтроки[0].НомерКолонкиВФайле;
	ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
		ТекстСообщения = "Ошибка! Нашли более 1 строки в ТЧКолонкиФайла для Колонки[" + КолонкаИмя + "]";
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
	Иначе
		ТекстСообщения = "Ошибка! не нашли для колонку [" + КолонкаИмя + "] в ТЧ ТЧКолонкиФайла";
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
		
	КонецЕсли;
	Возврат пНомерКолонкиВФайле;
КонецФункции

&НаКлиенте
Процедура КомандаУстановитьФлажки(Команда)
	УстановитьСнятьФлажки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьФлажки(Команда)
	УстановитьСнятьФлажки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьФлажки(пПометка)
	Для Каждого СтрокаТЧДанные Из Объект.ТЧДанные Цикл
		СтрокаТЧДанные.Пометка = пПометка;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура КомандаСоздатьЗадачиНаСервере()
	
	Для Каждого СтрокаТЧДанные Из Объект.ТЧДанные Цикл
		
		Если НЕ СтрокаТЧДанные.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ЗадачаРодитель = Неопределено;
		
		Если ЗначениеЗаполнено(СтрокаТЧДанные.НомерЗадачиРодителя) Тогда
			
			СтрокаТЧДанные.ЗадачаРодитель = ПолучитьЗадачу(СтрокаТЧДанные.НомерЗадачиРодителя);
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧДанные.ЗадачаРодитель) Тогда
								
				СтрокаТЧДанные.ЗадачаРодитель = СоздатьЗадачу(СтрокаТЧДанные, СтрокаТЧДанные.НомерЗадачиРодителя);				
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Добавлена задача родитель " + СтрокаТЧДанные.ЗадачаРодитель;
				Сообщение.Сообщить();
				
			КонецЕсли;
			
			ЗадачаРодитель = СтрокаТЧДанные.ЗадачаРодитель;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧДанные.Задача) Тогда
			
			СтрокаТЧДанные.Задача = ПолучитьЗадачу(СтрокаТЧДанные.НомерЗадачи);
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧДанные.Задача) Тогда
				
				СтрокаТЧДанные.Задача = СоздатьЗадачу(СтрокаТЧДанные, СтрокаТЧДанные.НомерЗадачи, ЗадачаРодитель);
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Добавлена задача " + СтрокаТЧДанные.Задача;
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьЗадачу(СтрокаТЧДанные, НомерЗадачи, ЗадачаРодитель = Неопределено) 
	Перем ЗадачаСсылка;
	
	СпрОбъект = Справочники.узЗадачи.СоздатьЭлемент();
	
	СпрОбъект.Код = НомерЗадачи;
	СпрОбъект.Наименование = СтрокаТЧДанные.НаименованиеЗадачи;
	СпрОбъект.Исполнитель = СтрокаТЧДанные.Исполнитель;
	СпрОбъект.ДатаНачалаРаботПоЗадаче = СтрокаТЧДанные.ДатаНачалаРаботПоЗадаче;
	СпрОбъект.Статус = СтрокаТЧДанные.Статус;
	СпрОбъект.Родитель = СтрокаТЧДанные.ЗадачаРодитель;
	СпрОбъект.ОформлениеТекста = ПредопределенноеЗначение(
		"Перечисление.узОформлениеТекста.ФорматированныйТекст");
	СпрОбъект.ПоказыватьВОтчетахИКанбанДоске = Истина;
	СпрОбъект.Важность = ПредопределенноеЗначение("Справочник.узВариантыВажностиЗадачи.Обычная");
	СпрОбъект.ТекстСодержания = СпрОбъект.Наименование;
	
	СпрОбъект.Родитель = ЗадачаРодитель;
	
	СпрОбъект.Записать();
	
	СтрокаТЧДанные.Задача = СпрОбъект.Ссылка;
	
	ЗадачаСсылка = СпрОбъект.Ссылка;
	
	Возврат ЗадачаСсылка;
	
КонецФункции 

&НаКлиенте
Процедура КомандаСоздатьЗадачи(Команда)
	КомандаСоздатьЗадачиНаСервере();
КонецПроцедуры

&НаСервере
Функция КомандаПолучитьШаблонExcelДляЗагрузкиЗадачНаСервере()
	
	ФормаОбъект = РеквизитФормыВЗначение("Объект");
	
	Макет = ФормаОбъект.ПолучитьМакет("ШаблонExcel");
	ОбластьМакета = Макет.ПолучитьОбласть("ОбластьДанные");
	
	ТабДокумент = Новый ТабличныйДокумент();
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	ТабДокумент.ОтображатьСетку = Ложь;
	
	Возврат ТабДокумент;
	
КонецФункции

&НаКлиенте
Процедура КомандаПолучитьШаблонExcelДляЗагрузкиЗадач(Команда)
	ТабДокумент = КомандаПолучитьШаблонExcelДляЗагрузкиЗадачНаСервере();
	
	ТабДокумент.Показать("Шаблон загрузка задач из Excel");
КонецПроцедуры
