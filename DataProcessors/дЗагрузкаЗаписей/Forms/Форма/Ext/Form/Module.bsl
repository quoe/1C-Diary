
&НаКлиенте
Процедура Обработать(Команда)
	
	Данные.Очистить();
	
	RegExp = Новый COMОбъект("VBScript.RegExp");    // создаем объект для работы с регулярными выражениями
	//Параметры:
	RegExp.MultiLine 	= Истина;  // истина — текст многострочный, ложь — одна строка
	RegExp.Global 		= Истина;   // истина — поиск по всей строке, ложь — до первого совпадения
	RegExp.IgnoreCase 	= истина; // истина — игнорировать регистр строки при поиске
	
	Текст = СтрЗаменить(Текст, Разделитель + " ", Разделитель);
	Текст = СтрЗаменить(Текст, " " + Разделитель, Символы.ПС + Разделитель);
	Текст = СтрЗаменить(Текст, Разделитель + Символы.Таб, Разделитель);
	
	Массив = РазложитьСтрокуВМассив(RegExp, Текст, ШаблонРазделителяСобытий);
	
	ДатаЗаписей 	= Неопределено; // Глобальная дата для записей без даты
	ДатаГодЗаписей 	= Неопределено; // Глобальная дата для записей без даты	
	Для каждого ЭлМасс Из Массив Цикл
		
		ДатаГод 	= НайденаПодстрока(RegExp, ЭлМасс, ШаблонГода);
		Если ДатаГод <> Неопределено Тогда
			ДатаГодЗаписей = ДатаГод;
		КонецЕсли;
		
		ДатаТекст 	= НайденаПодстрока(RegExp, ЭлМасс, ШаблонДаты);
		
		НовыеДанные = Данные.Добавить();
		
		Содержимое = ЭлМасс;
		
		Если ДатаЗаписей <> Неопределено Тогда
			НовыеДанные.Дата = ДатаЗаписей;
		КонецЕсли;
			
		Если ДатаТекст <> Неопределено Тогда
			Содержимое = ЗаменитьСимволыПоШаблону(RegExp, Содержимое, ШаблонДаты);
			
			ДатаЗначние = ПолучитьЗначениеДаты(ДатаТекст, ДатаГодЗаписей);
			Если ДатаЗначние <> Неопределено Тогда
				ДатаЗаписей 		= ДатаЗначние;
				НовыеДанные.Дата 	= ДатаЗначние;
			КонецЕсли; 
		КонецЕсли;
		
		ВремяТеги = НайденаПодстрока(RegExp, ЭлМасс, ШаблонВремяТеги);
		Если НЕ ПустаяСтрока(ВремяТеги) И ВремяТеги <> Неопределено Тогда
			Содержимое = ЗаменитьСимволыПоШаблону(RegExp, Содержимое, ШаблонВремяТеги);
			
			Время = СокрЛП(НайденаПодстрока(RegExp, ЭлМасс, ШаблонВремя));
			ВремяЧасти = СтрРазделить(Время, ":");
			Если НЕ ПустаяСтрока(Время) И Время <> Неопределено Тогда
				Попытка
					
					ДатаВремяЗначние = Дата(Год(ДатаЗаписей), Месяц(ДатаЗаписей), День(ДатаЗаписей), ВремяЧасти[0], ВремяЧасти[1], ВремяЧасти[2]);
					НовыеДанные.Дата = ДатаВремяЗначние;	
					
				Исключение
					Сообщить("Ранее не встречалась дата для записи '" + ВремяТеги + "'. Добавльте месяц вначала записи. Ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
				КонецПопытки; 
				
			КонецЕсли;
		Иначе
			НовыеДанные.Дата = ДатаЗначние;	
		КонецЕсли;
		
		Теги = НайденаПодстрока(RegExp, ВремяТеги, ШаблонТеги);
		Если НЕ ПустаяСтрока(Теги) И Теги <> Неопределено Тогда
			ТегиСлова 			= ЗаменитьСимволыПоШаблону(RegExp, Теги, "[\[\]]");
			НовыеДанные.Теги 	= ТегиСлова;
			//МассивТеги 			= СтрРазделить(ТегиСлова, ", ", Ложь);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВремяТеги) И ВремяТеги <> Неопределено И ЗначениеЗаполнено(НовыеДанные.Дата) Тогда
			НовыеДанные.Добавлять = Истина;	
		КонецЕсли; 
		
		НовыеДанные.Содержимое 	= СокрЛП(Содержимое);
		
	КонецЦикла;
	
	RegExp = Неопределено;
	
	КоличествоСтрок = Данные.Количество();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначениеДаты(ДатаТекст, ДатаГодЗаписей = Неопределено)
	
	Для Сч = 1 По 12 Цикл
		
		ДатаГод 			= ?(ДатаГодЗаписей = Неопределено, Год(ТекущаяДата()), ДатаГодЗаписей);
		ДатаДень 			= СокрЛП(Сред(ДатаТекст, 1, 2));
		Попытка // т.к. 29 ферваля может всё испортить
			ДатаСтрока 			= Дата(ДатаГод, Сч, ДатаДень);	
		Исключение
			Продолжить;
		КонецПопытки; 
		
		ДатаСтрокаФормат 	= Формат(ДатаСтрока, "ДЛФ=DD");
		ДатаСтрокаМесяц 	= СтрРазделить(ДатаСтрокаФормат, " ")[1];
		
		Если СтрНайти(ДатаТекст, ДатаСтрокаМесяц) > 0 Тогда
			
			Возврат ДатаСтрока;
			
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьЗначениеДаты()
 
&НаКлиенте
Функция ЗаменитьСимволыПоШаблону(RegExp, Строка, ШаблонЗамены, ЗаменитьНа = "")
	
	Если ПустаяСтрока(Строка) ИЛИ ПустаяСтрока(ШаблонЗамены) Тогда
		Возврат Строка; 
	КонецЕсли;
	
	RegExp.Pattern 		= ШаблонЗамены; 
	
	Возврат RegExp.Replace(Строка, ЗаменитьНа);
	
КонецФункции // ЗаменитьСимволыПоШаблону()

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если Данные.Количество() > 0 Тогда
		Ответ = Вопрос("Начать обработку?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Подтверждение начала обработки");
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Дальнейшая обработка только тех, что с флагом
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Добавлять", Истина);
	НайденныеСтроки = Данные.НайтиСтроки(ПараметрыОтбора);
	Если НЕ ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагружатьПрогнозПогодыПредыдущееЗначение = ЗагружатьПрогнозПогоды(Ложь);
	
	ии = 0;                    
	НайденныеСтрокиКоличество = НайденныеСтроки.Количество();
	Для каждого СтрокаТаблицыФлаг Из НайденныеСтроки Цикл
		
		ОбработкаСтрокТаблицы(СтрокаТаблицыФлаг); 
		
		Прогрессор("Выполнение обработки отмеченных элементов", НайденныеСтрокиКоличество, ии);
		
		ии = ии + 1;
		
	КонецЦикла;
	
	ЗагружатьПрогнозПогоды(ЗагружатьПрогнозПогодыПредыдущееЗначение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагружатьПрогнозПогоды(Значение = Истина)
	
	Результат = Константы.дЗагружатьПрогнозПогоды.Получить();
	
	Константы.дЗагружатьПрогнозПогоды.Установить(Значение);
	
	Возврат Результат; 
	
КонецФункции

&НаКлиенте
Процедура ОбработкаСтрокТаблицы(СтрокаТаблицы)
	
	// К программно сгенерированным колонкам можно нормально обращаться по имени, напр, "СтрокаТаблицы.Ссылка"
	ОбработкаСтрокТаблицыНаСервереБезКонтекста(СтрокаТаблицы.Дата, СтрокаТаблицы.Содержимое, СтрокаТаблицы.Теги, СтрокаТаблицы.Ссылка); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработкаСтрокТаблицыНаСервереБезКонтекста(Дата, Содержимое, Теги, СсылкаНаСозданный)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	дДневник.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.дДневник КАК дДневник
		|ГДЕ
		|	дДневник.Дата = &Дата
		|	И дДневник.Описание ПОДОБНО &Описание";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Описание", Содержимое);
	
	РезультатЗапроса = Запрос.Выполнить();
	
    Если НЕ РезультатЗапроса.Пустой() Тогда // Значит такая запись уже есть
		Возврат;
	КонецЕсли; 
	 
	НоваяЗапись = Документы.дДневник.СоздатьДокумент();
	НоваяЗапись.Дата = Дата;
	НоваяЗапись.Описание = Содержимое;
	
	СправочникиТеги = Справочники.дТеги;
	МассивТеги = СтрРазделить(Теги, ", ", Ложь);
	Если МассивТеги.Количество() > 0 Тогда
		
		Для каждого Тег Из МассивТеги Цикл
			
			НовыйТег = НоваяЗапись.Теги.Добавить();
			
			НайденНовыйТег = СправочникиТеги.НайтиПоНаименованию(Тег);
			
			Если ЗначениеЗаполнено(НайденНовыйТег) Тогда
				НовыйТег.ИмяТега = НайденНовыйТег;
			Иначе
				НовыйТегСоздать = СправочникиТеги.СоздатьЭлемент();
				НовыйТегСоздать.Наименование = Тег;
				НовыйТегСоздать.Записать();
				
				НовыйТег.ИмяТега = НовыйТегСоздать.Ссылка;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли; 
	
	НоваяЗапись.Комментарий = "Загрузка из Word дневника";
	НоваяЗапись.Записать(РежимЗаписиДокумента.Проведение);
	
	СсылкаНаСозданный = НоваяЗапись.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагТаблицы(Таблица, ЗначениеФлага)
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
		
		СтрокаТаблицы.Добавлять = ЗначениеФлага;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУстановитьФлаги(Команда)
	
	//Для каждого СтрокаТаблицы Из Таблица Цикл
	//	
	//	СтрокаТаблицы.Флаг = Истина;
	//	
	//КонецЦикла; 
	
	УстановитьФлагТаблицы(Данные, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСнятьФлаги(Команда)
	
	//Для каждого СтрокаТаблицы Из Таблица Цикл
	//	
	//	СтрокаТаблицы.Флаг = Ложь;
	//	
	//КонецЦикла;
	
	УстановитьФлагТаблицы(Данные, Ложь);
	
КонецПроцедуры


&НаКлиенте
Процедура Прогрессор(Сообщение, Всего, Текущ)
	Если Всего > 0 Тогда
		Процент = Цел(Текущ / Всего * 100);
		
		Если Процент > Цел((Текущ - 1) / Всего * 100) Тогда
			ТекстСообщения = Сообщение + ": " + Формат(Процент, "Ч(0)2") + "% " + СтрЗаменить(Формат("", "С" + Мин(99, Процент)), " ", "l") + СтрЗаменить(Формат("", "С" + Мин(99, 99 - Процент)), " ", "'") + "l";
			Состояние(ТекстСообщения, Процент, "Ожидайте");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция РазложитьСтрокуВМассив(RegExp, Строка, Шаблон = "[^\,]+") Экспорт
	
	//Разбор строки вида 1,СЛОВО,(1+2); Маска для разделителя ',' [^\,]*"
	RegExp.Pattern = Шаблон;
	Matches = RegExp.Execute (Строка);
	
	Массив = Новый Массив;
	
	Для Сч = 0 По Matches.Count - 1 Цикл
		Массив.Добавить(Matches.Item(Сч).Value);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции 

&НаКлиенте
Функция НайденаПодстрока(RegExp, Строка, Шаблон = "") Экспорт
	
	//Разбор строки вида 1,СЛОВО,(1+2); Маска для разделителя ',' [^\,]*"
	RegExp.Pattern = Шаблон;
	Matches = RegExp.Execute(Строка);
	
	Если Matches.Count = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Массив = Новый Массив;
	//MatchesItem = Matches.Item;
	Для Сч = 0 По Matches.Count - 1 Цикл
		
		ItemValue = Matches.Item(Сч).Value; 
		Если НЕ ПустаяСТрока(ItemValue) Тогда
			Массив.Добавить(ItemValue);
		КонецЕсли;
		
	КонецЦикла;
	
	//Для каждого Item Из MatchesItem Цикл
	//	
	//	ItemValue = Item.Value; 
	//	Если НЕ ПустаяСТрока(ItemValue) Тогда
	//		Массив.Добавить(ItemValue);
	//	КонецЕсли; 
	//	
	//КонецЦикла;
	
	МассивКоличество = Массив.Количество(); 
	Если МассивКоличество = 1 Тогда
		Возврат	Массив[0];
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции   

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Разделитель = "________________________________________";
	
	ШаблонРазделителяСобытий = "^(?!_+$).+(?:(?:\r\n?|\n)(?!_+$).*)*"; //"________________________________________";
	ШаблонДаты = "^\d{1,2}\s.+,\s.*$"; //"^\d{1,2}\s\w*,\s\w*$";
	ШаблонГода = "^\d{4}$";
	ШаблонВремяТеги = "^(\(\d+\)|(\d{2}:\d{2}:\d{2}|)($|,.+)|\[\*.+)"; //"^(\(\d+\)|\d{2}:\d{2}:\d{2}($|,.+))"; //""^\(\d+\).+$";
	ШаблонВремя 	= "\t?\d{2}:\d{2}:\d{2}"; //"\t?\d{2}:\d{2}:\d{2}";
	ШаблонТеги 		= "\[.+]$";
	
КонецПроцедуры
