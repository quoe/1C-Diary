
&НаКлиенте
Процедура ПолучитьПроизводительность(Команда)
	ЗамерПроизводительностиГрафики();
КонецПроцедуры

&НаКлиенте
Процедура ЗамерПроизводительностиГрафики() Экспорт

	//дОбщиеФункцииКлиент.ВыполнитьЗамерПроизводительности();
	ЗамерПроизводительностиКлиент();
	ОбновитьГрафики();

КонецПроцедуры

&НаКлиенте
Функция ЧтениеJSON0(пПутьКФайлу)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	//Или из строки
	ЧтениеJSON.УстановитьСтроку("");
	//Или из файла	
	ЧтениеJSON.ОткрытьФайл(пПутьКФайлу);
		
	Результат = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);	
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат; 
		
КонецФункции

&НаКлиенте
Процедура СформироватьДерево(ЧтениеJSON, Дерево)
    
    ИмяСвойства = Неопределено;
    
    Пока ЧтениеJSON.Прочитать() Цикл
        TипJSON = ЧтениеJSON.ТипТекущегоЗначения;
        
        Если TипJSON = ТипЗначенияJSON.НачалоОбъекта 
        ИЛИ TипJSON = ТипЗначенияJSON.НачалоМассива Тогда
            НовыйОбъект = ?(TипJSON = ТипЗначенияJSON.НачалоОбъекта, Новый Соответствие, Новый Массив);
            
            Если ТипЗнч(Дерево) = Тип("Массив") Тогда
                Дерево.Добавить(НовыйОбъект);
            ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") И ЗначениеЗаполнено(ИмяСвойства) Тогда
                Дерево.Вставить(ИмяСвойства, НовыйОбъект);
            КонецЕсли;
            
            СформироватьДерево(ЧтениеJSON, НовыйОбъект);
            
            Если Дерево = Неопределено Тогда
                Дерево = НовыйОбъект;
            КонецЕсли;
        ИначеЕсли TипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
            ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
        ИначеЕсли TипJSON = ТипЗначенияJSON.Число 
        ИЛИ TипJSON = ТипЗначенияJSON.Строка 
        ИЛИ TипJSON = ТипЗначенияJSON.Булево 
        ИЛИ TипJSON = ТипЗначенияJSON.Null Тогда
            Если ТипЗнч(Дерево) = Тип("Массив") Тогда
                Дерево.Добавить(ЧтениеJSON.ТекущееЗначение);
            ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") Тогда
                Дерево.Вставить(ИмяСвойства, ЧтениеJSON.ТекущееЗначение);
            КонецЕсли;
        Иначе
            Возврат;
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Функция ЧтениеJSON(пПутьКФайлу)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(пПутьКФайлу);
	
	Результат = Неопределено;
	СформироватьДерево(ЧтениеJSON, Результат);
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции 


&НаКлиенте
Процедура ЗамерПроизводительностиКлиент() Экспорт
	
	лТекДата 		= ТекущаяДата();
	
	ТекстовыйФайл 	= Новый ТекстовыйДокумент;
	
	ObjShell 		= Новый COMОбъект("WScript.Shell") ;
	
	//Производительность
	ПутьКФайлу 		= ПолучитьИмяВременногоФайла("json");
	ПутьКФайлуВКавычках = """" + ПутьКФайлу + """";
	Script 			= "/c typeperf ""\Процессор(_Total)\% загруженности процессора"" -sc 1 >> " + ПутьКФайлуВКавычках + " & typeperf ""\Память\% использования выделенной памяти"" -sc 1 >> " + ПутьКФайлуВКавычках + " & typeperf ""\Физический диск(_Total)\% активности диска"" -sc 1 >> " + ПутьКФайлуВКавычках + " & exit 1";
	ObjScriptExec 	= ObjShell.Run("cmd.exe " + Script, 0, True);
	ТекстовыйФайл.Прочитать(ПутьКФайлу, КодировкаТекста.OEM);
	лРезультатПроизводительностьСтроки 	= ТекстовыйФайл.ПолучитьТекст();
	
	//Удалим файл
	Файл 		= Новый Файл(ПутьКФайлу);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ПутьКФайлу);
	КонецЕсли;
	
	//Процессы
	ПутьКФайлу 			= ПолучитьИмяВременногоФайла("json");
	Script 				= ПолучитьСкриптPowerShell_Процессы(ПутьКФайлу);
	ObjScriptExec 		= ObjShell.Run("Powershell.exe -windowstyle hidden -Executionpolicy Bypass -nologo -noninteractive -comand " + Script, 0, True);
	//ObjScriptExec 		= ObjShell.Run("Powershell.exe -comand """ + Script + "");
	
	//ТекстовыйФайл.Прочитать(ПутьКФайлу);
	//лРезультатПроцессы 	= ТекстовыйФайл.ПолучитьТекст();
	лРезультатПроцессы 	= ЧтениеJSON(ПутьКФайлу);
	
	//Удалим файл
	Файл 		= Новый Файл(ПутьКФайлу);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ПутьКФайлу);
	КонецЕсли;
	
	//Парсим данные Производительности
	//01 56 1011
	лРезультатПроизводительность 	= СтрРазделить(лРезультатПроизводительностьСтроки, Символы.ПС, Ложь);
	
	лЦПСтрокаСДатой 	= СтрЗаменить(лРезультатПроизводительность[1], """", "");
	лЦП 				= Число(СтрРазделить(лЦПСтрокаСДатой, ",", Ложь)[1]);
	
	лПамятьСтрокаСДатой = СтрЗаменить(лРезультатПроизводительность[6], """", "");
	лПамять 			= Число(СтрРазделить(лПамятьСтрокаСДатой, ",", Ложь)[1]);
	
	лАктивностьДискаСтрокаСДатой 	= СтрЗаменить(лРезультатПроизводительность[11], """", "");
	лАктивностьДиска 	 			= Число(СтрРазделить(лАктивностьДискаСтрокаСДатой, ",", Ложь)[1]);
	
	лРезЗагруженность = Новый Структура("ЗагрузкаЦП, ЗагрузкаПамяти, АктивностьДиска", лЦП, лПамять, лАктивностьДиска);
	//Парсим данные Процессов
	
	//Общее
	лОбщее 			= лРезультатПроцессы["HostInfo"];
	
	лПроцентЦПУ 	= лОбщее["CPULoadPercent"];
	лСреднееЦПУ 	= лОбщее["CpuLoadAverage"];
	лПроцентПамяти 	= лОбщее["MemoryUsedPercent"];
	
	лРезWmiЗагруженность 		= Новый Структура("WmiCpuLoadPercentage, WmiCpuLoadPercentageAverage, WmiMemoryUsedPercentage", лПроцентЦПУ, лСреднееЦПУ, лПроцентПамяти); 
	
	лМестоНаДисках 				= лОбщее["usedDiskSpaceDrives"];
	
	лРезМестоНаДисках 	= Новый СписокЗначений;
	Для каждого лЭлем Из лМестоНаДисках Цикл
		
		лДискИмя 			= лЭлем["driveLetter"];
		лДискЕмкость 		= лЭлем["driveCapacity"];
		лДискЗанято 		= лЭлем["usedDiskSpace"];
		лДискПроцентЗанят 	= лЭлем["usedDiskSpacePct"];
		
		лРезМестоНаДисках.Добавить(Новый Структура("Диск, Емкость, Занято, ИспользованоПроцент", лДискИмя, лДискЕмкость, лДискЗанято, лДискПроцентЗанят) , лДискИмя);
		
	КонецЦикла; 
	//3-7
	
	//Разбираем процессы
	//"Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName"
	//-- Handles: количество дескрипторов, открытых текущим процессом.
	//-- NPM(K): объем невыгружаемой памяти, используемой процессом, в КБ.
	//-- PM(K): объем выгружаемой памяти, используемой процессом, в КБ.
	//-- WS(K): размер рабочего множества процесса, в КБ. Рабочее множество состоит из страниц памяти, к которым недавно обращался процесс.
	//-- VM(M): объем виртуальной памяти, используемой процессом, в МБ. Виртуальная память представляет собой хранилище файлов подкачки на диске.
	//-- CPU(s): объем процессорного времени, потраченного на выполнение процесса всеми процессорами, в секундах.
	//-- ID: идентификатор процесса (PID).
	//-- ProcessName: имя процесса.
	
	лПроцессыИнфо 	= лРезультатПроцессы["ProcessesInfo"];
	лРезПроцессы 	= Новый Массив;
	Для каждого лЭлем Из лПроцессыИнфо Цикл
		
		лПроцесс 		= Новый Структура(
		"Handles, NPM, PM, WS, CPU, Id, SI, ProcessName, НачалоПроцесса", 
		лЭлем["Handles"], 
		лЭлем["NPM"], 
		лЭлем["PM"], 
		лЭлем["WS"], 
		лЭлем["CPU"],
		лЭлем["Id"],
		лЭлем["SI"], 
		лЭлем["ProcessName"],
		Дата(лЭлем["StartTimeFormat"])); 
		
		лРезПроцессы.Добавить(лПроцесс);
		
	КонецЦикла; 
	
	//Загрузка памяти
	лЗагрузкаПамяти 	= лРезультатПроцессы["TopMemoryUsageInfo"];
	лРезЗагрузкаПамяти 	= Новый Массив;
	Для каждого лЭлем Из лЗагрузкаПамяти Цикл
		
		лПамять 		= Новый Структура(
		"ID, ProcessName, MemUsage, UserName", 
		лЭлем["ProcessID"], 
		лЭлем["ProcessName"], 
		лЭлем["Mem Usage(MB)"], 
		лЭлем["UserID"]); 
		
		лРезЗагрузкаПамяти.Добавить(лПамять);
		
	КонецЦикла;
	
	//Сетевая активность
	лСетеваяАктивность 		= лРезультатПроцессы["NetworkInterfaceInfo"];
	лРезСетеваяАктивность 	= Новый Массив;
	Для каждого лЭлем Из лСетеваяАктивность Цикл
		
		лСеть 		= Новый Структура(
		"ID, Наименование, БайтОтправлено, БайтПринято", 
		лЭлем["Id"], 
		лЭлем["Name"], 
		лЭлем["NetworkInterfaceBytesSent"], 
		лЭлем["NetworkInterfaceBytesReceived"]); 
		
		лРезСетеваяАктивность.Добавить(лСеть);
		
	КонецЦикла;
	
	лРезЗагруженностьИтог 			= Новый Структура("Загруженность, WmiЗагруженность", лРезЗагруженность, лРезWmiЗагруженность);
	
	лПроизводительностьПроцессы 	= Новый Структура(
	"Период, Загруженность, МестоНаДисках, Процессы, КомпИнфо, СетеваяАктивность, ЗагрузкаПамяти", 
	лТекДата, лРезЗагруженностьИтог, лРезМестоНаДисках, лРезПроцессы, Неопределено, лРезСетеваяАктивность, лРезЗагрузкаПамяти);
	
	////дОбщиеФункцииСервер.ЗаписатьПроизводительность(лПроизводительностьПроцессы);
	ЗаписатьПроизводительность(лПроизводительностьПроцессы);
	
КонецПроцедуры

//Функция, из вида, "CpuLoadAverage=18" взять число 18 
//-------------------------------------------------------------------------
//Параметры:
//		пСтрокаРавенства 	- Строка 	- вида, "CpuLoadAverage=18"
//		пРазделитель 	- Строка 	- Строка разделитель названия и числа 
//Возвращаемое значение:
//		Число 	- описание
//-------------------------------------------------------------------------
//автор: КучеровРМ 16.07.2019 
Функция ПолучитьЗначениеИзСтрРазделить(пСтрокаРавенства, пРазделитель = "=") Экспорт
	
	лРезультат 	= Неопределено;
	
	лМассив 	= СтрРазделить(пСтрокаРавенства, пРазделитель, Ложь);
	
	Если лМассив.Количество() > 1 Тогда 
		лРезультат 	= Число(лМассив[1]);
	Иначе //Т.е. только наименование, а число видать равно 0
		лРезультат 	= 0;
	КонецЕсли; 
	
	Возврат лРезультат;
	
КонецФункции // ПолучитьЗначениеИзСтрРазделить()
 
Функция ПолучитьСкриптPowerShell_Процессы(ПутьКФайлу, пЧислоВыводимыхПроцессов = 5)

	//Script = "
	//|$CpuLogFile = '" + ПутьКФайлу + "'
	//|$DateTime = (Get-Date -Format ""dd.MM.yyyy HH:mm:ss"")
	//|#$DateTime >> $CpuLogFile
	//|#$DateTime
	//|
	//|$CpuLoadAverage = (Get-WmiObject win32_processor | Measure-Object -property LoadPercentage -Average | Select Average ).Average
	//|
	//|$ProcessorStats = Get-WmiObject win32_processor
	//|$ComputerCpu = $ProcessorStats.LoadPercentage
	//|# Lets create a re-usable WMI method for memory stats
	//|$OperatingSystem = Get-WmiObject win32_OperatingSystem
	//|# Lets grab the free memory
	//|$FreeMemory = $OperatingSystem.FreePhysicalMemory
	//|# Lets grab the total memory
	//|$TotalMemory = $OperatingSystem.TotalVisibleMemorySize
	//|# Lets do some math for percent
	//|$MemoryUsed = ($FreeMemory/ $TotalMemory) * 100
	//|$PercentMemoryUsed = $MemoryUsed
	//
	//|# usedDiskSpaceDrives
	//|$usedDiskSpaceDrives = ''
	//|$driveLetters = Get-WmiObject Win32_Volume | select DriveLetter
	//|foreach ($driveLetter in $driveLetters)
	//|{
	//|$drive = Get-WmiObject Win32_Volume | where {$_.DriveLetter -eq $driveLetter.DriveLetter}
	//|
	//|if (-Not $drive.Capacity -eq 0)
	//|{
	//|$driveCapacity = $drive.Capacity
	//|$usedDiskSpace = $driveCapacity - $drive.FreeSpace
	//|$usedDiskSpacePct = [math]::Round(($usedDiskSpace / $drive.Capacity) * 100,1)
	//|$usedDiskSpaceValues = '^driveCapacity=' + $driveCapacity +'^usedDiskSpace=' + $usedDiskSpace + '^usedDiskSpacePct=' + $usedDiskSpacePct
	//|#$usedDiskSpacePct = ""{0:N2}"" -f $usedDiskSpacePct
	//|
	//|
	//|$usedDiskSpaceDrives = $usedDiskSpaceDrives + '^driveCaption=' + $drive.Caption + '=' + $usedDiskSpaceValues + '#'
	//|}
	//|}
	//
	//|# Lets throw them into an object for outputting
	//|$objHostInfo = New-Object System.Object
	//|$objHostInfo | Add-Member -MemberType NoteProperty -Name Name -Value $computer
	//|$objHostInfo | Add-Member -MemberType NoteProperty -Name CPULoadPercent -Value $ComputerCpu
	//|$objHostInfo | Add-Member -MemberType NoteProperty -Name CpuLoadAverage -Value $CpuLoadAverage
	//|$objHostInfo | Add-Member -MemberType NoteProperty -Name MemoryUsedPercent -Value $PercentMemoryUsed
	//|$objHostInfo | Add-Member -MemberType NoteProperty -Name usedDiskSpaceDrives -Value $usedDiskSpaceDrives
	//
	//|$objHostInfoStr = 'ComputerCpu=' + $ComputerCpu + ';CpuLoadAverage=' + $CpuLoadAverage + ';PercentMemoryUsed=' + $PercentMemoryUsed + ';usedDiskSpaceDrives={' + $usedDiskSpaceDrives + '}'
	//|$objHostInfoStr >> $CpuLogFile
	//|#$objHostInfoStr
	//|# Lets dump our info into an array
	//|#$objHostInfo >> $CpuLogFile
	//
	//|#'CPU LoadPercentage Average|' + $CpuLoad >> $CpuLogFile
	//|$Process = Get-Process | Sort-Object CPU -desc | Select-Object -first " + пЧислоВыводимыхПроцессов + "
	//|$Process >> $CpuLogFile
	//|#$Process
	//|exit 1";
	
	Script = "
	|$CpuLogFile = '" + ПутьКФайлу + "'
	|$CpuLogFile
	|'CpuLogFile' >> $CpuLogFile
	|$computer 	= 'LocalHost'
	|$namespace 	= 'root\CIMV2'
	|
	|$DateTime = (Get-Date -Format 'dd.MM.yyyy HH:mm:ss')
	|$objLogInfo = New-Object System.Object
	|$objLogInfo | Add-Member -MemberType NoteProperty -Name DateTime -Value $DateTime
	|
	|$CpuLoadAverage = (Get-WmiObject win32_processor | Measure-Object -property LoadPercentage -Average | Select Average ).Average
	|
	|$ProcessorStats = Get-WmiObject win32_processor
	|$ComputerCpu = $ProcessorStats.LoadPercentage
	|$ComputerCpu = $ComputerCpu
	|# Lets create a re-usable WMI method for memory stats
	|$OperatingSystem = Get-WmiObject win32_OperatingSystem
	|# Lets grab the free memory
	|$FreeMemory = $OperatingSystem.FreePhysicalMemory
	|# Lets grab the total memory
	|$TotalMemory = $OperatingSystem.TotalVisibleMemorySize
	|# Lets do some math for percent
	|$MemoryUsed = ($FreeMemory/ $TotalMemory) * 100
	|$PercentMemoryUsed = $MemoryUsed
	|
	|$objHostInfo = New-Object System.Object
	|$objHostInfo | Add-Member -MemberType NoteProperty -Name Name -Value $computer
	|$objHostInfo | Add-Member -MemberType NoteProperty -Name CPULoadPercent -Value $ComputerCpu
	|$objHostInfo | Add-Member -MemberType NoteProperty -Name CpuLoadAverage -Value $CpuLoadAverage
	|$objHostInfo | Add-Member -MemberType NoteProperty -Name MemoryUsedPercent -Value $PercentMemoryUsed
	|
	|$usedDiskSpaceDrives = ''
	|$driveLetters = Get-WmiObject Win32_Volume | select DriveLetter
	|
	|$usedDiskSpaceList = new-object 'System.Collections.Generic.List[System.Object]'
	|
	|foreach ($driveLetter in $driveLetters)
	|{
	|	$drive = Get-WmiObject Win32_Volume | where {$_.DriveLetter -eq $driveLetter.DriveLetter}
	|	
	|	if (-Not $drive.Capacity -eq 0)
	|	{
	|		$driveCapacity = $drive.Capacity
	|		$usedDiskSpace = $driveCapacity - $drive.FreeSpace
	|		$usedDiskSpacePct = [math]::Round(($usedDiskSpace / $drive.Capacity) * 100,1)
	|		$usedDiskSpaceDrives = $usedDiskSpaceDrives + $drive.Caption + '=' + $usedDiskSpacePct + '#'
	|		
	|		$objUsedDiskSpace = New-Object System.Object
	|		$objUsedDiskSpace | Add-Member -MemberType NoteProperty -Name driveLetter -Value $drive.Caption
	|		$objUsedDiskSpace | Add-Member -MemberType NoteProperty -Name usedDiskSpace -Value $usedDiskSpace
	|		$objUsedDiskSpace | Add-Member -MemberType NoteProperty -Name usedDiskSpacePct -Value $usedDiskSpacePct
	|		$objUsedDiskSpace | Add-Member -MemberType NoteProperty -Name driveCapacity -Value $driveCapacity
	|		$objUsedDiskSpaceSO = $objUsedDiskSpace | Select-Object driveLetter, driveCapacity, usedDiskSpace, usedDiskSpacePct
	|		$objUsedDiskSpaceElem = @{driveLetter=$drive.Caption;driveCapacity=$driveCapacity;usedDiskSpace=$usedDiskSpace;usedDiskSpacePct=$usedDiskSpacePct}
	|		$usedDiskSpaceList.Add($objUsedDiskSpaceElem)
	|	}
	|}
	|
	|# Lets throw them into an object for outputting
	|$objHostInfo | Add-Member -MemberType NoteProperty -Name usedDiskSpaceDrives -Value $usedDiskSpaceList
	|
	|$objHostInfoStr = 'ComputerCpu=' + $ComputerCpu + ';CpuLoadAverage=' + $CpuLoadAverage + ';PercentMemoryUsed=' + $PercentMemoryUsed + ';usedDiskSpaceDrives={' + $usedDiskSpaceDrives + '}'
	|
	|$Processes = Get-Process | Sort-Object CPU -desc | Select-Object Name, Id, Path, Handles, NPM, PM, WS, CPU, SI, ProcessName, StartTime, @{Name='StartTimeFormat'; Expression={$_.StartTime.ToString('yyyyMMddHHmmss')}} -first 5
	|
	|$TopMemoryUsage = get-wmiobject WIN32_PROCESS | Sort-Object -Property ws -Descending|select -first 5|Select processname, @{Name='Mem Usage(MB)';Expression={[math]::round($_.ws / 1mb)}},@{Name='ProcessID';Expression={[String]$_.ProcessID}},@{Name='UserID';Expression={$_.getowner().user}}
	|
	|$NetworkInterfaces = [System.Net.NetworkInformation.NetworkInterface]::GetAllNetworkInterfaces()
	|$NetworkInterfacesList = new-object 'System.Collections.Generic.List[System.Object]'
	|foreach ($NetworkInterface in $NetworkInterfaces)
	|{
	|	
	|	$NetworkInterfaceBytesSent = $NetworkInterface.GetIPv4Statistics().BytesSent
	|	$NetworkInterfaceBytesReceived = $NetworkInterface.GetIPv4Statistics().BytesReceived
	|	$NetworkInterfaceBytesTotal = $NetworkInterfaceBytesSent + $NetworkInterfaceBytesReceived
	|	if (-Not $NetworkInterfaceBytesTotal -eq 0)
	|	{
	|		$objNetworkInterfaceInfo = New-Object System.Object
	|		$objNetworkInterfaceInfo | Add-Member -MemberType NoteProperty -Name Id -Value $NetworkInterface.Id
	|		$objNetworkInterfaceInfo | Add-Member -MemberType NoteProperty -Name Name -Value $NetworkInterface.Name
	|		$objNetworkInterfaceInfo | Add-Member -MemberType NoteProperty -Name NetworkInterfaceBytesSent -Value $NetworkInterfaceBytesSent
	|		$objNetworkInterfaceInfo | Add-Member -MemberType NoteProperty -Name NetworkInterfaceBytesReceived -Value $NetworkInterfaceBytesReceived
	|
	|		$objNetworkInterfaceInfo = $objNetworkInterfaceInfo | Select-Object Id, Name, NetworkInterfaceBytesSent, NetworkInterfaceBytesReceived
	|		$NetworkInterfacesList.Add($objNetworkInterfaceInfo)
	|	}
	|}
	|
	|$ProduceLog = @{LogInfo=$objLogInfo;HostInfo=$objHostInfo;ProcessesInfo=$Processes;TopMemoryUsageInfo=$TopMemoryUsage;NetworkInterfaceInfo=$NetworkInterfacesList}
	|$ProduceLog | ConvertTo-Json -Depth 4 | Out-File $CpuLogFile
	|exit 1";

	Возврат Script;
	
КонецФункции // ПолучитьСкриптPowerShell_Процессы()

Процедура ЗаписатьПроизводительность(пПроизводительностьПроцессы) Экспорт

	лКомпИнфо 			= Новый Структура("ComputerName, UserDomain, UserName, Пользователь", ПараметрыСеанса.дИмяКомпьютераСистемы, ПараметрыСеанса.дИмяДоменаПользователя, ПараметрыСеанса.дИмяПользователяСистемы, ИмяПользователя());
	
	//Процессы
	лНаборЗаписей 		= РегистрыСведений.дПроцессы.СоздатьНаборЗаписей();
	ЗаполнитьЗначенияСвойств(лНаборЗаписей.Отбор, лКомпИнфо);
	
	лДата 		= пПроизводительностьПроцессы.Период;
	лПроцессы 	= пПроизводительностьПроцессы.Процессы;
	Для каждого Элем Из лПроцессы Цикл
		
		лНоваяЗапись 			= лНаборЗаписей.Добавить();
		лНоваяЗапись.Период 	= лДата;
		
		ЗаполнитьЗначенияСвойств(лНоваяЗапись, лКомпИнфо);
		
		ЗаполнитьЗначенияСвойств(лНоваяЗапись, Элем);
		
	КонецЦикла;
	
	лНаборЗаписей.Записать(Ложь);
	
	лЗагруженность 	= пПроизводительностьПроцессы.Загруженность;
	
	//Производительность
	лМенеджерЗаписи 		= РегистрыСведений.дПроизводительность.СоздатьМенеджерЗаписи();
	лМенеджерЗаписи.Период 	= лДата;
	ЗаполнитьЗначенияСвойств(лМенеджерЗаписи, лКомпИнфо);
	ЗаполнитьЗначенияСвойств(лМенеджерЗаписи, лЗагруженность.WmiЗагруженность);
	ЗаполнитьЗначенияСвойств(лМенеджерЗаписи, лЗагруженность.Загруженность);
	
	лМенеджерЗаписи.Записать(Ложь);
	
	//Место
	лНаборЗаписей 		= РегистрыСведений.дМестоНаДисках.СоздатьНаборЗаписей();
	
	лМестоНаДисках 		= пПроизводительностьПроцессы.МестоНаДисках;
	Для каждого Элем Из лМестоНаДисках Цикл
		
		лНоваяЗапись 			= лНаборЗаписей.Добавить();
		лНоваяЗапись.Период 	= лДата;
		
		ЗаполнитьЗначенияСвойств(лНоваяЗапись, лКомпИнфо);
		ЗаполнитьЗначенияСвойств(лНоваяЗапись, Элем.Значение);
		
	КонецЦикла;

	лНаборЗаписей.Записать(Ложь);
	
	//Сеть
	лНаборЗаписей 			= РегистрыСведений.дСетеваяАктивность.СоздатьНаборЗаписей();
	
	лСетеваяАктивность 		= пПроизводительностьПроцессы.СетеваяАктивность;
	Для каждого Элем Из лСетеваяАктивность Цикл
		
		лНоваяЗапись 			= лНаборЗаписей.Добавить();
		лНоваяЗапись.Период 	= лДата;
		
		ЗаполнитьЗначенияСвойств(лНоваяЗапись, лКомпИнфо);
		ЗаполнитьЗначенияСвойств(лНоваяЗапись, Элем);
		
		//Получим последнюю сетевую активность, чтобы узнать сколько прибыло за интервал времени
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	дСетеваяАктивностьСрезПоследних.БайтОтправлено КАК БайтОтправлено,
		|	дСетеваяАктивностьСрезПоследних.БайтПринято КАК БайтПринято
		|ИЗ
		|	РегистрСведений.дСетеваяАктивность.СрезПоследних КАК дСетеваяАктивностьСрезПоследних
		|ГДЕ
		|	дСетеваяАктивностьСрезПоследних.UserName = &UserName
		|	И дСетеваяАктивностьСрезПоследних.ComputerName = &ComputerName
		|	И дСетеваяАктивностьСрезПоследних.UserDomain = &UserDomain
		|	И дСетеваяАктивностьСрезПоследних.ID = &ID
		|	И дСетеваяАктивностьСрезПоследних.Наименование = &Наименование";
		
		Запрос.УстановитьПараметр("ComputerName", лКомпИнфо.ComputerName);
		Запрос.УстановитьПараметр("ID"			, Элем.ID);
		Запрос.УстановитьПараметр("UserDomain"	, лКомпИнфо.UserDomain);
		Запрос.УстановитьПараметр("UserName"	, лКомпИнфо.UserName);
		Запрос.УстановитьПараметр("Наименование", Элем.Наименование);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			лВыборка 	= РезультатЗапроса.Выбрать();
			Если лВыборка.Следующий() Тогда
				лСрезБайтОтправлено 	= лВыборка.БайтОтправлено;
				лСрезБайтПринято 		= лВыборка.БайтПринято;
				
				лБайтОтправленоИзм 		= Элем.БайтОтправлено - лСрезБайтОтправлено;
				лБайтПринятоИзм 		= Элем.БайтПринято - лСрезБайтПринято;
				
				лНоваяЗапись.БайтОтправленоИзменение 	= ?(лБайтОтправленоИзм > 0, лБайтОтправленоИзм, 0);
				лНоваяЗапись.БайтПринятоИзменение 		= ?(лБайтПринятоИзм > 0, лБайтПринятоИзм, 0);
			КонецЕсли;
		Иначе
			лНоваяЗапись.БайтОтправленоИзменение 	= 0;
			лНоваяЗапись.БайтПринятоИзменение 		= 0;
		КонецЕсли;  
		
	КонецЦикла;
	
	лНаборЗаписей.Записать(Ложь);
	
	//Загрузка памяти
	лНаборЗаписей 		= РегистрыСведений.дПамять.СоздатьНаборЗаписей();
	
	лЗагрузкаПамяти 	= пПроизводительностьПроцессы.ЗагрузкаПамяти;
	Для каждого Элем Из лЗагрузкаПамяти Цикл
		
		лНоваяЗапись 			= лНаборЗаписей.Добавить();
		лНоваяЗапись.Период 	= лДата;
		
		ЗаполнитьЗначенияСвойств(лНоваяЗапись, лКомпИнфо);
		ЗаполнитьЗначенияСвойств(лНоваяЗапись, Элем);
		
	КонецЦикла;

	лНаборЗаписей.Записать(Ложь);
	
КонецПроцедуры
 
&НаКлиенте
Процедура Повтор(Команда)
	ПодключитьОбработчикОжидания("ЗамерПроизводительностиГрафики", 60, Ложь);
	Элементы.Повтор.Пометка 	= Истина;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекДата					= ТекущаяДата();
	Период.ДатаНачала 		= НачалоДня(ТекДата);
	Период.ДатаОкончания 	= КонецДня(ТекДата);
	
	ОбновитьПериод();
	
	//TODO Добавить программную установку условного оформления 
	//стиль: ДобавленныйРеквизитФон
	//стиль: БыстрыеНастройкиФонГруппы
	//стиль: УдаленныйРеквизитФон
	
КонецПроцедуры

//+++ АйТи КучеровРМ 18.08.2019
&НаСервере
Процедура ОбновитьПериод()
	
	МестоНаДисках.Параметры.УстановитьЗначениеПараметра("ПериодНач", Период.ДатаНачала);
	МестоНаДисках.Параметры.УстановитьЗначениеПараметра("ПериодКон", Период.ДатаОкончания);
	
	Производительность.Параметры.УстановитьЗначениеПараметра("ПериодНач", Период.ДатаНачала);
	Производительность.Параметры.УстановитьЗначениеПараметра("ПериодКон", Период.ДатаОкончания);
	
	Процессы.Параметры.УстановитьЗначениеПараметра("ПериодНач", Период.ДатаНачала);
	Процессы.Параметры.УстановитьЗначениеПараметра("ПериодКон", Период.ДатаОкончания);
	
	Память.Параметры.УстановитьЗначениеПараметра("ПериодНач", Период.ДатаНачала);
	Память.Параметры.УстановитьЗначениеПараметра("ПериодКон", Период.ДатаОкончания);
	
	Сеть.Параметры.УстановитьЗначениеПараметра("ПериодНач", Период.ДатаНачала);
	Сеть.Параметры.УстановитьЗначениеПараметра("ПериодКон", Период.ДатаОкончания);
	
КонецПроцедуры // ОбновитьПериод() //--- АйТи КучеровРМ 18.08.2019
 

&НаСервере
Процедура ОбновитьГрафики()

	ТекДата = ТекущаяДата();
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дПроизводительность.Период КАК Период,
		|	дПроизводительность.UserName КАК UserName,
		|	дПроизводительность.ComputerName КАК ComputerName,
		|	дПроизводительность.UserDomain КАК UserDomain,
		|	дПроизводительность.ЗагрузкаЦП КАК ЗагрузкаЦП,
		|	дПроизводительность.ЗагрузкаПамяти КАК ЗагрузкаПамяти,
		|	дПроизводительность.АктивностьДиска КАК АктивностьДиска,
		|	дПроизводительность.WmiCpuLoadPercentageAverage КАК WmiCpuLoadPercentageAverage,
		|	дПроизводительность.WmiCpuLoadPercentage КАК WmiCpuLoadPercentage,
		|	дПроизводительность.WmiMemoryUsedPercentage КАК WmiMemoryUsedPercentage,
		|	дПроизводительность.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.дПроизводительность КАК дПроизводительность
		|ГДЕ
		|	дПроизводительность.Период МЕЖДУ &ПериодНач И &ПериодКон
		|ИТОГИ ПО
		|	ComputerName";
	
	Запрос.УстановитьПараметр("ПериодНач", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ПериодКон", Период.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДиаграммаПроизводительность.Обновление = Ложь;
	ДиаграммаПроизводительность.Очистить();
	ДиаграммаПроизводительность.АвтоТранспонирование = Ложь;
	//Точка = ДиаграммаПроизводительность.УстановитьТочку("ЗагрузкаЦП");
	
	ВыборкаComputerName = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаComputerName.Следующий() Цикл
		Серия = ДиаграммаПроизводительность.УстановитьСерию(ВыборкаComputerName.ComputerName);
		Серия.Текст = ВыборкаComputerName.ComputerName;
		Серия.Расшифровка = ВыборкаComputerName.ComputerName;
		
		ВыборкаДетальныеЗаписи = ВыборкаComputerName.Выбрать();
		
		лКол 	= 1;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Точка = ДиаграммаПроизводительность.УстановитьТочку(Формат(ВыборкаДетальныеЗаписи.Период, "ДЛФ=T"));
			ДиаграммаПроизводительность.УстановитьЗначение(Точка, Серия, ВыборкаДетальныеЗаписи.ЗагрузкаЦП, Серия.Расшифровка);
			
			лКол = лКол + 1;
		КонецЦикла;
	КонецЦикла;
	
	ДиаграммаПроизводительность.АвтоТранспонирование = Истина;
	ДиаграммаПроизводительность.Обновление = Истина;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дМестоНаДисках.Период КАК Период,
		|	дМестоНаДисках.UserName КАК UserName,
		|	дМестоНаДисках.ComputerName КАК ComputerName,
		|	дМестоНаДисках.UserDomain КАК UserDomain,
		|	дМестоНаДисках.Диск КАК Диск,
		|	дМестоНаДисках.Емкость КАК Емкость,
		|	дМестоНаДисках.Занято КАК Занято,
		|	дМестоНаДисках.ИспользованоПроцент КАК ИспользованоПроцент,
		|	дМестоНаДисках.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.дМестоНаДисках КАК дМестоНаДисках
		|ГДЕ
		|	дМестоНаДисках.Период МЕЖДУ &ПериодНач И &ПериодКон
		|ИТОГИ ПО
		|	Диск";
	
	Запрос.УстановитьПараметр("ПериодНач", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ПериодКон", Период.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДиаграммаМестоНаДисках.Обновление = Ложь;
	ДиаграммаМестоНаДисках.Очистить();
	ДиаграммаМестоНаДисках.АвтоТранспонирование = Ложь;
	
	ВыборкаДиск = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДиск.Следующий() Цикл
		Серия = ДиаграммаМестоНаДисках.УстановитьСерию(ВыборкаДиск.Диск);
		Серия.Текст = ВыборкаДиск.Диск;
		Серия.Расшифровка = ВыборкаДиск.Диск;
		
		ВыборкаДетальныеЗаписи = ВыборкаДиск.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		лКол 	= 1;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Точка = ДиаграммаМестоНаДисках.УстановитьТочку(Формат(ВыборкаДетальныеЗаписи.Период, "ДЛФ=T"));
			ДиаграммаМестоНаДисках.УстановитьЗначение(Точка, Серия, ВыборкаДетальныеЗаписи.ИспользованоПроцент, Серия.Расшифровка);
			
			лКол = лКол + 1;
		КонецЦикла;
	КонецЦикла;
	
	ДиаграммаМестоНаДисках.АвтоТранспонирование = Истина;
	ДиаграммаМестоНаДисках.Обновление = Истина;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дПроцессы.Период КАК Период,
		|	дПроцессы.UserName КАК UserName,
		|	дПроцессы.ComputerName КАК ComputerName,
		|	дПроцессы.UserDomain КАК UserDomain,
		|	дПроцессы.ID КАК ID,
		|	дПроцессы.ProcessName КАК ProcessName,
		|	дПроцессы.Handles КАК Handles,
		|	дПроцессы.CPU КАК CPU,
		|	дПроцессы.NPM КАК NPM,
		|	дПроцессы.PM КАК PM,
		|	дПроцессы.WS КАК WS,
		|	дПроцессы.VM КАК VM,
		|	дПроцессы.SI КАК SI,
		|	дПроцессы.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.дПроцессы КАК дПроцессы
		|ГДЕ
		|	дПроцессы.Период Между &ПериодНач и &ПериодКон
		|ИТОГИ
		|	СРЕДНЕЕ(CPU)
		|ПО
		|	ProcessName";
	
	Запрос.УстановитьПараметр("ПериодНач", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ПериодКон", Период.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДиаграммаПроцессы.Обновление = Ложь;
	ДиаграммаПроцессы.Очистить();
	ДиаграммаПроцессы.АвтоТранспонирование = Ложь;
	
	ВыборкаProcessName = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	                               
	Пока ВыборкаProcessName.Следующий() Цикл
		Серия = ДиаграммаПроцессы.УстановитьСерию(ВыборкаProcessName.ProcessName);
		Серия.Текст = ВыборкаProcessName.ProcessName;
		Серия.Расшифровка = ВыборкаProcessName.ProcessName;
		//ДиаграммаПроцессы.УстановитьЗначение(Точка, Серия, ВыборкаProcessName., Серия.Расшифровка);
	
		ВыборкаДетальныеЗаписи = ВыборкаProcessName.Выбрать();
	
		лКол 	= 1;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Точка = ДиаграммаПроцессы.УстановитьТочку(Формат(ВыборкаДетальныеЗаписи.Период, "ДЛФ=T"));
			ДиаграммаПроцессы.УстановитьЗначение(Точка, Серия, ВыборкаДетальныеЗаписи.CPU, Серия.Расшифровка);
			
			лКол = лКол + 1;
		КонецЦикла;
	КонецЦикла;
	
	ДиаграммаПроцессы.АвтоТранспонирование = Истина;
	ДиаграммаПроцессы.Обновление = Истина;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дПамять.Период КАК Период,
		|	дПамять.UserName КАК UserName,
		|	дПамять.ComputerName КАК ComputerName,
		|	дПамять.UserDomain КАК UserDomain,
		|	дПамять.ID КАК ID,
		|	дПамять.ProcessName КАК ProcessName,
		|	дПамять.MemUsage КАК MemUsage
		|ИЗ
		|	РегистрСведений.дПамять КАК дПамять
		|ГДЕ
		|	дПамять.Период МЕЖДУ &ПериодНач И &ПериодКон
		|ИТОГИ
		|	СРЕДНЕЕ(MemUsage)
		|ПО
		|	ProcessName";
	
	Запрос.УстановитьПараметр("ПериодНач", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ПериодКон", Период.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДиаграммаПамять.Обновление = Ложь;
	ДиаграммаПамять.Очистить();
	ДиаграммаПамять.АвтоТранспонирование = Ложь;
	
	ВыборкаProcessName = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	                               
	Пока ВыборкаProcessName.Следующий() Цикл
		Серия = ДиаграммаПамять.УстановитьСерию(ВыборкаProcessName.ProcessName);
		Серия.Текст = ВыборкаProcessName.ProcessName;
		Серия.Расшифровка = ВыборкаProcessName.ProcessName;
		//ДиаграммаПроцессы.УстановитьЗначение(Точка, Серия, ВыборкаProcessName., Серия.Расшифровка);
	
		ВыборкаДетальныеЗаписи = ВыборкаProcessName.Выбрать();
	
		лКол 	= 1;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Точка = ДиаграммаПамять.УстановитьТочку(Формат(ВыборкаДетальныеЗаписи.Период, "ДЛФ=T"));
			ДиаграммаПамять.УстановитьЗначение(Точка, Серия, ВыборкаДетальныеЗаписи.MemUsage, Серия.Расшифровка);
			
			лКол = лКол + 1;
		КонецЦикла;
	КонецЦикла;
	
	ДиаграммаПамять.АвтоТранспонирование = Истина;
	ДиаграммаПамять.Обновление = Истина;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дСетеваяАктивность.Период КАК Период,
		|	дСетеваяАктивность.UserName КАК UserName,
		|	дСетеваяАктивность.ComputerName КАК ComputerName,
		|	дСетеваяАктивность.UserDomain КАК UserDomain,
		|	дСетеваяАктивность.ID КАК ID,
		|	дСетеваяАктивность.БайтОтправлено КАК БайтОтправлено,
		|	дСетеваяАктивность.БайтОтправленоИзменение КАК БайтОтправленоИзменение,
		|	дСетеваяАктивность.БайтПринято КАК БайтПринято,
		|	дСетеваяАктивность.БайтПринятоИзменение КАК БайтПринятоИзменение,
		|	дСетеваяАктивность.Наименование КАК Наименование
		|ИЗ
		|	РегистрСведений.дСетеваяАктивность КАК дСетеваяАктивность
		|ГДЕ
		|	дСетеваяАктивность.Период МЕЖДУ &ПериодНач И &ПериодКон
		|ИТОГИ
		|	СРЕДНЕЕ(БайтПринятоИзменение)
		|ПО
		|	Наименование";
	
	Запрос.УстановитьПараметр("ПериодНач", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ПериодКон", Период.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДиаграммаСеть.Обновление = Ложь;
	ДиаграммаСеть.Очистить();
	ДиаграммаСеть.АвтоТранспонирование = Ложь;
	
	ВыборкаProcessName = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	                               
	Пока ВыборкаProcessName.Следующий() Цикл
		Серия = ДиаграммаСеть.УстановитьСерию(ВыборкаProcessName.Наименование);
		Серия.Текст = ВыборкаProcessName.Наименование;
		Серия.Расшифровка = ВыборкаProcessName.Наименование;
		//ДиаграммаПроцессы.УстановитьЗначение(Точка, Серия, ВыборкаProcessName., Серия.Расшифровка);
	
		ВыборкаДетальныеЗаписи = ВыборкаProcessName.Выбрать();
	
		лКол 	= 1;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Точка = ДиаграммаСеть.УстановитьТочку(Формат(ВыборкаДетальныеЗаписи.Период, "ДЛФ=T"));
			ДиаграммаСеть.УстановитьЗначение(Точка, Серия, ВыборкаДетальныеЗаписи.БайтПринятоИзменение, Серия.Расшифровка);
			
			лКол = лКол + 1;
		КонецЦикла;
	КонецЦикла;
	
	ДиаграммаСеть.АвтоТранспонирование = Истина;
	ДиаграммаСеть.Обновление = Истина;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГрафикиНаКлиенте(Команда)
	
	ОбновитьГрафики();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОбновитьПериод();
	ОбновитьГрафики();
	
КонецПроцедуры

//Диаг = ЭлементыФормы.Добавить(Тип("Диаграмма"), "Диаграмма", Истина, ЭлементыФормы.ПолеТД);
//Диаг.ТипДиаграммы = ТипДиаграммы.График;

////Диаг.ОбластьЗаголовка.Текст = "Диаграмма";

////Диаг.ОбластьЗаголовка.Верх = 1;
////Диаг.ОбластьЗаголовка.Лево = 1;
////Диаг.ОбластьЗаголовка.Низ = 1;
////Диаг.ОбластьЗаголовка.Право = 1;

////Диаг.ОбластьПостроения.Верх = 1;
////Диаг.ОбластьПостроения.Право = 1;

//Диаг.Обновление = Ложь;
//Диаг.АвтоТранспонирование = Ложь;

//Диаг.Верх = 10;
//Диаг.Лево = 10;

//Диаг.Ширина = 120;
//Диаг.Высота = 60;

//ПродажиСерия1 = Диаг.УстановитьСерию("Продажи 1");
//ПродажиСерия2 = Диаг.УстановитьСерию("Продажи 2");

//Данные = Новый ГенераторСлучайныхЧисел;

//Для С=1 По 12 Цикл
//	ТочкаДиаграммы = Диаг.УстановитьТочку(С);
//	
//	Диаг.УстановитьЗначение(ТочкаДиаграммы, ПродажиСерия1, Данные.СлучайноеЧисло(10000, 30000));
//	Диаг.УстановитьЗначение(ТочкаДиаграммы, ПродажиСерия2, Данные.СлучайноеЧисло(10000, 30000));
//КонецЦикла;

//Диаг.Обновление = Истина;
//Диаг.АвтоТранспонирование = Истина;
//Диаг.Видимость = Истина;
