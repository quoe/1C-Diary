#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура УстановкаПараметровСеанса(ИменаПараметровСеанса, УстановленныеПараметры) Экспорт
	
	Если ИменаПараметровСеанса = Неопределено
	 Или ИменаПараметровСеанса.Найти("УстановленныеРасширения") <> Неопределено Тогда
		
		ПараметрыСеанса.УстановленныеРасширения = КонтрольныеСуммыРасширений();
		УстановленныеПараметры.Добавить("УстановленныеРасширения");
	КонецЕсли;
	
	Если ИменаПараметровСеанса = Неопределено
	 Или ИменаПараметровСеанса.Найти("ПодключенныеРасширения") <> Неопределено Тогда
		
		Расширения = РасширенияКонфигурации.Получить(, ИсточникРасширенийКонфигурации.СеансАктивные);
		ПараметрыСеанса.ПодключенныеРасширения = КонтрольныеСуммыРасширений(Расширения);
		УстановленныеПараметры.Добавить("ПодключенныеРасширения");
	КонецЕсли;
	
	Если ИменаПараметровСеанса <> Неопределено
	   И ИменаПараметровСеанса.Найти("ВерсияРасширений") <> Неопределено Тогда
		
		ПараметрыСеанса.ВерсияРасширений = ВерсияРасширений();
		УстановленныеПараметры.Добавить("ВерсияРасширений");
	КонецЕсли;
	
	Если ИменаПараметровСеанса = Неопределено
	   И ТекущийРежимЗапуска() <> Неопределено Тогда
	
		ЗарегистрироватьИспользованиеВерсииРасширений();
	КонецЕсли;
	
КонецПроцедуры

// Расширения подключаются только в разделенном режиме, когда
// вход в область данных выполнен под разделенным пользователем,
// поэтому обновление кэшей допустимо выполнять только в этом случае.
//
Функция УстановленныеРасширенияДоступны() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		СеансЗапущенБезРазделителей = МодульРаботаВМоделиСервиса.СеансЗапущенБезРазделителей();
	Иначе
		СеансЗапущенБезРазделителей = Истина;
	КонецЕсли;
	
	Возврат Не ОбщегоНазначения.РазделениеВключено()
	    Или Не СеансЗапущенБезРазделителей;
	
КонецФункции

// Возвращает контрольные суммы всех установленных расширений.
//
// Вызывается при запуске для установки параметра сеанса УстановленныеРасширения,
// который требуется для анализа наличия расширений и контроля динамического обновления,
// а также из формы установки расширений конфигурации в режиме 1С:Предприятия.
//
// Параметры:
//  Расширения - Неопределено - получить контрольные суммы установленных расширений.
//             - ДанныеФормыКоллекция - получить контрольные суммы из указанного списка.
//
// Возвращаемое значение:
//  Строка - строки вида "<Имя расширения> (<Версия расширения>) <Контрольная сумма>".
//
Функция КонтрольныеСуммыРасширений(Расширения = Неопределено) Экспорт
	
	Если Расширения = Неопределено Тогда
		Расширения = РасширенияКонфигурации.Получить();
	КонецЕсли;
	
	Список = Новый СписокЗначений;
	
	Для Каждого Расширение Из Расширения Цикл
		Если ТипЗнч(Расширение) = Тип("РасширениеКонфигурации") Тогда
			КонтрольнаяСумма = Base64Строка(Расширение.ХешСумма);
		Иначе
			КонтрольнаяСумма = Расширение.КонтрольнаяСумма;
		КонецЕсли;
		Список.Добавить(Расширение.Имя + " (" + Расширение.Версия + ") " + КонтрольнаяСумма);
	КонецЦикла;
	
	Если Список.Количество() <> 0 Тогда
		Список.Добавить("#" + Метаданные.Имя + " (" + Метаданные.Версия + ")");
	КонецЕсли;
	
	КонтрольныеСуммы = "";
	Для Каждого Элемент Из Список Цикл
		КонтрольныеСуммы = КонтрольныеСуммы + Символы.ПС + Элемент.Значение;
	КонецЦикла;
	
	Возврат СокрЛ(КонтрольныеСуммы);
	
КонецФункции

// Возвращает признак изменения состава расширений после запуска сеанса.
Функция РасширенияИзмененыДинамически() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		СеансЗапущенБезРазделителей = МодульРаботаВМоделиСервиса.СеансЗапущенБезРазделителей();
	Иначе
		СеансЗапущенБезРазделителей = Истина;
	КонецЕсли;
	
	// При входе неразделенного администратора в область получить список неразделенных расширений невозможно.
	// Считаем что они не изменились.
	Если ОбщегоНазначения.РазделениеВключено()
		И СеансЗапущенБезРазделителей
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПараметрыСеанса.УстановленныеРасширения <> КонтрольныеСуммыРасширений();
	
КонецФункции

// Добавляет сведения, что сеанс начал использование версии метаданных.
Процедура ЗарегистрироватьИспользованиеВерсииРасширений() Экспорт
	
	Если Не УстановленныеРасширенияДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияРасширений = ПараметрыСеанса.ВерсияРасширений;
	
	Если Не ЗначениеЗаполнено(ВерсияРасширений) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ВерсииРасширений КАК ВерсииРасширений";
	
	// Если справочник изменяется в другом сеансе, тогда нужно дождаться окончания изменений.
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ВерсииРасширений");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если РезультатыЗапроса[0].Выбрать().Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийСеанс = ПолучитьТекущийСеансИнформационнойБазы();
	НачалоСеанса = ТекущийСеанс.НачалоСеанса;
	НомерСеанса  = ТекущийСеанс.НомерСеанса;
	
	НаборЗаписей = РегистрыСведений.СеансыВерсийРасширений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерСеанса.Установить(НомерСеанса);
	НаборЗаписей.Отбор.НачалоСеанса.Установить(НачалоСеанса);
	НаборЗаписей.Отбор.ВерсияРасширений.Установить(ВерсияРасширений);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.НомерСеанса      = НомерСеанса;
	НоваяЗапись.НачалоСеанса     = НачалоСеанса;
	НоваяЗапись.ВерсияРасширений = ВерсияРасширений;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет устаревшие версии метаданных.
Процедура УдалитьУстаревшиеВерсииПараметров() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяВерсияРасширений", ПараметрыСеанса.ВерсияРасширений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсииРасширений.Ссылка КАК ВерсияРасширений,
	|	СеансыВерсийРасширений.НомерСеанса КАК НомерСеанса,
	|	СеансыВерсийРасширений.НачалоСеанса КАК НачалоСеанса
	|ИЗ
	|	Справочник.ВерсииРасширений КАК ВерсииРасширений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СеансыВерсийРасширений КАК СеансыВерсийРасширений
	|		ПО (СеансыВерсийРасширений.ВерсияРасширений = ВерсииРасширений.Ссылка)
	|ГДЕ
	|	ВерсииРасширений.Ссылка <> &ТекущаяВерсияРасширений
	|ИТОГИ ПО
	|	ВерсияРасширений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсииРасширений.Ссылка КАК ВерсияРасширений,
	|	ВерсииРасширений.ПоследняяДатаДобавленияВторойВерсии
	|ИЗ
	|	Справочник.ВерсииРасширений КАК ВерсииРасширений
	|ГДЕ
	|	ВерсииРасширений.ПоследняяДатаДобавленияВторойВерсии <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсииРасширений.Ссылка КАК ВерсияРасширений,
	|	ВерсииРасширений.ДатаПервогоВходаПослеУдаленияВсехРасширений
	|ИЗ
	|	Справочник.ВерсииРасширений КАК ВерсииРасширений
	|ГДЕ
	|	ВерсииРасширений.ДатаПервогоВходаПослеУдаленияВсехРасширений <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	// Если справочник ВерсииРасширений или регистр сведений СеансыВерсийРасширений изменяются в другом сеансе,
	// тогда нужно дождаться окончания изменений.
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ВерсииРасширений");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СеансыВерсийРасширений");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Выгрузка = РезультатыЗапроса[0].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивСеансов = ПолучитьСеансыИнформационнойБазы();
	
	// Версия, которая была первой при очередном добавлении второй версии
	// (в самом начале или после удаления устаревших версий) может
	// использоваться сеансами, которые были открыты до этого события.
	ВерсияИспользуемаяВНезарегистрированныхСеансах = Неопределено;
	ДатаОкончанияСеансовИспользующихРасширенияБезРегистрации = '00010101';
	Если ЗначениеЗаполнено(ПараметрыСеанса.УстановленныеРасширения) Тогда
		Если Не РезультатыЗапроса[1].Пустой() Тогда
			Свойства = РезультатыЗапроса[1].Выгрузить()[0];
			ДатаОкончанияСеансовИспользующихРасширенияБезРегистрации
				= Свойства.ПоследняяДатаДобавленияВторойВерсии;
			ПерваяВерсия = Свойства.ВерсияРасширений;
		КонецЕсли;
	Иначе
		Если Не РезультатыЗапроса[2].Пустой() Тогда
			Свойства = РезультатыЗапроса[2].Выгрузить()[0];
			ДатаОкончанияСеансовИспользующихРасширенияБезРегистрации
				= Свойства.ДатаПервогоВходаПослеУдаленияВсехРасширений;
			ПерваяВерсия = Свойства.ВерсияРасширений;
		КонецЕсли;
	КонецЕсли;
	
	ПроверяемыеПриложения = Новый Соответствие;
	ПроверяемыеПриложения.Вставить("1CV8", Истина);
	ПроверяемыеПриложения.Вставить("1CV8C", Истина);
	ПроверяемыеПриложения.Вставить("WebClient", Истина);
	ПроверяемыеПриложения.Вставить("COMConnection", Истина);
	ПроверяемыеПриложения.Вставить("WSConnection", Истина);
	ПроверяемыеПриложения.Вставить("BackgroundJob", Истина);
	ПроверяемыеПриложения.Вставить("SystemBackgroundJob", Истина);
	
	Сеансы = Новый Соответствие;
	Для Каждого Сеанс Из МассивСеансов Цикл
		Если ПроверяемыеПриложения.Получить(Сеанс.ИмяПриложения) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Сеансы.Вставить(Сеанс.НомерСеанса, Сеанс.НачалоСеанса);
		Если Сеанс.НачалоСеанса < ДатаОкончанияСеансовИспользующихРасширенияБезРегистрации Тогда
			ВерсияИспользуемаяВНезарегистрированныхСеансах = ПерваяВерсия;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление устаревших версий метаданных.
	ВерсииУдалялись = Ложь;
	Для Каждого ОписаниеВерсии Из Выгрузка.Строки Цикл
		ВерсияИспользуется = Ложь;
		Для Каждого Строка Из ОписаниеВерсии.Строки Цикл
			Если СеансСуществует(Строка, Сеансы) Тогда
				ВерсияИспользуется = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ТекущаяВерсия = ОписаниеВерсии.ВерсияРасширений;
		Если ВерсияИспользуется
		 Или ТекущаяВерсия = ВерсияИспользуемаяВНезарегистрированныхСеансах Тогда
			Продолжить;
		КонецЕсли;
		Объект = ТекущаяВерсия.ПолучитьОбъект();
		Объект.Удалить();
		ВерсииУдалялись = Истина;
	КонецЦикла;
	
	// Отключение регламентного задания, если осталась только одна версия расширений.
	
	// Достаточно полной разделяемой блокировки справочника ВерсииРасширений и
	// регистра сведений СеансыВерсийРасширений (исключительную ставить избыточно и
	// крайне плохо, так как это задержит вход в другие сеансы).
	// Взаимоблокировки исключены использованием разделяемых блокировок на всю таблицу в целом,
	// что допустимо и необходимо для механизма регистрации использования версий.
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ВерсииРасширений");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВерсииРасширений.Ссылка КАК Ссылка,
	|	ВерсииРасширений.ДатаПервогоВходаПослеУдаленияВсехРасширений
	|ИЗ
	|	Справочник.ВерсииРасширений КАК ВерсииРасширений";
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Выгрузка = Запрос.Выполнить().Выгрузить();
		Если Выгрузка.Количество() < 2 Тогда
			Если Выгрузка.Количество() = 0 Тогда
				ВключитьЗаданиеУдалениеУстаревшихПараметровРаботыВерсийРасширений(Ложь);
			Иначе
				// Удаление всех регистраций использования метаданных.
				ВсеЗаписи = РегистрыСведений.СеансыВерсийРасширений.СоздатьНаборЗаписей();
				ВсеЗаписи.Записать();
				Если ЗначениеЗаполнено(ПараметрыСеанса.УстановленныеРасширения) Тогда
					ВключитьЗаданиеУдалениеУстаревшихПараметровРаботыВерсийРасширений(Ложь);
				КонецЕсли;
				Если ВерсииУдалялись
				   И ЗначениеЗаполнено(Выгрузка[0].ДатаПервогоВходаПослеУдаленияВсехРасширений) Тогда
					
					Объект = Выгрузка[0].Ссылка.ПолучитьОбъект();
					Объект.ДатаПервогоВходаПослеУдаленияВсехРасширений = Неопределено;
					Объект.Записать();
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Удаление устаревших регистраций использования метаданных.
			ВсеЗаписи = РегистрыСведений.СеансыВерсийРасширений.СоздатьНаборЗаписей();
			ВсеЗаписи.Прочитать();
			
			Для Каждого Строка Из ВсеЗаписи Цикл
				Если СеансСуществует(Строка, Сеансы) Тогда
					Продолжить;
				КонецЕсли;
				НаборЗаписей = РегистрыСведений.СеансыВерсийРасширений.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.НомерСеанса.Установить(Строка.НомерСеанса);
				НаборЗаписей.Отбор.НачалоСеанса.Установить(Строка.НачалоСеанса);
				НаборЗаписей.Отбор.ВерсияРасширений.Установить(Строка.ВерсияРасширений);
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Вызывается из формы УстановленныеРасширения.
Процедура ПриУдаленииВсехРасширений() Экспорт
	
	ЗарегистрироватьПервыйВходПослеУдаленияВсехРасширений();
	ВключитьЗаданиеУдалениеУстаревшихПараметровРаботыВерсийРасширений(Истина);
	
КонецПроцедуры

// Включает/Отключает регламентное задание УдалениеУстаревшихПараметровРаботыВерсийРасширений.
Процедура ВключитьЗаданиеУдалениеУстаревшихПараметровРаботыВерсийРасширений(Включить) Экспорт
	
	РегламентныеЗаданияСервер.УстановитьИспользованиеПредопределенногоРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.УдалениеУстаревшихПараметровРаботыВерсийРасширений, Включить);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает текущую версию расширений.
// Для поиска версии используется описание подключенных расширений.
//
Функция ВерсияРасширений()
	
	Если Не УстановленныеРасширенияДоступны() Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыСеанса.УстановленныеРасширения) Тогда
		ЗарегистрироватьПервыйВходПослеУдаленияВсехРасширений();
	КонецЕсли;
	
	ОписаниеРасширений = ПараметрыСеанса.ПодключенныеРасширения;
	Если Не ЗначениеЗаполнено(ОписаниеРасширений) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсииРасширений.Ссылка КАК Ссылка,
	|	ВерсииРасширений.ОписаниеМетаданных КАК ОписаниеРасширений
	|ИЗ
	|	Справочник.ВерсииРасширений КАК ВерсииРасширений";
	
	// Если справочник изменяется в другом сеансе, тогда нужно дождаться окончания изменений.
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ВерсииРасширений");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Выборка = Запрос.Выполнить().Выбрать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если ВерсияНайдена(Выборка, ОписаниеРасширений) Тогда
		ВерсияРасширений = Выборка.Ссылка;
	Иначе
		// Создание новой версии расширений.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ВерсииРасширений");
		НачатьТранзакцию();
		Попытка
			// Повторная проверка, что версия еще не создана,
			// что маловероятно, но возможно между транзакциями.
			// Сразу исключительная блокировка недопустима, так как это
			// замедлит вход пользователей в другие сеансы.
			Выборка = Запрос.Выполнить().Выбрать();
			Если ВерсияНайдена(Выборка, ОписаниеРасширений) Тогда
				ВерсияРасширений = Выборка.Ссылка;
			Иначе
				Блокировка.Заблокировать();
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ВерсииРасширений.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ВерсииРасширений КАК ВерсииРасширений";
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
					Объект = Выборка.Ссылка.ПолучитьОбъект();
					// Тут должна быть именно ТекущаяДата(), так как
					// именно она устанавливается в поле НачалоСеанса.
					Объект.ПоследняяДатаДобавленияВторойВерсии = ТекущаяДата();
					Объект.ОбменДанными.Загрузка = Истина;
					Объект.Записать();
					ВключитьЗаданиеУдалениеУстаревшихПараметровРаботыВерсийРасширений(Истина);
				КонецЕсли;
				Объект = СоздатьЭлемент();
				Объект.ОписаниеМетаданных = ОписаниеРасширений;
				Объект.ОбменДанными.Загрузка = Истина;
				Объект.Записать();
				ВерсияРасширений = Объект.Ссылка;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ВерсияРасширений;
	
КонецФункции

// Для функции ВерсияРасширений.
Функция ВерсияНайдена(Выборка, ОписаниеРасширений)
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОписаниеРасширений = ОписаниеРасширений Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Для процедуры УдалитьУстаревшиеВерсииПараметров.
Функция СеансСуществует(ОписаниеСеанса, СуществующиеСеансы)
	
	НачалоСеанса = СуществующиеСеансы[ОписаниеСеанса.НомерСеанса];
	
	Возврат НачалоСеанса <> Неопределено
	      И НачалоСеанса > (ОписаниеСеанса.НачалоСеанса - 30)
	      И (ОписаниеСеанса.НачалоСеанса + 30) > НачалоСеанса;
	
КонецФункции

// Для функции ВерсияРасширений и процедуры ПриУдаленииВсехРасширений.
Процедура ЗарегистрироватьПервыйВходПослеУдаленияВсехРасширений()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВерсииРасширений.Ссылка КАК Ссылка,
	|	ВерсииРасширений.ДатаПервогоВходаПослеУдаленияВсехРасширений
	|ИЗ
	|	Справочник.ВерсииРасширений КАК ВерсииРасширений";
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() = 1
	   И Не ЗначениеЗаполнено(Выгрузка[0].ДатаПервогоВходаПослеУдаленияВсехРасширений) Тогда
		
		Объект = Выгрузка[0].Ссылка.ПолучитьОбъект();
		// Тут должна быть именно ТекущаяДата(), так как
		// именно она устанавливается в поле НачалоСеанса.
		Объект.ДатаПервогоВходаПослеУдаленияВсехРасширений = ТекущаяДата();
		Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли