
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Загрузка из ТЧ МентальнаяКарта в ДеревоЗначений МентальнаяКартаДерево
	лДерево = дОбщиеФункцииСервер.ТаблицаВДерево(РеквизитФормыВЗначение("Объект"), "МентальнаяКарта");
	ЗначениеВРеквизитФормы(лДерево, "МентальнаяКартаДерево");
	
	//Свернуть/развернуть дерево
	//См. ПриОткрытии
	
	лФормаОбъект	= РеквизитФормыВЗначение("Объект");
	лСхемаКД		= лФормаОбъект.ПолучитьМакет("МакетСКД");
	
	//Условное оформление МентальнаяКартаДерево
	ВременноеХранилищеСКД = ПоместитьВоВременноеХранилище(лСхемаКД, УникальныйИдентификатор);
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ВременноеХранилищеСКД));
	
	лФормаОбъектНастройки 	= лФормаОбъект.Настройки.Получить(); 
	Если ЗначениеЗаполнено(лФормаОбъектНастройки) Тогда
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(лФормаОбъектНастройки);
		ПерезаполнитьУФФормы();
	Иначе
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(лСхемаКД.НастройкиПоУмолчанию);
	КонецЕсли; 
	

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.МентальнаяКарта.Очистить();
	//ДОбъект = РеквизитФормыВЗначение("Объект");
	дОбщиеФункцииСервер.ДеревоВТаблицу(ТекущийОбъект, РеквизитФормыВЗначение("МентальнаяКартаДерево"), "МентальнаяКарта");
	//ЗначениеВРеквизитФормы(ДОбъект, "Объект");
	
	//Сохранение настроек условного оформления МентальнаяКартаДерево
	НастройкиКомпоновщикаХранилище 	= Новый ХранилищеЗначения(КомпоновщикНастроекКомпоновкиДанных.Настройки);
	ТекущийОбъект.Настройки 		= НастройкиКомпоновщикаХранилище;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДеревоСвернутьРазвернутьРекурсивно(МентальнаяКартаДерево);
	
	Элементы.МентальнаяКартаДерево.Обновить();
	
	Элементы.КомпоновщикНастроекКомпоновкиДанныхНастройкиУсловноеОформление.Видимость 	= Ложь; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвернутьРазвернутьРекурсивно(пЭлемент)
	
	КоллекцияЭлементовДерева 	= пЭлемент.ПолучитьЭлементы();
	
	//Свернуть/развернуть дерево 
	Для Каждого лСтрока Из КоллекцияЭлементовДерева Цикл
		
		лИдентификаторСтроки 	= лСтрока.ПолучитьИдентификатор();
		Если лСтрока.Развернут Тогда
			Элементы.МентальнаяКартаДерево.Развернуть(лИдентификаторСтроки);
		Иначе
			Элементы.МентальнаяКартаДерево.Свернуть(лИдентификаторСтроки);
		КонецЕсли;
		
		ДеревоСвернутьРазвернутьРекурсивно(лСтрока);
		
	КонецЦикла;
	
КонецПроцедуры // ДеревоСвернутьРазвернутьРекурсивно()

&НаКлиенте
Процедура ДеревоПрисвоитьТегиРекурсивно(пЭлемент, пСтруктураТегов)
	
	Если пСтруктураТегов = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	КоллекцияЭлементовДерева 	= пЭлемент.ПолучитьЭлементы();
	
	Для Каждого лСтрока Из КоллекцияЭлементовДерева Цикл
		
		лЭлементИД 	= ЭлементИДПолучитьРаскодировать(лСтрока.ЭлементИД);
		пСтруктураТегов.Свойство(лЭлементИД, лСтрока.ТегиСписок);  
		
		ДеревоПрисвоитьТегиРекурсивно(лСтрока, пСтруктураТегов);
		
	КонецЦикла;
	
КонецПроцедуры // ДеревоПрисвоитьТегиРекурсивно()

//+++ ====== Условное оформление ================================================
// https://infostart.ru/public/186640/

// Процедуры для работы с условным оформлением

&НаСервере
Процедура ПерезаполнитьУФФормы()
	
	лУсловноеОформлениеЭлементы 	= УсловноеОформление.Элементы; 
	лУсловноеОформлениеЭлементы.Очистить();
	
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(лУсловноеОформлениеЭлементы, "МентальнаяКартаДерево.ПоказыватьФлаг", ВидСравненияКомпоновкиДанных.Равно, Истина	, "МентальнаяКартаДеревоФлаг",  "МентальнаяКартаДеревоФлагИстина"	,,,, Новый Структура("Видимость", Истина));
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(лУсловноеОформлениеЭлементы, "МентальнаяКартаДерево.ПоказыватьФлаг", ВидСравненияКомпоновкиДанных.Равно, Ложь	, "МентальнаяКартаДеревоФлаг",  "МентальнаяКартаДеревоФлагЛожь"		,,,, Новый Структура("Видимость", Ложь));
	
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(лУсловноеОформлениеЭлементы, "МентальнаяКартаДерево.ПоказыватьСписокТегов", ВидСравненияКомпоновкиДанных.Равно, Истина	, "МентальнаяКартаДеревоТегиСписок",  "МентальнаяКартаДеревоТегиСписокИстина"	,,,, Новый Структура("Видимость", Истина));
	дОбщиеФункцииСервер.ПрименитьУсловноеОфомление(лУсловноеОформлениеЭлементы, "МентальнаяКартаДерево.ПоказыватьСписокТегов", ВидСравненияКомпоновкиДанных.Равно, Ложь		, "МентальнаяКартаДеревоТегиСписок",  "МентальнаяКартаДеревоТегиСписокЛожь"		,,,, Новый Структура("Видимость", Ложь));
	
	УсловноеОформлениеКомпоновщика = КомпоновщикНастроекКомпоновкиДанных.Настройки.УсловноеОформление;
	
	Для каждого ЭлементУФ Из УсловноеОформлениеКомпоновщика.Элементы Цикл
		
		ЭлементУсловногоОформления = лУсловноеОформлениеЭлементы.Добавить();
		ЭлементУсловногоОформления.Использование = ЭлементУФ.Использование;
		
		// Заполняем поля к которым будет применятся условное оформление
		СкопироватьПоляУсловногоОформления(ЭлементУсловногоОформления, ЭлементУФ);
		
		// Заполняем отбор для условного офрмления
		СкопироватьОтборУсловногоОформления(ЭлементУсловногоОформления, ЭлементУФ.Отбор);
		
		// Заполняем элементы условного офрмления
		СкопироватьЭлементОформления(ЭлементУсловногоОформления, ЭлементУФ);
		
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьУФФормы()

&НаСервере
Процедура СкопироватьПоляУсловногоОформления(ЭлементУсловногоОформления, ЭлементКомпоновщика)
	
	ЭлементыПоля = ЭлементКомпоновщика.Поля.Элементы;
	Если ЭлементыПоля.Количество() = 0 Тогда
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МентальнаяКартаДерево");
		ОформляемоеПоле.Использование = Истина;
	Иначе
		Для каждого ЭлементПоля Из ЭлементыПоля Цикл
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ЗаполнитьЗначенияСвойств(ОформляемоеПоле, ЭлементПоля);
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МентальнаяКартаДерево" + Строка(ЭлементПоля.Поле));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СкопироватьПоляУсловногоОформления()

&НаСервере
Процедура СкопироватьОтборУсловногоОформления(ЭлементУсловногоОформления, ЭлементКомпоновщика)
	
	Для каждого ЭлементОтбора Из ЭлементКомпоновщика.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ГруппаОтбора, ЭлементОтбора);
			СкопироватьОтборУсловногоОформления(ЭлементУсловногоОформления, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
			НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МентальнаяКартаДерево." + Строка(ЭлементОтбора.ЛевоеЗначение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СкопироватьОтборУсловногоОформления()

&НаСервере
Процедура СкопироватьЭлементОформления(ЭлементУсловногоОформления, ЭлементКомпоновщика)
	
	ЭлементыОформления = ЭлементКомпоновщика.Оформление.Элементы;
	
	Для каждого ЭлементОформления Из ЭлементыОформления Цикл
		Если ЭлементОформления.Использование Тогда
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(ЭлементОформления.Параметр, ЭлементОформления.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СкопироватьЭлементОформления()

//--- ====== Условное оформление ================================================ 


&НаКлиенте
Процедура МентальнаяКартаДеревоПриИзменении(Элемент)
	
	лТекущиеДанные 	= Элемент.ТекущиеДанные; 
	Если лТекущиеДанные <> Неопределено Тогда
		лЭлементыКорень 	= МентальнаяКартаДерево.ПолучитьЭлементы();
		
		Если лЭлементыКорень.Количество() = 1 Тогда
			лЭлементы 		= лЭлементыКорень[0].ПолучитьЭлементы();
			
			Если лЭлементы.Количество() > 0 Тогда
				Если НЕ ЗначениеЗаполнено(лТекущиеДанные.ЭлементИД) Тогда
					лТекущиеДанные.ЭлементИД 	= Новый УникальныйИдентификатор();
				КонецЕсли;	
			КонецЕсли; 
		Иначе
			лТекущиеДанные.ЭлементИД 	= Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		КонецЕсли; 
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура МентальнаяКартаДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ИдентификаторперемещаемойСтроки = ПараметрыПеретаскивания.Значение[0];
	ПеремещаемаяСтрока = МентальнаяКартаДерево.НайтиПоИдентификатору(ИдентификаторперемещаемойСтроки);
	
	Если Строка = Неопределено Тогда
		МожноПеретаскивать = Истина;
	Иначе
		НовыйРодитель = МентальнаяКартаДерево.НайтиПоИдентификатору(Строка);
		МожноПеретаскивать = ПроверитьВозможностьПереноса(ПеремещаемаяСтрока, НовыйРодитель);
	КонецЕсли;
	
	Если МожноПеретаскивать Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МентальнаяКартаДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
		
		ИдентификаторперемещаемойСтроки = ПараметрыПеретаскивания.Значение[0];
		ПеремещаемаяСтрока = МентальнаяКартаДерево.НайтиПоИдентификатору(ИдентификаторперемещаемойСтроки);
		
		Если Строка = Неопределено Тогда
			НовыйРодитель = МентальнаяКартаДерево;
		Иначе
			НовыйРодитель = МентальнаяКартаДерево.НайтиПоИдентификатору(Строка);
		КонецЕсли;
		
		СкопироватьСтрокуДерева(МентальнаяКартаДерево, НовыйРодитель, ПеремещаемаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПереноса(Знач ПереносимыйЭлемент, Знач НовыйРодитель)

    Пока НЕ НовыйРодитель = Неопределено Цикл
        Если ПереносимыйЭлемент = НовыйРодитель Тогда
            Возврат Ложь;
        КонецЕсли;
        НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
    КонецЦикла;

    Возврат Истина;

КонецФункции

&НаКлиенте
Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)

    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()
            [КолПодчиненныхСтрок - ОбратныйИндекс];
        СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
    КонецЦикла;

    Если Источник.ПолучитьРодителя() = Неопределено Тогда
        РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
    Иначе
        Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
    КонецЕсли;

    Возврат НоваяСтрока;

КонецФункции

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	дОбщиеФункцииСервер.ДеревоПересчитатьЭлементы(ТекущийОбъект, РеквизитФормыВЗначение("МентальнаяКартаДерево"), "МентальнаяКарта");
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	лЭлементыКорень 	= МентальнаяКартаДерево.ПолучитьЭлементы();
	
	Если лЭлементыКорень.Количество() <> 1 Тогда
		лЭлемент 	= лЭлементыКорень.Добавить();
		лЭлемент.ЭлементИД 	= Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		лЭлемент.Элемент 	= Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекКомпоновкиДанныхНастройкиУсловноеОформлениеПриИзменении(Элемент)
	ПерезаполнитьУФФормы();
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекКомпоновкиДанныхНастройкиУсловноеОформлениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПерезаполнитьУФФормы();
КонецПроцедуры

&НаКлиенте
Процедура МентальнаяКартаДеревоПередРазворачиванием(Элемент, Строка, Отказ)
	
	//Отработает когда свёрнут, следовательно он будет развёрнут
	//лРазвернут = Элементы.МентальнаяКартаДерево.Развернут(Строка); 
	
	лРазвернут 	= Истина;
	лЭлементСвернутьРазвернуть 	= МентальнаяКартаДерево.НайтиПоИдентификатору(Строка);
	лЭлементСвернутьРазвернуть.Развернут 	= лРазвернут;
	
КонецПроцедуры

&НаКлиенте
Процедура МентальнаяКартаДеревоПередСворачиванием(Элемент, Строка, Отказ)
	
	//Отработает когда развёрнут, следовательно он будет свернут
	//лРазвернут = Элементы.МентальнаяКартаДерево.Развернут(Строка); 
	
	лРазвернут 	= Ложь;
	лЭлементСвернутьРазвернуть 	= МентальнаяКартаДерево.НайтиПоИдентификатору(Строка);
	лЭлементСвернутьРазвернуть.Развернут 	= лРазвернут;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказыватьФлаг(Команда)
	
	лТекущиеДанные 	= Элементы.МентальнаяКартаДерево.ТекущиеДанные; 
	Если лТекущиеДанные <> Неопределено Тогда
		Элементы.МентальнаяКартаДеревоДеревоПоказыватьФлаг.Пометка = НЕ Элементы.МентальнаяКартаДеревоДеревоПоказыватьФлаг.Пометка;
		лТекущиеДанные.ПоказыватьФлаг 	= Элементы.МентальнаяКартаДеревоДеревоПоказыватьФлаг.Пометка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МентальнаяКартаДеревоПриАктивизацииСтроки(Элемент)
	
	лТекущиеДанные 	= Элемент.ТекущиеДанные; 
	Если лТекущиеДанные <> Неопределено Тогда
		Элементы.МентальнаяКартаДеревоДеревоПоказыватьФлаг.Пометка 			=  лТекущиеДанные.ПоказыватьФлаг;
		Элементы.МентальнаяКартаДеревоДеревоПоказыватьСписокТегов.Пометка 	=  лТекущиеДанные.ПоказыватьСписокТегов;
		
		ЭлементОписание 	= лТекущиеДанные.Описание;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекКомпоновкиДанныхНастройкиУсловноеОформлениеПриАктивизацииСтроки(Элемент)
	
	лТекущиеДанные 	= Элемент.ТекущиеДанные; 
	Если лТекущиеДанные <> Неопределено Тогда
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиПриИзменении(Элемент)
	
	лМентальнаяКартаДеревоТекущиеДанные 	= Элементы.МентальнаяКартаДерево.ТекущиеДанные; 
	Если лМентальнаяКартаДеревоТекущиеДанные <> Неопределено Тогда
		лТекущиеДанные 	= Элемент.ТекущиеДанные; 
		Если лТекущиеДанные <> Неопределено Тогда
			лТекущиеДанные.ЭлементИД = лМентальнаяКартаДеревоТекущиеДанные.ЭлементИД;
		КонецЕсли;
	КонецЕсли;
	
	лОбъектТеги 	= Объект.ТегиЭлементов;
	Если лОбъектТеги.Количество() > 0 Тогда
		лТегиСписок 	= СоставитьСписокТегов(лОбъектТеги);
		ДеревоПрисвоитьТегиРекурсивно(МентальнаяКартаДерево, лТегиСписок);	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоставитьСписокТегов(пОбъектТеги, РезделительЭлементов = ", ")
	
	лРезультат 	= Неопределено;
	
	лТегиДляДерева 	= Новый ТаблицаЗначений;
	лТегиДляДерева.Колонки.Добавить("ЭлементИД"	, Новый ОписаниеТипов("УникальныйИдентификатор"));
	лТегиДляДерева.Колонки.Добавить("ТегиСписок", Новый ОписаниеТипов("Строка"));
	
	лОбъектТеги = пОбъектТеги;
	
	РезделительДлина 		= СтрДлина(РезделительЭлементов);
	
	Для каждого лОбъектТегиСтрока Из лОбъектТеги Цикл
		
		лОбъектТег 			= лОбъектТегиСтрока.Тег; 
		лОбъектЭлементИД 	= лОбъектТегиСтрока.ЭлементИД;
		Если ЗначениеЗаполнено(лОбъектТег) Тогда
			лТегДляДерева 	= лТегиДляДерева.Найти(лОбъектЭлементИД, "ЭлементИД");
			
			Если лТегДляДерева = Неопределено Тогда
				лТегиДляДереваНоваяСтрока 	= лТегиДляДерева.Добавить();
				лТегиДляДереваНоваяСтрока.ЭлементИД 	= лОбъектЭлементИД;
				лТегиДляДереваНоваяСтрока.ТегиСписок 	= лТегиДляДереваНоваяСтрока.ТегиСписок + Строка(лОбъектТег) + РезделительЭлементов;
			Иначе
				лТегДляДерева.ТегиСписок 	= лТегиДляДереваНоваяСтрока.ТегиСписок + Строка(лОбъектТег) + РезделительЭлементов;
			КонецЕсли;
		КонецЕсли;  
		 
	КонецЦикла;
	
	Если лТегиДляДерева.Количество() > 0 Тогда
		лРезультатСтруктура 	= Новый Структура();
		Для каждого лТегиДляДереваСтрока Из лТегиДляДерева Цикл
			
			лТегиСписок 	= лТегиДляДереваСтрока.ТегиСписок; 
			лТегиСписокИтог = Сред(лТегиСписок, 1, СтрДлина(лТегиСписок) - РезделительДлина); // Убираем последний разделитель
			лЭлементИД 		= ЭлементИДПолучитьРаскодировать(лТегиДляДереваСтрока.ЭлементИД);
			
			лРезультатСтруктура.Вставить(лЭлементИД, лТегиСписокИтог);
			
		КонецЦикла;
		
		лРезультат 	= лРезультатСтруктура;
	КонецЕсли; 
	
	Возврат лРезультат;
	
КонецФункции // СоставитьСписокТегов()

&НаКлиентеНаСервереБезКонтекста 
Функция ЭлементИДПолучитьРаскодировать(пЭлементИД, пПолучить = Истина)
	
	Если пПолучить Тогда
		лРезультат = "_teg" + СтрЗаменить(пЭлементИД, "-", "_");
	Иначе //Раскодировать
		лРезультат = "_teg" + СтрЗаменить(пЭлементИД, "_", "-");
	КонецЕсли; 
	
	Возврат лРезультат;
	
КонецФункции // ЭлементИДПолучитьРаскодировать()
  

&НаКлиенте
Процедура СсылкиНаПриИзменении(Элемент)
	
	лМентальнаяКартаДеревоТекущиеДанные 	= Элементы.МентальнаяКартаДерево.ТекущиеДанные; 
	Если лМентальнаяКартаДеревоТекущиеДанные <> Неопределено Тогда
		лТекущиеДанные 	= Элемент.ТекущиеДанные; 
		Если лТекущиеДанные <> Неопределено Тогда
			лТекущиеДанные.ЭлементИД = лМентальнаяКартаДеревоТекущиеДанные.ЭлементИД;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловноеОформлениеВидимость(Команда)
	
	Элементы.МентальнаяКартаДеревоДеревоУсловноеОформлениеВидимость.Пометка 	= НЕ Элементы.МентальнаяКартаДеревоДеревоУсловноеОформлениеВидимость.Пометка;
	Элементы.КомпоновщикНастроекКомпоновкиДанныхНастройкиУсловноеОформление.Видимость 	= Элементы.МентальнаяКартаДеревоДеревоУсловноеОформлениеВидимость.Пометка; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказыватьСписокТегов(Команда)
	
	лТекущиеДанные 	= Элементы.МентальнаяКартаДерево.ТекущиеДанные; 
	Если лТекущиеДанные <> Неопределено Тогда
		Элементы.МентальнаяКартаДеревоДеревоПоказыватьСписокТегов.Пометка = НЕ Элементы.МентальнаяКартаДеревоДеревоПоказыватьСписокТегов.Пометка;
		лТекущиеДанные.ПоказыватьСписокТегов 	= Элементы.МентальнаяКартаДеревоДеревоПоказыватьСписокТегов.Пометка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементОписаниеПриИзменении(Элемент)
	
	лМентальнаяКартаДеревоТекущиеДанные 	= Элементы.МентальнаяКартаДерево.ТекущиеДанные;
	Если лМентальнаяКартаДеревоТекущиеДанные <> Неопределено Тогда
		лМентальнаяКартаДеревоТекущиеДанные.Описание 	= ЭлементОписание;
	КонецЕсли; 
	
КонецПроцедуры


