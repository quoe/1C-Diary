
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ДатаКурса = НачалоДня(ТекущаяДатаСеанса());
	Элементы.Курс.Заголовок = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Курс на %1"),
			Формат(ТекущаяДатаСеанса(), "ДЛФ=DD"));
	Элементы.Курс.Подсказка = Элементы.Курс.Заголовок;
	Список.Параметры.УстановитьЗначениеПараметра ("КонецПериода", ДатаКурса);
	
	Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	
	// ДЕНЬГИ

	Элементы.СписокВыбрать.Видимость = Элементы.Список.РежимВыбора;
	Элементы.СписокОтчетПоКурсамВалют.Видимость = НЕ Элементы.Список.РежимВыбора;
	Список.АвтоматическоеСохранениеПользовательскихНастроек = НЕ Элементы.Список.РежимВыбора;
	Если Элементы.Список.РежимВыбора Тогда
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	ОбновитьПараметрыДанныхСписка();
	
	// Установка условного оформления для форм списков:
	РаботаСФормамиСправочников.УстановитьУсловноеОформлениеФормыСписка(ЭтотОбъект, "Список", Истина, , );
	ДобавитьУсловноеОформлениеФормы();
	
	// Перенос программно установленного отбора в пользовательские настройки:
	РаботаСФормамиСправочников.ФормаСпискаСправочникаОбработатьПараметрыОтбора(ЭтотОбъект, "Список");
	
	Элементы.ДекорацияИнформацияОВалютеУчета.Заголовок = СформироватьТекстОсновнойВалюты(ВалютаУчета);
	
	// Конец ДЕНЬГИ
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Элементы.Список.Обновить();
	Элементы.Список.ТекущаяСтрока = РезультатВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_КурсыВалют"
		Или ИмяСобытия = "Запись_ЗагрузкаКурсовВалют" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВалюты

&НаКлиенте
Процедура ВалютыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Текст = НСтр("ru = 'Есть возможность подобрать валюту из классификатора.
	|Подобрать?'");
	Оповещение = Новый ОписаниеОповещения("ВалютыПередНачаломДобавленияЗавершение", ЭтотОбъект);
	КнопкиВыбора = Новый СписокЗначений();
	КнопкиВыбора.Добавить(КодВозвратаДиалога.Да, "Подобрать");
	КнопкиВыбора.Добавить(КодВозвратаДиалога.Нет, "Создать");
	КнопкиВыбора.Добавить(КодВозвратаДиалога.Отмена, "Отмена");
	ПоказатьВопрос(Оповещение, Текст,КнопкиВыбора, , КодВозвратаДиалога.Да);
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборИзОКВ(Команда)
	
	ОткрытьФорму("Справочник.Валюты.Форма.ПодборВалютИзКлассификатора",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКурсыВалют(Команда)
	ПараметрыФормы = Новый Структура("ОткрытиеИзСписка");
	ОткрытьФорму("Обработка.ЗагрузкаКурсовВалют.Форма", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВалютыПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	 
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("Справочник.Валюты.Форма.ПодборВалютИзКлассификатора", , ЭтотОбъект);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ОткрытьФорму("Справочник.Валюты.ФормаОбъекта");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

// ДЕНЬГИ

// Обработчики Панели ГруппаБыстрыеОтборы
#Область ГруппаБыстрыеОтборы 

&НаКлиенте
Процедура АктуальностьПриИзменении(Элемент)
	
	УстановитьБыстрыйОтборПоРеквизитам(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьБыстрыйОтборПоРеквизитам(Форма)

	ОтборСписка = Форма.Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Форма.Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	Если ОтборСписка <> Неопределено Тогда
		Если Форма.Актуальность > 0 Тогда
			// Только активные
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "Активность", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		ИначеЕсли Форма.Актуальность < 0 Тогда
			// Только неактивные
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "Активность", Ложь, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		Иначе
			// Все шаблоны
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "Активность", , , , Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		КонецЕсли; 
		
		ОписаниеОтбора = Строка(ОтборСписка);
		Форма.ОписаниеОтбора = ?(ПустаяСтрока(ОписаниеОтбора), НСтр("ru = 'не установлен'"), РаботаСФормамиСправочниковКлиентСервер.УпроститьСтрокуОтбораНаРусском(ОписаниеОтбора));
		
	КонецЕсли; 

КонецПроцедуры
 
&НаСервере
Процедура СписокПриЗагрузкеПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	АктуализироватьЗначенияБыстрыхОтборов(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	АктуализироватьЗначенияБыстрыхОтборов(Список.КомпоновщикНастроек.ПользовательскиеНастройки);
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЗначенияБыстрыхОтборов(Настройки)

	// Восстанавливаем значения быстрых отборов, если они были
	ОтборСписка = Настройки.Элементы.Найти(Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	Если ОтборСписка <> Неопределено Тогда
		
		// "обнуляем" значения быстрого отбора:
		Актуальность    = 0;
		ОписаниеОтбора  = "";
		
		// Проверяем актуальность:
		ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОтборСписка, "Активность");
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			Если НЕ ЭлементОтбора.Использование Тогда
				Актуальность = 0;
			ИначеЕсли ЭлементОтбора.ПравоеЗначение = Ложь Тогда
				Актуальность = -1;
			Иначе
				Актуальность = 1;
			КонецЕсли; 
		КонецЦикла; 
		
		ОписаниеОтбора = Строка(ОтборСписка);
		ОписаниеОтбора = ?(ПустаяСтрока(ОписаниеОтбора), НСтр("ru = 'не установлен'"), РаботаСФормамиСправочниковКлиентСервер.УпроститьСтрокуОтбораНаРусском(ОписаниеОтбора));
		
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СделатьВалютойУчета(Команда)
	
	Если ЗначениеЗаполнено(Элементы.Список.ТекущаяСтрока) Тогда
		
		Если Элементы.Список.ТекущаяСтрока = ВалютаУчета Тогда
			ТекстПредупреждения = НСтр("ru = 'Валюта %1 уже является валютой учета.'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, Элементы.Список.ТекущиеДанные.Наименование);
			ПоказатьПредупреждение(, ТекстПредупреждения,,НСтр("ru = 'Валюты: Изменение валюты учета'"));
		Иначе
			
			ТекстВопроса = НСтр("ru = 'Процесс изменения валюты учета может занять много времени.
			|Для корректного пересчета курсов валют из %1 в %2 может потребоваться заново загрузить курсы валют за весь период ведения учета.
			|Назначить %2 валютой учета?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ВалютаУчета, Элементы.Список.ТекущиеДанные.Наименование);
			Оповещение = Новый ОписаниеОповещения("СделатьВалютойУчетаЗавершение", ЭтотОбъект, Элементы.Список.ТекущаяСтрока);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Валюты: Изменение валюты учета'"));
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКурсВручную(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТипЗнч(ТекущаяСтрока) <> Тип("СправочникСсылка.Валюты") Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ТекущаяДата = НачалоДня(ТекущаяДата());
	ЗначенияЗаполнения = Новый Структура("Период,Валюта,БазоваяВалюта", ТекущаяДата, ТекущаяСтрока, ВалютаУчета);
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДатаКурса) ИЛИ ТекущиеДанные.ДатаКурса < ТекущаяДата  Тогда
		ОткрытьФорму("РегистрСведений.КурсыВалют.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), ЭтаФорма, ТекущаяСтрока);
	Иначе
		ПараметрыКлюча = Новый Массив;
		ПараметрыКлюча.Добавить(ЗначенияЗаполнения);
		Ключ = Новый(Тип("РегистрСведенийКлючЗаписи.КурсыВалют"), ПараметрыКлюча);
		ОткрытьФорму("РегистрСведений.КурсыВалют.ФормаЗаписи", Новый Структура("Ключ, ЗначенияЗаполнения", Ключ, ЗначенияЗаполнения), ЭтаФорма, ТекущаяСтрока);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоКурсамВалют(Команда)
	
	Если НЕ ЗначениеЗаполнено(Элементы.Список.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("Валюта", Элементы.Список.ТекущаяСтрока);
	ПараметрыФормы.Вставить("КлючВарианта", "Основной");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.ОтчетПоКурсамВалют.Форма", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры
 
&НаСервере
Процедура ОбновитьпараметрыДанныхСписка()

	ДатаКурса = НачалоДня(ТекущаяДатаСеанса());
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	Элементы.Курс.Заголовок = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Курс на %1"),
			Формат(ТекущаяДатаСеанса(), "ДЛФ=DD"));
	Элементы.Курс.Подсказка = Элементы.Курс.Заголовок;
	Список.Параметры.УстановитьЗначениеПараметра ("КонецПериода", ДатаКурса);
	Список.Параметры.УстановитьЗначениеПараметра ("СтрокаРубЗа", "" + ВалютаУчета + " за");
	Список.Параметры.УстановитьЗначениеПараметра ("ВалютаУчета", ВалютаУчета);

КонецПроцедуры

&НаСервере
Процедура ИзменитьВалютуУчетаНаСервере(Валюта)

	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Возврат;
	КонецЕсли; 
	
	Константы.ВалютаУчета.Установить(Валюта);
	
	ОбновитьпараметрыДанныхСписка();

КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеФормы()

	СтандартныйШрифт = Элементы.Список.Шрифт;
	
	// Базовая валюта с пометкой на удаление
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Список");

	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Список.Ссылка");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Новый ПолеКомпоновкиДанных("ВалютаУчета");
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Список.ПометкаУдаления");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Метаданные.ЭлементыСтиля.ОсновнойЭлементСписка.Значение, , , , , , Истина));

	// Базовая валюта без пометки на удаление
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Список");

	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Список.Ссылка");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Новый ПолеКомпоновкиДанных("ВалютаУчета");
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Список.ПометкаУдаления");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Метаданные.ЭлементыСтиля.ОсновнойЭлементСписка.Значение);

КонецПроцедуры

&НаКлиенте
Процедура СделатьВалютойУчетаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да И ТипЗнч(ДополнительныеПараметры) = Тип("СправочникСсылка.Валюты") Тогда
		Состояние(НСтр("ru = 'Устанавливается новая валюта учета...'"));
		ИзменитьВалютуУчетаНаСервере(ДополнительныеПараметры);
		Оповестить("Изменена валюта учета", ДополнительныеПараметры);
		Если ВалютаУчета = ДополнительныеПараметры Тогда
			ТексСообщения = НСтр("ru = 'Валюта учета успешно заменена на %1'");
			ТексСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТексСообщения, ДополнительныеПараметры);
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Валюты: изменение валюты учета'"),
				,
				ТексСообщения,
				БиблиотекаКартинок.Информация32);
		КонецЕсли; 
	КонецЕсли;

	Элементы.ДекорацияИнформацияОВалютеУчета.Заголовок = СформироватьТекстОсновнойВалюты(ВалютаУчета);
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьТекстОсновнойВалюты(Валюта)

	ШрифтОбычный = Новый Шрифт(,10);
	ШрифтЖирный  = Новый Шрифт(,10, Истина);
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Результат = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Валютой учета выбрана'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ШрифтОбычный),
				Новый ФорматированнаяСтрока(" <", ),
				Новый ФорматированнаяСтрока(Строка(Валюта), ШрифтЖирный),
				Новый ФорматированнаяСтрока(">. ", ШрифтОбычный),
				Новый ФорматированнаяСтрока(НСтр("ru = 'В этой валюте рассчитывается финансовый результат и хранятся курсы других валют'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ШрифтОбычный)
				);
		
	Иначе
		Результат = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Не выбрана валюта учета! Выделите в списке нужную валюту и выберите в меню команду'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ШрифтОбычный),
				Новый ФорматированнаяСтрока(" """, ШрифтОбычный),
				Новый ФорматированнаяСтрока(НСтр("ru = 'Назначить валютой учета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ШрифтЖирный),
				Новый ФорматированнаяСтрока(""" ", ШрифтОбычный)
				);
		
	КонецЕсли; 
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура УстранитьРазрывыВДатахКурсов(Команда)
	Состояние(НСтр("ru='Проверка и устранение разрывов в датах курсов валют...'"));
	УстранитьРазрывыВДатахКурсовНаСервере();
	Состояние(НСтр("ru='Даты курсов валют проверены, разрывы устранены.'"));
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстранитьРазрывыВДатахКурсовНаСервере()
	ОбщегоНазначенияДеньги.ПроверитьРазрывыКурсовВалют();
КонецПроцедуры

// Конец ДЕНЬГИ

