
#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущийЭлементЦвета;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	//+++
	//Элементы.ФормаВсеКалендари.Видимость			= Пользователи.ЭтоПолноправныйПользователь();
	//Элементы.ФормаСписокЗаписейКалендаря.Видимость	= Элементы.ФормаВсеКалендари.Видимость;
	//---

	ВосстановитьНастройки();
	ПрочитатьДоступныеКалендари();
	ОбновитьДанныеПланировщикаСервер();
	
	НастроитьВидимостьГруппыСинхронизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ЗаписиКалендаряСотрудника.Форма.НастройкиКалендаря" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НастройкиОтображения, ВыбранноеЗначение);
			СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборЦвета" Тогда
		
		Если ТекущийЭлементЦвета <> Неопределено Тогда
			
			ТекущийЭлементЦвета.Картинка = РаботаСЦветомКлиентСервер.КартинкаЦветаПоНомеруКартинки(ВыбранноеЗначение);
			Индекс = Число(Сред(ТекущийЭлементЦвета.Имя, СтрДлина("ЦветКалендарь_")+1));
			ТекКалендарь = ДоступныеКалендари[Индекс];
			ТекКалендарь.ВариантЦвета = ВыбранноеЗначение;
			
			Если ТекКалендарь.Выбран Тогда
				СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ИсточникЗаписейКалендаряСотрудника"
		Или ИмяСобытия = "Запись_ЗаписиКалендаряПодготовкиОтчетности" Тогда
		
		ОбновитьДанныеПланировщикаСервер();
		
	ИначеЕсли ИмяСобытия = "Запись_КалендарьСотрудника" Тогда
		
		ОбработатьЗаписьКалендаряСервер();
		
	ИначеЕсли ИмяСобытия = "ОчиститьСеансовыеДанные" Тогда
		
		СеансовыеДанные = Новый Структура;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВариантПериодаПриИзменении(Элемент)
	
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериода(ЭтотОбъект);
	Элементы.ДатаОтображения.Обновить();
	
	СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтображенияПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеПланировщикаКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтображенияПриАктивизацииДаты(Элемент)
	
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериода(ЭтотОбъект);
	Элементы.ДатаОтображения.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	//+++
	////СтандартнаяОбработка = Ложь;
	////
	////ВыбранныеКалендари = ДоступныеКалендари.НайтиСтроки(Новый Структура("Выбран", Истина));
	////
	////ЗначенияЗаполнения = Новый Структура;
	////
	////ЗначенияЗаполнения.Вставить("Начало", Начало);
	////ЗначенияЗаполнения.Вставить("Окончание", Конец);
	////
	////Если ВыбранныеКалендари.Количество() = 1 Тогда
	////	ЗначенияЗаполнения.Вставить("Календарь", ВыбранныеКалендари[0].Календарь);
	////КонецЕсли;
	////
	////ПараметрыФормы = Новый Структура;
	////ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	////ОткрытьФорму("Справочник.ЗаписиКалендаряСотрудника.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
	СтандартнаяОбработка = Ложь;
	
	ВыбранныеКалендари = ДоступныеКалендари.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Начало", Начало);
	ЗначенияЗаполнения.Вставить("Окончание", Конец);
	
	ЗначенияЗаполнения.Вставить("Дата"			, Начало);
	ЗначенияЗаполнения.Вставить("ДатаОкончание"	, Конец);
	
	Если ВыбранныеКалендари.Количество() = 1 Тогда
		ЗначенияЗаполнения.Вставить("Календарь", ВыбранныеКалендари[0].Календарь);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ЗаписиКалендаряСотрудника.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
	//ОткрытьФорму("Документ.дДневник.Форма.ФормаДокументаПростая", ПараметрыФормы, ЭтотОбъект);
	//---
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	ОбрабатываемыеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
		
		Если ВыделенныйЭлемент.Значение.РедактированиеЗапрещено Тогда
			ОтменаРедактирования = Истина;
			Возврат;
		КонецЕсли;
		
		ОбрабатываемыйЭлемент = Новый Структура;
		ОбрабатываемыйЭлемент.Вставить("ЗаписьКалендаря",		ВыделенныйЭлемент.Значение.ЗаписьКалендаря);
		ОбрабатываемыйЭлемент.Вставить("Источник",				ВыделенныйЭлемент.Значение.Источник);
		ОбрабатываемыйЭлемент.Вставить("НомерСтрокиИсточника",	ВыделенныйЭлемент.Значение.НомерСтрокиИсточника);
		ОбрабатываемыйЭлемент.Вставить("Начало",				ВыделенныйЭлемент.Начало);
		ОбрабатываемыйЭлемент.Вставить("Конец",					ВыделенныйЭлемент.Конец);
		
		ОбрабатываемыеЭлементы.Добавить(ОбрабатываемыйЭлемент);
		
	КонецЦикла;
	
	ОтменаРедактирования = Не СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуТекущегоЭлементаПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	
	ОбрабатываемыеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
		
		Если ВыделенныйЭлемент.Значение.РедактированиеЗапрещено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ОбрабатываемыйЭлемент = Новый Структура;
		ОбрабатываемыйЭлемент.Вставить("ЗаписьКалендаря",		ВыделенныйЭлемент.Значение.ЗаписьКалендаря);
		ОбрабатываемыйЭлемент.Вставить("Источник",				ВыделенныйЭлемент.Значение.Источник);
		ОбрабатываемыйЭлемент.Вставить("НомерСтрокиИсточника",	ВыделенныйЭлемент.Значение.НомерСтрокиИсточника);
		ОбрабатываемыйЭлемент.Вставить("ПометкаУдаления",		Истина);
		
		ОбрабатываемыеЭлементы.Добавить(ОбрабатываемыйЭлемент);
		
	КонецЦикла;
	
	Отказ = Не СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	
	Если ВариантПериода = "Месяц" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Если ТекущиеПериодыОтображения[0].Начало = НачалоДня(ТекущаяДатаСеанса) Тогда
			ДатаОтображения = ТекущаяДатаСеанса;
		ИначеЕсли ТекущиеПериодыОтображения[0].Начало < Планировщик.ТекущиеПериодыОтображения[0].Начало Тогда
			ДатаОтображения = ДобавитьМесяц(ДатаОтображения, -1);
		ИначеЕсли ТекущиеПериодыОтображения[0].Начало > Планировщик.ТекущиеПериодыОтображения[0].Начало Тогда
			ДатаОтображения = ДобавитьМесяц(ДатаОтображения, 1);
		КонецЕсли;
		
		ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
		Планировщик.ТекущиеПериодыОтображения.Очистить();
		Планировщик.ТекущиеПериодыОтображения.Добавить(ПериодДанных.ДатаНачала, ПериодДанных.ДатаОкончания);
		
		Планировщик.ИнтервалыФона.Очистить();
		Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоМесяца(ДатаОтображения), КонецМесяца(ДатаОтображения));
		Интервал.Цвет = Новый Цвет(250, 250, 250);
		Если НастройкиОтображения.ОтображатьТекущуюДату Тогда
			Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДатаСеанса), КонецДня(ТекущаяДатаСеанса));
			Интервал.Цвет = Новый Цвет(223, 255, 223);
		КонецЕсли;
		
	Иначе
		
		ДатаОтображения = ТекущиеПериодыОтображения[0].Начало;
		
	КонецЕсли;
	
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериода(ЭтотОбъект);
	Элементы.ДатаОтображения.Обновить();
	ПодключитьОбработчикОжидания("ОбновитьДанныеПланировщикаКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуТекущегоЭлементаПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбранКалендарьПриИзменении(Элемент)
	
	СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЦветКалендарьНажатие(Элемент)
	
	ТекущийЭлементЦвета = Элемент;
	ОткрытьФорму("ОбщаяФорма.ВыборЦвета", , ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура Настроить(Команда)
	
	ОткрытьФорму("Справочник.ЗаписиКалендаряСотрудника.Форма.НастройкиКалендаря", Новый Структура("НастройкиОтображения", НастройкиОтображения), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКалендарь(Команда)
	
	ОткрытьФорму("Справочник.КалендариСотрудников.ФормаОбъекта", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Синхронизировать(Команда)
	
	СинхронизироватьНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//+++

&НаСервереБезКонтекста
Функция ПолучитьДанныеДневника(пДневник)

	лТипЗаписиДневника 	= Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	дДневник.ТипЗаписиДневника КАК ТипЗаписиДневника
	|ИЗ
	|	Документ.дДневник КАК дДневник
	|ГДЕ
	|	дДневник.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка"	, пДневник); 
	
	РезультатЗапроса 		= Запрос.Выполнить();
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		лТипЗаписиДневника 	= ВыборкаДетальныеЗаписи.ТипЗаписиДневника;
		Прервать;
	КонецЦикла;
	
	Возврат лТипЗаписиДневника;

КонецФункции // ПолучитьДанныеДневника()
 

//---
&НаКлиенте
Процедура ОткрытьФормуТекущегоЭлементаПланировщика()
	
	ЗначениеЭлемента = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	
	//+++
	////Если ЗначениеЗаполнено(ЗначениеЭлемента.Источник)
	////	И ТипЗнч(ЗначениеЭлемента.Источник) = Тип("СправочникСсылка.ЗаписиКалендаряПодготовкиОтчетности")
	////	И ЗначениеЭлемента.Календарь = ПредопределенноеЗначение("Справочник.КалендариСотрудников.КалендарьНалогов") Тогда
	
	Если Ложь Тогда
	//---
		
		ДанныеФормыЗадачи = ПолучитьДанныеФормыЗадачи(ЗначениеЭлемента.Источник);
		Если Не ПустаяСтрока(ДанныеФормыЗадачи.ИмяФормы) Тогда
			ОткрытьФорму(ДанныеФормыЗадачи.ИмяФормы, ДанныеФормыЗадачи.ПараметрыФормы);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеЭлемента.Источник) Тогда
		//+++
		Если ТипЗнч(ЗначениеЭлемента.Источник) = Тип("ДокументСсылка.дДневник") Тогда
			лТипЗаписиДневника 		= ПолучитьДанныеДневника(ЗначениеЭлемента.Источник);
			Если лТипЗаписиДневника = ПредопределенноеЗначение("Перечисление.дТипЗаписиДневника.Заметка") Тогда
				ОткрытьФорму("Документ.дДневник.Форма.ФормаДокументаПростая", Новый Структура("Ключ", ЗначениеЭлемента.Источник), ЭтотОбъект);
			ИначеЕсли лТипЗаписиДневника = ПредопределенноеЗначение("Перечисление.дТипЗаписиДневника.Запись") Тогда
				ОткрытьФорму("Документ.дДневник.Форма.ФормаДокумента", Новый Структура("Ключ", ЗначениеЭлемента.Источник), ЭтотОбъект);
			ИначеЕсли лТипЗаписиДневника = ПредопределенноеЗначение("Перечисление.дТипЗаписиДневника.Результат") Тогда
				ОткрытьФорму("Документ.дДневник.Форма.ФормаДокумента", Новый Структура("Ключ, ВкладкаРезультат", ЗначениеЭлемента.Источник, Истина), ЭтотОбъект);
			Иначе
				ОткрытьФорму("Документ.дДневник.Форма.ФормаДокумента", Новый Структура("Ключ", ЗначениеЭлемента.Источник), ЭтотОбъект);
			КонецЕсли;
		Иначе
			ПоказатьЗначение(,ЗначениеЭлемента.Источник);
		КонецЕсли; 
		//---
		                      
	ИначеЕсли Не ЗначениеЗаполнено(ЗначениеЭлемента.Источник) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ЗначениеЭлемента.ЗаписьКалендаря);
		ОткрытьФорму("Справочник.ЗаписиКалендаряСотрудника.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФормыЗадачи(ЗаписьКалендаряНалоговойОтчетности)
	
	Результат = Новый Структура("ИмяФормы, ПараметрыФормы", "", Новый Структура);
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаписьКалендаряНалоговойОтчетности, "Состояние,Организация,СобытиеКалендаря");
	
	Если Не ЗначениеЗаполнено(ЗначенияРеквизитов.СобытиеКалендаря) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ПараметрыФормы.Вставить("Состояние", ЗначенияРеквизитов.Состояние);
	Результат.ПараметрыФормы.Вставить("Организация", ЗначенияРеквизитов.Организация);
	Результат.ПараметрыФормы.Вставить("СобытиеКалендаря", ЗначенияРеквизитов.СобытиеКалендаря);
	
	Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитов.СобытиеКалендаря, "Задача");
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ИмяФормы = Справочники.ЗаписиКалендаряПодготовкиОтчетности.ПолучитьИмяФормыПоЗадачеИСостоянию(Задача, ЗначенияРеквизитов.Состояние);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВосстановитьНастройки()
	
	ВариантПериода = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"ВариантПериода",
		Элементы.ВариантПериода.СписокВыбора[0].Значение
	);
	
	НастройкиОтображения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"Отображение",
		Неопределено
	);
	
	Если НастройкиОтображения = Неопределено Тогда
		
		НастройкиОтображения = Новый Структура;
		НастройкиОтображения.Вставить("НачалоРабочегоДня",		0);
		НастройкиОтображения.Вставить("ОкончаниеРабочегоДня",	23);
		НастройкиОтображения.Вставить("ОтображатьТекущуюДату",	Истина);
		
	КонецЕсли;
	
	Планировщик.ШкалаВремени.Элементы[0].ФорматДня = ФорматДняШкалыВремени.ДеньМесяцаДеньНедели;
	
	ДатаОтображения = ТекущаяДатаСеанса();
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериода(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиИОбновитьДанныеПланировщикаСервер()
	
	СохранитьНастройки();
	ОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"ВариантПериода",
		ВариантПериода
	);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"Отображение",
		НастройкиОтображения
	);
	
	СохранитьНастройкиДоступныхКалендарей();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиДоступныхКалендарей()
	
	НастройкиДоступныхКалендарей = РеквизитФормыВЗначение("ДоступныеКалендари");
	НастройкиДоступныхКалендарей.Колонки.Удалить("Наименование");
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"ДоступныеКалендари",
		НастройкиДоступныхКалендарей
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПланировщикаСервер()
	
	Планировщик.Элементы.Очистить();
	Планировщик.ИнтервалыФона.Очистить();
	
	УстановитьОтображениеПланировщика();
	
	ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
	
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Планировщик.ТекущиеПериодыОтображения.Добавить(ПериодДанных.ДатаНачала, ПериодДанных.ДатаОкончания);
	
	ВыбранныеКалендари = Новый Массив;
	Для Каждого СтрокаКалендаря Из ДоступныеКалендари Цикл
		Если СтрокаКалендаря.Выбран Тогда
			ВыбранныеКалендари.Добавить(СтрокаКалендаря.Календарь);
		КонецЕсли;
	КонецЦикла;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//	|	ЗаписиКалендаря.Источник КАК Источник
	//	|ПОМЕСТИТЬ втИсточники
	//	|ИЗ
	//	|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаря
	//	|ГДЕ
	//	|	ЗаписиКалендаря.ПометкаУдаления = ЛОЖЬ
	//	|	И ЗаписиКалендаря.Начало < &ДатаОкончания
	//	|	И ЗаписиКалендаря.Окончание > &ДатаНачала
	//	|	И ЗаписиКалендаря.Календарь В(&ВыбранныеКалендари)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	Событие.Ссылка КАК Ссылка
	//	|ПОМЕСТИТЬ втРазрешенныеИсточники
	//	|ИЗ
	//	|	Документ.Событие КАК Событие
	//	|ГДЕ
	//	|	Событие.Ссылка В
	//	|			(ВЫБРАТЬ
	//	|				втИсточники.Источник
	//	|			ИЗ
	//	|				втИсточники)
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ЗаданиеНаРаботу.Ссылка
	//	|ИЗ
	//	|	Документ.ЗаданиеНаРаботу КАК ЗаданиеНаРаботу
	//	|ГДЕ
	//	|	ЗаданиеНаРаботу.Ссылка В
	//	|			(ВЫБРАТЬ
	//	|				втИсточники.Источник
	//	|			ИЗ
	//	|				втИсточники)
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ЗаписиКалендаряПодготовкиОтчетности.Ссылка
	//	|ИЗ
	//	|	Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	//	|ГДЕ
	//	|	ЗаписиКалендаряПодготовкиОтчетности.Ссылка В
	//	|			(ВЫБРАТЬ
	//	|				втИсточники.Источник
	//	|			ИЗ
	//	|				втИсточники)
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	НЕОПРЕДЕЛЕНО
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ЗаказНаПроизводство.Ссылка
	//	|ИЗ
	//	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	//	|ГДЕ
	//	|	ЗаказНаПроизводство.Ссылка В
	//	|			(ВЫБРАТЬ
	//	|				втИсточники.Источник
	//	|			ИЗ
	//	|				втИсточники)
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ЗаказПокупателя.Ссылка
	//	|ИЗ
	//	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	//	|ГДЕ
	//	|	ЗаказПокупателя.Ссылка В
	//	|			(ВЫБРАТЬ
	//	|				втИсточники.Источник
	//	|			ИЗ
	//	|				втИсточники)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ЗаписиКалендаряСотрудника.Ссылка КАК ЗаписьКалендаря,
	//	|	ЗаписиКалендаряСотрудника.Наименование КАК Наименование,
	//	|	ЗаписиКалендаряСотрудника.Начало КАК Начало,
	//	|	ЗаписиКалендаряСотрудника.Окончание КАК Конец,
	//	|	ЗаписиКалендаряСотрудника.Описание КАК Описание,
	//	|	ЗаписиКалендаряСотрудника.Источник КАК Источник,
	//	|	ЗаписиКалендаряСотрудника.НомерСтрокиИсточника КАК НомерСтрокиИсточника,
	//	|	ЗаписиКалендаряСотрудника.Календарь КАК Календарь,
	//	|	ЗаписиКалендаряСотрудника.РедактированиеЗапрещено КАК РедактированиеЗапрещено
	//	|ИЗ
	//	|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
	//	|ГДЕ
	//	|	ЗаписиКалендаряСотрудника.Источник В
	//	|			(ВЫБРАТЬ
	//	|				втРазрешенныеИсточники.Ссылка
	//	|			ИЗ
	//	|				втРазрешенныеИсточники)
	//	|	И ЗаписиКалендаряСотрудника.ПометкаУдаления = ЛОЖЬ
	//	|	И ЗаписиКалендаряСотрудника.Начало < &ДатаОкончания
	//	|	И ЗаписиКалендаряСотрудника.Окончание > &ДатаНачала
	//	|	И ЗаписиКалендаряСотрудника.Календарь В(&ВыбранныеКалендари)
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Начало";
	
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		//|	ЗаписиКалендаря.Источник КАК Источник
		//|ПОМЕСТИТЬ втИсточники
		//|ИЗ
		//|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаря
		//|ГДЕ
		//|	ЗаписиКалендаря.ПометкаУдаления = ЛОЖЬ
		//|	И ЗаписиКалендаря.Начало < &ДатаОкончания
		//|	И ЗаписиКалендаря.Окончание > &ДатаНачала
		//|	И ЗаписиКалендаря.Календарь В(&ВыбранныеКалендари)
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	Событие.Ссылка КАК Ссылка
		//|ПОМЕСТИТЬ втРазрешенныеИсточники
		//|ИЗ
		//|	Документ.дДневник КАК Событие
		//|ГДЕ
		//|	Событие.Ссылка В
		//|			(ВЫБРАТЬ
		//|				втИсточники.Источник
		//|			ИЗ
		//|				втИсточники)
		//|
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	ЗаписиКалендаряСотрудника.Ссылка КАК ЗаписьКалендаря,
		//|	ЗаписиКалендаряСотрудника.Наименование КАК Наименование,
		//|	ЗаписиКалендаряСотрудника.Начало КАК Начало,
		//|	ЗаписиКалендаряСотрудника.Окончание КАК Конец,
		//|	ЗаписиКалендаряСотрудника.Описание КАК Описание,
		//|	ЗаписиКалендаряСотрудника.Источник КАК Источник,
		//|	ЗаписиКалендаряСотрудника.НомерСтрокиИсточника КАК НомерСтрокиИсточника,
		//|	ЗаписиКалендаряСотрудника.Календарь КАК Календарь,
		//|	ЗаписиКалендаряСотрудника.РедактированиеЗапрещено КАК РедактированиеЗапрещено
		//|ИЗ
		//|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
		//|ГДЕ
		//|	ЗаписиКалендаряСотрудника.Источник В
		//|			(ВЫБРАТЬ
		//|				втРазрешенныеИсточники.Ссылка
		//|			ИЗ
		//|				втРазрешенныеИсточники)
		//|	И ЗаписиКалендаряСотрудника.ПометкаУдаления = ЛОЖЬ
		//|	И ЗаписиКалендаряСотрудника.Начало < &ДатаОкончания
		//|	И ЗаписиКалендаряСотрудника.Окончание > &ДатаНачала
		//|	И ЗаписиКалендаряСотрудника.Календарь В(&ВыбранныеКалендари)
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	Начало";

	
	//+++
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//	|	ЗаписиКалендаря.Источник КАК Источник
	//	|ПОМЕСТИТЬ втИсточники
	//	|ИЗ
	//	|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаря
	//	|ГДЕ
	//	|	ЗаписиКалендаря.ПометкаУдаления = ЛОЖЬ
	//	|	И ЗаписиКалендаря.Начало < &ДатаОкончания
	//	|	И ЗаписиКалендаря.Окончание > &ДатаНачала
	//	|	И ЗаписиКалендаря.Календарь В(&ВыбранныеКалендари)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	Событие.Ссылка КАК Ссылка
	//	|ПОМЕСТИТЬ втРазрешенныеИсточники
	//	|ИЗ
	//	|	Документ.дДневник КАК Событие
	//	|ГДЕ
	//	|	Событие.Ссылка В
	//	|			(ВЫБРАТЬ
	//	|				втИсточники.Источник
	//	|			ИЗ
	//	|				втИсточники)
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	НЕОПРЕДЕЛЕНО
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ЗаписиКалендаряСотрудника.Ссылка КАК ЗаписьКалендаря,
	//	|	ЗаписиКалендаряСотрудника.Наименование КАК Наименование,
	//	|	ЗаписиКалендаряСотрудника.Начало КАК Начало,
	//	|	ЗаписиКалендаряСотрудника.Окончание КАК Конец,
	//	|	ЗаписиКалендаряСотрудника.Описание КАК Описание,
	//	|	ЗаписиКалендаряСотрудника.Источник КАК Источник,
	//	|	ЗаписиКалендаряСотрудника.НомерСтрокиИсточника КАК НомерСтрокиИсточника,
	//	|	ЗаписиКалендаряСотрудника.Календарь КАК Календарь,
	//	|	ЗаписиКалендаряСотрудника.РедактированиеЗапрещено КАК РедактированиеЗапрещено
	//	|ИЗ
	//	|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
	//	|ГДЕ
	//	|	ЗаписиКалендаряСотрудника.Источник В
	//	|			(ВЫБРАТЬ
	//	|				втРазрешенныеИсточники.Ссылка
	//	|			ИЗ
	//	|				втРазрешенныеИсточники)
	//	|	И ЗаписиКалендаряСотрудника.ПометкаУдаления = ЛОЖЬ
	//	|	И ЗаписиКалендаряСотрудника.Начало < &ДатаОкончания
	//	|	И ЗаписиКалендаряСотрудника.Окончание > &ДатаНачала
	//	|	И ЗаписиКалендаряСотрудника.Календарь В(&ВыбранныеКалендари)
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Начало";
	//---
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаписиКалендаря.Источник КАК Источник
		|ПОМЕСТИТЬ втИсточники
		|ИЗ
		|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаря
		|ГДЕ
		|	ЗаписиКалендаря.ПометкаУдаления = ЛОЖЬ
		|	И ЗаписиКалендаря.Начало < &ДатаОкончания
		|	И ЗаписиКалендаря.Окончание > &ДатаНачала
		|	И ЗаписиКалендаря.Календарь В(&ВыбранныеКалендари)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Событие.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втРазрешенныеИсточники
		|ИЗ
		|	Документ.дДневник КАК Событие
		|ГДЕ
		|	Событие.Ссылка В
		|			(ВЫБРАТЬ
		|				втИсточники.Источник
		|			ИЗ
		|				втИсточники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&узЗадачи
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаписиКалендаряСотрудника.Ссылка КАК ЗаписьКалендаря,
		|	ЗаписиКалендаряСотрудника.Наименование КАК Наименование,
		|	ЗаписиКалендаряСотрудника.Начало КАК Начало,
		|	ЗаписиКалендаряСотрудника.Окончание КАК Конец,
		|	ЗаписиКалендаряСотрудника.Описание КАК Описание,
		|	ЗаписиКалендаряСотрудника.Источник КАК Источник,
		|	ЗаписиКалендаряСотрудника.НомерСтрокиИсточника КАК НомерСтрокиИсточника,
		|	ЗаписиКалендаряСотрудника.Календарь КАК Календарь,
		|	ЗаписиКалендаряСотрудника.РедактированиеЗапрещено КАК РедактированиеЗапрещено
		|ИЗ
		|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
		|ГДЕ
		|	ЗаписиКалендаряСотрудника.Источник В
		|			(ВЫБРАТЬ
		|				втРазрешенныеИсточники.Ссылка
		|			ИЗ
		|				втРазрешенныеИсточники)
		|	И ЗаписиКалендаряСотрудника.ПометкаУдаления = ЛОЖЬ
		|	И ЗаписиКалендаряСотрудника.Начало < &ДатаОкончания
		|	И ЗаписиКалендаряСотрудника.Окончание > &ДатаНачала
		|	И ЗаписиКалендаряСотрудника.Календарь В(&ВыбранныеКалендари)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начало";
	
	//+++
	Если Метаданные.Справочники.Найти("узЗадачи") <> Неопределено Тогда
		лЗапросЗадачи 	= "
		|	узЗадачи.Ссылка
		|ИЗ
		|	Справочник.узЗадачи КАК узЗадачи
		|ГДЕ
		|	узЗадачи.Ссылка В
		|			(ВЫБРАТЬ
		|				втИсточники.Источник
		|			ИЗ
		|				втИсточники)";
		
		Запрос.Текст 	= СтрЗаменить(Запрос.Текст, "&узЗадачи", лЗапросЗадачи);
	Иначе
		Запрос.Текст 	= СтрЗаменить(Запрос.Текст, "&узЗадачи", "НЕОПРЕДЕЛЕНО");
	КонецЕсли;
	//---
	
	Запрос.УстановитьПараметр("ДатаНачала", ПериодДанных.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодДанных.ДатаОкончания);
	Запрос.УстановитьПараметр("ВыбранныеКалендари", ВыбранныеКалендари);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Отбор = Новый Структура("Календарь");
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементПланировщика = Планировщик.Элементы.Добавить(Выборка.Начало, Выборка.Конец);
		ЭлементПланировщика.Значение = Новый Структура;
		ЭлементПланировщика.Значение.Вставить("Календарь", Выборка.Календарь);
		ЭлементПланировщика.Значение.Вставить("ЗаписьКалендаря", Выборка.ЗаписьКалендаря);
		ЭлементПланировщика.Значение.Вставить("Источник", Выборка.Источник);
		ЭлементПланировщика.Значение.Вставить("РедактированиеЗапрещено", Выборка.РедактированиеЗапрещено);
		ЭлементПланировщика.Значение.Вставить("НомерСтрокиИсточника", Выборка.НомерСтрокиИсточника);
		ЭлементПланировщика.Текст		= Выборка.Наименование;
		ЭлементПланировщика.Подсказка	= Выборка.Описание;
		
		Если ЗначениеЗаполнено(Выборка.Источник) Тогда
			МенеджерИсточника = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Источник);
			ЭлементПланировщика.Картинка = МенеджерИсточника.КартинкаЗаписиКалендаря(Выборка.Источник);
			ЭлементПланировщика.ЦветТекста = МенеджерИсточника.ЦветТекстаЗаписиКалендаря(Выборка.Источник);
		КонецЕсли;
		
		Отбор.Календарь = Выборка.Календарь;
		НайденныеСтроки = ДоступныеКалендари.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЭлементПланировщика.ЦветФона = РаботаСЦветомКлиентСервер.ЦветПоНомеруКартинки(НайденныеСтроки[0].ВариантЦвета);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеПланировщика()
	
	Если ВариантПериода = "День" Тогда
		
		Планировщик.ОтображатьТекущуюДату = НастройкиОтображения.ОтображатьТекущуюДату;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = НастройкиОтображения.НачалоРабочегоДня;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = ?(НастройкиОтображения.ОкончаниеРабочегоДня = 0, 0, 24 - НастройкиОтображения.ОкончаниеРабочегоДня);
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dddd, d MMMM yyyy'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=ЧЧ:мм";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		
		Планировщик.ОтображатьТекущуюДату = НастройкиОтображения.ОтображатьТекущуюДату;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = НастройкиОтображения.НачалоРабочегоДня;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = ?(НастройкиОтображения.ОкончаниеРабочегоДня = 0, 0, 24 - НастройкиОтображения.ОкончаниеРабочегоДня);
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMMM'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=ЧЧ:мм";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		
		Планировщик.ОтображатьТекущуюДату = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта = 7;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMM yyyy'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ='ddd, d MMM yyyy'";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.День;
		
		Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоМесяца(ДатаОтображения), КонецМесяца(ДатаОтображения));
		Интервал.Цвет = Новый Цвет(250, 250, 250);
		Если НастройкиОтображения.ОтображатьТекущуюДату Тогда
			ТекущаяДатаСеанса = ТекущаяДатаСеанса();
			Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДатаСеанса), КонецДня(ТекущаяДатаСеанса));
			Интервал.Цвет = Новый Цвет(223, 255, 223);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПериодДанных(ВариантПериода, ДатаОтображения)
	
	Результат = Новый Структура("ДатаНачала, ДатаОкончания");
	
	Если ВариантПериода = "День" Тогда
		Результат.ДатаНачала	= НачалоДня(ДатаОтображения);
		Результат.ДатаОкончания	= КонецДня(ДатаОтображения);
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		Результат.ДатаНачала	= НачалоНедели(ДатаОтображения);
		Результат.ДатаОкончания	= КонецНедели(ДатаОтображения);
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		Результат.ДатаНачала	= НачалоНедели(НачалоМесяца(ДатаОтображения));
		Результат.ДатаОкончания	= КонецНедели(КонецМесяца(ДатаОтображения));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы)
	
	Возврат Справочники.ЗаписиКалендаряСотрудника.СохранитьИзмененияЗаписейКалендарей(ОбрабатываемыеЭлементы);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВыделитьДатыОтображения(Форма)
	
	ПолеКалендаря = Форма.Элементы.ДатаОтображения;
	
	ПолеКалендаря.ВыделенныеДаты.Очистить();
	
	Если Форма.ВариантПериода = "Месяц" Тогда
		// Для варианта "Месяц" выделенные даты календаря отличаются от фактического периода.
		// Фактический период должен быть кратен 7 дням (недели).
		// Но в поле календаря выделяются даты только в пределах месяца.
		ПериодДанных = Новый Структура("ДатаНачала, ДатаОкончания");
		ПериодДанных.ДатаНачала		= НачалоМесяца(Форма.ДатаОтображения);
		ПериодДанных.ДатаОкончания	= КонецМесяца(Форма.ДатаОтображения);
	Иначе
		ПериодДанных = ПолучитьПериодДанных(Форма.ВариантПериода, Форма.ДатаОтображения);
	КонецЕсли;
	
	ТекДата = ПериодДанных.ДатаНачала;
	
	Пока ТекДата < ПериодДанных.ДатаОкончания Цикл
		ПолеКалендаря.ВыделенныеДаты.Добавить(ТекДата);
		ТекДата = ТекДата + 86400;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПланировщикаКлиент()
	
	ОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДоступныхКалендарей()
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для Каждого ГруппаЭлементов Из Элементы.ДоступныеКалендари.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(ГруппаЭлементов);
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого СтрокаКалендаря Из ДоступныеКалендари Цикл
		
		Индекс = ДоступныеКалендари.Индекс(СтрокаКалендаря);
		
		ГруппаКалендаря = Элементы.Добавить("ГруппаКалендарь_" + Индекс, Тип("ГруппаФормы"), Элементы.ДоступныеКалендари);
		ГруппаКалендаря.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаКалендаря.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаКалендаря.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаКалендаря.ОтображатьЗаголовок = Ложь;
		
		ФлагВыбран = Элементы.Добавить("ВыбранКалендарь_" + Индекс, Тип("ПолеФормы"), ГруппаКалендаря);
		ФлагВыбран.Вид = ВидПоляФормы.ПолеФлажка;
		ФлагВыбран.ПутьКДанным = "ДоступныеКалендари[" + Индекс + "].Выбран";
		ФлагВыбран.Заголовок = СтрокаКалендаря.Наименование;
		ФлагВыбран.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ФлагВыбран.УстановитьДействие("ПриИзменении", "Подключаемый_ВыбранКалендарьПриИзменении");
		
		ДекорацияОтступ = Элементы.Добавить("ОтступКалендарь_" + Индекс, Тип("ДекорацияФормы"), ГруппаКалендаря);
		ДекорацияОтступ.РастягиватьПоГоризонтали = Истина;
		
		КартинкаЦвета = Элементы.Добавить("ЦветКалендарь_" + Индекс, Тип("ДекорацияФормы"), ГруппаКалендаря);
		КартинкаЦвета.Вид = ВидДекорацииФормы.Картинка;
		КартинкаЦвета.Картинка = РаботаСЦветомКлиентСервер.КартинкаЦветаПоНомеруКартинки(СтрокаКалендаря.ВариантЦвета);
		КартинкаЦвета.Гиперссылка = Истина;
		КартинкаЦвета.Ширина = 2;
		КартинкаЦвета.Высота = 1;
		КартинкаЦвета.УстановитьДействие("Нажатие", "Подключаемый_ЦветКалендарьНажатие");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьКалендаряСервер()
	
	ПрочитатьДоступныеКалендари();
	ОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДоступныеКалендари()
	
	ДоступныеКалендари.Очистить();
	
	НастройкиДоступныхКалендарей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"ДоступныеКалендари",
		Новый ТаблицаЗначений
	);
	
	ЗанятыеЦвета = ?(НастройкиДоступныхКалендарей.Количество() = 0, Новый Массив, НастройкиДоступныхКалендарей.ВыгрузитьКолонку("ВариантЦвета"));
	ЕстьНеНазначенныеЦвета = Ложь;
	
	ТаблицаКалендарей = Справочники.КалендариСотрудников.ДоступныеСотрудникуКалендари();
	
	Для Каждого СтрокаТаблицы Из ТаблицаКалендарей Цикл
		
		НоваяСтрока = ДоступныеКалендари.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, "Календарь,Наименование");
		
		НайденнаяСтрока = НастройкиДоступныхКалендарей.Найти(СтрокаТаблицы.Календарь);
		Если НайденнаяСтрока <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока, "ВариантЦвета,Выбран");
		КонецЕсли;
		
		Если НоваяСтрока.ВариантЦвета = 0 Тогда
			ПроверяемыйЦвет = 14;
			Пока Истина Цикл
				Если ЗанятыеЦвета.Найти(ПроверяемыйЦвет) = Неопределено Тогда
					НоваяСтрока.ВариантЦвета = ПроверяемыйЦвет;
					ЕстьНеНазначенныеЦвета = Истина;
					Прервать;
				КонецЕсли;
				ПроверяемыйЦвет = ?(ПроверяемыйЦвет = 24, 1, ПроверяемыйЦвет+1);
			КонецЦикла;
		КонецЕсли;
		
		ЗанятыеЦвета.Добавить(НоваяСтрока.ВариантЦвета);
		Если ЗанятыеЦвета.Количество() = 24 Тогда
			ЗанятыеЦвета.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	Отбор = Новый Структура("Выбран", Истина);
	Если ДоступныеКалендари.НайтиСтроки(Отбор).Количество() = 0 Тогда
		
		Отбор.Удалить("Выбран");
		Отбор.Вставить("Календарь");
		Для Каждого СтрокаКалендаря Из ДоступныеКалендари Цикл
   			Отбор.Календарь = СтрокаКалендаря.Календарь;
			//+++//СтрокаКалендаря.Выбран = ТаблицаКалендарей.НайтиСтроки(Отбор)[0].ЯвляетсяВладельцем;
			Если ЗначениеЗаполнено(ТаблицаКалендарей.НайтиСтроки(Отбор)) Тогда
				СтрокаКалендаря.Выбран = ТаблицаКалендарей.НайтиСтроки(Отбор)[0].ЯвляетсяВладельцем;
			КонецЕсли;//--- 
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьНеНазначенныеЦвета Тогда
		СохранитьНастройкиДоступныхКалендарей();
	КонецЕсли;
	
	ОбновитьЭлементыДоступныхКалендарей();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеПериода(Форма)
	
	Если Форма.ВариантПериода = "День" Тогда
		
		Форма.ПредставлениеПериода = Формат(Форма.ДатаОтображения, "ДФ='дддд, д МММ'");
		
	ИначеЕсли Форма.ВариантПериода = "Неделя" Тогда
		
		ПериодДанных = ПолучитьПериодДанных(Форма.ВариантПериода, Форма.ДатаОтображения);
		Форма.ПредставлениеПериода = СтрШаблон(
			"%1 - %2",
			Формат(ПериодДанных.ДатаНачала, "ДФ='д МММ'"),
			Формат(ПериодДанных.ДатаОкончания, "ДФ='д МММ гггг'")
		);
		
	ИначеЕсли Форма.ВариантПериода = "Месяц" Тогда
		
		Форма.ПредставлениеПериода = ПредставлениеПериода(НачалоМесяца(Форма.ДатаОтображения), КонецМесяца(Форма.ДатаОтображения));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменСGoogle

&НаСервере
Процедура НастроитьВидимостьГруппыСинхронизировать()
	
	ОтключенныеОбластиДоступа = РегистрыСведений.СеансовыеДанныеGoogle.ОтключенныеОбластиДоступа(Пользователи.ТекущийПользователь());
	
	Элементы.ГруппаСинхронизировать.Видимость = ОтключенныеОбластиДоступа.Найти(Перечисления.ОбластиДоступаGoogle.Календарь) = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьНаКлиенте()
	
	Элементы.ГруппаСинхронизировать.ТекущаяСтраница = Элементы.ГруппаПрогрессСинхронизации;
	ПодключитьОбработчикОжидания("ПродолжитьСинхронизироватьНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСинхронизироватьНаКлиенте()
	
	Задание = ЗаданиеСинхронизироватьНаСервере();
	
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		НачатьАвторизацию();
	КонецЕсли;
	
	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеСинхронизации", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьАвторизацию()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатЗапросаТокена", ЭтотОбъект);
	ОткрытьФорму(
	"РегистрСведений.СеансовыеДанныеGoogle.Форма.ЗапросТокена",
	Новый Структура("ОписанияОбластейДоступа", ОбменСGoogleКлиентСервер.ОписанияОбластейДоступаКалендарь()),
	ЭтаФорма,,,,
	ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаТокена(Результат, Параметры) Экспорт
	
	СеансовыеДанные = Результат;
	
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		Элементы.ГруппаСинхронизировать.ТекущаяСтраница = Элементы.ГруппаКомандаСинхронизировать;
		Возврат;
	КонецЕсли;
	
	СинхронизироватьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеСинхронизации(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Свойство("Статус") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСинхронизировать.ТекущаяСтраница = Элементы.ГруппаКомандаСинхронизировать;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ОповеститьОбИзменении(Тип("СправочникСсылка.ЗаписиКалендаряСотрудника"));
		ОповеститьОбИзменении(Тип("СправочникСсылка.КалендариСотрудников"));
		ОбработатьЗаписьКалендаряСервер();
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаданиеСинхронизироватьНаСервере()
	
	// Здесь у функции есть побочный эффект - инициализация сеансовых данных.
	// Так сделано для экономии серверного вызова.
	ОбменСGoogle.ИнициализироватьУзелПланаОбменаДляКалендаряGoogle();
	ОбменСGoogle.ИнициализироватьСеансовыеДанные(
	СеансовыеДанные,
	Пользователи.ТекущийПользователь(),
	Перечисления.ОбластиДоступаGoogle.Календарь);
	
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
	"ОбменСGoogle.СинхронизироватьGoogleCalendar",
	СеансовыеДанные,
	ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
