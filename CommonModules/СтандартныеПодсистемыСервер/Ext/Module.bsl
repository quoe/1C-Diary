#Область ПрограммныйИнтерфейс

///////////////////////////////////////////////////////////////////////////////
// Инициализации параметров сеанса.

// Вызов этой процедуры необходимо разместить в модуле сеанса в процедуре УстановкаПараметровСеанса
// согласно документации.
//
// Параметры:
//  ИменаПараметровСеанса - Массив, Неопределено - имена параметров сеанса для инициализации.
//                                                 Массив устанавливаемых идентификаторов параметров сеанса,
//                                                 которые нужно инициализировать, если обработчик вызывается
//                                                 перед использованием неинициализированных параметров сеанса.
//                                                 Неопределено, если обработчик события вызывается системой при начале сеанса.
//
// Возвращаемое значение:
//  Массив - имена параметров сеанса, значения которых были успешно установлены.
//
Функция УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт
	
	// Параметры сеанса, инициализация которых требует обращения к одним и тем же данным
	// следует инициализировать сразу группой. Для того, чтобы избежать их повторной инициализации,
	// имена уже установленных параметров сеанса сохраняются в массиве УстановленныеПараметры.
	УстановленныеПараметры = Новый Массив;
	
	Если ИменаПараметровСеанса = Неопределено Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(Новый Соответствие);
		Справочники.ВерсииРасширений.УстановкаПараметровСеанса(ИменаПараметровСеанса, УстановленныеПараметры);
		
		// При установке соединения с информационной базой до вызова всех остальных обработчиков.
		ПередЗапускомПрограммы();
		Возврат УстановленныеПараметры;
	КонецЕсли;
	
	Если ИменаПараметровСеанса.Найти("ПараметрыКлиентаНаСервере") <> Неопределено Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(Новый Соответствие);
		УстановленныеПараметры.Добавить("ПараметрыКлиентаНаСервере");
	КонецЕсли;
	
	//+++ КучеровРМ 26.02.2022
	Если ИменаПараметровСеанса.Найти("КлючДанныхПовторногоИспользования") <> Неопределено Тогда
		ПараметрыСеанса.КлючДанныхПовторногоИспользования = Новый УникальныйИдентификатор;
		УстановленныеПараметры.Добавить("КлючДанныхПовторногоИспользования");
	КонецЕсли;
	//--- КучеровРМ 26.02.2022
	
	Справочники.ВерсииРасширений.УстановкаПараметровСеанса(ИменаПараметровСеанса, УстановленныеПараметры);
	
	Если ИменаПараметровСеанса.Найти("БуферОбмена") <> Неопределено Тогда
		ПараметрыСеанса.БуферОбмена = Новый ФиксированнаяСтруктура(Новый Структура("Источник, Данные"));
		УстановленныеПараметры.Добавить("БуферОбмена");
	КонецЕсли;
	
	Обработчики = Новый Соответствие;
	ИнтеграцияПодсистемБСП.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	
	ОбработчикиСобственные = Новый Соответствие;
	ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса(ОбработчикиСобственные);
	Для Каждого Запись Из ОбработчикиСобственные Цикл
		Обработчики.Вставить(Запись.Ключ, Запись.Значение);
	КонецЦикла;
	
	ВыполнитьОбработчикиУстановкиПараметровСеанса(ИменаПараметровСеанса, Обработчики, УстановленныеПараметры);
	Возврат УстановленныеПараметры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Дополнительные процедуры и функции.

// Возвращает признак, является ли конфигурация базовой.
// Базовые версии конфигураций могут иметь программные ограничения, действие которых
// можно предусмотреть с помощью этой функции.
// Конфигурация считается базовой, если в ее имени есть термин "Базовая",
// например, "УправлениеТорговлейБазовая".
//
// Возвращаемое значение:
//   Булево - Истина, если конфигурация - базовая.
//
Функция ЭтоБазоваяВерсияКонфигурации() Экспорт
	
	// ДЕНЬГИ
	// Причина изменений:
	//	Конфигурация поставляется только в базовой версии и в названии не имеет ключевого слова
	// Вместо строк:
	//Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;
	// Добавлено:
	Возврат Истина;
	// Конец ДЕНЬГИ	
	
КонецФункции

// Обновляет кэши свойств метаданных, позволяющие ускорить
// открытие сеанса, а также обновление ИБ, особенно в модели сервиса.
// Их обновление происходит до обновления ИБ.
//
// Для использования в других библиотеках и конфигурациях.
//
Процедура ОбновитьВсеПараметрыРаботыПрограммы() Экспорт
	
	РегистрыСведений.ПараметрыРаботыПрограммы.ОбновитьВсеПараметрыРаботыПрограммы();
	
КонецПроцедуры

// Возвращает номер версии Библиотеки стандартных подсистем (БСП),
// встроенной в конфигурацию.
//
// Возвращаемое значение:
//  Строка - версия БСП, например "1.0.1.1".
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат СтандартныеПодсистемыПовтИсп.ОписанияПодсистем().ПоИменам["СтандартныеПодсистемы"].Версия;
	
КонецФункции

// Получает уникальный идентификатор информационной базы,
// с помощью которого можно различать различные экземпляры информационных баз,
// например, при сборе статистики или в механизмах внешнего управления базами.
// Если идентификатор не заполнен, то его значение автоматически устанавливается и возвращается.
//
// Идентификатор хранится в константе ИдентификаторИнформационнойБазы.
// Константа ИдентификаторИнформационнойБазы не должна входить в составы планов обмена, чтобы иметь
// различные значения в каждой информационной базе (узле РИБ).
//
// Возвращаемое значение:
//  Строка - идентификатор информационной базы.
//
Функция ИдентификаторИнформационнойБазы() Экспорт
	
	ИдентификаторИнформационнойБазы = Константы.ИдентификаторИнформационнойБазы.Получить();
	
	Если ПустаяСтрока(ИдентификаторИнформационнойБазы) Тогда
		
		ИдентификаторИнформационнойБазы = Строка(Новый УникальныйИдентификатор());
		Константы.ИдентификаторИнформационнойБазы.Установить(ИдентификаторИнформационнойБазы);
		
	КонецЕсли;
	
	Возврат ИдентификаторИнформационнойБазы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Параметры администрирования информационной базы и кластера серверов.

// Возвращает сохраненные в информационной базы параметры администрирования.
// Предназначена для использования в механизмах, требующих для свой работы
// ввода параметров администрирования информационной базы и/или кластера серверов.
// Например, блокировка установки соединений с информационной базой.
// См. так же УстановитьПараметрыАдминистрирования.
//
// Возвращаемое значение:
//  Структура - содержит свойства двух структур
//              АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера 
//              и АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера.
//              При этом поля, содержащие пароли, возвращаются пустыми. Если параметры администрирования
//              не были ранее сохранены при помощи функции УстановитьПараметрыАдминистрирования
//              то буду возвращены автоматически вычисленные параметры администрирования по-умолчанию.
//
Функция ПараметрыАдминистрирования() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено()
	   И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
			ВызватьИсключение НСтр("ru ='Недостаточно прав для выполнения операции'");
		КонецЕсли;
	Иначе
		Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
			ВызватьИсключение НСтр("ru ='Недостаточно прав для выполнения операции'");
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАдминистрированияИБ = Константы.ПараметрыАдминистрированияИБ.Получить().Получить();
	ПараметрыАдминистрированияПоУмолчанию = ПараметрыАдминистрированияПоУмолчанию();
	
	Если ТипЗнч(ПараметрыАдминистрированияИБ) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыАдминистрированияПоУмолчанию, ПараметрыАдминистрированияИБ);
	КонецЕсли;
	ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияПоУмолчанию;
	
	Если Не ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ПрочитатьПараметрыИзСтрокиСоединения(ПараметрыАдминистрированияИБ);
	КонецЕсли;
	
	Возврат ПараметрыАдминистрированияИБ;
	
КонецФункции

// Сохраняет параметры администрирования информационной базы и кластера серверов.
// При сохранении поля, содержащие пароли, будут очищены в целях безопасности.
//
// Параметры:
//  ПараметрыАдминистрированияИБ - Структура - см. функция ПараметрыАдминистрирования.
//
// Пример:
//  ПараметрыАдминистрирования = СтандартныеПодсистемыСервер.ПараметрыАдминистрирования();
//  // Вывод параметров администрирования администратору для подтверждения корректности и ввода паролей.
//  // Далее выполнение действий, связанных с подключением к кластеру серверов.
//  СтандартныеПодсистемыСервер.ПараметрыАдминистрирования(ПараметрыАдминистрирования);
//
Процедура УстановитьПараметрыАдминистрирования(ПараметрыАдминистрированияИБ) Экспорт
	
	ПараметрыАдминистрированияИБ.ПарольАдминистратораКластера = "";
	ПараметрыАдминистрированияИБ.ПарольАдминистратораИнформационнойБазы = "";
	Константы.ПараметрыАдминистрированияИБ.Установить(Новый ХранилищеЗначения(ПараметрыАдминистрированияИБ));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с формами.

// Устанавливает жирное оформление шрифта заголовков групп формы для их корректного отображения в интерфейсе 8.2.
// В интерфейсе Такси заголовки групп с обычным выделением и без выделения выводится большим шрифтом.
// В интерфейсе 8.2 такие заголовки выводятся как обычные надписи и не ассоциируются с заголовками.
// Эта функция предназначена для визуального выделения (жирным шрифтом) заголовков групп в режиме интерфейса 8.2.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для изменения шрифта заголовков групп;
//  ИменаГрупп - Строка - список имен групп формы, разделенных запятыми. Если имена групп не указаны,
//                        то оформление будет применено ко всем группам на форме.
//
// Пример:
//  Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//    СтандартныеПодсистемыСервер.УстановитьОтображениеЗаголовковГрупп(ЭтотОбъект);
//
Процедура УстановитьОтображениеЗаголовковГрупп(Форма, ИменаГрупп = "") Экспорт
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		ЖирныйШрифт = Новый Шрифт(,, Истина);
		Если НЕ ЗначениеЗаполнено(ИменаГрупп) Тогда 
			Для Каждого Элемент Из Форма.Элементы Цикл 
				Если Тип(Элемент) = Тип("ГруппаФормы")
					И Элемент.Вид = ВидГруппыФормы.ОбычнаяГруппа
					И Элемент.ОтображатьЗаголовок = Истина 
					И (Элемент.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение
					Или Элемент.Отображение = ОтображениеОбычнойГруппы.Нет) Тогда 
						Элемент.ШрифтЗаголовка = ЖирныйШрифт;
				КонецЕсли;
			КонецЦикла;
		Иначе
			МассивЗаголовков = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаГрупп,,, Истина);
			Для Каждого ИмяЗаголовка Из МассивЗаголовков Цикл
				Элемент = Форма.Элементы[ИмяЗаголовка];
				Если Элемент.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение ИЛИ Элемент.Отображение = ОтображениеОбычнойГруппы.Нет Тогда 
					Элемент.ШрифтЗаголовка = ЖирныйШрифт;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Устанавливает представление поля Дата в списках, содержащих реквизит с составом даты Дата и время.
// Подробнее см. стандарт "Поле "Дата" в списках".
//
// Параметры:
//   ЭтотОбъект - УправляемаяФорма - Форма со списком.
//   ПолноеИмяРеквизита - Строка - Полный путь к реквизиту типа "Дата" в формате "<ИмяСписка>.<ИмяПоля>".
//   ИмяЭлемента - Строка - Имя элемента формы, связанного с реквизитом списка типа "Дата".
//
// Пример:
//
//	Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//		СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект);
//
Процедура УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, 
	ПолноеИмяРеквизита = "Список.Дата", ИмяЭлемента = "Дата") Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата",
		"ЭтотОбъект", ЭтотОбъект, Тип("УправляемаяФорма"));
	
	ЧастиПолногоИмени = СтрРазделить(ПолноеИмяРеквизита, ".");
	
	Если ЧастиПолногоИмени.Количество() <> 2 Тогда 
		ОписаниеОшибки = НСтр("ru = 'Недопустимое значение параметра ПолноеИмяРеквизита.
		                            |Имя реквизита должно быть в формате ""<ИмяСписка>.<ИмяПоля>""'");
		Возврат;
	КонецЕсли;
	
	ИмяСписка = ЧастиПолногоИмени[0];
	РеквизитСписок = ЭтотОбъект[ИмяСписка];
	
	Если ТипЗнч(РеквизитСписок) = Тип("ДинамическийСписок") Тогда 
		// ДинамическийСписок позволяет установить условное оформление с помощью собственного компоновщика.
		// При этом параметр ИмяЭлемента игнорируется, потому что компоновщик динамического списка
		// не знает как будут отображены реквизиты списка, потому путем к реквизиту и значения отбора и оформления 
		// является имя реквизита динамического списка.
		УсловноеОформление = РеквизитСписок.УсловноеОформление;
		ПутьКРеквизиту = ЧастиПолногоИмени[1];
		ИмяОформляемогоПоля = ПутьКРеквизиту;
	Иначе 
		// Остальные списки, например, ДанныеФормыДерево:
		// не имеют собственного компоновщика, потому используют компоновщик самой формы.
		УсловноеОформление = ЭтотОбъект.УсловноеОформление;
		ПутьКРеквизиту = ПолноеИмяРеквизита;
		ИмяОформляемогоПоля = ИмяЭлемента;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УсловноеОформление.ИдентификаторПользовательскойНастройки) Тогда
		УсловноеОформление.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	КонецЕсли;
	
	// По умолчанию используется представление "10.06.2012".
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Представление = НСтр("ru = 'Представление даты: ""10.06.2012""'");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДЛФ=D");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяОформляемогоПоля);
	
	// Для сегодняшнего дня используется представления "09:46".
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Представление = НСтр("ru = 'Представление даты сегодня: ""09:46""'");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=ЧЧ:мм");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяОформляемогоПоля);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКРеквизиту);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКРеквизиту);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подтверждение завершения работы программы.

// Получает настройку необходимости выводить подтверждение при завершении работы программы
// для текущего пользователя. Предназначена для использования в форме персональных настроек
// пользователя. Пример использования см. в общей форме _ДемоМоиНастройки.
// 
// Возвращаемое значение:
//   Булево - Если Истина, то пользователю при закрытии программы будет показано
//            окно с подтверждением завершения сеанса.
// 
Функция ЗапрашиватьПодтверждениеПриЗавершенииПрограммы() Экспорт
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы");
	
	Если Результат = Неопределено Тогда
		Результат = ОбщегоНазначения.ОбщиеПараметрыБазовойФункциональности().ЗапрашиватьПодтверждениеПриЗавершенииПрограммы;
		Настройки = Новый Структура("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", Результат);
		ОбщегоНазначения.СохранитьПерсональныеНастройки(Настройки);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать СтандартныеПодсистемыПовтИсп.РежимРегистрацииДанныхДляПланаОбмена.
//
// Параметры:
//  Объект - ОбъектМетаданных - проверяемый объект.
// 
// Возвращаемое значение:
//  Булево - Истина, если объект используется в РИБ только в момент создания начального образа подчиненного узла.
// 
Функция ЭтоОбъектНачальногоОбразаУзлаРИБ(Знач Объект) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп");
		Если МодульОбменДаннымиПовтИсп.АвтономнаяРаботаПоддерживается() Тогда
			РежимРегистрации = СтандартныеПодсистемыПовтИсп.РежимРегистрацииДанныхДляПланаОбмена(
				Объект.ПолноеИмя(), МодульОбменДаннымиПовтИсп.ПланОбменаАвтономнойРаботы());
			Если РежимРегистрации = "АвторегистрацияОтключена" Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет проверку состава плана обмена на наличие обязательных объектов метаданных
// и объектов-исключений из состава плана обмена.
//
// Параметры:
//  ИмяПланаОбмена - Строка, ПланОбменаСсылка - имя плана обмена или ссылка на узел плана обмена,
//                                              для которого необходимо выполнить проверку.
//
Процедура ПроверитьСоставПланаОбмена(Знач ИмяПланаОбмена) Экспорт
	
	Если ТипЗнч(ИмяПланаОбмена) <> Тип("Строка") Тогда
		ИмяПланаОбмена = ИмяПланаОбмена.Метаданные().Имя;
	КонецЕсли;
	
	РаспределеннаяИнформационнаяБаза = Метаданные.ПланыОбмена[ИмяПланаОбмена].РаспределеннаяИнформационнаяБаза;
	СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	
	ВключитьВСостав = Новый Массив;
	ИсключитьИзСостава = Новый Массив;
	ОтключитьАвторегистрацию = Новый Массив;
	
	// Получаем список обязательных объектов и объектов-исключений.
	ОбязательныеОбъекты = Новый Массив;
	ОбъектыИсключения = Новый Массив;
	ОбъектыНачальногоОбраза = Новый Массив;
	
	// Получаем объекты-исключения.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса") Тогда
		МодульОбновлениеИнформационнойБазыСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбновлениеИнформационнойБазыСлужебныйВМоделиСервиса");
		МодульОбновлениеИнформационнойБазыСлужебныйВМоделиСервиса.ПриПолученииОбъектовИсключенийПланаОбмена(ОбъектыИсключения,
			РаспределеннаяИнформационнаяБаза);
	КонецЕсли;
	
	Если РаспределеннаяИнформационнаяБаза Тогда
		
		// Получаем объекты начального образа.
		ОбновлениеИнформационнойБазыСлужебный.ПриПолученииОбъектовНачальногоОбразаПланаОбмена(ОбъектыНачальногоОбраза);
		
		Для Каждого Объект Из ОбъектыНачальногоОбраза Цикл
			
			ОбязательныеОбъекты.Добавить(Объект);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверяем список обязательных объектов для состава плана обмена.
	Для Каждого Объект Из ОбязательныеОбъекты Цикл
		
		Если СоставПланаОбмена.Найти(Объект) = Неопределено Тогда
			
			ВключитьВСостав.Добавить(Объект);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем список объектов-исключений из состава плана обмена.
	Для Каждого Объект Из ОбъектыИсключения Цикл
		
		Если СоставПланаОбмена.Найти(Объект) <> Неопределено Тогда
			
			ИсключитьИзСостава.Добавить(Объект);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем признак авторегистрации.
	// Авторегистрация должна быть отключена у всех объектов начального образа.
	Для Каждого ЭлементСостава Из СоставПланаОбмена Цикл
		
		Если ОбъектыНачальногоОбраза.Найти(ЭлементСостава.Метаданные) <> Неопределено
			И ЭлементСостава.АвтоРегистрация <> АвтоРегистрацияИзменений.Запретить Тогда
			
			ОтключитьАвторегистрацию.Добавить(ЭлементСостава.Метаданные);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Формируем и выводим текст исключения при необходимости.
	Если ВключитьВСостав.Количество() <> 0
		ИЛИ ИсключитьИзСостава.Количество() <> 0
		ИЛИ ОтключитьАвторегистрацию.Количество() <> 0 Тогда
		
		Если ВключитьВСостав.Количество() <> 0 Тогда
			
			ОписаниеИсключения1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В состав плана обмена %1 должны входить следующие объекты метаданных: %2'"),
				ИмяПланаОбмена,
				СтрСоединить(ПредставлениеОбъектовМетаданных(ВключитьВСостав), ", "));
			
		КонецЕсли;
		
		Если ИсключитьИзСостава.Количество() <> 0 Тогда
			
			ОписаниеИсключения2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В состав плана обмена %1 НЕ должны входить следующие объекты метаданных: %2'"),
				ИмяПланаОбмена,
				СтрСоединить(ПредставлениеОбъектовМетаданных(ИсключитьИзСостава), ", "));
			
		КонецЕсли;
		
		Если ОтключитьАвторегистрацию.Количество() <> 0 Тогда
			
			ОписаниеИсключения3 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В составе плана обмена %1 не должно быть объектов с установленным признаком авторегистрации.
					|Требуется запретить авторегистрацию для следующих объектов метаданных: %2'"),
				ИмяПланаОбмена,
				СтрСоединить(ПредставлениеОбъектовМетаданных(ОтключитьАвторегистрацию), ", "));
			
		КонецЕсли;
		
		ОписаниеИсключения = "[ОписаниеИсключения1]
		|
		|[ОписаниеИсключения2]
		|
		|[ОписаниеИсключения3]
		|";
		
		ОписаниеИсключения = СтрЗаменить(ОписаниеИсключения, "[ОписаниеИсключения1]", ОписаниеИсключения1);
		ОписаниеИсключения = СтрЗаменить(ОписаниеИсключения, "[ОписаниеИсключения2]", ОписаниеИсключения2);
		ОписаниеИсключения = СтрЗаменить(ОписаниеИсключения, "[ОписаниеИсключения3]", ОписаниеИсключения3);
		
		ВызватьИсключение СокрЛП(ОписаниеИсключения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Дополнительная базовая функциональность для анализа параметров клиента на сервере.

// Возвращает фиксированное соответствие, содержащее некоторые параметры клиента:
//  ПараметрЗапуска                    - Строка,
//  СтрокаСоединенияИнформационнойБазы - Строка - строка соединения, полученная на клиенте.
//
// Возвращает пустое фиксированное соответствие, если ТекущийРежимЗапуска() = Неопределено.
//
Функция ПараметрыКлиентаНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПараметрыКлиента.Количество() = 0
	   И ТекущийРежимЗапуска() <> Неопределено Тогда
		
		ВызватьИсключение НСтр("ru = 'Не заполнены параметры клиента на сервере.'");
	КонецЕсли;
	
	Возврат ПараметрыКлиента;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры для установки/обновления/получения параметров работы программы (кэшей).

// Проверяет, что в текущем сеансе доступна последняя версия программы,
// в противном случае, вызывает исключение с требованием перезапустить сеанс.
//
// В старых сеансах нельзя обновлять параметры работы программы, а также
// нельзя выполнять изменение некоторых данных, чтобы не перезаписать
// новую версию данных (полученную с помощью новой версии программы)
// старой версией данных (полученной с помощью старой версии программы).
//
Процедура ПроверитьДинамическоеОбновлениеВерсииПрограммы() Экспорт
	
	Если ВерсияПрограммыОбновленаДинамически() Тогда
		ПотребоватьПерезапускСеансаПоПричинеДинамическогоОбновленияВерсииПрограммы();
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, что в текущем сеансе есть динамическое изменение конфигурации базы и
// при этом нет режима обновления информационной базы.
//
// Возвращаемое значение:
//  Булево - Истина, если версия программы обновлена.
//
Функция ВерсияПрограммыОбновленаДинамически() Экспорт
	
	Если Не КонфигурацияБазыДанныхИзмененаДинамически() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если конфигурация базы данных изменена динамически после запуска
	// обновления информационной базы, но до его завершения, тогда нужно
	// продолжать обновление несмотря на изменение.
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Параметры работы программы только неразделенные, поэтому для них обновление завершено,
		// если завершено обновление неразделенных данных.
		Возврат Не ОбновлениеИнформационнойБазыСлужебный.НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы();
	КонецЕсли;
	
	Возврат Не ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы();
	
КонецФункции

// Вызывает исключение с требованием перезапустить сеанс из-за обновления версии программы.
Процедура ПотребоватьПерезапускСеансаПоПричинеДинамическогоОбновленияВерсииПрограммы() Экспорт
	
	ТекстОшибки = НСтр("ru = 'Версия программы обновлена, требуется перезапустить сеанс.'");
	ВызватьИсключение ТекстОшибки;
	
КонецПроцедуры


// Возвращает значение параметра работы программы.
//
// В старом сеансе (когда версия программы обновлена динамически),
// если параметр не найден, вызывается исключение с требованием перезапуска,
// если параметр найден, значение возвращается без учета версии.
//
// В разделенном режиме модели сервиса, если параметр не найден или
// версия параметра не равна версии конфигурации вызывается исключение,
// так как обновление неразделенных данных невозможно.
//
// Параметры:
//  ИмяПараметра - Строка - не более 128 символов. Например,
//                 "СтандартныеПодсистемы.ВариантыОтчетов.ОтчетыСНастройками".
//
// Возвращаемое значение:
//  Произвольный - возвращается Неопределено, когда параметр не найден или
//                 когда в новом сеансе версия параметра не равна версии конфигурации.
//
Функция ПараметрРаботыПрограммы(ИмяПараметра) Экспорт
	
	Возврат РегистрыСведений.ПараметрыРаботыПрограммы.ПараметрРаботыПрограммы(ИмяПараметра);
	
КонецФункции

// Устанавливает значение параметра работы программы.
// Перед вызовом требуется установить привилегированный режим.
//
// Параметры:
//  ИмяПараметра - Строка - не более 128 символов. Например,
//                 "СтандартныеПодсистемы.ВариантыОтчетов.ОтчетыСНастройками".
//
//  Значение     - Произвольный - значение, которое можно поместить в хранилище значения.
//
Процедура УстановитьПараметрРаботыПрограммы(ИмяПараметра, Значение) Экспорт
	
	РегистрыСведений.ПараметрыРаботыПрограммы.УстановитьПараметрРаботыПрограммы(ИмяПараметра, Значение);
	
КонецПроцедуры

// Обновляет значение параметра работы программы, если изменилось.
// Перед вызовом требуется установить привилегированный режим.
//
// Параметры:
//  ИмяПараметра   - Строка - не более 128 символов. Например,
//                   "СтандартныеПодсистемы.ВариантыОтчетов.ОтчетыСНастройками".
//
//  Значение       - Произвольный - значение, которое можно поместить в хранилище значения.
//
//  ЕстьИзменения  - Булево - (возвращаемое значение). Устанавливается Истина,
//                   если старое и новое значения параметра не совпадают.
//
//  СтароеЗначение - Произвольный - (возвращаемое значение) до обновления.
//
Процедура ОбновитьПараметрРаботыПрограммы(ИмяПараметра, Значение, ЕстьИзменения = Ложь, СтароеЗначение = Неопределено) Экспорт
	
	РегистрыСведений.ПараметрыРаботыПрограммы.ОбновитьПараметрРаботыПрограммы(ИмяПараметра,
		Значение, ЕстьИзменения, СтароеЗначение);
	
КонецПроцедуры

// Возвращает изменения параметра работы программы с учетом текущей версии
// конфигурации и текущей версии ИБ.
//
// Параметры:
//  ИмяПараметра - Строка - не более 128 символов. Например,
//                 "СтандартныеПодсистемы.ВариантыОтчетов.ОтчетыСНастройками".
//
// Возвращаемое значение:
//  Неопределено - означает, что изменилось все. Возвращается
//                 при начальном заполнении ИБ или области данных.
//  Массив       - содержит значения изменений, если массив пустой, значит изменений нет.
//                 Может быть несколько изменений, например, когда область данных давно не обновлялась.
//
Функция ИзмененияПараметраРаботыПрограммы(ИмяПараметра) Экспорт
	
	Возврат РегистрыСведений.ПараметрыРаботыПрограммы.ИзмененияПараметраРаботыПрограммы(ИмяПараметра);
	
КонецФункции

// Добавить изменения параметра работы программы при переходе на текущую версию метаданных конфигурации.
// В дальнейшем изменения используются для условного добавления обязательных обработчиков обновления.
// При начальном заполнении ИБ или неразделенных данных добавление изменений пропускается.
//
//  ИмяПараметра - Строка - не более 128 символов. Например,
//                 "СтандартныеПодсистемы.ВариантыОтчетов.ОтчетыСНастройками".
//
//  Изменения    - Произвольный - фиксированные данные, которые регистрируются в качестве изменений.
//                 Изменения не добавляются, если значение ИзменениеПараметра не заполнено.
//
Процедура ДобавитьИзмененияПараметраРаботыПрограммы(ИмяПараметра, Изменения) Экспорт
	
	РегистрыСведений.ПараметрыРаботыПрограммы.ДобавитьИзмененияПараметраРаботыПрограммы(ИмяПараметра, Изменения);
	
КонецПроцедуры


// Только для внутреннего использования.
Процедура ЗарегистрироватьИзменениеПриоритетныхДанныхДляПодчиненныхУзловРИБ() Экспорт
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ()
	 Или Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтандартныеПодсистемыПовтИсп.ОтключитьИдентификаторыОбъектовМетаданных() Тогда
		Справочники.ИдентификаторыОбъектовМетаданных.ЗарегистрироватьПолноеИзменениеДляПодчиненныхУзловРИБ();
	КонецЕсли;
	
	УзлыПлановОбменаРИБ = Новый Соответствие;
	Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		Если Не ПланОбмена.РаспределеннаяИнформационнаяБаза Тогда
			Продолжить;
		КонецЕсли;
		УзлыРИБ = Новый Массив;
		УзлыПлановОбменаРИБ.Вставить(ПланОбмена.Состав, УзлыРИБ);
		ПланОбменаМенеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПланОбмена.ПолноеИмя());
		Выборка = ПланОбменаМенеджер.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка <> ПланОбменаМенеджер.ЭтотУзел() Тогда
				УзлыРИБ.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если УзлыПлановОбменаРИБ.Количество() > 0 Тогда
		ЗарегистрироватьИзменениеПредопределенных(УзлыПлановОбменаРИБ, Метаданные.Справочники);
		ЗарегистрироватьИзменениеПредопределенных(УзлыПлановОбменаРИБ, Метаданные.ПланыВидовХарактеристик);
		ЗарегистрироватьИзменениеПредопределенных(УзлыПлановОбменаРИБ, Метаданные.ПланыСчетов);
		ЗарегистрироватьИзменениеПредопределенных(УзлыПлановОбменаРИБ, Метаданные.ПланыВидовРасчета);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры для установки/получения параметров работы расширений (кэшей).

// Возвращает значения параметра для текущей версии расширений.
// Если не заполнен, возвращает Неопределено.
//
// Параметры:
//  ИмяПараметра - Строка - не более 128 символов. Например,
//                 "СтандартныеПодсистемы.ВариантыОтчетов.ОтчетыСНастройками".
//
// Возвращаемое значение:
//  Произвольный - возвращается Неопределено, если параметр не заполнен
//                 для текущей версии расширений.
//
Функция ПараметрРаботыРасширения(ИмяПараметра, БезУчетаВерсииРасширений = Ложь) Экспорт
	
	Возврат РегистрыСведений.ПараметрыРаботыВерсийРасширений.ПараметрРаботыРасширения(ИмяПараметра, БезУчетаВерсииРасширений);
	
КонецФункции

// Устанавливает хранилище значения параметра для текущей версии расширений.
// Используется для заполнения значений параметров.
// Перед вызовом требуется установить привилегированный режим.
//
// Параметры:
//  ИмяПараметра - Строка - не более 128 символов. Например,
//                 "СтандартныеПодсистемы.ВариантыОтчетов.ОтчетыСНастройками".
//
//  Значение     - Произвольный - значение параметра.
//
Процедура УстановитьПараметрРаботыРасширения(ИмяПараметра, Значение, БезУчетаВерсииРасширений = Ложь) Экспорт
	
	РегистрыСведений.ПараметрыРаботыВерсийРасширений.УстановитьПараметрРаботыРасширения(ИмяПараметра, Значение, БезУчетаВерсииРасширений);
	
КонецПроцедуры

// Проверяет, что объект метаданных относится к неразделенному расширению,
// поэтому его не следует учитывать при работе с разделенными данными,
// так как при входе в область с указанием разделителей будет другой состав
// расширений конфигурации и произойдет рассинхронизация разделенных данных.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - проверяемый объект метаданных.
//
// Возвращаемое значение:
//  Булево - если Истина, значит объект метаданных неразделенного расширения.
//
Функция ЭтоОбъектРасширенияНеразделенногоПользователя(ОбъектМетаданных, УстановленныеРасширенияДоступны = Неопределено) Экспорт
	Если УстановленныеРасширенияДоступны = Неопределено Тогда
		УстановленныеРасширенияДоступны = Справочники.ВерсииРасширений.УстановленныеРасширенияДоступны();
	КонецЕсли;
	Возврат Не УстановленныеРасширенияДоступны И ОбъектМетаданных.РасширениеКонфигурации() <> Неопределено;
КонецФункции

// Обработчик регламентного задания УдалениеУстаревшихПараметровРаботыВерсийРасширений.
Процедура УдалениеУстаревшихПараметровРаботыВерсийРасширенийОбработчикЗадания() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.УдалениеУстаревшихПараметровРаботыВерсийРасширений);
	
	Справочники.ВерсииРасширений.УдалитьУстаревшиеВерсииПараметров();
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ЗаполнитьВсеПараметрыРаботыРасширенийФоновоеЗадание(Параметры) Экспорт
	
	РегистрыСведений.ПараметрыРаботыВерсийРасширений.ЗаполнитьВсеПараметрыРаботыРасширенийФоновоеЗадание(Параметры);
	
КонецПроцедуры

// Возвращает ссылку, соответствующую объекту метаданных, для использования в базе данных.
//
// Параметры:
//   ОбъектМетаданных
//       - ОбъектМетаданных - Объект метаданных конфигурации или расширения.
//       - Тип              - Тип, который можно успешно использовать в функции Метаданные.НайтиПоТипу().
//       - Строка           - Полное имя объекта метаданных,
//           которое можно успешно использовать в функции Метаданные.НайтиПоПолномуИмени().
//
// Возвращаемое значение:
//   СправочникСсылка.ИдентификаторыОбъектовМетаданных - Ссылка объекта метаданных конфигурации.
//   СправочникСсылка.ИдентификаторыОбъектовРасширений - Ссылка объекта метаданных расширения.
//   Строка - Если у данного объекта метаданных нет ссылки, то возвращается полное имя объекта метаданных.
//
Функция ИдентификаторОбъектаМетаданных(ОписаниеОбъектаМетаданных) Экспорт
	
	Тип = ТипЗнч(ОписаниеОбъектаМетаданных);
	Если Тип = Тип("Тип") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ОписаниеОбъектаМетаданных);
	ИначеЕсли Тип = Тип("Строка") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОписаниеОбъектаМетаданных);
	Иначе
		ОбъектМетаданных = ОписаниеОбъектаМетаданных;
	КонецЕсли;
	Если ТипЗнч(ОбъектМетаданных) = Тип("ОбъектМетаданных")
		И ЭтоОбъектРасширенияНеразделенногоПользователя(ОбъектМетаданных) Тогда
		Возврат ОбъектМетаданных.ПолноеИмя();
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОписаниеОбъектаМетаданных);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Дополнительная базовая функциональность для обмена данными.

// Выполняет регистрацию изменений объекта на всех узлах плана обмена.
// Для разделенных конфигураций должны выполняться условия:
//  - план обмена должен быть разделенным,
//  - регистрируемый объект должен быть неразделенным.
//
//  Параметры:
//    Объект         - Объект - СправочникОбъект, ДокументОбъект и др., который требуется зарегистрировать.
//                              Объект должен быть неразделенным, иначе будет выдано исключение.
//
//    ИмяПланаОбмена - Строка - имя плана обмена, на всех узлах которого требуется выполнить регистрацию объекта.
//                              План обмена должен быть разделенным, иначе будет выдано исключение.
//
//    ВключаяГлавныйУзел - Булево - если Ложь, тогда в подчиненном узле
//                         не будет выполнена регистрация для главного узла.
// 
//
Процедура ЗарегистрироватьОбъектНаВсехУзлах(Знач Объект, Знач ИмяПланаОбмена, Знач ВключаяГлавныйУзел = Истина) Экспорт
	
	Если Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав.Найти(Объект.Метаданные()) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ВызватьИсключение НСтр("ru = 'Регистрация изменений неразделенных данных в разделенном режиме.'");
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			ЭтоРазделенныйПланОбмена = МодульРаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(
				"ПланОбмена." + ИмяПланаОбмена, МодульРаботаВМоделиСервиса.РазделительОсновныхДанных());
		Иначе
			ЭтоРазделенныйПланОбмена = Ложь;
		КонецЕсли;
		
		Если Не ЭтоРазделенныйПланОбмена Тогда
			ВызватьИсключение НСтр("ru = 'Регистрация изменений для неразделенных планов обмена не поддерживается.'");
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			ЭтоРазделенныйОбъектМетаданных = МодульРаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(
				Объект.Метаданные().ПолноеИмя(), МодульРаботаВМоделиСервиса.РазделительОсновныхДанных());
		Иначе
			ЭтоРазделенныйОбъектМетаданных = Ложь;
		КонецЕсли;
		
		Если ЭтоРазделенныйОбъектМетаданных Тогда
				ВызватьИсключение НСтр("ru = 'Регистрация изменений для разделенных объектов не поддерживается.'");
		КонецЕсли;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПланОбмена.Ссылка КАК Получатель
		|ИЗ
		|	ПланОбмена.[ИмяПланаОбмена] КАК ПланОбмена
		|ГДЕ
		|	ПланОбмена.РегистрироватьИзменения
		|	И НЕ ПланОбмена.ПометкаУдаления";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяПланаОбмена]", ИмяПланаОбмена);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Получатели = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Получатель");
		
		Для Каждого Получатель Из Получатели Цикл
			
			Объект.ОбменДанными.Получатели.Добавить(Получатель);
			
		КонецЦикла;
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПланОбмена.Ссылка КАК Получатель
		|ИЗ
		|	ПланОбмена.[ИмяПланаОбмена] КАК ПланОбмена
		|ГДЕ
		|	ПланОбмена.Ссылка <> &ЭтотУзел
		|	И НЕ ПланОбмена.ПометкаУдаления";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяПланаОбмена]", ИмяПланаОбмена);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел());
		Запрос.Текст = ТекстЗапроса;
		
		Получатели = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Получатель");
		
		ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
		
		Для Каждого Получатель Из Получатели Цикл
			Если Не ВключаяГлавныйУзел И Получатель = ГлавныйУзел Тогда
				Продолжить;
			КонецЕсли;
			Объект.ОбменДанными.Получатели.Добавить(Получатель);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет ссылку на главный узел в константе ГлавныйУзел для возможности восстановления.
Процедура СохранитьГлавныйУзел() Экспорт
	
	ГлавныйУзелМенеджер = Константы.ГлавныйУзел.СоздатьМенеджерЗначения();
	ГлавныйУзелМенеджер.Значение = ПланыОбмена.ГлавныйУзел();
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ГлавныйУзелМенеджер);
	
КонецПроцедуры

// Проверят, что выполнение происходит на учебной платформе,
// на которой, например, недоступно получение свойства ПользовательОС.
//
Функция ЭтоУчебнаяПлатформа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Попытка
		ПользовательОС = ТекущийПользователь.ПользовательОС;
	Исключение
		ТекущийПользователь = Неопределено;
	КонецПопытки;
	
	Возврат ТекущийПользователь = Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики отправки и получения данных для обмена в распределенной ИБ.

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхПодчиненному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, Знач СозданиеНачальногоОбраза, Знач Получатель) Экспорт
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	// Отправка идентификаторов объектов метаданных выполняется в другой секции сообщения обмена.
	ИгнорироватьОтправкуИдентификаторовОбъектовМетаданных(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза);
	
	ИгнорироватьОтправкуДанныхОбработанныхВЦентральномУзлеРИБПриОбновленииИБ(ЭлементДанных, СозданиеНачальногоОбраза, Получатель);
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	ПодсистемаОбменДаннымиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными");
	
	// Вставка кода от подсистемы обмена данными должна быть первой.
	Если ПодсистемаОбменДаннымиСуществует Тогда
		МодульОбменДаннымиСобытия = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСобытия");
		МодульОбменДаннымиСобытия.ПриОтправкеДанныхКорреспонденту(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель, Ложь);
		
		Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияПодсистемБСП.ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель);
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	// Вставка кода от подсистемы обмена данными в модели сервиса должна быть последней, влияющей на логику отправки.
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель);
		
		Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПодсистемаОбменДаннымиСуществует Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		МодульОбменДаннымиСервер.РассчитатьПроцентВыгрузкиРИБ(Получатель, СозданиеНачальногоОбраза);
	КонецЕсли;
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Знач Отправитель) Экспорт
	
	// Идентификаторы объектов метаданных могут изменяться только в главном узле.
	ИгнорироватьПолучениеИдентификаторовОбъектовМетаданных(ЭлементДанных, ПолучениеЭлемента);
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияПодсистемБСП.ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель);
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	// Вызов переопределяемого обработчика для выполнения прикладной логики обмена РИБ.
	ОбщегоНазначенияПереопределяемый.ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель);
	
	ПодсистемаОбменДаннымиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными");
	
	// Вставка кода от подсистемы обмена данными должна быть последней, влияющей на логику получения.
	Если ПодсистемаОбменДаннымиСуществует Тогда
		МодульОбменДаннымиСобытия = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСобытия");
		МодульОбменДаннымиСобытия.ПриПолученииДанныхОтПодчиненногоВКонце(ЭлементДанных, ПолучениеЭлемента, Отправитель);
	КонецЕсли;
	
	Если ПодсистемаОбменДаннымиСуществует Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		МодульОбменДаннымиСервер.РассчитатьПроцентЗагрузкиРИБ(Отправитель);
	КонецЕсли;
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
// Параметр Отправитель может быть не заполнен, например, при получении сообщения начального образа в АРМе.
// 
Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель = Неопределено) Экспорт
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	ПодсистемаОбменДаннымиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными");
	
	// Вставка кода от подсистемы обмена данными должна быть первой.
	Если ПодсистемаОбменДаннымиСуществует Тогда
		МодульОбменДаннымиСобытия = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСобытия");
		МодульОбменДаннымиСобытия.ПриПолученииДанныхОтГлавногоВНачале(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель);
		
		Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияПодсистемБСП.ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель);
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	// Вызов переопределяемого обработчика для выполнения прикладной логики обмена РИБ.
	ОбщегоНазначенияПереопределяемый.ПриПолученииДанныхОтГлавного(Отправитель, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	
	// Вставка кода от подсистемы обмена данными должна быть последней, влияющей на логику получения.
	Если ПодсистемаОбменДаннымиСуществует
		И Не СозданиеНачальногоОбраза(ЭлементДанных) Тогда
		
		МодульОбменДаннымиСобытия = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСобытия");
		МодульОбменДаннымиСобытия.ПриПолученииДанныхОтГлавногоВКонце(ЭлементДанных, ПолучениеЭлемента, Отправитель);
		
	КонецЕсли;
	
	Если ПодсистемаОбменДаннымиСуществует Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		МодульОбменДаннымиСервер.РассчитатьПроцентЗагрузкиРИБ(Отправитель);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Дополнительные функции для работы с типами.

// Возвращает тип ссылки или ключа записи указанного объекта метаданных.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - регистр или ссылочный объект.
// 
//  Возвращаемое значение:
//   Тип.
//
Функция ТипСсылкиИлиКлючаЗаписиОбъектаМетаданных(ОбъектМетаданных) Экспорт
	
	Если ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных) Тогда
		
		Если ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрСведений";
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрНакопления(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрНакопления";
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрБухгалтерии(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрБухгалтерии";
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрРасчета(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрРасчета";
		КонецЕсли;
		Тип = Тип(ВидРегистра + "КлючЗаписи." + ОбъектМетаданных.Имя);
	Иначе
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		Тип = ТипЗнч(Менеджер.ПустаяСсылка());
	КонецЕсли;
	
	Возврат Тип;
	
КонецФункции

// Возвращает тип объекта или набора записей указанного объекта метаданных.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - регистр или ссылочный объект.
// 
//  Возвращаемое значение:
//   Тип.
//
Функция ТипОбъектаИлиНабораЗаписейОбъектаМетаданных(ОбъектМетаданных) Экспорт
	
	Если ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных) Тогда
		
		Если ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрСведений";
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрНакопления(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрНакопления";
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрБухгалтерии(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрБухгалтерии";
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрРасчета(ОбъектМетаданных) Тогда
			ВидРегистра = "РегистрРасчета";
		КонецЕсли;
		Тип = Тип(ВидРегистра + "НаборЗаписей." + ОбъектМетаданных.Имя);
	Иначе
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		ВидОбъекта = ОбщегоНазначения.ВидОбъектаПоТипу(ТипЗнч(Менеджер.ПустаяСсылка()));
		Тип = Тип(ВидОбъекта + "Объект." + ОбъектМетаданных.Имя);
	КонецЕсли;
	
	Возврат Тип;
	
КонецФункции

// Выполняет проверку, что переданный объект имеет тип СправочникОбъект.ИдентификаторыОбъектовМетаданных.
//
Функция ЭтоИдентификаторОбъектаМетаданных(Объект) Экспорт
	
	Возврат ТипЗнч(Объект) = Тип("СправочникОбъект.ИдентификаторыОбъектовМетаданных");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с формами.

// Устанавливает ключ назначения формы (ключ назначения использования и
// ключ сохранения положения окна). При необходимости копирует текущие настройки формы,
// если для соответствующего нового ключа они еще не были записаны.
//
// Параметры:
//  Форма - УправляемаяФорма - форма ПриСозданииНаСервере, которой устанавливается ключ.
//  Ключ  - Строка - новый ключ назначения формы.
//  УстановитьНастройки - Булево - установить новому ключу настройки, сохраненные для текущего ключа.
//
Процедура УстановитьКлючНазначенияФормы(Форма, Ключ, КлючПоложения = "", УстановитьНастройки = Истина) Экспорт
	
	УстановитьКлючНазначенияИспользованияФормы(Форма, Ключ, УстановитьНастройки);
	УстановитьКлючСохраненияПоложенияОкнаФормы(Форма, ?(КлючПоложения = "", Ключ, КлючПоложения), УстановитьНастройки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с файловой системой.

// Добавляет новый каталог временных файлов.
//   Используется в связке с ОчиститьКаталогВременныхФайлов.
//
// Параметры:
//   Расширение - Строка - Расширение каталога.
//       В качестве расширения полезно указывать аббревиатуру подсистемы, чтобы было понятно "кто за собой не убрал".
//       Рекомендуется указывать на английском языке, чтобы исключить ошибки ОС.
//
// Возвращаемое значение:
//   Строка - Полный путь к каталогу с последним слешем.
//
Функция СоздатьКаталогВременныхФайлов(Расширение) Экспорт
	ПутьККаталогу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла(Расширение));
	СоздатьКаталог(ПутьККаталогу);
	Возврат ПутьККаталогу;
КонецФункции

// Добавляет новый каталог временных файлов.
//   Используется в связке с СоздатьКаталогВременныхФайлов.
//
// Параметры:
//   ПутьККаталогу - Строка - Полный путь к каталогу.
//
Процедура ОчиститьКаталогВременныхФайлов(ПутьККаталогу) Экспорт
	Попытка
		УдалитьФайлы(ПутьККаталогу);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Стандартные подсистемы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка очистки каталога временных файлов ""%1"":%2'"),
				ПутьККаталогу,
				Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции.

// Возвращает уточнения при возникновении проблем с параметрами работы программы.
Функция УточнениеОшибкиПараметровРаботыПрограммыДляРазработчика() Экспорт
	
	Возврат Символы.ПС + Символы.ПС 
		+ НСтр("ru = 'Для разработчика: возможно требуется обновить вспомогательные данные,
					|которые влияют на работу программы. Для выполнения обновления можно:
					|- воспользоваться внешней обработкой
					|  ""Инструменты разработчика: Обновление вспомогательных данных"",
					|- либо запустить программу с параметром командной строки 1С:Предприятия 8
					|  ""/С ЗапуститьОбновлениеИнформационнойБазы"",
					|- либо увеличить номер версии конфигурации, чтобы при очередном запуске
					|  выполнились процедуры обновления данных информационной базы.'");
	
КонецФункции

// Возвращает текущего пользователя информационной базы.
//
Функция ТекущийПользователь() Экспорт
	
	// Вычисляем актуальное имя пользователя, даже если оно было ранее изменено в текущем сеансе;
	// Например, для подключения к текущей ИБ через внешнее соединение из этого сеанса;
	// Во всех остальных случаях достаточно получить ПользователиИнформационнойБазы.ТекущийПользователь().
	ТекущийПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	
	Если ТекущийПользователь = Неопределено Тогда
		ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	КонецЕсли;
	
	Возврат ТекущийПользователь;
	
КонецФункции

// Преобразует строку в допустимое наименование колонки таблицы значений, заменяя недопустимые
// символы на код символа ограниченного символом подчеркивания.
//
// Параметры:
//  Строка - Строка - Строка для преобразования.
// 
// Возвращаемое значение:
//  Строка - Строка, содержащая только допустимые символы для наименования колонок таблицы значений.
//
Функция ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(Строка) Экспорт
	
	НедопустимыеСимволы = ":;!@#$%^&-~`'.,?{}[]+=*/|\ ()_""";
	Результат = "";
	Для Индекс = 1 По СтрДлина(Строка) Цикл
		Символ =  Сред(Строка, Индекс, 1);
		Если СтрНайти(НедопустимыеСимволы, Символ) > 0 Тогда
			Результат = Результат + "_" + КодСимвола(Символ) + "_";
		Иначе
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Преобразовать адаптированное наименование колонки, в котором недопустимые
// символы заменены на код символа, ограниченного символом подчеркивания в обычную строку.
//
// Параметры:
//  НаименованиеКолонки - Строка - Адаптированное наименование колонки.
// 
// Возвращаемое значение:
//  Строка - преобразованная строка.
//
Функция ПреобразоватьАдаптированноеНаименованиеКолонкиВСтроку(НаименованиеКолонки) Экспорт
	
	Результат = "";
	Для Индекс = 1 По СтрДлина(НаименованиеКолонки) Цикл
		Символ = Сред(НаименованиеКолонки, Индекс, 1);
		Если Символ = "_" Тогда
			ПозицияЗакрывающегоСимвола = СтрНайти(НаименованиеКолонки, "_", НаправлениеПоиска.СНачала, Индекс + 1);
			КодСимвола = Сред(НаименованиеКолонки, Индекс + 1, ПозицияЗакрывающегоСимвола - Индекс - 1);
			Результат = Результат + Символ(КодСимвола);
			Индекс = ПозицияЗакрывающегоСимвола;
		Иначе
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Формирует сведения, необходимые для оповещения на клиенте открытых форм и динамических списков
// о массовых изменениях объектов, которые произошли на сервере.
//
// Параметры:
//   ИзмененныеОбъекты - ЛюбаяСсылка, Тип, Массив - содержит сведения об измененных объектах.
//                       Может быть передана ссылка или массив ссылок на измененные объекты,
//                       либо можно указать тип или массив типов измененных объектов.
//
Функция ПодготовитьОповещениеФормОбИзменении(ИзмененныеОбъекты) Экспорт
	
	Результат = Новый Соответствие;
	Если ИзмененныеОбъекты = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	ТипСсылкиИлиТипаИлиМассива = ТипЗнч(ИзмененныеОбъекты);
	Если ТипСсылкиИлиТипаИлиМассива = Тип("Массив") Тогда
		Для Каждого Элемент Из ИзмененныеОбъекты Цикл
			ТипЭлемента = ТипЗнч(Элемент);
			Если ТипЭлемента = Тип("Тип") Тогда
				ТипЭлемента = Элемент;
			КонецЕсли;
			Если МассивТипов.Найти(ТипЭлемента) = Неопределено Тогда
				МассивТипов.Добавить(ТипЭлемента);
			КонецЕсли;
		КонецЦикла;
	Иначе
		МассивТипов.Добавить(ИзмененныеОбъекты);
	КонецЕсли;
	
	Для Каждого ТипЭлемента Из МассивТипов Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЭлемента);
		Если ТипЗнч(ОбъектМетаданных) <> Тип("ОбъектМетаданных") Тогда
			Продолжить;
		КонецЕсли;
		ИмяСобытия = "Запись_" + ОбъектМетаданных.Имя;
		Попытка
			ПустаяСсылка = ПредопределенноеЗначение(ОбъектМетаданных.ПолноеИмя() + ".ПустаяСсылка");
		Исключение
			ПустаяСсылка = Неопределено;
		КонецПопытки;
		Результат.Вставить(ТипЭлемента, Новый Структура("ИмяСобытия,ПустаяСсылка", ИмяСобытия, ПустаяСсылка));
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Устанавливает общую форму ПустойРабочийСтол на рабочий стол с пустым составом форм.
//
// Для корректного отображения разделенного рабочего стола в веб-клиенте
// неразделенный рабочий стол должен иметь не пустой состав форм, и наоборот.
//
Процедура УстановитьПустуюФормуНаПустойРабочийСтол() Экспорт
	
	КлючОбъекта = "Общее/НастройкиНачальнойСтраницы";
	
	ТекущиеНастройки = ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта);
	Если ТекущиеНастройки = Неопределено Тогда
		ТекущиеНастройки = Новый НастройкиНачальнойСтраницы;
	КонецЕсли;
	
	ТекущийСоставФорм = ТекущиеНастройки.ПолучитьСоставФорм();
	
	Если ТекущийСоставФорм.ЛеваяКолонка.Количество() = 0
	   И ТекущийСоставФорм.ПраваяКолонка.Количество() = 0 Тогда
		
		ТекущийСоставФорм.ЛеваяКолонка.Добавить("ОбщаяФорма.ПустойРабочийСтол");
		ТекущиеНастройки.УстановитьСоставФорм(ТекущийСоставФорм);
		ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, "", ТекущиеНастройки);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу возможных форматов для сохранения табличного документа.
//
// Возвращаемое значение
//  ТаблицаЗначений:
//                   ТипФайлаТабличногоДокумента - ТипФайлаТабличногоДокумента                 - значение в платформе,
//                                                                                               соответствующее
//                                                                                               формату;
//                   Ссылка                      - ПеречислениеСсылка.ФорматыСохраненияОтчетов - ссылка на метаданные,
//                                                                                               где хранится
//                                                                                               представление;
//                   Представление               - Строка -                                    - представление типа
//                                                          файла (заполняется из перечисления);
//                   Расширение                  - Строка -                                    - тип файла для
//                                                          операционной системы;
//                   Картинка                    - Картинка                                    - значок формата.
//
// Примечание: таблица форматов может быть переопределена в процедуре
// УправлениеПечатьюПереопределяемый.ПриЗаполненииНастроекФорматовСохранения().
//
Функция НастройкиФорматовСохраненияТабличногоДокумента() Экспорт
	
	ТаблицаФорматов = Новый ТаблицаЗначений;
	
	ТаблицаФорматов.Колонки.Добавить("ТипФайлаТабличногоДокумента", Новый ОписаниеТипов("ТипФайлаТабличногоДокумента"));
	ТаблицаФорматов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ПеречислениеСсылка.ФорматыСохраненияОтчетов"));
	ТаблицаФорматов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаФорматов.Колонки.Добавить("Расширение", Новый ОписаниеТипов("Строка"));
	ТаблицаФорматов.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));

	// Документ PDF (.pdf)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.PDF;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.PDF;
	НовыйФормат.Расширение = "pdf";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматPDF;
	
	// Лист Microsoft Excel 2007 (.xlsx)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.XLSX;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.XLSX;
	НовыйФормат.Расширение = "xlsx";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматExcel2007;

	// Лист Microsoft Excel 97-2003 (.xls)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.XLS;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.XLS;
	НовыйФормат.Расширение = "xls";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматExcel;

	// Электронная таблица OpenDocument (.ods).
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.ODS;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.ODS;
	НовыйФормат.Расширение = "ods";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматOpenOfficeCalc;
	
	// Табличный документ (.mxl)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.MXL;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.MXL;
	НовыйФормат.Расширение = "mxl";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматMXL;

	// Документ Word 2007 (.docx)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.DOCX;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.DOCX;
	НовыйФормат.Расширение = "docx";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматWord2007;
	
	// Веб-страница (.html)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.HTML5;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.HTML;
	НовыйФормат.Расширение = "html";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматHTML;
	
	// Текстовый документ UTF-8 (.txt).
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.TXT;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.TXT;
	НовыйФормат.Расширение = "txt";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматTXT;
	
	// Текстовый документ ANSI (.txt).
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.ANSITXT;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.ANSITXT;
	НовыйФормат.Расширение = "txt";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматTXT;

	Для Каждого ФорматСохранения Из ТаблицаФорматов Цикл
		ФорматСохранения.Представление = Строка(ФорматСохранения.Ссылка);
	КонецЦикла;
		
	Возврат ТаблицаФорматов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// См. ЗагрузкаДанныхИзФайлаПереопределяемый.ПриОпределенииСправочниковДляЗагрузкиДанных.
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	
	// Загрузка в справочник ИдентификаторыОбъектовМетаданных запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.ИдентификаторыОбъектовМетаданных.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
	// Загрузка в справочник ИдентификаторыОбъектовРасширений запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.ИдентификаторыОбъектовРасширений.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами.
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	
	Объекты.Вставить(Метаданные.Справочники.ИдентификаторыОбъектовМетаданных.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ИдентификаторыОбъектовРасширений.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок.
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.БезопасноеХранилищеДанных.Измерения.Владелец);
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.БезопасноеХранилищеДанныхОбластейДанных.Измерения.Владелец);
	
КонецПроцедуры

//+++ КучеровРМ 26.02.2022

// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Подробнее: см. ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульОбработкиПанельАдминистрированияБСП = ОбщегоНазначения.ОбщийМодуль("Обработки.ПанельАдминистрированияБСП");
		МодульОбработкиПанельАдминистрированияБСП.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	КонецЕсли;
	
КонецПроцедуры

//--- КучеровРМ 26.02.2022 

// См. ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиента.
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	ДобавитьПараметрыРаботыКлиента(Параметры);
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке.
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Справочники.ИдентификаторыОбъектовМетаданных);
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Константы.АдресПубликацииИнформационнойБазыВИнтернете);
	Типы.Добавить(Метаданные.Константы.АдресПубликацииИнформационнойБазыВЛокальнойСети);
	
	Типы.Добавить(Метаданные.Справочники.ВерсииРасширений);
	Типы.Добавить(Метаданные.Справочники.ИдентификаторыОбъектовРасширений);
	Типы.Добавить(Метаданные.РегистрыСведений.ИдентификаторыОбъектовВерсийРасширений);
	Типы.Добавить(Метаданные.РегистрыСведений.ПараметрыРаботыВерсийРасширений);
	Типы.Добавить(Метаданные.РегистрыСведений.СеансыВерсийРасширений);
	
КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Разрешения = Новый Массив();
	
	Разрешения.Добавить(МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаВременныхФайлов(Истина, Истина,
		НСтр("ru = 'Для возможности работы программы.'")));
	Разрешения.Добавить(МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеПривилегированногоРежима());
	
	ЗапросыРазрешений.Добавить(
		МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения));
	
	ДобавитьЗапросРазрешенийНаИспользованиеРасширений(ЗапросыРазрешений);
	
КонецПроцедуры

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если МодульТекущиеДелаСервер.ДелоОтключено("РекомендацияПоПовышениюСкоростиРаботы") Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = "РекомендацияПоПовышениюСкоростиРаботы";
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор = Идентификатор;
	Дело.ЕстьДела      = ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти();
	Дело.Важное        = Истина;
	Дело.Представление = НСтр("ru = 'Скорость работы снижена'");
	Дело.Форма         = "Обработка.РекомендацияПоПовышениюСкоростиРаботы.Форма.Форма";
	Дело.Владелец      = НСтр("ru = 'Скорость работы программы'");
	
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриОпределенииНазначенияРолей.
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	// ТолькоДляАдминистраторовСистемы.
	НазначениеРолей.ТолькоДляАдминистраторовСистемы.Добавить(
		Метаданные.Роли.АдминистраторСистемы.Имя);
	
	НазначениеРолей.ТолькоДляАдминистраторовСистемы.Добавить(
		Метаданные.Роли.Администрирование.Имя);
	
	НазначениеРолей.ТолькоДляАдминистраторовСистемы.Добавить(
		Метаданные.Роли.ОбновлениеКонфигурацииБазыДанных.Имя);
	
	// ТолькоДляПользователейСистемы.
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(
		Метаданные.Роли.ЗапускТолстогоКлиента.Имя);
	
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(
		Метаданные.Роли.ЗапускВнешнегоСоединения.Имя);
	
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(
		Метаданные.Роли.ЗапускAutomation.Имя);
	
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(
		Метаданные.Роли.РежимВсеФункции.Имя);
	
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(
		Метаданные.Роли.ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок.Имя);
	
	// ТолькоДляВнешнихПользователей.
	НазначениеРолей.ТолькоДляВнешнихПользователей.Добавить(
		Метаданные.Роли.БазовыеПраваВнешнегоПользователя.Имя);
	
	// СовместноДляПользователейИВнешнихПользователей.
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(
		Метаданные.Роли.ЗапускТонкогоКлиента.Имя);
	
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(
		Метаданные.Роли.ЗапускВебКлиента.Имя);
		
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(
		Метаданные.Роли.ВыводНаПринтерФайлБуферОбмена.Имя);
	
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(
		Метаданные.Роли.СохранениеДанныхПользователя.Имя);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.УдалениеУстаревшихПараметровРаботыВерсийРасширений.Имя);
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "СтандартныеПодсистемыСервер.УстановитьКонстантуНеИспользоватьРазделениеПоОбластямДанных";
	Обработчик.Приоритет = 99;
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.МонопольныйРежим = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "СтандартныеПодсистемыСервер.ПометитьЗаписиКэшаВерсийНеактуальными";
	Обработчик.Приоритет = 99;
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.МонопольныйРежим = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.10";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "СтандартныеПодсистемыСервер.ОбновитьПараметрыАдминистрированияИнформационнойБазы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.17";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "СтандартныеПодсистемыСервер.УстановитьЗначениеКонстантыГлавныйУзел";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.18";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "СтандартныеПодсистемыСервер.ПеренестиПаролиВБезопасноеХранилищеОбщиеДанные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.18";
	Обработчик.ОбщиеДанные = Ложь;
	Обработчик.Процедура = "СтандартныеПодсистемыСервер.ПеренестиПаролиВБезопасноеХранилище";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхГлавному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Знач Получатель)
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	// Отправка идентификаторов объектов метаданных выполняется в другой секции сообщения обмена.
	ИгнорироватьОтправкуИдентификаторовОбъектовМетаданных(ЭлементДанных, ОтправкаЭлемента);
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияПодсистемБСП.ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель);
	
	// Вызов переопределяемого обработчика для выполнения прикладной логики обмена РИБ.
	ОбщегоНазначенияПереопределяемый.ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		МодульОбменДаннымиСервер.РассчитатьПроцентВыгрузкиРИБ(Получатель, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// данной подсистемы при запуске конфигурации, т.е. в обработчиках событий.
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы.
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
// Возвращаемое значение:
//   Булево   - Ложь, если дальнейшее заполнение параметров необходимо прервать.
//
Функция ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ЭтоВызовПередНачаломРаботыСистемы = Параметры.ПолученныеПараметрыКлиента <> Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		ЭтоРазделеннаяКонфигурация = МодульРаботаВМоделиСервиса.ЭтоРазделеннаяКонфигурация();
	Иначе
		ЭтоРазделеннаяКонфигурация = Ложь;
	КонецЕсли;
	
	// Обязательные параметры для продолжения работы.
	Параметры.Вставить("РазделениеВключено", ОбщегоНазначения.РазделениеВключено());
	
	Параметры.Вставить("ДоступноИспользованиеРазделенныхДанных", 
		ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
	
	Параметры.Вставить("ЭтоРазделеннаяКонфигурация", ЭтоРазделеннаяКонфигурация);
	Параметры.Вставить("ЕстьДоступДляОбновленияВерсииПлатформы", Пользователи.ЭтоПолноправныйПользователь(,Истина));
	
	Параметры.Вставить("ИменаПодсистем", СтандартныеПодсистемыПовтИсп.ИменаПодсистем());
	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации", ЭтоБазоваяВерсияКонфигурации());
	Параметры.Вставить("ЭтоУчебнаяПлатформа", ЭтоУчебнаяПлатформа());
	Параметры.Вставить("ИмяТекущегоПользователя", ТекущийПользователь().Имя);
	Параметры.Вставить("ИмяCOMСоединителя", ОбщегоНазначенияКлиентСервер.ИмяCOMСоединителя());
	Параметры.Вставить("КодОсновногоЯзыка", Метаданные.ОсновнойЯзык.КодЯзыка);
	
	Параметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", ЗапрашиватьПодтверждениеПриЗавершенииПрограммы());
	
	ОбщиеПараметры = ОбщегоНазначения.ОбщиеПараметрыБазовойФункциональности();
	
	Параметры.Вставить("МинимальнаяВерсияПлатформы",   ОбщиеПараметры.МинимальнаяВерсияПлатформы);
	Параметры.Вставить("РекомендуемаяВерсияПлатформы", ОбщиеПараметры.РекомендуемаяВерсияПлатформы);
	// Устарели. Для обратной совместимости.
	Параметры.Вставить("МинимальноНеобходимаяВерсияПлатформы", ОбщиеПараметры.МинимальноНеобходимаяВерсияПлатформы);
	Параметры.Вставить("РаботаВПрограммеЗапрещена",            ОбщиеПараметры.РаботаВПрограммеЗапрещена);
	
	Параметры.Вставить("РекомендуемыйОбъемОперативнойПамяти", ОбщиеПараметры.РекомендуемыйОбъемОперативнойПамяти);
	Параметры.Вставить("ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти", ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти()
		И Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела"));
	
	Параметры.Вставить("ЭтоСеансВнешнегоПользователя", ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя());
	Параметры.Вставить("ИнформационнаяБазаФайловая",   ОбщегоНазначения.ИнформационнаяБазаФайловая());
	
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ОпцииИнтерфейса") Тогда
		
		Параметры.Вставить("ОпцииИнтерфейса", ОбщегоНазначенияПовтИсп.ОпцииИнтерфейса());
	КонецЕсли;
	
	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		ОшибкаНедостаточноПравДляВходаВПрограмму = ПользователиСлужебный.ОшибкаНедостаточноПравДляВходаВПрограмму(
			Не Параметры.ПолученныеПараметрыКлиента.Свойство("ОшибкаНедостаточноПравДляВходаВПрограмму"));
		
		Если ЗначениеЗаполнено(ОшибкаНедостаточноПравДляВходаВПрограмму) Тогда
			Параметры.Вставить("ОшибкаНедостаточноПравДляВходаВПрограмму", ОшибкаНедостаточноПравДляВходаВПрограмму);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РегламентныеЗадания") Тогда
		МодульРегламентныеЗаданияСлужебный = ОбщегоНазначения.ОбщийМодуль("РегламентныеЗаданияСлужебный");
		// Форма показывается только администратору.
		ПоказатьФормуБлокировки = МодульРегламентныеЗаданияСлужебный.УстановленаБлокировкаРаботыСВнешнимиРесурсами(
			ЭтоВызовПередНачаломРаботыСистемы, Истина) И Пользователи.ЭтоПолноправныйПользователь();
		Параметры.Вставить("ПоказатьФормуБлокировкиРаботыСВнешнимиРесурсами", ПоказатьФормуБлокировки);
	КонецЕсли;
	
	Если Не ОбновлениеИнформационнойБазыСлужебный.ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры)
	   И ЭтоВызовПередНачаломРаботыСистемы Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ПоказатьНерекомендуемуюВерсиюПлатформы")
	   И ПоказатьНерекомендуемуюВерсиюПлатформы(Параметры) Тогда
		
		Параметры.Вставить("ПоказатьНерекомендуемуюВерсиюПлатформы");
		СтандартныеПодсистемыВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы();
		Возврат Ложь;
	КонецЕсли;
	
	//УстановитьПривилегированныйРежим(Истина);
	//Если ЭтоВызовПередНачаломРаботыСистемы //+++
	//   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ВосстановитьСвязьСГлавнымУзлом")
	//   И Не ОбщегоНазначения.РазделениеВключено()
	//   И ПланыОбмена.ГлавныйУзел() = Неопределено
	//   И ЗначениеЗаполнено(Константы.ГлавныйУзел.Получить()) Тогда
	//	
	//	УстановитьПривилегированныйРежим(Ложь);
	//	Параметры.Вставить("ВосстановитьСвязьСГлавнымУзлом", Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь));
	//	СтандартныеПодсистемыВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы();
	//	Возврат Ложь;
	//КонецЕсли;
	//УстановитьПривилегированныйРежим(Ложь);
	
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И НЕ (Параметры.РазделениеВключено И Не Параметры.ДоступноИспользованиеРазделенныхДанных)
	   И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		ОписаниеОшибки = "";
		МодульРаботаВМоделиСервиса.ПриПроверкеБлокировкиОбластиДанныхПриЗапуске(ОписаниеОшибки);
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			Параметры.Вставить("ОбластьДанныхЗаблокирована", ОписаниеОшибки);
			// Работа будет завершена.
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Параметры.РазделениеВключено
		И ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы()
		И ОбновлениеИнформационнойБазыСлужебный.СтатусНевыполненныхОбработчиков(Истина) = "СтатусНеВыполнено" Тогда
		Параметры.Вставить("НеобходимоВыполнитьОбработчикиОтложенногоОбновления");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		МодульРаботаВБезопасномРежимеСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежимеСлужебный");
		МодульРаботаВБезопасномРежимеСлужебный.ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры, Истина);
	КонецЕсли;
	
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И НЕ Параметры.ПолученныеПараметрыКлиента.Свойство("ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском")
	   И ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ()
	   И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		
		МодульОбменДаннымиВызовСервера = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВызовСервера");
		Если МодульОбменДаннымиВызовСервера.ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском() Тогда
			Параметры.Вставить("ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка необходимости предварительного обновления параметров работы программы.
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И НЕ Параметры.ПолученныеПараметрыКлиента.Свойство("НеобходимоОбновлениеПараметровРаботыПрограммы") Тогда
		
		Если РегистрыСведений.ПараметрыРаботыПрограммы.НеобходимоОбновление() Тогда
			// Будет выполнено предварительное обновление.
			Параметры.Вставить("НеобходимоОбновлениеПараметровРаботыПрограммы");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Обязательные параметры для всех режимов работы.
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	
	Если ОбновлениеИнформационнойБазыСлужебный.НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы() Тогда
		Параметры.Вставить("НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		МодульРаботаВБезопасномРежимеСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежимеСлужебный");
		МодульРаботаВБезопасномРежимеСлужебный.ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры);
	КонецЕсли;
	
	Если Параметры.РазделениеВключено И Не Параметры.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Параметры для работы в локальном режиме или
	// в сеансе с установленными значениями разделителей в модели сервиса.
	
	Если ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Параметры.Вставить("НеобходимоОбновлениеИнформационнойБазы");
		СтандартныеПодсистемыВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы();
	КонецЕсли;
	
	Если Не Параметры.РазделениеВключено
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		Если МодульОбменДаннымиСервер.ЗагрузитьСообщениеОбменаДанными() Тогда
			Параметры.Вставить("ЗагрузитьСообщениеОбменаДанными");
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		МодульАвтономнаяРабота = ОбщегоНазначения.ОбщийМодуль("АвтономнаяРабота");
		Если МодульАвтономнаяРабота.ПродолжитьНастройкуАвтономногоРабочегоМеста(Параметры) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		ПользователиСлужебный.ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры, Отказ, Истина);
	КонецЕсли;
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);
	
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Параметры.Свойство("НеобходимоОбновлениеИнформационнойБазы") Тогда
		// Не следует добавлять остальные параметры до окончания обновления ИБ,
		// так как они могут рассчитывать, что обновление ИБ уже выполнено.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// данной подсистемы. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("ИменаПодсистем", СтандартныеПодсистемыПовтИсп.ИменаПодсистем());
	Параметры.Вставить("ДоступноИспользованиеРазделенныхДанных",
		ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
	Параметры.Вставить("РазделениеВключено", ОбщегоНазначения.РазделениеВключено());
	
	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации", ЭтоБазоваяВерсияКонфигурации());
	Параметры.Вставить("ЭтоУчебнаяПлатформа", ЭтоУчебнаяПлатформа());
	Параметры.Вставить("ИмяCOMСоединителя", ОбщегоНазначенияКлиентСервер.ИмяCOMСоединителя());
	
	ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);
	
	Параметры.Вставить("ИмяКонфигурации",     Метаданные.Имя);
	Параметры.Вставить("СинонимКонфигурации", Метаданные.Синоним);
	Параметры.Вставить("ВерсияКонфигурации",  Метаданные.Версия);
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	Параметры.Вставить("КодОсновногоЯзыка",   Метаданные.ОсновнойЯзык.КодЯзыка);
	
	Параметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
		ЗапрашиватьПодтверждениеПриЗавершенииПрограммы());
	
	Параметры.Вставить("ИнформационнаяБазаФайловая", ОбщегоНазначения.ИнформационнаяБазаФайловая());
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации и в дальнейшем во время работы с ней. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьОбщиеПараметрыРаботыКлиента(Параметры)
	
	Если Не Параметры.РазделениеВключено Или Параметры.ДоступноИспользованиеРазделенныхДанных Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Параметры.Вставить("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь());
		Параметры.Вставить("ЗаголовокПриложения", СокрЛП(Константы.ЗаголовокСистемы.Получить()));
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Параметры.Вставить("ЭтоГлавныйУзел", НЕ ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ());
	
	Параметры.Вставить("ТребуетсяОбновлениеКонфигурацииУзлаРИБ",
		ОбщегоНазначения.ТребуетсяОбновлениеКонфигурацииПодчиненногоУзлаРИБ());
	
КонецПроцедуры

// Возвращает номера версий, поддерживаемых программным интерфейсом ИмяИнтерфейса.
// См. ОбщегоНазначения.ПолучитьВерсииИнтерфейсаЧерезВнешнееСоединение.
//
// Параметры:
//   ИмяИнтерфейса - Строка - имя программного интерфейса.
//
// Возвращаемое значение:
//  Массив - список версий типа Строка.
//
Функция ПоддерживаемыеВерсии(ИмяИнтерфейса) Экспорт
	
	МассивВерсий = Неопределено;
	СтруктураПоддерживаемыхВерсий = Новый Структура;
	
	ИнтеграцияПодсистемБСП.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	СтруктураПоддерживаемыхВерсий.Свойство(ИмяИнтерфейса, МассивВерсий);
	
	Если МассивВерсий = Неопределено Тогда
		Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(Новый Массив);
	Иначе
		Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(МассивВерсий);
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// Устанавливает корректное значение константе НеИспользоватьРазделениеПоОбластямДанных.
//
Процедура УстановитьКонстантуНеИспользоватьРазделениеПоОбластямДанных(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыеЗначения = Новый Соответствие;
	
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		
		НовыеЗначения.Вставить("НеИспользоватьРазделениеПоОбластямДанных", Ложь);
		НовыеЗначения.Вставить("ЭтоАвтономноеРабочееМесто", Ложь)
		
	ИначеЕсли Константы.ЭтоАвтономноеРабочееМесто.Получить() Тогда
		
		НовыеЗначения.Вставить("НеИспользоватьРазделениеПоОбластямДанных", Ложь);
		
	Иначе
		
		НовыеЗначения.Вставить("НеИспользоватьРазделениеПоОбластямДанных", Истина);
		
	КонецЕсли;
	
	Для каждого КлючИЗначения Из НовыеЗначения Цикл
		
		Если Константы[КлючИЗначения.Ключ].Получить() <> КлючИЗначения.Значение Тогда
			
			Если НЕ Параметры.МонопольныйРежим Тогда
				Параметры.МонопольныйРежим = Истина;
				Возврат; // Требуется изменение
			КонецЕсли;
			
			Константы[КлючИЗначения.Ключ].Установить(КлючИЗначения.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сбрасывает дату обновления всех записей кэша версий, таким
// образом все записи кэша начинают считаться неактуальными.
//
Процедура ПометитьЗаписиКэшаВерсийНеактуальными() Экспорт
	
	НачатьТранзакцию();
	Попытка
		НаборЗаписей = РегистрыСведений.КэшПрограммныхИнтерфейсов.СоздатьНаборЗаписей();
		
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("РегистрСведений.КэшПрограммныхИнтерфейсов");
		Блокировка.Заблокировать();
		
		НаборЗаписей.Прочитать();
		Для каждого Запись Из НаборЗаписей Цикл
			Запись.ДатаОбновления = Неопределено;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Удаляет сохраненные пароли и изменяет структуру хранения настроек.
//
Процедура ОбновитьПараметрыАдминистрированияИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтароеЗначениеПараметров = Константы.ПараметрыАдминистрированияИБ.Получить().Получить();
	НовоеЗначениеПараметров = ПараметрыАдминистрированияПоУмолчанию();
	
	Если СтароеЗначениеПараметров <> Неопределено Тогда
		
		Если СтароеЗначениеПараметров.Свойство("ИмяАдминистратораИнформационнойБазы") Тогда
			Возврат; // Обновление уже было выполнено ранее.
		КонецЕсли;
		
		Если СтароеЗначениеПараметров.Свойство("ПортАгентаСервера")
			И ЗначениеЗаполнено(СтароеЗначениеПараметров.ПортАгентаСервера) Тогда
			НовоеЗначениеПараметров.ПортАгентаСервера = СтароеЗначениеПараметров.ПортАгентаСервера;
		КонецЕсли;
		
		Если СтароеЗначениеПараметров.Свойство("ПортКластераСерверов")
			И ЗначениеЗаполнено(СтароеЗначениеПараметров.ПортКластераСерверов) Тогда
			НовоеЗначениеПараметров.ПортКластера = СтароеЗначениеПараметров.ПортКластераСерверов;
		КонецЕсли;
		
		Если СтароеЗначениеПараметров.Свойство("ИмяАдминистратораКластера")
			И Не ПустаяСтрока(СтароеЗначениеПараметров.ИмяАдминистратораКластера) Тогда
			НовоеЗначениеПараметров.ИмяАдминистратораКластера = СтароеЗначениеПараметров.ИмяАдминистратораКластера;
		КонецЕсли;
		
		Если СтароеЗначениеПараметров.Свойство("ИмяАдминистратораИБ")
			И Не ПустаяСтрока(СтароеЗначениеПараметров.ИмяАдминистратораИБ) Тогда
			НовоеЗначениеПараметров.ИмяАдминистратораИнформационнойБазы = СтароеЗначениеПараметров.ИмяАдминистратораИБ;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПараметрыАдминистрирования(НовоеЗначениеПараметров);
	
КонецПроцедуры

// Обновляет значение константы Главный узел в узлах АРМ.
//
Процедура УстановитьЗначениеКонстантыГлавныйУзел() Экспорт
	
	Если ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		СохранитьГлавныйУзел();
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для перевода паролей в безопасное хранилище.
// Используется в обработчике обновления ИБ.
Процедура ПеренестиПаролиВБезопасноеХранилищеОбщиеДанные() Экспорт

	// Обмен данными
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		МодульОбменДаннымиСервер.ПеренестиПаролиВБезопасноеХранилище();
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для перевода паролей в безопасное хранилище.
// Используется в обработчике обновления ИБ.
Процедура ПеренестиПаролиВБезопасноеХранилище() Экспорт
	
	// Аутентификация на пользовательском сайте.
	Результат = Новый Структура("Логин,Пароль");
	Результат.Логин = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("АутентификацияНаПользовательскомСайте", "КодПользователя", "");
	Результат.Пароль = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("АутентификацияНаПользовательскомСайте", "Пароль", "");
	Если НЕ ПустаяСтрока(Результат.Логин) Тогда
		Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ИдентификаторыОбъектовМетаданных");
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, Результат.Логин, "Логин");
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, Результат.Пароль);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// Подсистема Отправка SMS
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
		МодульОтправкаSMS = ОбщегоНазначения.ОбщийМодуль("ОтправкаSMS");
		МодульОтправкаSMS.ПеренестиПаролиВБезопасноеХранилище();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениямиСлужебный");
		МодульРаботаСПочтовымиСообщениямиСлужебный.ПеренестиПаролиВБезопасноеХранилище();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетов = ОбщегоНазначения.ОбщийМодуль("РассылкаОтчетов");
		МодульРассылкаОтчетов.ПеренестиПаролиВБезопасноеХранилище();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события.

// Обработчик события ПередЗаписью предопределенных элементов.
Процедура ЗапретитьПометкуУдаленияПредопределенныхЭлементовПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
	 Или Источник.ИмяПредопределенныхДанных = ""
	 Или Источник.ПометкаУдаления <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		ВызватьИсключение
			НСтр("ru = 'Недопустимо создавать предопределенный элемент помеченный на удаление.'");
	Иначе
		СтарыеСвойства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник.Ссылка, "ПометкаУдаления, ИмяПредопределенныхДанных");
		
		Если СтарыеСвойства.ИмяПредопределенныхДанных <> ""
		   И СтарыеСвойства.ПометкаУдаления <> Истина Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недопустимо помечать на удаление предопределенный элемент:
				           |""%1"".'"),
				Строка(Источник.Ссылка));
			
		ИначеЕсли СтарыеСвойства.ИмяПредопределенныхДанных = ""
		        И СтарыеСвойства.ПометкаУдаления = Истина Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недопустимо связывать с именем предопределенного элемент, помеченный на удаление:
				           |""%1"".'"),
				Строка(Источник.Ссылка));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередУдалением предопределенных элементов.
Процедура ЗапретитьУдалениеПредопределенныхЭлементовПередУдалением(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
	 Или Источник.ИмяПредопределенныхДанных = "" Тогда
		Возврат;
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Недопустимо удалять предопределенный элемент
		           |""%1"".'"),
		Строка(Источник.Ссылка));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка подписок на события планов обмена РИБ.

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхПодчиненному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхПодчиненномуСобытие(Источник, ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза) Экспорт
	
	ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	
	Если ОтправкаЭлемента <> ОтправкаЭлементаДанных.Игнорировать Тогда
		// Вызов переопределяемого обработчика для выполнения прикладной логики обмена РИБ.
		ОбщегоНазначенияПереопределяемый.ПриОтправкеДанныхПодчиненному(Источник, ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза);
	КонецЕсли;
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхГлавному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхГлавномуСобытие(Источник, ЭлементДанных, ОтправкаЭлемента) Экспорт
	
	ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Источник);
	
	Если ОтправкаЭлемента <> ОтправкаЭлементаДанных.Игнорировать Тогда
		// Вызов переопределяемого обработчика для выполнения прикладной логики обмена РИБ.
		ОбщегоНазначенияПереопределяемый.ПриОтправкеДанныхГлавному(Источник, ЭлементДанных, ОтправкаЭлемента);
	КонецЕсли;
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтПодчиненногоСобытие(Источник, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	
	ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Источник);
	
	Если ПолучениеЭлемента <> ПолучениеЭлементаДанных.Игнорировать Тогда
		// Вызов переопределяемого обработчика для выполнения прикладной логики обмена РИБ.
		ОбщегоНазначенияПереопределяемый.ПриПолученииДанныхОтПодчиненного(Источник, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	КонецЕсли;
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной
// информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтГлавногоСобытие(Источник, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	
	ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Источник);
	
	Если ПолучениеЭлемента <> ПолучениеЭлементаДанных.Игнорировать Тогда
		// Вызов переопределяемого обработчика для выполнения прикладной логики обмена РИБ.
		ОбщегоНазначенияПереопределяемый.ПриПолученииДанныхОтГлавного(Источник, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик подписки на событие ПередЗаписью для ПланОбменаОбъект.
// Используется для вызова обработчика события ПослеПолученияДанных при обмене в распределенной ИБ.
//
Процедура ПослеПолученияДанных(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.Метаданные().РаспределеннаяИнформационнаяБаза Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.НомерПринятого = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "НомерПринятого") Тогда
		Возврат;
	КонецЕсли;
	
	ПолучениеИзГлавногоУзла = (ПланыОбмена.ГлавныйУзел() = Источник.Ссылка);
	
	ИнтеграцияПодсистемБСП.ПослеПолученияДанных(Источник, Отказ, ПолучениеИзГлавногоУзла);
	
КонецПроцедуры

// Процедура-обработчик подписки на событие ПередЗаписью для ПланОбменаОбъект.
// Используется для вызова обработчика события ПослеОтправкиДанных при обмене в распределенной ИБ.
//
Процедура ПослеОтправкиДанных(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.Метаданные().РаспределеннаяИнформационнаяБаза Тогда
		Возврат;
	КонецЕсли;
		
	Если Источник.НомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "НомерОтправленного") Тогда
		Возврат;
	КонецЕсли;
	
	ОтправкаВГлавныйУзел = (ПланыОбмена.ГлавныйУзел() = Источник.Ссылка);
	
	// Тут нужно вставить вызов обработчика ПослеОтправкиДанных(Получатель, Отказ, ОтправкаВГлавныйУзел).
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПередЗапускомПрограммы()
	
	// Привилегированный режим (установлен платформой).
	
	// Проверка основного языка программирования, установленного в конфигурации.
	Если Метаданные.ВариантВстроенногоЯзыка <> Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Русский Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вариант встроенного языка конфигурации ""%1"" не поддерживается.
			           |Необходимо использовать вариант языка ""%2"".'"),
			Метаданные.ВариантВстроенногоЯзыка,
			Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Русский);
	КонецЕсли;
		
	// Проверка настройки совместимости конфигурации с версией платформы.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	МинимальнаяВерсияПлатформы = "8.3.10.2168";
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, МинимальнаяВерсияПлатформы) < 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для запуска необходима версия платформы 1С:Предприятие %1 или выше.'"), МинимальнаяВерсияПлатформы);
	КонецЕсли;
	
	Режимы = Метаданные.СвойстваОбъектов.РежимСовместимости;
	ТекущийРежим = Метаданные.РежимСовместимости;
	
	Если ТекущийРежим = Режимы.НеИспользовать Тогда
		НедоступныйРежим = "";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_1 Тогда
		НедоступныйРежим = "8.1"
	ИначеЕсли ТекущийРежим = Режимы.Версия8_2_13 Тогда
		НедоступныйРежим = "8.2.13"
	ИначеЕсли ТекущийРежим = Режимы.Версия8_2_16 Тогда
		НедоступныйРежим = "8.2.16";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_1 Тогда
		НедоступныйРежим = "8.3.1";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_2 Тогда
		НедоступныйРежим = "8.3.2";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_3 Тогда
		НедоступныйРежим = "8.3.3";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_4 Тогда
		НедоступныйРежим = "8.3.4";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_5 Тогда
		НедоступныйРежим = "8.3.5";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_6 Тогда
		НедоступныйРежим = "8.3.6";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_7 Тогда
		НедоступныйРежим = "8.3.7";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_8 Тогда
		НедоступныйРежим = "8.3.8";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_9 Тогда
		НедоступныйРежим = "8.3.9";
	Иначе
		НедоступныйРежим = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НедоступныйРежим) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Режим совместимости конфигурации с 1С:Предприятием версии %1 не поддерживается.
			           |Для запуска установите в конфигурации режим совместимости с 1С:Предприятием
			           |версии не ниже 8.3.10 или ""Не использовать"".'"),
			НедоступныйРежим);
	КонецЕсли;
	
	// Проверка заполнения версии конфигурации.
	Если ПустаяСтрока(Метаданные.Версия) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено свойство конфигурации Версия.'");
	Иначе
		Попытка
			НулеваяВерсия = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Метаданные.Версия, "0.0.0.0") = 0;
		Исключение
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не правильно заполнено свойство конфигурации Версия: ""%1"".
				           |Правильный формат, например: ""1.2.3.45"".'"),
				Метаданные.Версия);
		КонецПопытки;
		Если НулеваяВерсия Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не правильно заполнено свойство конфигурации Версия: ""%1"".
				           |Версия не может быть нулевой.'"),
				Метаданные.Версия);
		КонецЕсли;
	КонецЕсли;
	
	Если (Метаданные.ОсновныеРоли.Количество() <> 2 И Метаданные.ОсновныеРоли.Количество() <> 3)
	 Или Не Метаданные.ОсновныеРоли.Содержит(Метаданные.Роли.АдминистраторСистемы)
	 Или Не Метаданные.ОсновныеРоли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
		ВызватьИсключение
			НСтр("ru = 'В конфигурации в свойстве ОсновныеРоли не указаны стандартные роли
			           |АдминистраторСистемы и ПолныеПрава или указаны лишние роли.'");
	КонецЕсли;
	
	// Проверка возможности выполнения обработчиков установки параметров сеанса для запуска программы.
	ПроверитьВозможностьВыполненияОбработчиковУстановкиПараметровСеанса();
	
	Если Не ЗначениеЗаполнено(ПользователиИнформационнойБазы.ТекущийПользователь().Имя)
	   И (Не ОбщегоНазначения.РазделениеВключено()
	      Или Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных())
	   И ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ("СтандартныеПодсистемы",
	       ОбщегоНазначения.РазделениеВключено()) = "0.0.0.0" Тогда
		
		ПользователиСлужебный.УстановитьНачальныеНастройки("");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ПриПроверкеВключенияБезопасногоРежимаРазделенияДанных();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных") Тогда
		// Установка флага активности пользователей в области.
		МодульРезервноеКопированиеОбластейДанных = ОбщегоНазначения.ОбщийМодуль("РезервноеКопированиеОбластейДанных");
		МодульРезервноеКопированиеОбластейДанных.УстановитьФлагАктивностиПользователяВОбласти();
	КонецЕсли;
	
	ОчиститьНачальнуюСтраницуНеразделенногоПользователяПриПервомВходе();
	ОбработатьОчередьСкопированныхНастроек();
	
КонецПроцедуры

// Для процедуры ПередЗапускомПрограммы.
Процедура ОчиститьНачальнуюСтраницуНеразделенногоПользователяПриПервомВходе()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		СеансЗапущенБезРазделителей = МодульРаботаВМоделиСервиса.СеансЗапущенБезРазделителей();
	Иначе
		СеансЗапущенБезРазделителей = Истина;
	КонецЕсли;
	
	Если ТекущийРежимЗапуска() = Неопределено
	 Или Не ОбщегоНазначения.РазделениеВключено()
	 Или Не СеансЗапущенБезРазделителей Тогда
		Возврат;
	КонецЕсли;
	
	КлючОбъекта  = "БазоваяФункциональность";
	КлючНастроек = "ОчисткаНачальнойСтраницыНеразделенногоПользователяВыполнена";
	
	Если ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек) = 1 Тогда
		УстановитьПустуюФормуНаПустойРабочийСтол();
		Возврат;
	КонецЕсли;
	
	СоставФорм = Новый СоставФормНачальнойСтраницы;
	СоставФорм.ЛеваяКолонка.Добавить("ОбщаяФорма.ПустойРабочийСтол");
	Настройки = Новый НастройкиНачальнойСтраницы;
	Настройки.УстановитьСоставФорм(СоставФорм);
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы", "", Настройки);
	
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, 1);
	
КонецПроцедуры

Процедура ОбработатьОчередьСкопированныхНастроек()
	
	Если ТекущийРежимЗапуска() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчередьНастроек = ХранилищеОбщихНастроек.Загрузить("ОчередьНастроек", "НеПримененныеНастройки");
	Если ТипЗнч(ОчередьНастроек) <> Тип("ХранилищеЗначения") Тогда
		Возврат;
	КонецЕсли;
	ОчередьНастроек = ОчередьНастроек.Получить();
	Если ТипЗнч(ОчередьНастроек) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементОчереди Из ОчередьНастроек Цикл
		Попытка
			Настройка = ХранилищеСистемныхНастроек.Загрузить(ЭлементОчереди.Ключ, ЭлементОчереди.Значение);
		Исключение
			Продолжить;
		КонецПопытки;
		ХранилищеСистемныхНастроек.Сохранить(ЭлементОчереди.Ключ, ЭлементОчереди.Значение, Настройка);
	КонецЦикла;
	
	ХранилищеОбщихНастроек.Сохранить("ОчередьНастроек", "НеПримененныеНастройки", Неопределено);
	
КонецПроцедуры

Процедура ВыполнитьОбработчикиУстановкиПараметровСеанса(ИменаПараметровСеанса, Обработчики, УстановленныеПараметры)
	
	Перем ТекстСообщения;
	
	// Массив с ключами параметров сеанса
	// задаются начальным словом в имени параметра сеанса и символом "*".
	ПараметрыСеансаКлючи = Новый Массив;
	
	Для Каждого Запись Из Обработчики Цикл
		Если СтрНайти(Запись.Ключ, "*") > 0 Тогда
			КлючПараметра = СокрЛП(Запись.Ключ);
			ПараметрыСеансаКлючи.Добавить(Лев(КлючПараметра, СтрДлина(КлючПараметра)-1));
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИмяПараметра Из ИменаПараметровСеанса Цикл
		Если УстановленныеПараметры.Найти(ИмяПараметра) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Обработчик = Обработчики.Получить(ИмяПараметра);
		Если Обработчик <> Неопределено Тогда
			ПараметрыОбработчика = Новый Массив();
			ПараметрыОбработчика.Добавить(ИмяПараметра);
			ПараметрыОбработчика.Добавить(УстановленныеПараметры);
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(Обработчик, ПараметрыОбработчика);
			Продолжить;
		КонецЕсли;
		
		Для Каждого ИмяКлючаПараметра Из ПараметрыСеансаКлючи Цикл
			Если СтрНачинаетсяС(ИмяПараметра, ИмяКлючаПараметра) Тогда
				Обработчик = Обработчики.Получить(ИмяКлючаПараметра + "*");
				ПараметрыОбработчика = Новый Массив();
				ПараметрыОбработчика.Добавить(ИмяПараметра);
				ПараметрыОбработчика.Добавить(УстановленныеПараметры);
				ОбщегоНазначения.ВыполнитьМетодКонфигурации(Обработчик, ПараметрыОбработчика);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеОбъектовМетаданных(Объекты)
	
	Результат = Новый Массив;
	
	Для Каждого Объект Из Объекты Цикл
		
		Результат.Добавить(Объект.ПолноеИмя());
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ИгнорироватьОтправкуИдентификаторовОбъектовМетаданных(ЭлементДанных, ОтправкаЭлемента, Знач СозданиеНачальногоОбраза = Ложь)
	
	Если Не СозданиеНачальногоОбраза
		И ОбъектМетаданных(ЭлементДанных) = Метаданные.Справочники.ИдентификаторыОбъектовМетаданных Тогда
		
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИгнорироватьПолучениеИдентификаторовОбъектовМетаданных(ЭлементДанных, ПолучениеЭлемента)
	
	Если ОбъектМетаданных(ЭлементДанных) = Метаданные.Справочники.ИдентификаторыОбъектовМетаданных Тогда
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектМетаданных(Знач ЭлементДанных)
	
	Возврат ?(ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта"), ЭлементДанных.Ссылка.Метаданные(), ЭлементДанных.Метаданные());
	
КонецФункции

Функция СозданиеНачальногоОбраза(Знач ЭлементДанных)
	
	Возврат ?(ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта"), Ложь, ЭлементДанных.ДополнительныеСвойства.Свойство("СозданиеНачальногоОбраза"));
	
КонецФункции

Функция ПоказатьНерекомендуемуюВерсиюПлатформы(Параметры)
	
	Если Параметры.РазделениеВключено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка, что пользователь не внешний.
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторПользователяИБ",
		ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Текущая       = СистемнаяИнформация.ВерсияПриложения;
	Минимальная   = Параметры.МинимальнаяВерсияПлатформы;
	Рекомендуемая = Параметры.РекомендуемаяВерсияПлатформы;
	
	Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Текущая, Минимальная) < 0
		Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Текущая, Рекомендуемая) < 0;
	
КонецФункции

Функция ПараметрыАдминистрированияПоУмолчанию()
	
	ПараметрыАдминистрированияКластера = АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера();
	ПараметрыАдминистрированияИБ = АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера();
	
	// Объединяем структуры параметров.
	СтруктураПараметровАдминистрирования = ПараметрыАдминистрированияКластера;
	Для Каждого Элемент Из ПараметрыАдминистрированияИБ Цикл
		СтруктураПараметровАдминистрирования.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	СтруктураПараметровАдминистрирования.Вставить("ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок", Ложь);
	
	Возврат СтруктураПараметровАдминистрирования;
	
КонецФункции

Процедура ПрочитатьПараметрыИзСтрокиСоединения(СтруктураПараметровАдминистрирования)
	
	ПодстрокиСтрокиСоединения = СтрРазделить(СтрокаСоединенияИнформационнойБазы(), ";");
	
	СтрокаИмениСервера = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[0], 7));
	СтруктураПараметровАдминистрирования.ИмяВКластере = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[1], 6));
	
	СписокСерверовКластера = СтрРазделить(СтрокаИмениСервера, ",");
	
	ИмяСервера = СписокСерверовКластера[0];
	
	// Протокол может быть только tcp. Можно отбросить.
	Если СтрНачинаетсяС(ВРег(ИмяСервера), "TCP://") Тогда
		ИмяСервера = Сред(ИмяСервера, 7);
	КонецЕсли;
	
	// Если в качестве имени сервера передается адрес IPv6, то порт может быть только после закрывающей квадратной скобки.
	НачальнаяПозиция = СтрНайти(ИмяСервера, "]");
	Если НачальнаяПозиция <> 0 Тогда
		РазделительПорта = СтрНайти(ИмяСервера, ":",, НачальнаяПозиция);
	Иначе
		РазделительПорта = СтрНайти(ИмяСервера, ":");
	КонецЕсли;
	
	Если РазделительПорта > 0 Тогда
		АдресАгентаСервера = Сред(ИмяСервера, 1, РазделительПорта - 1);
		ПортКластера = Число(Сред(ИмяСервера, РазделительПорта + 1));
		Если СтруктураПараметровАдминистрирования.ПортКластера = 1541 Тогда
			СтруктураПараметровАдминистрирования.ПортКластера = ПортКластера;
		КонецЕсли;
	Иначе
		АдресАгентаСервера = ИмяСервера;
	КонецЕсли;
	
	СтруктураПараметровАдминистрирования.АдресАгентаСервера = АдресАгентаСервера;
	
КонецПроцедуры

// Проверяет возможность выполнения обработчиков установки параметров сеанса.
//
// В случае, если при текущих настройках профилей безопасности (в кластере серверов и в информационной
// базе) выполнение обработчиков установки параметров сеанса невозможно - генерируется исключение,
// содержащее описание причины невозможности выполнения обработчиков установки параметров сеанса
// и перечень действий, которые можно предпринять для устранения этой причины.
//
Процедура ПроверитьВозможностьВыполненияОбработчиковУстановкиПараметровСеанса()
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы()) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
		ПрофильИнформационнойБазы = МодульРаботаВБезопасномРежиме.ПрофильБезопасностиИнформационнойБазы(Истина);
	Иначе
		ПрофильИнформационнойБазы = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПрофильИнформационнойБазы) Тогда
		
		// Информационная база настроена на использование с профилем безопасности, в котором запрещен
		// полный доступ к внешним модулям.
		
		УстановитьБезопасныйРежим(ПрофильИнформационнойБазы);
		Если БезопасныйРежим() <> ПрофильИнформационнойБазы Тогда
			
			// Профиль ИБ не доступен для выполнения обработчиков.
			
			УстановитьБезопасныйРежим(Ложь);
			
			Если ВозможноВыполнениеОбработчиковУстановкиПараметровСеансаБезУстановкиБезопасногоРежима() Тогда
				
				Возврат;
				
			Иначе
				
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Невозможно выполнение обработчиков установки параметров сеанса по причине: профиль безопасности %1 отсутствует в кластере серверов 1С:Предприятия, или для него запрещено использование в качестве профиля безопасности безопасного режима.
						|
						|Для восстановления работоспособности программы требуется отключить использование профиля безопасности через консоль кластера и заново настроить профили безопасности с помощью интерфейса конфигурации (соответствующие команды находятся в разделе настроек программы).'"),
					ПрофильИнформационнойБазы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДоступенПривилегированныйРежим = ДоступенПереходВПривилегированныйРежим();
		
		УстановитьБезопасныйРежим(Ложь);
		
		Если Не ДоступенПривилегированныйРежим Тогда
			
			// Профиль ИБ доступен для выполнения обработчиков, но в нем невозможна установка привилегированного режима.
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно выполнение обработчиков установки параметров сеанса по причине: профиль безопасности %1 не содержит разрешения на установку привилегированного режима. Возможно, он был отредактирован через консоль кластера.
					|
					|Для восстановления работоспособности программы требуется отключить использование профиля безопасности через консоль кластера и заново настроить профили безопасности с помощью интерфейса конфигурации (соответствующие команды находятся в разделе настроек программы).'"),
				ПрофильИнформационнойБазы);
			
		КонецЕсли;
		
	Иначе
		
		// Информационная база не настроена на использование с профилем безопасности, в котором запрещен
		// полный доступ к внешним модулям.
		
		Попытка
			
			ДоступенПривилегированныйРежим = Вычислить("ДоступенПереходВПривилегированныйРежим()");
			
		Исключение
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно выполнение обработчиков установки параметров сеанса по причине: %1.
					|
					|Возможно, для информационной базы через консоль кластера был установлен профиль безопасности, не допускающий выполнения внешних модулей без установки безопасного режима. В этом случае для восстановления работоспособности программы требуется отключить использование профиля безопасности через консоль кластера и заново настроить профили безопасности с помощью интерфейса конфигурации (соответствующие команды находятся в разделе настроек программы).При этом программа будет автоматически корректно настроена на использование совместно с включенными профилями безопасности.'"),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность выполнения обработчиков установки параметров сеанса без установки безопасного режима.
//
// Возвращаемое значение: Булево.
//
Функция ВозможноВыполнениеОбработчиковУстановкиПараметровСеансаБезУстановкиБезопасногоРежима()
	
	Попытка
		
		Результат = Вычислить("ДоступенПереходВПривилегированныйРежим()");
		Возврат Результат;
		
	Исключение
		
		ШаблонЗаписиЖР = НСтр("ru = 'При установке параметров сеанса произошла ошибка:
			|
			|--------------------------------------------------------------------------------------------
			|%1
			|--------------------------------------------------------------------------------------------
			|
			|Запуск программы будет невозможен.'");
		
		ТекстЗаписиЖР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаписиЖР, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Установка параметров сеанса'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстЗаписиЖР);
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

// Проверяет возможность перехода в привилегированный режим из текущего безопасного режима.
//
// Возвращаемое значение: Булево.
//
Функция ДоступенПереходВПривилегированныйРежим()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПривилегированныйРежим();
	
КонецФункции

// Для процедуры ЗарегистрироватьИзменениеПриоритетныхДанныхДляПодчиненныхУзловРИБ.
Процедура ЗарегистрироватьИзменениеПредопределенных(УзлыПлановОбменаРИБ, КоллекцияМетаданных)
	
	Запрос = Новый Запрос;
	
	Для Каждого ОбъектМетаданных Из КоллекцияМетаданных Цикл
		УзлыРИБ = Новый Массив;
		
		Для Каждого УзлыПланаОбмена Из УзлыПлановОбменаРИБ Цикл
			Если Не УзлыПланаОбмена.Ключ.Содержит(ОбъектМетаданных) Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого УзелРИБ Из УзлыПланаОбмена.Значение Цикл
				УзлыРИБ.Добавить(УзелРИБ);
			КонецЦикла;
		КонецЦикла;
		
		Если УзлыРИБ.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущаяТаблица.Ссылка КАК Ссылка
		|ИЗ
		|	&ТекущаяТаблица КАК ТекущаяТаблица
		|ГДЕ
		|	ТекущаяТаблица.Предопределенный";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекущаяТаблица", ОбъектМетаданных.ПолноеИмя());
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(УзлыРИБ, Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры УстановитьКлючНазначенияФормы.
Процедура УстановитьКлючНазначенияИспользованияФормы(Форма, Ключ, УстановитьНастройки)
	
	Если Не ЗначениеЗаполнено(Ключ)
	 Или Форма.КлючНазначенияИспользования = Ключ Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не УстановитьНастройки Тогда
		Форма.КлючНазначенияИспользования = Ключ;
		Возврат;
	КонецЕсли;
	
	ТипыНастроек = Новый Массив;
	// Русский вариант.
	ТипыНастроек.Добавить("/КлючТекущегоВарианта");
	ТипыНастроек.Добавить("/КлючТекущихПользовательскихНастроек");
	ТипыНастроек.Добавить("/ТекущиеПользовательскиеНастройки");
	ТипыНастроек.Добавить("/КлючТекущихНастроекДанных");
	ТипыНастроек.Добавить("/ТекущиеДанные");
	ТипыНастроек.Добавить("/НастройкиФормы");
	// Английский вариант.
	ТипыНастроек.Добавить("/CurrentVariantKey");
	ТипыНастроек.Добавить("/CurrentUserSettingsKey");
	ТипыНастроек.Добавить("/CurrentUserSettings");
	ТипыНастроек.Добавить("/CurrentDataSettingsKey");
	ТипыНастроек.Добавить("/CurrentData");
	ТипыНастроек.Добавить("/FormSettings");
	Если ХранилищеСистемныхНастроек.Загрузить(Ключ, "КлючНазначенияИспользованияФормы") <> Истина 
		 И ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		УстановитьНастройкиДляКлюча(Ключ, ТипыНастроек, Форма.ИмяФормы, Форма.КлючНазначенияИспользования);
		ХранилищеСистемныхНастроек.Сохранить(Ключ, "КлючНазначенияИспользованияФормы", Истина);
	КонецЕсли;
	
	Форма.КлючНазначенияИспользования = Ключ;
	
КонецПроцедуры

// Для процедуры УстановитьКлючНазначенияФормы.
Процедура УстановитьКлючСохраненияПоложенияОкнаФормы(Форма, Ключ, УстановитьНастройки)
	
	Если Не ЗначениеЗаполнено(Ключ)
	 Или Форма.КлючСохраненияПоложенияОкна = Ключ Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не УстановитьНастройки Тогда
		Форма.КлючСохраненияПоложенияОкна = Ключ;
		Возврат;
	КонецЕсли;
	
	ТипыНастроек = Новый Массив;
	// Русский вариант.
	ТипыНастроек.Добавить("/НастройкиОкна");
	ТипыНастроек.Добавить("/Такси/НастройкиОкна");
	ТипыНастроек.Добавить("/НастройкиОкнаВебКлиента");
	ТипыНастроек.Добавить("/Такси/НастройкиОкнаВебКлиента");
	// Английский вариант.
	ТипыНастроек.Добавить("/WindowSettings");
	ТипыНастроек.Добавить("/Taxi/WindowSettings");
	ТипыНастроек.Добавить("/WebClientWindowSettings");
	ТипыНастроек.Добавить("/Taxi/WebClientWindowSettings");
	
	Если ХранилищеСистемныхНастроек.Загрузить(Ключ, "КлючСохраненияПоложенияОкнаФормы") <> Истина 
		И ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		УстановитьНастройкиДляКлюча(Ключ, ТипыНастроек, Форма.ИмяФормы, Форма.КлючСохраненияПоложенияОкна);
		ХранилищеСистемныхНастроек.Сохранить(Ключ, "КлючСохраненияПоложенияОкнаФормы", Истина);
	КонецЕсли;
	
	Форма.КлючСохраненияПоложенияОкна = Ключ;
	
КонецПроцедуры

// Для процедур УстановитьКлючНазначенияИспользованияФормы, УстановитьКлючСохраненияПоложенияОкнаФормы.
Процедура УстановитьНастройкиДляКлюча(Ключ, ТипыНастроек, ИмяФормы, ТекущийКлюч)
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйКлюч = "/" + Ключ;
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	
	Для каждого ТипНастроек Из ТипыНастроек Цикл
		Отбор.Вставить("КлючОбъекта", ИмяФормы + НовыйКлюч + ТипНастроек);
		Выборка = ХранилищеСистемныхНастроек.Выбрать(Отбор);
		Если Выборка.Следующий() Тогда
			Возврат; // Настройки для ключа уже установлены.
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущийКлюч) Тогда
		ТекущийКлюч = "/" + ТекущийКлюч;
	КонецЕсли;
	
	// Установка начальных настроек ключа копированием от текущего ключа.
	Для Каждого ТипНастроек Из ТипыНастроек Цикл
		Отбор.Вставить("КлючОбъекта", ИмяФормы + ТекущийКлюч + ТипНастроек);
		Выборка = ХранилищеСистемныхНастроек.Выбрать(Отбор);
		КлючОбъекта = ИмяФормы + НовыйКлюч + ТипНастроек;
		Пока Выборка.Следующий() Цикл
			ОписаниеНастроек = Новый ОписаниеНастроек;
			ОписаниеНастроек.Представление = Выборка.Представление;
			ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, Выборка.КлючНастроек,
				Выборка.Настройки, ОписаниеНастроек);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Другие процедуры и функции.

//+++ КучеровРМ 26.02.2022

Функция ЭлементыСтиля() Экспорт
	
	НаборЭлементовСтиля = Новый Структура;
	Для каждого ЭлементСтиля Из Метаданные.ЭлементыСтиля Цикл
		НаборЭлементовСтиля.Вставить(ЭлементСтиля.Имя, ЭлементСтиля.Значение);
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(НаборЭлементовСтиля);
	
КонецФункции

// Возвращает сериализуемый набор элементов стиля.
// 
// Возвращаемое значение:
//  Структура - элементы стиля
//   * Ключ - Строка - имя элемента стиля.
//   * Значение - Строка, ОбъектМетаданных: ЭлементСтиля  - элемент стиля. Для толстого клиента обычного приложения
//                           элемент стиля преобразуется в системное строковое представление переданного значения.
//
Функция НаборЭлементовСтиля()
	
	НаборЭлементовСтиля = Новый Структура;
	Для каждого ЭлементСтиля Из Метаданные.ЭлементыСтиля Цикл
		
		Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
			НаборЭлементовСтиля.Вставить(ЭлементСтиля.Имя, Новый ХранилищеЗначения(ЭлементСтиля.Значение));
		Иначе
			НаборЭлементовСтиля.Вставить(ЭлементСтиля.Имя, ЭлементСтиля.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(НаборЭлементовСтиля);
	
КонецФункции

//--- КучеровРМ 26.02.2022  

// Для процедуры ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
Процедура ДобавитьЗапросРазрешенийНаИспользованиеРасширений(ЗапросыРазрешений)
	
	Если ОбщегоНазначения.РазделениеВключено()
	   И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Возврат;
	КонецЕсли;
	
	Разрешения = Новый Массив;
	ВсеРасширения = РасширенияКонфигурации.Получить();
	
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	Для Каждого Расширение Из ВсеРасширения Цикл
		Разрешения.Добавить(МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеВнешнегоМодуля(
			Расширение.Имя, Base64Строка(Расширение.ХешСумма)));
	КонецЦикла;
	
	ЗапросыРазрешений.Добавить(МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения,
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("РегистрСведений.ПараметрыРаботыВерсийРасширений")));

КонецПроцедуры

Функция ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти()
	РекомендуемыйОбъем = ОбщегоНазначения.ОбщиеПараметрыБазовойФункциональности().РекомендуемыйОбъемОперативнойПамяти;
	ОперативнаяПамять = ПараметрыКлиентаНаСервере().Получить("ОперативнаяПамять");
	Рекомендация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбщиеНастройкиПользователя", "РекомендацияПоОбъемуОперативнойПамяти");
	
	Возврат Не ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент()
		И ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И (Рекомендация = Неопределено Или Рекомендация.Показывать 
			Или (ТекущаяДатаСеанса() - Рекомендация.ДатаПредыдущегоПоказа) > 60*60*24*60)
		И ОперативнаяПамять < РекомендуемыйОбъем;
КонецФункции

Процедура ИгнорироватьОтправкуДанныхОбработанныхВЦентральномУзлеРИБПриОбновленииИБ(ЭлементДанных, СозданиеНачальногоОбраза, Получатель)
	
	Перем Индекс, СтрокаНабора;
	
	Если Получатель <> Неопределено
		И Не СозданиеНачальногоОбраза
		И ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ДанныеОбработанныеВЦентральномУзлеРИБ") Тогда
		
		Индекс = ЭлементДанных.Количество() - 1;
		
		Пока Индекс > 0 Цикл
			
			СтрокаНабора = ЭлементДанных[Индекс];
			
			Если СтрокаНабора.УзелПланаОбмена <> Получатель Тогда
				ЭлементДанных.Удалить(СтрокаНабора);
			КонецЕсли;
			
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
