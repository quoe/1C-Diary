////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
// ОбщийМодуль.ИнтернетПоддержкаПользователейКлиентСервер.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает номер версии библиотеки.
//
// Возвращаемое значение:
//	Строка - номер версии библиотеки.
//
Функция ВерсияБиблиотеки() Экспорт

	Возврат "2.2.2.20";

КонецФункции

// Определяет, доступно ли текущему пользователю выполнение интерактивного
// подключения Интернет-поддержки в соответствии с текущим режимом работы
// и правами пользователя.
//
// Возвращаемое значение:
//	Булево - Истина - интерактивное подключение доступно,
//		Ложь - в противном случае.
//
Функция ДоступноПодключениеИнтернетПоддержки() Экспорт
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат ИнтернетПоддержкаПользователей.ДоступноПодключениеИнтернетПоддержки();
	#Иначе
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	Возврат ПараметрыРаботыКлиента.ДоступноПодключениеИнтернетПоддержки;
	#КонецЕсли
	
КонецФункции

// Возвращает настройки соединения с серверами Интернет-поддержки.
//
// Возвращаемое значение:
//	Структура - настройки соединения. Поля структуры:
//		* УстанавливатьПодключениеНаСервере - Булево - Истина, если подключение
//			устанавливается на сервере 1С:Предприятие;
//		* ТаймаутПодключения - Число - таймаут подключения к серверам в секундах;
//		* ДоменРасположенияСерверовИПП - Число - если 0, устанавливать подключение
//			к серверам ИПП в доменной зоне 1c.ru, если 1 - в доменной зоне 1c.eu.
//
Функция НастройкиСоединенияССерверами() Экспорт
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	#Иначе
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	Результат = Новый Структура("ДоменРасположенияСерверовИПП");
	ЗаполнитьЗначенияСвойств(Результат, ПараметрыРаботыКлиента);
	Результат.Вставить("УстанавливатьПодключениеНаСервере", Истина);
	Результат.Вставить("ТаймаутПодключения"               , 30);
	Возврат Результат;
	#КонецЕсли

КонецФункции

#Область ИнтеграцияСБиблиотекойТехнологияСервиса

// Возвращает идентификатор поставщика услуг "Портал 1С:ИТС"
// для интеграции с подсистемой "Управление тарифами в модели
// сервиса" библиотеки "Технология сервиса".
//
// Возвращаемое значение:
//	Строка - идентификатор поставщика услуг.
//
Функция ИдентификаторПоставщикаУслугПортал1СИТС() Экспорт
	
	Возврат "Portal1CITS";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбщегоНазначения

// Возвращает уникальное имя программы, по которому программа
// идентифицируется в сервисах Интернет-поддержки.
//
Функция ИмяПрограммы() Экспорт

	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат ИнтернетПоддержкаПользователей.ИмяПрограммы();
	#Иначе
	ПараметрыИПП = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	Возврат ПараметрыИПП.ИмяПрограммы;
	#КонецЕсли

КонецФункции

// Возвращает значение свойства Метаданные.Имя
//
Функция ИмяКонфигурации() Экспорт

	Возврат ИмяКонфигурацииВМетаданных();

КонецФункции

// Возвращает значение свойства Метаданные.Версия
//
Функция ВерсияКонфигурации() Экспорт

	Возврат ВерсияКонфигурацииВМетаданных();

КонецФункции

// Подставляет в текст домен серверов ИПП в соответствии с текущими
// настройками подключения к серверам.
//
Функция ПодставитьДомен(Текст, Знач ДоменнаяЗона = Неопределено) Экспорт

	Если ДоменнаяЗона = Неопределено Тогда
		ДоменнаяЗона = НастройкиСоединенияССерверами().ДоменРасположенияСерверовИПП;
	КонецЕсли;

	Если ДоменнаяЗона = 1 Тогда
		Результат = СтрЗаменить(Текст, "webits-info@1c.ru", "webits-info@1c.ua");
		Возврат СтрЗаменить(Результат, ".1c.ru", ".1c.eu");
	Иначе
		Возврат Текст;
	КонецЕсли;

КонецФункции

// Возвращает строковое представление размера файла.
//
Функция ПредставлениеРазмераФайла(Знач Размер) Экспорт

	Если Размер < 1024 Тогда
		Возврат Формат(Размер, "ЧДЦ=1") + " " + НСтр("ru = 'байт'");
	ИначеЕсли Размер < 1024 * 1024 Тогда
		Возврат Формат(Размер / 1024, "ЧДЦ=1") + " " + НСтр("ru = 'КБ'");
	ИначеЕсли Размер < 1024 * 1024 * 1024 Тогда
		Возврат Формат(Размер / (1024 * 1024), "ЧДЦ=1") + " " + НСтр("ru = 'МБ'");
	Иначе
		Возврат Формат(Размер / (1024 * 1024 * 1024), "ЧДЦ=1") + " " + НСтр("ru = 'ГБ'");
	КонецЕсли;

КонецФункции

// Преобразует переданную строку:
// в форматированную строку, если строка начинается с "<body>" и заканчивается "</body>";
// В противном случае строка остается без изменений.
//
Функция ФорматированныйЗаголовок(ТекстСообщения) Экспорт

	Если Лев(ТекстСообщения, 6) <> "<body>" Тогда
		Возврат ТекстСообщения;
	Иначе
		#Если ВебКлиент Тогда
		Возврат ИнтернетПоддержкаПользователейВызовСервера.ФорматированнаяСтрокаИзHTML(ТекстСообщения);
		#Иначе
		Возврат ФорматированнаяСтрокаИзHTML(ТекстСообщения);
		#КонецЕсли
	КонецЕсли;

КонецФункции

Функция URLСтраницыСервисаLogin(Путь = "", Знач НастройкиСоединения = Неопределено) Экспорт

	Если НастройкиСоединения = Неопределено Тогда
		НастройкиСоединения = НастройкиСоединенияССерверами();
	КонецЕсли;
	Домен = НастройкиСоединения.ДоменРасположенияСерверовИПП;
	Возврат "https://"
		+ ХостСервисаLogin(Домен)
		+ Путь;

КонецФункции

Функция URLСтраницыПорталаПоддержки(Путь = "", Знач Домен = Неопределено) Экспорт
	
	Если Домен = Неопределено Тогда
		Домен = НастройкиСоединенияССерверами().ДоменРасположенияСерверовИПП;
	КонецЕсли;
	Возврат "https://"
		+ ХостПорталаПоддержки(Домен)
		+ Путь;

КонецФункции

Функция ПредставлениеРасписания(Расписание) Экспорт

	Если Расписание = Неопределено Тогда
		Возврат НСтр("ru = 'Настроить расписание'");
	Иначе
		Если ТипЗнч(Расписание) = Тип("Структура") Тогда
			Возврат Строка(ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(Расписание));
		Иначе
			Возврат Строка(Расписание);
		КонецЕсли;
	КонецЕсли;

КонецФункции

// Возвращает текст заголовка элемента формы из строки или форматированной строки.
//
Функция ТекстФорматированногоЗаголовка(Заголовок) Экспорт

	Если ТипЗнч(Заголовок) <> Тип("ФорматированнаяСтрока") Тогда
		Возврат Заголовок;
	КонецЕсли;

	ФДок = Новый ФорматированныйДокумент;
	ФДок.УстановитьФорматированнуюСтроку(Заголовок);
	Возврат ФДок.ПолучитьТекст();

КонецФункции

#Если Не ВебКлиент Тогда

// Загружает содержимое из Интернет по протоколу HTTP(S)
// с использованием методов GET, POST или PUT.
//
Функция ЗагрузитьСодержимоеИзИнтернет(
	Знач URL,
	Знач Логин = Неопределено,
	Знач Пароль = Неопределено,
	ДопПараметры = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Содержимое"        , Неопределено);
	Результат.Вставить("КодСостояния"      , 0);
	Результат.Вставить("ФорматОтвета"      , 0);

	// Формат ответа: 0 - имя файла ответа, 1 - как строка, 2 - как двоичные данные.
	// Метод: "GET", "POST" или "PUT".
	// ДанныеДляОбработки: данные, передаваемые методом POST.
	// ФорматДанныхДляОбработки: 0 - имя файла, 1 как строка, 2 - как двоичные данные.
	// Заголовки - заголовки запроса.
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ФорматОтвета"            , 0);
	ПараметрыПолучения.Вставить("Метод"                   , "GET");
	ПараметрыПолучения.Вставить("ДанныеДляОбработки"      , Неопределено);
	ПараметрыПолучения.Вставить("ФорматДанныхДляОбработки", 0);
	ПараметрыПолучения.Вставить("Заголовки"               , Неопределено);
	ПараметрыПолучения.Вставить("ИмяФайлаОтвета"          , Неопределено);
	ПараметрыПолучения.Вставить("Таймаут"                 , -1);
	ПараметрыПолучения.Вставить("НастройкиПрокси"         , Неопределено);
	
	Если ДопПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПолучения, ДопПараметры);
	КонецЕсли;
	
	Если ПараметрыПолучения.Таймаут = -1 Тогда
		// Таймаут по умолчанию.
		ПараметрыПолучения.Таймаут = 30;
	КонецЕсли;
	
	Результат.ФорматОтвета = ПараметрыПолучения.ФорматОтвета;
	
	КоличествоПеренаправлений  = 0;
	МаксКолвоПеренаправлений   = 7;
	Перенаправления            = Новый Массив;
	ВыполненныеПеренаправления = Новый Соответствие;
	ПроксиПоСхемам             = Новый Соответствие;
	ЗащищенноеСоединениеКэш    = Неопределено;
	
	URLДляПолучения = URL;
	HTTPЗапрос = Новый HTTPЗапрос;
	Если ПараметрыПолучения.Заголовки <> Неопределено Тогда
		HTTPЗапрос.Заголовки = ПараметрыПолучения.Заголовки;
	КонецЕсли;
	ТелоУстановлено = Ложь;
	Ответ = Неопределено;
	Пока КоличествоПеренаправлений < МаксКолвоПеренаправлений Цикл

		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLДляПолучения);
		Если СтруктураURI.Схема <> "https" Тогда
			ЗащищенноеСоединение = Неопределено;
		Иначе
			Если ЗащищенноеСоединениеКэш = Неопределено Тогда
				ЗащищенноеСоединениеКэш = НовыйЗащищенноеСоединение();
			КонецЕсли;
			ЗащищенноеСоединение = ЗащищенноеСоединениеКэш;
		КонецЕсли;

		Если НЕ ПустаяСтрока(СтруктураURI.Логин) Тогда
			ЛогинДляПолучения  = СтруктураURI.Логин;
			ПарольДляПолучения = СтруктураURI.Пароль;
		Иначе
			ЛогинДляПолучения  = Логин;
			ПарольДляПолучения = Пароль;
		КонецЕсли;

		Если СтруктураURI.Порт = Неопределено ИЛИ ПустаяСтрока(СтруктураURI.Порт) Тогда
			Порт = ?(ЗащищенноеСоединение = Неопределено, 80, 443);
		Иначе
			Порт = Число(СтруктураURI.Порт);
		КонецЕсли;

		Прокси = ПроксиПоСхемам.Получить(СтруктураURI.Схема);
		Если Прокси = Неопределено Тогда
			Если ПараметрыПолучения.НастройкиПрокси = Неопределено Тогда
				Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(СтруктураURI.Схема);
			Иначе
				Прокси = СформироватьИнтернетПрокси(ПараметрыПолучения.НастройкиПрокси, СтруктураURI.Схема);
			КонецЕсли;
			ПроксиПоСхемам.Вставить(СтруктураURI.Схема, Прокси);
		КонецЕсли;

		Соединение = Новый HTTPСоединение(
			СтруктураURI.Хост,
			Порт,
			ЛогинДляПолучения,
			ПарольДляПолучения,
			Прокси,
			ПараметрыПолучения.Таймаут,
			ЗащищенноеСоединение);

		Попытка

			HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;

			Если ПараметрыПолучения.Метод = "GET" Тогда
				Ответ = Соединение.Получить(HTTPЗапрос, ПараметрыПолучения.ИмяФайлаОтвета);
			ИначеЕсли ПараметрыПолучения.Метод = "HEAD" Тогда
				Ответ = Соединение.ПолучитьЗаголовки(HTTPЗапрос);
			Иначе

				Если НЕ ТелоУстановлено Тогда

					Если ПараметрыПолучения.ДанныеДляОбработки <> Неопределено Тогда

						Если ПараметрыПолучения.ФорматДанныхДляОбработки = 0 Тогда

							HTTPЗапрос.УстановитьИмяФайлаТела(ПараметрыПолучения.ДанныеДляОбработки);

						ИначеЕсли ПараметрыПолучения.ФорматДанныхДляОбработки = 1 Тогда

							HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыПолучения.ДанныеДляОбработки);

						Иначе

							HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыПолучения.ДанныеДляОбработки);

						КонецЕсли;

					КонецЕсли;

					ТелоУстановлено = Истина;

				КонецЕсли;

				Если ПараметрыПолучения.Метод = "PUT" Тогда
					Ответ = Соединение.Записать(HTTPЗапрос);
				Иначе
					// POST
					Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос, ПараметрыПолучения.ИмяФайлаОтвета);
				КонецЕсли;

			КонецЕсли;

		Исключение
			УстановитьОписаниеОшибки(
				Результат,
				"ConnectError",
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось загрузить содержимое (%1). %2'"),
					URL,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
				Перенаправления);
			Возврат Результат;
		КонецПопытки;

		Результат.КодСостояния = Ответ.КодСостояния;

		Если Ответ.КодСостояния = 301 // 301 Moved Permanently
			ИЛИ Ответ.КодСостояния = 302 // 302 Found, 302 Moved Temporarily
			ИЛИ Ответ.КодСостояния = 303 // 303 See Other by GET
			ИЛИ Ответ.КодСостояния = 307 Тогда // 307 Temporary Redirect

			КоличествоПеренаправлений = КоличествоПеренаправлений + 1;

			Если КоличествоПеренаправлений > МаксКолвоПеренаправлений Тогда
				УстановитьОписаниеОшибки(
					Результат,
					"ServerError",
					НСтр("ru = 'Превышено количество перенаправлений.'"),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка сервера при получении файла (%1). Превышено количество перенаправлений (%2).'"),
						URL,
						МаксКолвоПеренаправлений),
					Перенаправления);
				Возврат Результат;
			Иначе
				Location = Ответ.Заголовки.Получить("Location");
				Если Location = Неопределено Тогда
					УстановитьОписаниеОшибки(
						Результат,
						"ServerError",
						НСтр("ru = 'Некорректное перенаправление.'"),
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Ошибка сервера (%1) при получении файла (%2). Некорректное перенаправление, отсутствует HTTP-заголовок ответа ""Location"".'"),
							Ответ.КодСостояния,
							URL),
						Перенаправления);
					Возврат Результат;
				Иначе
					Location = СокрЛП(Location);
					Если ПустаяСтрока(Location) Тогда
						УстановитьОписаниеОшибки(
							Результат,
							"ServerError",
							НСтр("ru = 'Некорректное перенаправление.'"),
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка сервера (%1) при получении файла (%2). Некорректное перенаправление, пустой HTTP-заголовок ответа ""Location"".'"),
								Ответ.КодСостояния,
								URL),
							Перенаправления);
						Возврат Результат;
					КонецЕсли;

					Если ВыполненныеПеренаправления.Получить(Location) <> Неопределено Тогда
						УстановитьОписаниеОшибки(
							Результат,
							"ServerError",
							НСтр("ru = 'Циклическое перенаправление.'"),
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка сервера (%1) при получении файла (%2). Циклическое перенаправление (%3).'"),
								Ответ.КодСостояния,
								URL,
								Location),
							Перенаправления);
						Возврат Результат;
					КонецЕсли;

					ВыполненныеПеренаправления.Вставить(Location, Истина);
					URLДляПолучения = Location;

					Перенаправления.Добавить(Строка(Ответ.КодСостояния) + ": " + Location);

				КонецЕсли;
			КонецЕсли;

		Иначе

			Прервать;

		КонецЕсли;

	КонецЦикла;

	Если ПараметрыПолучения.ФорматОтвета = 0 Тогда
		Результат.Содержимое = Ответ.ПолучитьИмяФайлаТела();
	ИначеЕсли ПараметрыПолучения.ФорматОтвета = 1 Тогда
		Результат.Содержимое = Ответ.ПолучитьТелоКакСтроку();
	ИначеЕсли ПараметрыПолучения.ФорматОтвета = 2 Тогда
		Результат.Содержимое = Ответ.ПолучитьТелоКакДвоичныеДанные();
	Иначе
		Результат.Содержимое = Ответ;
	КонецЕсли;
	
	// Обработка ответа
	Если Ответ.КодСостояния < 200 Или Ответ.КодСостояния >= 300 Тогда

		// Анализ ошибки
		Если Ответ.КодСостояния = 407 Тогда

			// Ошибка подключения - не пройдена аутентификация на прокси-сервере.
			УстановитьОписаниеОшибки(
				Результат,
				"ConnectError",
				НСтр("ru = 'Ошибка аутентификации на прокси-сервере.'"),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка клиента (%1) при выполнении запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		ИначеЕсли Ответ.КодСостояния < 200
			ИЛИ Ответ.КодСостояния >= 300
			И Ответ.КодСостояния < 400 Тогда

			// Формат ответа сервера не поддерживается.
			УстановитьОписаниеОшибки(
				Результат,
				"ServerError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Некорректный ответ сервера (%1).'"),
					Ответ.КодСостояния),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка сервера при получении файла (%1). Некорректный (неподдерживаемый) ответ (%2).
						|Тело ответа: %3'"),
					URL,
					Ответ.КодСостояния,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		ИначеЕсли Ответ.КодСостояния >= 400 И Ответ.КодСостояния < 500 Тогда

			// Ошибка клиентской части - некорректный запрос.
			УстановитьОписаниеОшибки(
				Результат,
				"ClientError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка (%1) при выполнении запроса к ресурсу.'"),
					Строка(Ответ.КодСостояния)),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка клиента (%1) при выполнении запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		Иначе

			// Ошибка сервера - 5хх
			УстановитьОписаниеОшибки(
				Результат,
				"ServerError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Код ошибки: %1.'"),
					Строка(Ответ.КодСостояния)),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка сервера (%1) при обработке запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		КонецЕсли;

		ДобавитьСписокПеренаправленийКИнформацииОбОшибке(
			Результат.ИнформацияОбОшибке,
			Перенаправления);

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Проверяет доступность переданного URL по критерию:
//	Код ответа 200;
//	Таймаут ответа - 10 секунд.
//
Функция ПроверитьURLДоступен(URL, НастройкиПроксиСервера = Неопределено, Метод = Неопределено) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ИмяОшибки"         , "");
	РезультатПроверки.Вставить("СообщениеОбОшибке" , "");
	РезультатПроверки.Вставить("ИнформацияОбОшибке", "");
	Если НастройкиПроксиСервера = Неопределено Тогда
		Попытка
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ПроверитьURLДоступен(
				URL,
				Метод,
				РезультатПроверки.ИмяОшибки,
				РезультатПроверки.СообщениеОбОшибке,
				РезультатПроверки.ИнформацияОбОшибке);
			#Иначе
			ИнтернетПоддержкаПользователейСлужебныйКлиентПовтИсп.ПроверитьURLДоступен(
				URL,
				Метод,
				РезультатПроверки.ИмяОшибки,
				РезультатПроверки.СообщениеОбОшибке,
				РезультатПроверки.ИнформацияОбОшибке);
			#КонецЕсли
		Исключение
			Возврат РезультатПроверки;
		КонецПопытки;
	Иначе
		СлужебнаяПроверитьURLДоступен(
			URL,
			Метод,
			РезультатПроверки.ИмяОшибки,
			РезультатПроверки.СообщениеОбОшибке,
			РезультатПроверки.ИнформацияОбОшибке,
			НастройкиПроксиСервера);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецЕсли

#КонецОбласти

#Область ОбработкаБизнесПроцессов

// Возвращает значение параметра контекста.
//
Функция ЗначениеСессионногоПараметра(КСКонтекст, ИмяПараметра) Экспорт

	СессионныеПараметры = КСКонтекст.СессионныеПараметры;
	ОсновныеПараметры   = КСКонтекст.ОсновныеПараметры;

	ЗначениеПараметра = Неопределено;

	Если ИмяПараметра = "libraryVersion" Тогда
		ЗначениеПараметра = ВерсияБиблиотеки();

	ИначеЕсли ИмяПараметра = "APIVersion" Тогда
		ЗначениеПараметра = ВерсияAPIСервисаБизнесПроцессов();

	ИначеЕсли ИмяПараметра = "versionPlatform" Тогда
		СистИнфо = Новый СистемнаяИнформация;
		ЗначениеПараметра = СистИнфо.ВерсияПриложения;

	ИначеЕсли ИмяПараметра = "nameConfiguration" Тогда
		ЗначениеПараметра = ИмяКонфигурации();

	ИначеЕсли ИмяПараметра = "versionConfiguration" Тогда
		ЗначениеПараметра = ВерсияКонфигурации();

	ИначеЕсли ИмяПараметра = "language" Тогда
		ЗначениеПараметра = ТекКодЛокализации();

	ИначеЕсли ИмяПараметра = "enterPoint" Тогда
		ЗначениеПараметра = СокрЛП(ОсновныеПараметры.МестоЗапуска);

	ИначеЕсли ИмяПараметра = "versionUpdateConfiguration" Тогда

		ЗначениеПараметра = ВерсияОбработкиОбновления();

	Иначе

		ОписательПараметра = СессионныеПараметры.Получить(ИмяПараметра);
		Если ОписательПараметра <> Неопределено Тогда
			Возврат ОписательПараметра.Значение;
		КонецЕсли;

	КонецЕсли;

	Возврат ЗначениеПараметра;

КонецФункции

// Запись сессионного или стартового параметра. Стартовые параметры записываются
// также в общие стартовые параметры.
//
Процедура ЗаписатьПараметрКонтекста(
	КСКонтекст,
	ИмяПараметра,
	ЗначениеПараметра,
	ОбластьВидимости = "",
	ОбщиеСтартовыеПараметры = Неопределено) Экспорт

	ЭтоСтартовыйПараметр = (НРег(ОбластьВидимости) = "startup");
	СессионныеПараметры = КСКонтекст.СессионныеПараметры;

	Параметр = СессионныеПараметры.Получить(ИмяПараметра);

	ОбластьВидимостиЗаписываемого = ?(ЭтоСтартовыйПараметр, "startUp", "");

	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ЗначениеПараметра;
		Параметр.ОбластьВидимости = ОбластьВидимостиЗаписываемого;
	Иначе
		Параметр = НовыйПараметрИПП(ИмяПараметра, ЗначениеПараметра, ОбластьВидимостиЗаписываемого);
		СессионныеПараметры.Вставить(ИмяПараметра, Параметр);
	КонецЕсли;

	// Если параметр является стартовым, то он сохраняется для
	// всех пользователей в регистре сведений.
	Если ЭтоСтартовыйПараметр И ОбщиеСтартовыеПараметры <> Неопределено Тогда
		ОбщиеСтартовыеПараметры.Вставить(ИмяПараметра, ЗначениеПараметра);
	КонецЕсли;

КонецПроцедуры

// Удаление параметров контекста. Также удаляются общие стартовые параметры.
//
Процедура УдалитьПараметрыКонтекста(КСКонтекст, СтруктураКоманды, КонтекстОбработчика) Экспорт

	СессионныеПараметры = КСКонтекст.СессионныеПараметры;

	Если ТипЗнч(СтруктураКоманды) = Тип("Структура") Тогда
		Если СтруктураКоманды.Свойство("Параметры") Тогда
			МассивПараметров = СтруктураКоманды.Параметры;
		Иначе
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(СтруктураКоманды);
		КонецЕсли;
	ИначеЕсли ТипЗнч(СтруктураКоманды) = Тип("Массив") Тогда
		МассивПараметров = СтруктураКоманды;
	Иначе
		Возврат;
	КонецЕсли;

	УдаляемыеИзРС = Новый Соответствие;

	Для каждого ПараметрКоманды Из МассивПараметров Цикл

		Если ПараметрКоманды = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СессионныеПараметры.Удалить(ПараметрКоманды.Имя);

		// Если параметр стартовый, то он удаляется из регистра параметров ИПП
		Если ПараметрКоманды.Свойство("ОбластьВидимости") И НРег(ПараметрКоманды.ОбластьВидимости) = "startup" Тогда
			УдаляемыеИзРС.Вставить(ПараметрКоманды.Имя, Истина);
		КонецЕсли;

	КонецЦикла;

	Если УдаляемыеИзРС.Количество() > 0 Тогда
		ИнтернетПоддержкаПользователейВызовСервера.УдалитьОбщиеПараметрыИПП(УдаляемыеИзРС);
	КонецЕсли;

КонецПроцедуры

// Преобразование команды "Записать параметры" во внутреннее представление.
//
Функция СтруктурироватьЗаписьПараметров(КомандаСервера) Экспорт

	СтруктураКоманды = Новый Структура;

	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивПараметров = Новый Массив;

	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

		СтруктураПараметра = Новый Структура;
		СтруктураПараметра.Вставить("Имя"             , СокрЛП(Параметр.name));
		СтруктураПараметра.Вставить("БизнесПроцесс"   , СокрЛП(Параметр.bp));
		СтруктураПараметра.Вставить("Значение"        , СокрЛП(Параметр.value));
		СтруктураПараметра.Вставить("ОбластьВидимости", СокрЛП(Параметр.type));
		МассивПараметров.Добавить(СтруктураПараметра);

	КонецЦикла;

	СтруктураКоманды.Вставить("Параметры" , МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);

	Возврат СтруктураКоманды;

КонецФункции

#КонецОбласти

#Область ОбработкаСтрок

// Функция приводит переданную строку к внутреннему формату версии:
//  - приводит к формату 99.99.999.9999;
//  - заменяет пробелы на нули;
//  - если пробел в конце, то сдвигает число направо (" 17 ", "  17", "17  " -> "0017").
//
// Параметры:
//  Версия  - Строка - Строка, которую необходимо преобразовать.
//
// Возвращаемое значение:
//   Строка - версия правильного вида, формата 99.99.999.9999.
//
Функция ВнутреннееПредставлениеНомераВерсии(Версия) Экспорт

	НовыйМассивЧиселВерсии = Новый Массив(4);
	МассивЧиселВерсии = СтрРазделить(Версия, ".", Истина);
	Для С=1 По 4 Цикл
		НовыйМассивЧиселВерсии[С-1] = 0;
		Если МассивЧиселВерсии.Количество() >= С Тогда
			Попытка
				НовыйМассивЧиселВерсии[С-1] = ?(ПустаяСтрока(МассивЧиселВерсии[С-1]), 0, Число(СокрЛП(МассивЧиселВерсии[С-1])));
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

	НоваяВерсия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1.%2.%3.%4",
		Формат(НовыйМассивЧиселВерсии[0], "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=0"),
		Формат(НовыйМассивЧиселВерсии[1], "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=0"),
		Формат(НовыйМассивЧиселВерсии[2], "ЧЦ=3; ЧН=000; ЧВН=; ЧГ=0"),
		Формат(НовыйМассивЧиселВерсии[3], "ЧЦ=4; ЧН=0000; ЧВН=; ЧГ=0"));

	Возврат НоваяВерсия;

КонецФункции

// Функция из версии формата 99.99.999.9999 удаляет лидирующие нули, чтобы 08.02.019.0080 выглядело как 8.2.19.80.
//
// Параметры:
//  Версия - Строка - строка формата 99.99.999.9999, в которой необходимо удалить лидирующие нули;
//  СокращатьРазрядностьВерсии - Булево - разрешить сокращать версию (завершающуюся на 0000/000/00 или 9999/999/99) в следующих случаях:
//                    А.00.000.0000 = А,
//                    А.Б.000.0000 = А.Б,
//                    А.Б.В.0000 = А.Б.В,
//                    А.99.999.9999 = А.*,
//                    А.Б.999.9999 = А.Б.*,
//                    А.Б.В.9999 = А.Б.В.*.
//
// Возвращаемое значение:
//   Строка - удобочитаемое представление версии.
//
Функция ПользовательскоеПредставлениеНомераВерсии(Версия, СокращатьРазрядностьВерсии = Ложь) Экспорт

	Результат = "";

	Если СокращатьРазрядностьВерсии = Истина Тогда

		Версии = СтрЗаменить(Версия, ".", Символы.ПС);
		Если СтрЧислоСтрок(Версии) <> 4 Тогда
			Результат = Версия; // оставить как есть
		Иначе
			Версия1 = СтрПолучитьСтроку(Версии, 1);
			Версия2 = СтрПолучитьСтроку(Версии, 2);
			Версия3 = СтрПолучитьСтроку(Версии, 3);
			Версия4 = СтрПолучитьСтроку(Версии, 4);
			Если (Версия2 = "00") И (Версия3 = "000") И (Версия4 = "0000") Тогда
				// А.00.000.0000 = А
				Результат =
					Формат(Число(Версия1), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0");
			ИначеЕсли (СтрПолучитьСтроку(Версии, 3) = "000") И (СтрПолучитьСтроку(Версии, 4) = "0000") Тогда
				// А.Б.000.0000 = А.Б
				Результат =
					Формат(Число(Версия1), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ "." + Формат(Число(Версия2), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0");
			ИначеЕсли (СтрПолучитьСтроку(Версии, 4) = "0000") Тогда
				// А.Б.В.0000 = А.Б.В
				Результат =
					Формат(Число(Версия1), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ "." + Формат(Число(Версия2), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ "." + Формат(Число(Версия3), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0");
			ИначеЕсли (Версия2 = "99") И (Версия3 = "999") И (Версия4 = "9999") Тогда
				// А.99.999.9999 = А.*
				Результат =
					Формат(Число(Версия1), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ ".*";
			ИначеЕсли (Версия3 = "999") И (Версия4 = "9999") Тогда
				// А.Б.999.9999 = А.Б.*
				Результат =
					Формат(Число(Версия1), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ "." + Формат(Число(Версия2), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ ".*";
			ИначеЕсли (Версия4 = "9999") Тогда
				// А.Б.В.9999 = А.Б.В.*
				Результат =
					Формат(Число(Версия1), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ "." + Формат(Число(Версия2), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ "." + Формат(Число(Версия3), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ ".*";
			Иначе
				Результат = Формат(Число(Версия1), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ "." + Формат(Число(Версия2), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ "." + Формат(Число(Версия3), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ "." + Формат(Число(Версия4), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0");
			КонецЕсли;
		КонецЕсли;

	Иначе

		НоваяВерсия = ВнутреннееПредставлениеНомераВерсии(Версия);

		НовыйМассивЧиселВерсии = Новый Массив(4);
		МассивЧиселВерсии = СтрРазделить(НоваяВерсия, ".", Истина);
		Для С=1 По 4 Цикл
			НовыйМассивЧиселВерсии[С-1] = 0;
			Если МассивЧиселВерсии.Количество() >= С Тогда
				Попытка
					НовыйМассивЧиселВерсии[С-1] = ?(ПустаяСтрока(МассивЧиселВерсии[С-1]), 0, Число(МассивЧиселВерсии[С-1]));
				Исключение
					НовыйМассивЧиселВерсии[С-1] = 0;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;

		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1.%2.%3.%4",
			СокрЛП(Формат(НовыйМассивЧиселВерсии[0], "ЧЦ=4; ЧДЦ=; ЧН=0; ЧГ=0")),
			СокрЛП(Формат(НовыйМассивЧиселВерсии[1], "ЧЦ=4; ЧДЦ=; ЧН=0; ЧГ=0")),
			СокрЛП(Формат(НовыйМассивЧиселВерсии[2], "ЧЦ=4; ЧДЦ=; ЧН=0; ЧГ=0")),
			СокрЛП(Формат(НовыйМассивЧиселВерсии[3], "ЧЦ=4; ЧДЦ=; ЧН=0; ЧГ=0")));

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция генерирует пользовательское представление интервала версий.
//
// Параметры:
//  ВерсияОТ - Строка - строка формата 99.99.999.9999, которая участвует в формировании интервала версий;
//  ВерсияДО - Строка - строка формата 99.99.999.9999, которая участвует в формировании интервала версий.
//
// Возвращаемое значение:
//   Строка - пользовательское представление интервала версий.
//
Функция ПользовательскоеПредставлениеИнтервалаВерсий(ВерсияОТ, ВерсияДО) Экспорт

	Результат = "";

	Если (ВерсияОТ = "00.00.000.0000") И (ВерсияДО = "99.99.999.9999") Тогда
		Результат = НСтр("ru='Любая версия'");
	ИначеЕсли (ВерсияОТ <> "00.00.000.0000") И (ВерсияДО <> "99.99.999.9999") Тогда
		Если ВерсияОТ = ВерсияДО Тогда // Точная версия
			Результат = ПользовательскоеПредставлениеНомераВерсии(ВерсияОТ, Истина);
		Иначе // Интервал версий
			Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Интервал %1...%2'"),
				ПользовательскоеПредставлениеНомераВерсии(ВерсияОТ, Истина),
				ПользовательскоеПредставлениеНомераВерсии(ВерсияДО, Истина));
		КонецЕсли;
	ИначеЕсли (ВерсияОТ <> "00.00.000.0000") И (ВерсияДО = "99.99.999.9999") Тогда // От версии и выше
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='От %1 и выше'"),
			ПользовательскоеПредставлениеНомераВерсии(ВерсияОТ, Истина));
	ИначеЕсли (ВерсияОТ = "00.00.000.0000") И (ВерсияДО <> "99.99.999.9999") Тогда // До версии включительно
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='До версии %1 включительно'"),
			ПользовательскоеПредставлениеНомераВерсии(ВерсияДО, Истина));
	Иначе // Воспринимать как Интервал версий
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Интервал %1...%2.'"),
			ПользовательскоеПредставлениеНомераВерсии(ВерсияОТ, Истина),
			ПользовательскоеПредставлениеНомераВерсии(ВерсияДО, Истина));
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает строковое представление для произвольного значения.
//
// Параметры:
//  ОбрабатываемоеЗначение - Произвольный - значение произвольного типа, которое надо вывести в виде строки;
//  Разделитель1           - Строка - разделитель значений 1 (например, разделяет элементы массива или ключ и значение структуры или соответствия);
//  Разделитель2           - Строка - разделитель значений 2 (например, разделяет элементы структуры или соответствия);
//  Уровень                - Число  - Значение уровня, влияет на отступ.
//
// Возвращаемое значение:
//   Строка - строковое представление.
//
Функция ПредставлениеЗначения(ОбрабатываемоеЗначение, Разделитель1 = "", Разделитель2 = "", Знач Уровень = 0) Экспорт

	Результат = "";

	ТипЧисло                     = Тип("Число");
	ТипСтрока                    = Тип("Строка");
	ТипДата                      = Тип("Дата");
	ТипБулево                    = Тип("Булево");
	ТипСписокЗначений            = Тип("СписокЗначений");
	ТипМассив                    = Тип("Массив");
	ТипФиксированныйМассив       = Тип("ФиксированныйМассив");
	ТипСтруктура                 = Тип("Структура");
	ТипФиксированнаяСтруктура    = Тип("ФиксированнаяСтруктура");
	ТипСоответствие              = Тип("Соответствие");
	ТипФиксированноеСоответствие = Тип("ФиксированноеСоответствие");

	Если ТипЗнч(Уровень) <> ТипЧисло
			ИЛИ Уровень < 0 Тогда
		Уровень = 0;
	КонецЕсли;

	Если ТипЗнч(ОбрабатываемоеЗначение) = ТипСтрока Тогда
		Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень) + ОбрабатываемоеЗначение;
	ИначеЕсли ТипЗнч(ОбрабатываемоеЗначение) = ТипДата Тогда
		Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень) + Формат(ОбрабатываемоеЗначение, "ДЛФ=DT");
	ИначеЕсли ТипЗнч(ОбрабатываемоеЗначение) = ТипЧисло Тогда
		Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень) + Формат(ОбрабатываемоеЗначение, "ЧЦ=15; ЧДЦ=4; ЧРД=,; ЧРГ=' '; ЧН=0,0000; ЧГ=3,0");
	ИначеЕсли ТипЗнч(ОбрабатываемоеЗначение) = ТипБулево Тогда
		Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень) + Формат(ОбрабатываемоеЗначение, "БЛ=Ложь; БИ=Истина");
	ИначеЕсли ТипЗнч(ОбрабатываемоеЗначение) = ТипСписокЗначений Тогда
		С = 1;
		Для Каждого ТекущееЗначение Из ОбрабатываемоеЗначение Цикл
			Если С = ОбрабатываемоеЗначение.Количество() Тогда
				Результат = Результат
					+ СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень)
					+ СокрЛП(ТекущееЗначение.Значение);
			Иначе
				Результат = Результат
					+ СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень)
					+ СокрЛП(ТекущееЗначение.Значение) + Разделитель1;
			КонецЕсли;
			С = С + 1;
		КонецЦикла;
	ИначеЕсли (ТипЗнч(ОбрабатываемоеЗначение) = ТипМассив) ИЛИ (ТипЗнч(ОбрабатываемоеЗначение) = ТипФиксированныйМассив) Тогда
		С = 1;
		Для Каждого ТекущееЗначение Из ОбрабатываемоеЗначение Цикл
			Если С = ОбрабатываемоеЗначение.Количество() Тогда
				Результат = Результат
					+ СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень)
					+ СокрЛП(ТекущееЗначение);
			Иначе
				Результат = Результат
					+ СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень)
					+ СокрЛП(ТекущееЗначение) + Разделитель1;
			КонецЕсли;
			С = С + 1;
		КонецЦикла;
	ИначеЕсли (ТипЗнч(ОбрабатываемоеЗначение) = ТипСтруктура)
			ИЛИ (ТипЗнч(ОбрабатываемоеЗначение) = ТипФиксированнаяСтруктура) Тогда
		Для Каждого КлючЗначение Из ОбрабатываемоеЗначение Цикл
			Если (ТипЗнч(КлючЗначение.Значение) = ТипСтруктура)
					ИЛИ (ТипЗнч(КлючЗначение.Значение) = ТипФиксированнаяСтруктура) Тогда
				// Перед структурой вставить еще один разделитель.
				Результат =
					Результат
					+ СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень)
					+ КлючЗначение.Ключ
					+ Разделитель1
					+ Символы.ПС
					+ ПредставлениеЗначения(КлючЗначение.Значение, Разделитель1, Разделитель2, Уровень + 1) // С отступом
					+ Разделитель2;
			Иначе
				Результат =
					Результат
					+ СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень)
					+ КлючЗначение.Ключ
					+ Разделитель1
					+ ПредставлениеЗначения(КлючЗначение.Значение, Разделитель1, Разделитель2, 0) // Без отступа
					+ Разделитель2;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли (ТипЗнч(ОбрабатываемоеЗначение) = ТипСоответствие) ИЛИ (ТипЗнч(ОбрабатываемоеЗначение) = ТипФиксированноеСоответствие) Тогда
		Для Каждого КлючЗначение Из ОбрабатываемоеЗначение Цикл
			Если (ТипЗнч(КлючЗначение.Значение) = ТипСтруктура)
					ИЛИ (ТипЗнч(КлючЗначение.Значение) = ТипФиксированнаяСтруктура) Тогда
				// Перед структурой вставить еще один разделитель.
				Результат =
					Результат
					+ СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень)
					+ ПредставлениеЗначения(КлючЗначение.Ключ, Разделитель1, Разделитель2, Уровень + 1)
					+ Разделитель1
					+ Символы.ПС
					+ ПредставлениеЗначения(КлючЗначение.Значение, Разделитель1, Разделитель2, Уровень + 1) // С отступом
					+ Разделитель2;
			Иначе
				Результат =
					Результат
					+ СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень)
					+ ПредставлениеЗначения(КлючЗначение.Ключ, Разделитель1, Разделитель2, Уровень + 1)
					+ Разделитель1
					+ ПредставлениеЗначения(КлючЗначение.Значение, Разделитель1, Разделитель2, 0) // Без отступа
					+ Разделитель2;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает строку цифр.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Строка.
//
Функция ВсеЦифры() Экспорт

	Результат = "0123456789";
	Возврат Результат;

КонецФункции

// Функция проверяет, все ли символы строки соответствуют разрешенным.
// Возвращает список встреченных запрещенных символов или пустой список, если ошибок нет.
//
// Параметры:
//  СтрокаДляПроверки  - Строка - строка для проверки;
//  РазрешенныеСимволы - Строка - строка со списком разрешенных символов.
//
// Возвращаемое значение:
//  Список значений - если пустой, значит ошибок нет, в противном случае, в него будут возвращены все неправильные символы.
//
Функция ПроверитьСтрокуНаЗапрещенныеСимволы(СтрокаДляПроверки, РазрешенныеСимволы) Экспорт

	СписокЗапрещенныхСимволов = Новый СписокЗначений;

	СтрокаДляПроверкиЛокальная = СокрЛП(СтрокаДляПроверки);

	Для С=1 По СтрДлина(СтрокаДляПроверкиЛокальная) Цикл
		Символ = Сред(СтрокаДляПроверкиЛокальная, С, 1);
		Если (Найти(РазрешенныеСимволы, Символ) = 0) Тогда
			// Найден неразрешенный символ, добавить в список.
			Если СписокЗапрещенныхСимволов.НайтиПоЗначению(Символ) = Неопределено Тогда
				СписокЗапрещенныхСимволов.Добавить(Символ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат СписокЗапрещенныхСимволов;

КонецФункции

// Функция удаляет последние символы, если они находятся в списке удаляемых.
// Полезно для приведения каталогов к виду "без слеша в конце".
//
// Параметры:
//  ОбрабатываемаяСтрока - Строка - строка для проверки;
//  УдаляемыеСимволы     - Строка - строка со списком символов, которые необходимо удалить.
//
// Возвращаемое значение:
//  Строка - преобразованная строка.
//
Функция УдалитьПоследнийСимвол(ОбрабатываемаяСтрока, УдаляемыеСимволы) Экспорт

	Результат = ОбрабатываемаяСтрока;

	Если НЕ ПустаяСтрока(УдаляемыеСимволы) Тогда
		БылиУдаления = Истина;
		Пока БылиУдаления = Истина Цикл
			БылиУдаления = Ложь;
			Если СтрДлина(Результат) > 0 Тогда
				ПроверяемыйСимвол = Прав(Результат, 1);
				Если СтрНайти(УдаляемыеСимволы, ПроверяемыйСимвол) > 0 Тогда
					Результат = Лев(Результат, СтрДлина(Результат) - 1);
					БылиУдаления = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает строковое представление дня недели.
//
// Параметры:
//  НомерДняНедели - Число - номер для недели.
//
// Возвращаемое значение:
//   Строка - Строковое представление дня недели.
//
Функция ПредставлениеДняНедели(НомерДняНедели) Экспорт

	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Неопределено (%1)'"),
		НомерДняНедели);

	Если НомерДняНедели = 1 Тогда
		Результат = НСтр("ru='Понедельник'");
	ИначеЕсли НомерДняНедели = 2 Тогда
		Результат = НСтр("ru='Вторник'");
	ИначеЕсли НомерДняНедели = 3 Тогда
		Результат = НСтр("ru='Среда'");
	ИначеЕсли НомерДняНедели = 4 Тогда
		Результат = НСтр("ru='Четверг'");
	ИначеЕсли НомерДняНедели = 5 Тогда
		Результат = НСтр("ru='Пятница'");
	ИначеЕсли НомерДняНедели = 6 Тогда
		Результат = НСтр("ru='Суббота'");
	ИначеЕсли НомерДняНедели = 7 Тогда
		Результат = НСтр("ru='Воскресенье'");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Для многострочной строки добавляет отступ для каждой строки.
//
// Параметры:
//  МногострочнаяСтрока   - Строка - строка, которую необходимо преобразовать;
//  Отступ                - Строка - отступ, который надо добавить;
//  ОтступДляПервойСтроки - Булево - добавлять отступ для первой строки или нет;
//  СокращатьПробелы      - Булево - Истина, если для каждой строки надо предварительно удалять незначащие символы с концов строки.
//
// Возвращаемое значение:
//   Строка - отформатированная строка.
//
Функция ВставитьОтступВМногострочнуюСтроку(МногострочнаяСтрока, Отступ, ОтступДляПервойСтроки = Ложь, СокращатьПробелы = Ложь) Экспорт

	Результат = "";

	КоличествоСтрок = СтрЧислоСтрок(МногострочнаяСтрока);
	Для С=1 По КоличествоСтрок Цикл
		Если СокращатьПробелы = Истина Тогда
			ТекущаяСтрока = СокрЛП(СтрПолучитьСтроку(МногострочнаяСтрока, С));
		Иначе
			ТекущаяСтрока = СтрПолучитьСтроку(МногострочнаяСтрока, С);
		КонецЕсли;
		Если С = 1 Тогда
			Если ОтступДляПервойСтроки = Истина Тогда
				ТекущаяСтрока = Отступ + ТекущаяСтрока;
			КонецЕсли;
		Иначе
			ТекущаяСтрока = Отступ + ТекущаяСтрока;
		КонецЕсли;
		Результат = Результат + ТекущаяСтрока + Символы.ПС;
	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбработкаДанных

// Функция ищет первый элемент в списке значений по условиям.
//
// Параметры:
//  Список          - СписокЗначений - Список значений параметров;
//  ПараметрыПоиска - Структура - структура, описывающая условия поиска:
//    * ВариантПоиска - Строка - "ПоЗначению", "ПоПредставлению", "ПоПредставлениюБезУчетаРегистра";
//    * ЗначениеПоиска - Строка - Значение или представление, которое необходимо найти.
//
// Возвращаемое значение:
//   ЭлементСпискаЗначений - значение элемента списка значений, или Неопределено, если элемент не найден.
//
Функция НайтиЭлементСпискаЗначений(Список, ПараметрыПоиска) Экспорт

	ТипСписокЗначений = Тип("СписокЗначений");
	ТипСтруктура      = Тип("Структура");

	Результат = Неопределено;
	ВариантПоиска = "ПоЗначению";
	ЗначениеПоиска = Неопределено;

	Если ТипЗнч(Список) = ТипСписокЗначений Тогда
		Если ТипЗнч(ПараметрыПоиска) = ТипСтруктура Тогда
			Если ПараметрыПоиска.Свойство("ВариантПоиска") Тогда
				Если ВРег(ПараметрыПоиска.ВариантПоиска) = ВРег("ПоЗначению") Тогда
					// Значение по-умолчанию. Уже установлено.
				ИначеЕсли ВРег(ПараметрыПоиска.ВариантПоиска) = ВРег("ПоПредставлению") Тогда
					ВариантПоиска = "ПоПредставлению";
				ИначеЕсли ВРег(ПараметрыПоиска.ВариантПоиска) = ВРег("ПоПредставлениюБезУчетаРегистра") Тогда
					ВариантПоиска = "ПоПредставлениюБезУчетаРегистра";
				КонецЕсли;
			КонецЕсли;
			Если ПараметрыПоиска.Свойство("ЗначениеПоиска") Тогда
				ЗначениеПоиска = ПараметрыПоиска.ЗначениеПоиска;
			Иначе
				Возврат Результат;
			КонецЕсли;
		Иначе
			Возврат Результат;
		КонецЕсли;
		Если ВариантПоиска = "ПоЗначению" Тогда
			Результат = Список.НайтиПоЗначению(ЗначениеПоиска);
		ИначеЕсли ВариантПоиска = "ПоПредставлению" Тогда
			Для каждого ТекущийЭлементСписка Из Список Цикл
				Если ТекущийЭлементСписка.Представление = ЗначениеПоиска Тогда
					Результат = ТекущийЭлементСписка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ВариантПоиска = "ПоПредставлениюБезУчетаРегистра" Тогда
			Для каждого ТекущийЭлементСписка Из Список Цикл
				Если ВРег(ТекущийЭлементСписка.Представление) = ВРег(ЗначениеПоиска) Тогда
					Результат = ТекущийЭлементСписка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает массив, составленный из отмеченных значений списка значений.
//
// Параметры:
//  Список         - СписокЗначений, ДанныеФормыКоллекция - Список отмеченных значений;
//  ЗначениеОтбора - Булево - какое значение отбирать.
//
// Возвращаемое значение:
//   Массив - Массив отмеченных значений.
//
Функция ОтмеченныеЭлементыСпискаЗначений(Список, ЗначениеОтбора = Истина) Экспорт

	Результат = Новый Массив;

	Для Каждого ТекущийЭлементСписка Из Список Цикл
		Если ТекущийЭлементСписка.Пометка = ЗначениеОтбора Тогда
			Результат.Добавить(ТекущийЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ЛогИОтладка

// Для объекта ХДТО возвращает его xml представление - нужно для отладки.
// В отличие от ОбщегоНазначения.ОбъектXDTOВСтрокуXML возвращает строку другого формата.
//
// Параметры:
//  ОбъектХДТО  - ОбъектXDTO  - требуемый объект;
//  ФабрикаХДТО - ФабрикаXDTO - на каком основании создавать тип (может быть по-умолчанию - из конфигурации, и из веб-сервиса).
//
// Возвращаемое значение:
//   Строка - xml-представление объекта.
//
Функция ПредставлениеОбъектаХДТО(ОбъектХДТО, ФабрикаХДТО = Неопределено) Экспорт

	Результат = "";

	#Если НЕ ВебКлиент Тогда

	Если ФабрикаХДТО = Неопределено Тогда
		ФабрикаХДТО = ФабрикаXDTO;
	КонецЕсли;

	Если ТипЗнч(ОбъектХДТО) = Тип("ОбъектXDTO") Тогда
		ЗаписьХМЛ = Новый ЗаписьXML;
		ЗаписьХМЛ.УстановитьСтроку(
			Новый ПараметрыЗаписиXML(
				"UTF-8",    // Кодировка
				,           // Версия
				Истина,     // Отступ
				Истина,     // ОтступАтрибутов
				Символы.Таб)); // СимволыОтступа
		Попытка
			ФабрикаХДТО.ЗаписатьXML(ЗаписьХМЛ, ОбъектХДТО);
			Результат = ЗаписьХМЛ.Закрыть();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при получении xml-представления объекта ХДТО:
					|%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:БазовыйФункционал.Отладка'"), // ИмяСобытия.
				НСтр("ru='БазовыйФункционал. Отладка. ПредставлениеОбъектаХДТО'"), // ИдентификаторШага.
				"Ошибка", // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных.
				, // Данные.
				ТекстСообщения, // Комментарий.
				Истина); // ВестиПодробныйЖурналРегистрации.
		КонецПопытки;
	КонецЕсли;

	#КонецЕсли

	Возврат Результат;

КонецФункции

// Для целей отладки из файла возвращает первые несколько строк.
//
// Параметры:
//  ПолноеИмяФайла  - Строка - полное имя файла;
//  КоличествоСтрок - Число  - количество строк, которое необходимо прочитать (должно быть больше 0 и меньше 1000).
//
// Возвращаемое значение:
//   Строка - первые несколько строк файла.
//
Функция СодержимоеТекстовогоФайла(ПолноеИмяФайла, КоличествоСтрок = 10) Экспорт

	Результат = "";

	Если (КоличествоСтрок <= 0) ИЛИ (КоличествоСтрок > 1000) Тогда
		ЧислоСтрокДляСчитывания = 10;
	Иначе
		ЧислоСтрокДляСчитывания = КоличествоСтрок;
	КонецЕсли;

	Попытка
		ЧтениеТекстаЛокальное = Новый ЧтениеТекста;
		ЧтениеТекстаЛокальное.Открыть(ПолноеИмяФайла, "UTF-8", , , Ложь); // Открывать НЕ в монопольном режиме
		ДостигнутКонецФайла = Ложь;
		Пока (ЧислоСтрокДляСчитывания > 0) И (ДостигнутКонецФайла = Ложь) Цикл
			СтрокаИзФайла = ЧтениеТекстаЛокальное.ПрочитатьСтроку();
			ЧислоСтрокДляСчитывания = ЧислоСтрокДляСчитывания - 1;
			Если СтрокаИзФайла = Неопределено Тогда
				ДостигнутКонецФайла = Истина;
			Иначе
				Если ПустаяСтрока(Результат) Тогда
					Результат = СтрокаИзФайла;
				Иначе
					Результат = Результат + Символы.ПС + СтрокаИзФайла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='При чтении файла с именем %1 произошла ошибка:
				|%2'"),
			ПолноеИмяФайла,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Возвращает структуру контекста выполнения для дальнейшей записи в журнал регистрации или вывод на экран.
// Это базовый функционал.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Структура - Структура с определенными ключами, см. код.
//
Функция НоваяЗаписьРезультатовВыполненияОпераций() Экспорт

	Результат = Новый Структура("ЛогШаговВыполнения, КодРезультата, ОписаниеРезультата",
		Новый Массив,
		0,
		"");

	Возврат Результат;

КонецФункции

// Регистрирует начало шага выполнения.
//
// Параметры:
//  КонтекстВыполнения - Структура - см. возврат ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций;
//  ИдентификаторШага - Строка - Произвольный идентификатор;
//  Шаг - Строка - Произвольное описание шага.
//
Процедура НачатьРегистрациюРезультатаВыполненияОперации(КонтекстВыполнения, ИдентификаторШага, Шаг) Экспорт

	// В начале регистрации записывается информация:
	//  ИдентификаторШага, Шаг, ВремяНачала.
	// В конце регистрации записывается информация:
	//  ВремяОкончания, КодРезультата, ОписаниеРезультата, ВложенныйКонтекстВыполнения.

	// Если в контексте выполнения уже существовало свойство "ТекущийШагВыполнения", то он будет перезаписан.

	ТекущийШагВыполнения = СтруктураШагаВыполнения();
	ТекущийШагВыполнения.Вставить("ИдентификаторШага", ИдентификаторШага);
	ТекущийШагВыполнения.Вставить("Шаг", Шаг);
	ТекущийШагВыполнения.Вставить("ВремяНачала", ТекущаяУниверсальнаяДатаВМиллисекундах());

	КонтекстВыполнения.Вставить("ТекущийШагВыполнения", ТекущийШагВыполнения);

КонецПроцедуры

// Регистрирует завершение шага выполнения и возвращает последний шаг.
//
// Параметры:
//  КонтекстВыполнения - Структура - см. возврат ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций;
//  КодРезультата - Число - Произвольный код описания возврата, 0 = нет ошибок;
//  ОписаниеРезультата - Строка - произвольное описание результата шага;
//  ВложенныйКонтекстВыполнения - Неопределено или Массив - массив вложенных шагов выполнения.
//
// Возвращаемое значение:
//   Структура - список ключей см. в ИнтернетПоддержкаПользователейКлиентСервер.СтруктураШагаВыполнения.
//
Функция ЗавершитьРегистрациюРезультатаВыполненияОперации(КонтекстВыполнения, КодРезультата, ОписаниеРезультата, ВложенныйКонтекстВыполнения = Неопределено) Экспорт

	// В начале регистрации записывается информация:
	//  ИдентификаторШага, Шаг, ВремяНачала.
	// В конце регистрации записывается информация:
	//  ВремяОкончания, КодРезультата, ОписаниеРезультата, ВложенныйКонтекстВыполнения.

	ТекущийШагВыполнения = СтруктураШагаВыполнения();
	Если КонтекстВыполнения.Свойство("ТекущийШагВыполнения") Тогда
		ЗаполнитьЗначенияСвойств(ТекущийШагВыполнения, КонтекстВыполнения.ТекущийШагВыполнения, "ИдентификаторШага, Шаг, ВремяНачала");
	КонецЕсли;

	// Если не было зарегистрировано начало шага выполнения, то впоследствии могут быть ошибки при записи лога в журнал регистрации.
	Если ТипЗнч(ТекущийШагВыполнения.ВремяНачала) <> Тип("Число") Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не зарегистрировано начало шага выполнения %1, %2.'"),
				ТекущийШагВыполнения.ИдентификаторШага,
				ТекущийШагВыполнения.Шаг);
		ВызватьИсключение ТекстСообщения;
		Возврат Неопределено;
	КонецЕсли;

	ТекущийШагВыполнения.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
	ТекущийШагВыполнения.Вставить("КодРезультата", КодРезультата);
	ТекущийШагВыполнения.Вставить("ОписаниеРезультата", ОписаниеРезультата);
	ТекущийШагВыполнения.Вставить("ВложенныйКонтекстВыполнения", ВложенныйКонтекстВыполнения);

	КонтекстВыполнения.ЛогШаговВыполнения.Добавить(ТекущийШагВыполнения);

	КонтекстВыполнения.Удалить("ТекущийШагВыполнения"); // Удалить текущий шаг, т.к. он уже добавлен в "ЛогШаговВыполнения".

	Возврат ТекущийШагВыполнения;

КонецФункции

// Для случая, когда в лог необходимо записать единственное действие, без времени, то вместо комбинации
//  НачатьРегистрациюРезультатаВыполненияОперации ... ЗавершитьРегистрациюРезультатаВыполненияОперации можно использовать
//  только ЗарегистрироватьРезультатВыполненияОперации, тогда время выполнения будет равно 0.
//
// Параметры:
//  КонтекстВыполнения - Структура - см. возврат ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций;
//  ИдентификаторШага - Строка - Произвольный идентификатор;
//  Шаг - Строка - Произвольное описание шага.
//  КодРезультата - Число - Произвольный код описания возврата, 0 = нет ошибок;
//  ОписаниеРезультата - Строка - произвольное описание результата шага;
//  ВложенныйКонтекстВыполнения - Неопределено или Массив - массив вложенных шагов выполнения.
//
// Возвращаемое значение:
//   Структура - список ключей см. в ИнтернетПоддержкаПользователейКлиентСервер.СтруктураШагаВыполнения.
//
Функция ЗарегистрироватьРезультатВыполненияОперации(
			КонтекстВыполнения,
			ИдентификаторШага,
			Шаг,
			КодРезультата,
			ОписаниеРезультата,
			ВложенныйКонтекстВыполнения = Неопределено) Экспорт

	ТекущийШагВыполнения = СтруктураШагаВыполнения();
	ТекущийШагВыполнения.Вставить("ИдентификаторШага", ИдентификаторШага);
	ТекущийШагВыполнения.Вставить("Шаг", Шаг);
	ТекущийШагВыполнения.Вставить("ВремяНачала", ТекущаяУниверсальнаяДатаВМиллисекундах());
	ТекущийШагВыполнения.Вставить("ВремяОкончания", ТекущийШагВыполнения.ВремяНачала);
	ТекущийШагВыполнения.Вставить("КодРезультата", КодРезультата);
	ТекущийШагВыполнения.Вставить("ОписаниеРезультата", ОписаниеРезультата);
	ТекущийШагВыполнения.Вставить("ВложенныйКонтекстВыполнения", ВложенныйКонтекстВыполнения);

	КонтекстВыполнения.ЛогШаговВыполнения.Добавить(ТекущийШагВыполнения);

	Возврат ТекущийШагВыполнения;

КонецФункции

// Функция возвращает текстовое описание шагов выполнения.
//
// Параметры:
//  КонтекстВыполнения - Структура - Структура с ключами, описанными в Интернет.НоваяЗаписьРезультатовВыполненияОпераций();
//  ВключаяВложенные   - Булево - Истина, если надо включать вложенные контексты выполнения;
//  ВариантФормата     - Строка - в каком формате выводить текст. Возможные варианты:
//    * ТолькоТекстОписанияРезультата;
//    * ПодробноПоШагам.
//  УровеньВложенности - Число - Текущий уровень вложенности.
//
// Возвращаемое значение:
//   Строка - текстовое описание результата шага выполнения.
//
Функция ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполнения,
			ВключаяВложенные = Ложь,
			ВариантФормата = "",
			УровеньВложенности = 0) Экспорт

	ТипСтруктура = Тип("Структура");

	Результат = "";

	Для Каждого ТекущийШаг Из КонтекстВыполнения.ЛогШаговВыполнения Цикл

		Если ВариантФормата = "ТолькоТекстОписанияРезультата" Тогда
			Результат = Результат
				+ "#"
				+ СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", УровеньВложенности)
				+ ТекущийШаг.ОписаниеРезультата
				+ "#";
		ИначеЕсли ВариантФормата = "ПодробноПоШагам" Тогда
			Отступ = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", УровеньВложенности);
			ШаблонШага = НСтр("ru='%1Шаг: %2
				|%1Длительность (мс): %3
				|%1Результат выполнения: %4'")
				+ Символы.ПС;
			Результат = Результат
				+ "#"
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонШага,
						Отступ,
						ТекущийШаг.Шаг,
						ТекущийШаг.ВремяОкончания - ТекущийШаг.ВремяНачала, // Длительность.
						ВставитьОтступВМногострочнуюСтроку("(" + ТекущийШаг.КодРезультата + "), " + ТекущийШаг.ОписаниеРезультата, Отступ, Ложь))
				+ "#";
		КонецЕсли;

		Если ВключаяВложенные = Истина Тогда
			Если ТипЗнч(ТекущийШаг.ВложенныйКонтекстВыполнения) = ТипСтруктура Тогда
				Результат = Результат
					+ ПредставлениеЗаписиРезультатовВыполненияОпераций(
						ТекущийШаг.ВложенныйКонтекстВыполнения,
						ВключаяВложенные,
						ВариантФормата,
						УровеньВложенности + 1);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Результат = СтрЗаменить(Результат, "##", Символы.ПС + Символы.ПС);
	Результат = СтрЗаменить(Результат, "#", "");

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

Функция ХостПорталаПоддержки(Домен)


	Если Домен = 0 Тогда
		Возврат "portal.1c.ru";
	Иначе
		Возврат "portal.1c.eu";
	КонецЕсли;

КонецФункции

Функция ИмяКонфигурацииВМетаданных()

	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат Метаданные.Имя;
	#Иначе
	ПараметрыИПП = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	Возврат ПараметрыИПП.ИмяКонфигурации;
	#КонецЕсли

КонецФункции

Функция ВерсияКонфигурацииВМетаданных()

	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат Метаданные.Версия;
	#Иначе
	ПараметрыИПП = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	Возврат ПараметрыИПП.ВерсияКонфигурации;
	#КонецЕсли

КонецФункции

// Возвращает строковое представление типа платформы.
//
Функция ИмяТипПлатформыСтр(ПараметрТипПлатформы) Экспорт
	
	Если ПараметрТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Возврат "Linux_x86";
	ИначеЕсли ПараметрТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "Linux_x86_64";
	ИначеЕсли ПараметрТипПлатформы = ТипПлатформы.MacOS_x86 Тогда
		Возврат "MacOS_x86";
	ИначеЕсли ПараметрТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
		Возврат "MacOS_x86_64";
	ИначеЕсли ПараметрТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Возврат "Windows_x86";
	ИначеЕсли ПараметрТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Возврат "Windows_x86_64";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Преобразует переданную строку:
// в форматированную строку, если строка начинается с "<body>" и заканчивается "</body>";
// В противном случае строка остается без изменений.
//
Функция ФорматированнаяСтрокаИзHTML(ТекстСообщения) Экспорт
	
	ФДок = Новый ФорматированныйДокумент;
	ФДок.УстановитьHTML("<html>" + ТекстСообщения + "</html>", Новый Структура);
	Возврат ФДок.ПолучитьФорматированнуюСтроку();
	
КонецФункции

#Если Не ВебКлиент Тогда

Функция ТекстВФайле(ИмяФайла)

	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
	Результат = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Возврат Результат;

КонецФункции

Функция ТекстВДвоичныхДанных(ДвДанные) Экспорт

	Результат = "";

	Если ТипЗнч(ДвДанные) <> Тип("ДвоичныеДанные") Тогда
		Возврат "";
	КонецЕсли;

	ИмяВремФайла = ПолучитьИмяВременногоФайла("txt");
	ДвДанные.Записать(ИмяВремФайла);
	Результат = ТекстВФайле(ИмяВремФайла);

	Попытка
		УдалитьФайлы(ИмяВремФайла);
	Исключение
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Возврат Результат;

КонецФункции

#КонецЕсли

#Область БСПНастройкиПрограммы

// Отображает состояние подключения ИПП на панели
// "Интернет-поддержка и сервисы" (БСП).
//
Процедура ОтобразитьСостояниеПодключенияИПП(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Если Форма.БИПДанныеАутентификации = Неопределено Тогда
		Элементы.ДекорацияЛогинИПП.Заголовок = НСтр("ru = 'Подключение к Интернет-поддержке не выполнено.'");
		Элементы.ВойтиИлиВыйтиИПП.Заголовок = НСтр("ru = 'Подключить'");
		Элементы.ВойтиИлиВыйтиИПП.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Иначе
		ШаблонЗаголовка = ПодставитьДомен(
			НСтр("ru = '<body>Подключена Интернет-поддержка для пользователя <a href=""action:openUsersSite"">%1</body>'"));
		Элементы.ДекорацияЛогинИПП.Заголовок =
			ФорматированныйЗаголовок(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонЗаголовка,
					Форма.БИПДанныеАутентификации.Логин));
		Элементы.ВойтиИлиВыйтиИПП.Заголовок = НСтр("ru = 'Отключить'");
		Элементы.ВойтиИлиВыйтиИПП.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область АутентификацияВСервисахИнтернетПоддержки

Функция ХостСервисаLogin(Домен) Экспорт


	Если Домен = 0 Тогда
		Возврат "login.1c.ru";
	Иначе
		Возврат "login.1c.eu";
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ОтправкаСообщенийВСлужбуТехническойПоддержки

#Если Не ВебКлиент Тогда

Функция ХостСервисовТехническойПоддержки(Домен) Экспорт


	Если Домен = 0 Тогда
		Возврат "portal-support.1c.ru";
	Иначе
		Возврат "portal-support.1c.eu";
	КонецЕсли;

КонецФункции

Функция URLОперацииОтправитьДанныеСообщенияВТехПоддержку(Домен)

	Возврат "https://"
		+ ХостСервисовТехническойПоддержки(Домен)
		+ "/api/public/rest/request";

КонецФункции

Функция URLОперацииОтправитьДанныеСообщенияВТехПоддержкуPing(Домен)
	
	Возврат "https://"
		+ ХостСервисовТехническойПоддержки(Домен)
		+ "/api/public/rest/ping";
	
КонецФункции

Функция ОтправитьДанныеСообщенияВТехПоддержку(
	Тема,
	Тело,
	Знач Получатель,
	Вложения,
	НастройкиСоединенияССерверами,
	ДопПараметры,
	НастройкиПрокси = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"           , "");
	Результат.Вставить("СообщениеОбОшибке"   , "");
	Результат.Вставить("ТокенДанных"         , "");
	
	// Проверка доступности сервиса.
	РезультатПроверки = ПроверитьURLДоступен(
		URLОперацииОтправитьДанныеСообщенияВТехПоддержкуPing(
			НастройкиСоединенияССерверами.ДоменРасположенияСерверовИПП),
		НастройкиПрокси,
		"HEAD");
	
	Если Не ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
		
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
					|Не удалось проверить доступность сервиса отправки сообщений.
					|%1'"),
				РезультатПроверки.ИнформацияОбОшибке));
		
		Результат.КодОшибки = РезультатПроверки.ИмяОшибки;
		Результат.СообщениеОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
					|Не удалось проверить доступность сервиса.
					|%1'"),
				РезультатПроверки.СообщениеОбОшибке);
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Отправка данных сообщения.
	ТелоСообщения = СтрЗаменить(
		ДопПараметры.ШаблонТекстаСообщения,
		"%msgtxt",
		Тело);

	ПодготовитьВложенияКОтправке(Вложения, ДопПараметры.Вложения);

	ДанныеJSON = ПараметрыSaveTechSupportRequestJSON(
		Тема,
		ТелоСообщения,
		Получатель,
		ДопПараметры.Вложения);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");

	ДопПараметрыЗапроса = Новый Структура;
	ДопПараметрыЗапроса.Вставить("Метод"                   , "PUT");
	ДопПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ДопПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ДопПараметрыЗапроса.Вставить("ДанныеДляОбработки"      , ДанныеJSON);
	ДопПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ДопПараметрыЗапроса.Вставить("НастройкиПрокси"         , НастройкиПрокси);
	ДопПараметрыЗапроса.Вставить("Таймаут"                 , 300);
	
	РезультатОтправки = ЗагрузитьСодержимоеИзИнтернет(
		URLОперацииОтправитьДанныеСообщенияВТехПоддержку(
			НастройкиСоединенияССерверами.ДоменРасположенияСерверовИПП),
		,
		,
		ДопПараметрыЗапроса);

	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда

		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|%1'"),
			РезультатОтправки.ИнформацияОбОшибке));

		Результат.КодОшибки = РезультатОтправки.КодОшибки;
		Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|%1'"),
			РезультатОтправки.СообщениеОбОшибке);

		Возврат Результат;

	КонецЕсли;

	Попытка
		РезультатВызова = РезультатSaveTechSupportRequestИзJSON(РезультатОтправки.Содержимое);
	Исключение

		ИнфОшибка = ИнформацияОбОшибке();

		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|Ошибка при обработке ответа сервиса.
				|Некорректный ответ сервиса отправки сообщений.
				|%1
				|Тело ответа: %2'"),
			ПодробноеПредставлениеОшибки(ИнфОшибка),
			Лев(РезультатОтправки.Содержимое, 1024)));

		Результат.КодОшибки = РезультатОтправки.КодОшибки;
		Результат.СообщениеОбОшибке =
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|Некорректный ответ сервиса отправки сообщений.'");

		Возврат Результат;

	КонецПопытки;

	Если РезультатВызова.success <> Истина Тогда

		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|Ошибка при передаче сообщения в тех. поддержку.
				|Сервис сообщил об ошибке.
				|Ответ сервиса: %1'"),
			Лев(РезультатОтправки.Содержимое, 1024)));

		Результат.КодОшибки = "ВозвращенОтказСервиса";
		Результат.СообщениеОбОшибке =
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|Ошибка при передаче сообщения в тех. поддержку.
				|Подробнее см. в журнале регистрации.'");

		Возврат Результат;

	КонецЕсли;

	Результат.ТокенДанных = РезультатВызова.uuid;

	Возврат Результат;

КонецФункции

Процедура ПодготовитьВложенияКОтправке(ПереданныеВложения, ВложенияДляОтправки)

	Если ПереданныеВложения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для каждого ТекВложение Из ПереданныеВложения Цикл
		ВложенияДляОтправки.Добавить(ТекВложение);
	КонецЦикла;

КонецПроцедуры

Функция ПараметрыSaveTechSupportRequestJSON(Тема, Тело, Получатель, ТекстовыеВложения)

	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("theme");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Тема);

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("text");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Тело);

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("language");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(КодЯзыка(ТекущийЯзыкСистемы()));

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("techSupportNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Получатель);

	// Добавление вложений
	Если ТекстовыеВложения <> Неопределено Тогда

		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("techSupportAdditionalDtoList");
		ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();

		Для Каждого ТекВложение Из ТекстовыеВложения Цикл
			ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
			ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("name");
			ЗаписьДанныхСообщения.ЗаписатьЗначение(ТекВложение.Представление);
			ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("value");
			ЗаписьДанныхСообщения.ЗаписатьЗначение(ТекВложение.Текст);
			ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		КонецЦикла;

		ЗаписьДанныхСообщения.ЗаписатьКонецМассива();

	КонецЕсли;

	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();

	Возврат ЗаписьДанныхСообщения.Закрыть();

КонецФункции

Функция РезультатSaveTechSupportRequestИзJSON(ТелоJSON)

	ОтветОбъект  = Новый Структура("success, errorMessage, uuid", "false", "", "");
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Пока ЧтениеОтвета.Прочитать() Цикл
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Строка
			Или ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Число
			Или ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Тогда
			ОтветОбъект.Вставить(ИмяСвойства, ЧтениеОтвета.ТекущееЗначение);
		КонецЕсли;
	КонецЦикла;
	ЧтениеОтвета.Закрыть();

	Возврат ОтветОбъект;

КонецФункции

Функция КодЯзыка(ЯзыкИСтрана)

	ПозицияПодчеркивание = Найти(ЯзыкИСтрана, "_");
	Если ПозицияПодчеркивание = 0 Тогда
		Возврат ЯзыкИСтрана;
	Иначе
		Возврат Лев(ЯзыкИСтрана, ПозицияПодчеркивание - 1);
	КонецЕсли;

КонецФункции

#КонецЕсли

#КонецОбласти

#Область ПолучениеСодержимогоИзИнтернет

#Если Не ВебКлиент Тогда

Функция НовыйЗащищенноеСоединение()

	Возврат Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);

КонецФункции

Процедура УстановитьОписаниеОшибки(Результат, КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке, Перенаправления)

	Результат.КодОшибки          = КодОшибки;
	Результат.СообщениеОбОшибке  = СообщениеОбОшибке;
	ДопСообщение = "";
	Если КодОшибки = "ConnectError" Тогда
		ДопСообщение = НСтр("ru = 'Ошибка при подключении к серверу.'");

	ИначеЕсли КодОшибки = "ServerError" Тогда
		ДопСообщение = НСтр("ru = 'На сервере возникла внутренняя ошибка при обработке запроса.'");

	ИначеЕсли КодОшибки = "ClientError" Тогда
		ДопСообщение = НСтр("ru = 'Некорректный запрос.'");

	ИначеЕсли КодОшибки = "InternalError" Тогда
		ДопСообщение = НСтр("ru = 'Внутренняя ошибка.'");

	ИначеЕсли КодОшибки = "LoginError" Тогда
		ДопСообщение = НСтр("ru = 'Ошибка аутентификации на сервере.'");

	КонецЕсли;

	Результат.СообщениеОбОшибке =
		?(ПустаяСтрока(ДопСообщение), "", ДопСообщение + " ")
		+ СообщениеОбОшибке;

	Результат.ИнформацияОбОшибке = ИнформацияОбОшибке;

	Если Перенаправления.Количество() > 0 Тогда
		Результат.ИнформацияОбОшибке = Результат.ИнформацияОбОшибке + Символы.ПС
			+ НСтр("ru = 'Перенаправления:'") + Символы.ПС
			+ СтрСоединить(Перенаправления, ", " + Символы.ПС);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьСписокПеренаправленийКИнформацииОбОшибке(ИнформацияОбОшибке, Перенаправления)

	Если Перенаправления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИнформацияОбОшибке = ИнформацияОбОшибке + Символы.ПС
		+ НСтр("ru = 'Перенаправления:'") + Символы.ПС
		+ СтрСоединить(Перенаправления, ", " + Символы.ПС);

КонецПроцедуры

Функция НовыйОпределенияСервиса(
	МестоположениеWSDL,
	Импорт = Ложь,
	ТаймаутПодключения = -1,
	НастройкиПрокси = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("ДлительностьПолученияОписанияСервиса", 0);
	
	ДопПараметрыПолученияФайла = Новый Структура("ФорматОтвета, Таймаут", 1, ТаймаутПодключения);
	ДопПараметрыПолученияФайла.Вставить("НастройкиПрокси", НастройкиПрокси);
	ВремяНачалаЗагрузки = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОписаниеWSDL = ЗагрузитьСодержимоеИзИнтернет(
		МестоположениеWSDL,
		,
		,
		ДопПараметрыПолученияФайла);
	Результат.ДлительностьПолученияОписанияСервиса =
		(ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачалаЗагрузки);
	
	Если НЕ ПустаяСтрока(ОписаниеWSDL.КодОшибки) Тогда

		Результат.КодОшибки          = ОписаниеWSDL.КодОшибки;
		Результат.СообщениеОбОшибке  = ОписаниеWSDL.СообщениеОбОшибке;
		Результат.ИнформацияОбОшибке =
			НСтр("ru = 'Ошибка при получении WSDL-описания.'") + " "
				+ ОписаниеWSDL.ИнформацияОбОшибке;

		Возврат Результат;

	КонецЕсли;

	ТекстWSDL = ОписаниеWSDL.Содержимое;

	Попытка

		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстWSDL);
		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);

	Исключение

		Результат.КодОшибки          = "ServerError";
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Некорректное WSDL-описание сервиса.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при обработке WSDL-описания %1. %2'"),
				МестоположениеWSDL,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Результат;

	КонецПопытки;

	КорневойЭлемент = ДокументDOM.ПервыйДочерний;
	URIСервисов = ЗначениеАтрибутаУзлаDOM(КорневойЭлемент, "targetNamespace", "");

	Схемы         = Новый Массив;
	СервисыИПорты = Новый Массив;
	УзлыДирективыИмпорта = ДокументDOM.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/", "import");
	Если УзлыДирективыИмпорта.Количество() > 0 Тогда

		Для каждого УзелИмпорта Из УзлыДирективыИмпорта Цикл

			Если УзелИмпорта.URIПространстваИмен <> "http://schemas.xmlsoap.org/wsdl/" Тогда
				Продолжить;
			КонецЕсли;

			Location = ЗначениеАтрибутаУзлаDOM(УзлыДирективыИмпорта[0], "location", "");
			Если ПустаяСтрока(Location) Тогда
				Результат.КодОшибки          = "ServerError";
				Результат.СообщениеОбОшибке  = НСтр("ru = 'Некорректное WSDL-описание сервиса.'");
				Результат.ИнформацияОбОшибке =
					НСтр("ru = 'Отсутствует location для директивы import.'");
				Возврат Результат;
			КонецЕсли;

			ОписаниеИмпорта = НовыйОпределенияСервиса(Location, Истина, ТаймаутПодключения, НастройкиПрокси);
			
			Результат.ДлительностьПолученияОписанияСервиса =
				Результат.ДлительностьПолученияОписанияСервиса
				+ ОписаниеИмпорта.ДлительностьПолученияОписанияСервиса;
			
			Если Не ПустаяСтрока(ОписаниеИмпорта.КодОшибки) Тогда
				Возврат ОписаниеИмпорта;
			КонецЕсли;

			// Обработка импорта
			Для каждого Схема Из ОписаниеИмпорта.Схемы Цикл
				Схемы.Добавить(Схема);
			КонецЦикла;

			Для каждого СервисИПорт Из ОписаниеИмпорта.СервисыИПорты Цикл
				СервисыИПорты.Добавить(СервисИПорт);
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

	// Создание фабрики XDTO

	УзлыОписанияТипов = ДокументDOM.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/", "types");
	Для каждого УзелТипов Из УзлыОписанияТипов Цикл

		УзлыСхем = УзелТипов.ПолучитьЭлементыПоИмени("http://www.w3.org/2001/XMLSchema", "schema");
		Для каждого УзелСхемы Из УзлыСхем Цикл

			СхемаОбщая = Новый СхемаXML;

			Попытка
				ПостроительСхемы = Новый ПостроительСхемXML;
				СхемаДанных = ПостроительСхемы.СоздатьСхемуXML(УзелСхемы);
				Схемы.Добавить(СхемаДанных);
			Исключение

				Результат.КодОшибки          = "ServerError";
				Результат.СообщениеОбОшибке  = НСтр("ru = 'Некорректное WSDL-описание сервиса.'");
				Результат.ИнформацияОбОшибке =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при обработке WSDL-описания %1. Ошибка построения схемы данных. %2'"),
						МестоположениеWSDL,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат Результат;

			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	Если Импорт Тогда

		// Возвратить набор схем
		Результат.Вставить("Схемы", Схемы);

	Иначе

		// Создать фабрику XDTO сервиса
		Если Схемы.Количество() = 0 Тогда

			ФабрикаСервиса = Неопределено;

		Иначе

			Попытка

				НаборСхем = Новый НаборСхемXML;
				Для каждого Схема Из Схемы Цикл
					НаборСхем.Добавить(Схема);
				КонецЦикла;
				ФабрикаСервиса = Новый ФабрикаXDTO(НаборСхем);

			Исключение

				Результат.КодОшибки          = "ServerError";
				Результат.СообщениеОбОшибке  = НСтр("ru = 'Некорректное WSDL-описание сервиса.'");
				Результат.ИнформацияОбОшибке =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при обработке WSDL-описания %1. Ошибка при создании фабрики XDTO сервиса. %2'"),
						МестоположениеWSDL,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат Результат;

			КонецПопытки;

		КонецЕсли;

		Результат.Вставить("ФабрикаXDTO", ФабрикаСервиса);

	КонецЕсли;

	// Сервисы и порты
	УзлыСервисов = КорневойЭлемент.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/", "service");
	Для каждого УзелСервиса Из УзлыСервисов Цикл

		ИмяСервиса = ЗначениеАтрибутаУзлаDOM(УзелСервиса, "name", "");
		Если ПустаяСтрока(ИмяСервиса) Тогда
			Продолжить;
		КонецЕсли;

		УзлыПортов = УзелСервиса.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/", "port");
		Для каждого УзелПорта Из УзлыПортов Цикл

			ИмяПорта = ЗначениеАтрибутаУзлаDOM(УзелПорта, "name", "");
			Если ПустаяСтрока(ИмяПорта) Тогда
				Продолжить;
			КонецЕсли;

			УзлыАдреса = УзелПорта.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/soap/", "address");
			Если УзлыАдреса.Количество() > 0 Тогда

				УзелАдреса = УзлыАдреса[0];
				АдресПорта = ЗначениеАтрибутаУзлаDOM(УзелАдреса, "location", "");
				Если НЕ ПустаяСтрока(АдресПорта) Тогда
					СервисИПорт = Новый Структура;
					СервисИПорт.Вставить("URI"           , URIСервисов);
					СервисИПорт.Вставить("Сервис"        , ИмяСервиса);
					СервисИПорт.Вставить("Порт"          , ИмяПорта);
					СервисИПорт.Вставить("Местоположение", АдресПорта);
					СервисыИПорты.Добавить(СервисИПорт);
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Результат.Вставить("СервисыИПорты", СервисыИПорты);

	Возврат Результат;

КонецФункции

Функция ОпределенияСервиса(
	МестоположениеWSDL,
	ТаймаутПодключения = -1,
	НастройкиПрокси = Неопределено)

	ОписательОшибки = Неопределено;
	Попытка
		Если НастройкиПрокси = Неопределено Тогда
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Определения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОпределенияСервиса(
			МестоположениеWSDL,
			ОписательОшибки,
			ТаймаутПодключения);
		#Иначе
		Определения = ИнтернетПоддержкаПользователейСлужебныйКлиентПовтИсп.ОпределенияСервиса(
			МестоположениеWSDL,
			ОписательОшибки,
			ТаймаутПодключения);
		#КонецЕсли
		Иначе
			Определения = НовыйОпределенияСервиса(
				МестоположениеWSDL,
				,
				ТаймаутПодключения,
				НастройкиПрокси);
		КонецЕсли;
	Исключение
		Возврат ОписательОшибки;
	КонецПопытки;

	Возврат Определения;

КонецФункции

Функция НовыйПроксиВебСервиса(
	МестоположениеWSDL,
	ТаймаутПодключения = -1,
	НастройкиПрокси = Неопределено)

	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("ДлительностьПолученияОписанияСервиса", 0);
	
	URIПространстваИмен = Неопределено;
	ИмяСервиса          = Неопределено;
	ИмяТочкиПодключения = Неопределено;
	
	ОпределениеСервиса = ОпределенияСервиса(
		МестоположениеWSDL,
		ТаймаутПодключения,
		НастройкиПрокси);
	
	Результат.ДлительностьПолученияОписанияСервиса =
		Цел(ОпределениеСервиса.ДлительностьПолученияОписанияСервиса/1000);
	
	Если НЕ ПустаяСтрока(ОпределениеСервиса.КодОшибки) Тогда
		Результат.КодОшибки         = ОпределениеСервиса.КодОшибки;
		Результат.СообщениеОбОшибке = ОпределениеСервиса.СообщениеОбОшибке;
		Результат.ИнформацияОбОшибке =
			НСтр("ru = 'Ошибка при создании описания веб-сервиса.'") + " "
			+ ОпределениеСервиса.ИнформацияОбОшибке;
		Возврат Результат;
	КонецЕсли;

	НайденныйПорт = Неопределено;
	Для каждого СервисИПорт Из ОпределениеСервиса.СервисыИПорты Цикл

		Если (URIПространстваИмен = Неопределено ИЛИ СервисИПорт.URI = URIПространстваИмен)
			И (ИмяСервиса = Неопределено ИЛИ СервисИПорт.Сервис = ИмяСервиса)
			И (ИмяТочкиПодключения = Неопределено ИЛИ СервисИПорт.Порт = ИмяТочкиПодключения) Тогда
			НайденныйПорт = СервисИПорт;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если НайденныйПорт = Неопределено Тогда

		Результат.КодОшибки         = "InternalError";
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не найдено определение сервиса.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при создании описания веб-сервиса %1. Определение сервиса не найдено.
					|URI пространства имен: %2;
					|Имя сервиса: %3;
					|Имя точки подключения: %4'"),
				МестоположениеWSDL,
				URIПространстваИмен,
				ИмяСервиса,
				ИмяТочкиПодключения);
		Возврат Результат;

	КонецЕсли;

	Результат.Вставить("ФабрикаXDTO"          , ОпределениеСервиса.ФабрикаXDTO);
	Результат.Вставить("АдресТочкиПодключения", НайденныйПорт.Местоположение);
	Результат.Вставить("URIПространстваИмен"  , НайденныйПорт.URI);

	Возврат Результат;

КонецФункции

Процедура СлужебнаяПроверитьURLДоступен(
	URL,
	Метод,
	ИмяОшибки,
	СообщениеОбОшибке,
	ИнформацияОбОшибке,
	НастройкиПроксиСервера = Неопределено) Экспорт
	
	ДопПараметрыПолученияФайла = Новый Структура("ФорматОтвета, Таймаут", 1, 10);
	ДопПараметрыПолученияФайла.Вставить("НастройкиПрокси", НастройкиПроксиСервера);
	
	Если Метод <> Неопределено Тогда
		ДопПараметрыПолученияФайла.Вставить("Метод", Метод);
	КонецЕсли;
	
	Попытка
		РезультатЗагрузки = ЗагрузитьСодержимоеИзИнтернет(
			URL,
			,
			,
			ДопПараметрыПолученияФайла);
	Исключение
		ИмяОшибки = "Unknown";
		СообщениеОбОшибке = НСтр("ru = 'Неизвестная ошибка. Подробнее см. в журнале регистрации.'");
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неизвестная ошибка при проверке доступности URL.
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Если Не ПустаяСтрока(РезультатЗагрузки.КодОшибки) Тогда
		ИмяОшибки          = РезультатЗагрузки.КодОшибки;
		СообщениеОбОшибке  = РезультатЗагрузки.СообщениеОбОшибке;
		ИнформацияОбОшибке = РезультатЗагрузки.ИнформацияОбОшибке;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьИнтернетПрокси(НастройкаПроксиСервера, Протокол)
	
	Если НастройкаПроксиСервера = Неопределено
		Или НастройкаПроксиСервера = "<СистемныеУстановки>" Тогда
		// Системные установки прокси-сервера.
		Возврат Неопределено;
	КонецЕсли;	
	
	ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
	Если Не ИспользоватьПрокси Тогда
		// Не использовать прокси-сервер.
		Возврат Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
	Если ИспользоватьСистемныеНастройки Тогда
		// Системные настройки прокси-сервера.
		Возврат Новый ИнтернетПрокси(Истина);
	КонецЕсли;
			
	// Настройки прокси-сервера, заданные вручную.
	Прокси = Новый ИнтернетПрокси;
	
	// Определение адреса и порта прокси-сервера.
	ДополнительныеНастройки = НастройкаПроксиСервера.Получить("ДополнительныеНастройкиПрокси");
	ПроксиПоПротоколу = Неопределено;
	Если ТипЗнч(ДополнительныеНастройки) = Тип("Соответствие") Тогда
		ПроксиПоПротоколу = ДополнительныеНастройки.Получить(Протокол);
	КонецЕсли;
	
	Если ТипЗнч(ПроксиПоПротоколу) = Тип("Структура") Тогда
		Прокси.Установить(Протокол, ПроксиПоПротоколу.Адрес, ПроксиПоПротоколу.Порт,
			НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"]);
	Иначе
		Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"], 
			НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"]);
	КонецЕсли;
	
	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
	
	АдресаИсключений = НастройкаПроксиСервера.Получить("НеИспользоватьПроксиДляАдресов");
	Если ТипЗнч(АдресаИсключений) = Тип("Массив") Тогда
		Для каждого АдресИсключения Из АдресаИсключений Цикл
			Прокси.НеИспользоватьПроксиДляАдресов.Добавить(АдресИсключения);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

#КонецЕсли

#КонецОбласти

#Область ОбработкаБизнесПроцессов

// Возвращает URL веб-сервиса Интернет-поддержки пользователей.
//
Функция АдресWSDLСервисаБизнесПроцессов() Экспорт

	Возврат "https://webits.1c.ru/services/WebItsSimpleService?wsdl";

КонецФункции

// Определение имени URI веб-сервиса ИПП.
//
Функция URIСервисаСервисаБизнесПроцессов() Экспорт

	Возврат "https://ws.webits.onec.ru";

КонецФункции

// Возвращает версию поддерживаемого библиотекой API
// взаимодействия с серверной частью бизнес-процессов.
//
Функция ВерсияAPIСервисаБизнесПроцессов()

	Возврат "1.0.1.1";

КонецФункции

#Если Не ВебКлиент Тогда

// Проверка возможности запуска Интернет-поддержки в соответствии с параметрами
// и местом (кнопкой) запуска. Возвращает управляющую структуру, описывающую
// действия, которые необходимо выполнить.
//
// Параметры:
//	МестоЗапуска - Строка - место запуска (имя кнопки) механизма ИПП;
//	ПараметрыИнтернетПоддержки - Структура - параметры работы механизма
//		Интернет-поддержки (см. функцию
//		ИнтернетПоддержкаПользователей.ПараметрыСозданияКонтекста()).
//
// Возвращаемое значение:
// Структура - если запуск в текущем режиме работы запрещен:
//	* Действие  - Строка - действие, которое необходимо выполнить;
//	* Сообщение - Строка - если выполнение действия подразумевает показ сообщения
//						   пользователю;
// Неопределено - если запуск разрешен.
//
Функция ОпределитьВозможностьЗапускаПоМестуИПараметрам(МестоЗапуска, ПараметрыИнтернетПоддержки) Экспорт

	Результат = Неопределено;

	// Проверка возможности запуска
	ПриНачалеРаботыСистемы = ПараметрыИнтернетПоддержки.ПриНачалеРаботыСистемы;

	// Стандартная обработка при начале работы с программой
	Если ПриНачалеРаботыСистемы Тогда

		Если ПараметрыИнтернетПоддержки.РаботаВМоделиСервиса
			ИЛИ НЕ ПараметрыИнтернетПоддержки.ЗапускРазрешен Тогда
			Результат = Новый Структура("Действие", "Возврат");
		КонецЕсли;

	КонецЕсли;

	Если Результат = Неопределено Тогда

		Если ПараметрыИнтернетПоддержки.РаботаВМоделиСервиса Тогда

			Результат = Новый Структура("Действие,Сообщение",
				"ПоказатьСообщение",
				НСтр("ru = 'Использование Интернет-поддержки пользователей недоступно при работе в модели сервиса.'"));

		ИначеЕсли НЕ ПараметрыИнтернетПоддержки.ЗапускРазрешен Тогда

			Результат = Новый Структура("Действие,Сообщение",
				"ПоказатьСообщение",
				НСтр("ru = 'Недостаточно прав для запуска Интернет-поддержки пользователей. Обратитесь к администратору.'"));

		КонецЕсли;

		Если Результат = Неопределено Тогда

			// Обработка обработчиком текущего бизнес-процесса
			Обработчик = ОбработчикБизнесПроцесса(МестоЗапуска, "ОпределитьВозможностьЗапуска");
			Если Обработчик <> Неопределено Тогда

				ОписаниеДействия = Новый Структура;
				Обработчик.ОпределитьВозможностьЗапуска(
					МестоЗапуска,
					ПараметрыИнтернетПоддержки,
					ОписаниеДействия);

				Если ОписаниеДействия.Количество() > 0 Тогда
					Результат = ОписаниеДействия;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если Результат <> Неопределено Тогда
		Результат.Вставить("ПриНачалеРаботыСистемы", ПриНачалеРаботыСистемы);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Проверка, зарегистрирована ли конфигурация в сервисе Интернет-поддержки
// пользователей.
//
// Параметры:
//	ОшибкаДоступаКВебСервису - Булево - в параметре возвращается значение Истина,
//		если в процессе обращения к веб-сервису возникло исключение, ошибка
//		записывается в журнал регистрации;
//	ОписаниеСервисаИПП - Структура - описатель сервиса ИПП (см. функцию
//		НовыйОписаниеСервисаИПП());
//	ПараметрыИПП - Структура - параметры для работы с сервисом ИПП, полученные
//		ранее;
//
// Возвращаемое значение:
//	Булево - Истина, если конфигурация зарегистрирована в сервисе ИПП,
//		Ложь - если конфигурация не зарегистрирована или возникло исключение
//		при обращении к сервису ИПП.
//
Функция КонфигурацияЗарегистрированаВСервисеИПП(ОшибкаОбращенияКВебСервису = Ложь) Экспорт

	Попытка

		ОписаниеСервисаИПП = НовыйОписаниеСервисаИПП();

		// В качестве параметра метода передается имя конфигурации
		ОтветСервера = СервисИПП_isConfigurationSupported(
			ИмяКонфигурации(),
			ОписаниеСервисаИПП);

		Возврат (ОтветСервера = Истина ИЛИ ОтветСервера = "true");

	Исключение
		ОшибкаОбращенияКВебСервису = Истина;
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;

КонецФункции

// Формирует описание веб-сервиса из WSDL-документа для дальнейшей работы
// с веб-сервисом ИПП.
//
// Параметры:
// МестоположениеWSDL - Строка, Неопределено - URL расположения WSDL-документа;
//		Если не задан, тогда используется АдресWSDLСервисаБизнесПроцессов();
//
// Возвращаемое значение:
// Структура - описание соединения с сервисом ИПП:
//	* АдресWSDL - Строка - URL WSDL-документа;
//	* ТаймаутСети - Число - таймаут сетевого соединения;
//	* ФабрикаXDTO - ФабрикаXDTO - Фабрика XDTO веб-сервиса;
//	* URIСервиса - Строка - URI веб-сервиса ИПП;
//	* СоединениеПорта - HTTPСоединение - соединение с портом сервиса
//		для вызовов методов веб-сервиса;
//	* ИнтернетПрокси - ИнтернетПрокси - соединение прокси-сервера;
//	* ПараметрыПодключенияКПорту -Структура - см. функцию
//		НовыйПараметрыПолученияДокумента();
//
Функция НовыйОписаниеСервисаИПП(МестоположениеWSDL = Неопределено, Таймаут = -1) Экспорт

	Если МестоположениеWSDL = Неопределено Тогда
		МестоположениеWSDL = АдресWSDLСервисаБизнесПроцессов();
	КонецЕсли;

	ПроксиСервиса = НовыйПроксиВебСервиса(МестоположениеWSDL, Таймаут);

	Если НЕ ПустаяСтрока(ПроксиСервиса.КодОшибки) Тогда
		ТекстИсключения = НСтр("ru = 'Ошибка при подключении к сервису Интернет-поддержки.'") + " "
			+ ПроксиСервиса.ИнформацияОбОшибке;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("МестоположениеWSDL", МестоположениеWSDL);
	Результат.Вставить("ПроксиСервиса"     , ПроксиСервиса);
	Результат.Вставить("ФабрикаXDTO"       , ПроксиСервиса.ФабрикаXDTO);
	Результат.Вставить("URIСервиса"        , ПроксиСервиса.URIПространстваИмен);

	Результат.Вставить("ТаймаутСети", 30);

	Возврат Результат;

КонецФункции

// Прокси-функция для вызова метода isConfigurationSupported() веб-сервиса ИПП.
//
// Параметры:
// ИмяКонфигурации - Строка - имя текущей конфигурации;
// ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
// Булево - значение, возвращенное методом isConfigurationSupported()
//		веб-сервиса ИПП;
//
Функция СервисИПП_isConfigurationSupported(ИмяКонфигурации, ОписаниеСервисаИПП)

	ЗаписьКонверта = НовыйЗаписьКонвертаSOAP();

	ТипЗначенияСвойства = ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП("isConfigurationSupported",
		ОписаниеСервисаИПП);

	Если ТипЗначенияСвойства = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции isConfigurationSupported сервиса (%1).
			|Не удалось определить тип корневого свойства isConfigurationSupported.'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ЗначениеXDTO = ОписаниеСервисаИПП.ФабрикаXDTO.Создать(ТипЗначенияСвойства, ИмяКонфигурации);

	ОписаниеСервисаИПП.ФабрикаXDTO.ЗаписатьXML(
		ЗаписьКонверта,
		ЗначениеXDTO,
		"isConfigurationSupported",
		ОписаниеСервисаИПП.URIСервиса,
		ФормаXML.Элемент,
		НазначениеТипаXML.Явное);

	ТекстКонверта = ТекстВКонвертеSOAP(ЗаписьКонверта);

	ОписаниеОтветаSOAP = ОтправитьЗапросSOAP(
		ТекстКонверта,
		ОписаниеСервисаИПП.ПроксиСервиса,
		ОписаниеСервисаИПП.ТаймаутСети);

	Если НЕ ПустаяСтрока(ОписаниеОтветаSOAP.КодОшибки) Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции isConfigurationSupported сервиса (%1):'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL)
			+ " " + ОписаниеОтветаSOAP.ИнформацияОбОшибке;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ТелоОтвета = ОписаниеОтветаSOAP.ТелоОтвета;

	ТипОбъекта = ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП("isConfigurationSupportedResponse", ОписаниеСервисаИПП);
	Если ТипОбъекта = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции isConfigurationSupported сервиса (%1).
			|Не удалось определить тип корневого свойства isConfigurationSupportedResponse.'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ОписаниеОтветаSOAP = ПрочитатьОтветВКонвертеSOAP(
		ТелоОтвета,
		ОписаниеСервисаИПП,
		ТипОбъекта);

	Если ОписаниеОтветаSOAP.Ошибка Тогда

		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции isConfigurationSupported сервиса (%1).'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL)
			+ Символы.ПС
			+ ОписаниеОтветаSOAP.ИнформацияОбОшибке
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru = 'Тело запроса:'")
			+ Символы.ПС
			+ Лев(ТекстКонверта, 1024 * 5)
			+ НСтр("ru = 'Тело ответа:'")
			+ Символы.ПС
			+ Лев(ТелоОтвета, 1024 * 5);

		ВызватьИсключение ТекстИсключения;

	КонецЕсли;

	Значение = ОписаниеОтветаSOAP.ВозвращенноеЗначение;

	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO") Тогда
		Возврат Значение.Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Прокси-функция для вызова метода process() веб-сервиса ИПП.
//
// Параметры:
//	ПараметрыЗапроса - ОбъектXDTO - параметры запроса метода process();
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
//	ОбъектXDTO - значение, возвращенное методом process() веб-сервиса ИПП;
//
Функция СервисИПП_process(ПараметрыЗапроса, ОписаниеСервисаИПП, Таймаут = -1)

	ЗаписьКонверта = НовыйЗаписьКонвертаSOAP();

	ЗаписьКонверта.ЗаписатьНачалоЭлемента("m:processRequest");
	ЗаписьКонверта.ЗаписатьАтрибут("xmlns:m", ОписаниеСервисаИПП.URIСервиса);

	ОписаниеСервисаИПП.ФабрикаXDTO.ЗаписатьXML(
		ЗаписьКонверта,
		ПараметрыЗапроса,
		"parameters",
		,
		ФормаXML.Элемент,
		НазначениеТипаXML.Явное);

	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </m:processRequest>

	ТекстКонверта = ТекстВКонвертеSOAP(ЗаписьКонверта);

	ОписаниеОтветаSOAP = ОтправитьЗапросSOAP(
		ТекстКонверта,
		ОписаниеСервисаИПП.ПроксиСервиса,
		?(Таймаут = -1, ОписаниеСервисаИПП.ТаймаутСети, Таймаут));

	Если НЕ ПустаяСтрока(ОписаниеОтветаSOAP.КодОшибки) Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции process сервиса (%1):'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL)
			+ " " + ОписаниеОтветаSOAP.ИнформацияОбОшибке;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ТелоОтвета = ОписаниеОтветаSOAP.ТелоОтвета;

	ТипОбъекта = ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП("processResponse", ОписаниеСервисаИПП);
	Если ТипОбъекта = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции process сервиса (%1).
			|Не удалось определить тип корневого свойства processResponse.'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ОписаниеОтветаSOAP = ПрочитатьОтветВКонвертеSOAP(
		ТелоОтвета,
		ОписаниеСервисаИПП,
		ТипОбъекта);

	Если ОписаниеОтветаSOAP.Ошибка Тогда

		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции process сервиса (%1).'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL)
			+ Символы.ПС
			+ ОписаниеОтветаSOAP.ИнформацияОбОшибке
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru = 'Тело запроса:'")
			+ Символы.ПС
			+ Лев(ТекстКонверта, 1024 * 5)
			+ НСтр("ru = 'Тело ответа:'")
			+ Символы.ПС
			+ Лев(ТелоОтвета, 1024 * 5);

		ВызватьИсключение ТекстИсключения;

	КонецЕсли;

	Значение = ОписаниеОтветаSOAP.ВозвращенноеЗначение;

	Если ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		Возврат Значение.commands;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Возвращает строковое значение атрибута узла DOM-документа.
//
// Параметры:
//	УзелDOM - УзелDOM - узел DOM-документа;
//	ИмяАтрибута - Строка - полное имя атрибута;
//	ЗначениеЕслиНеНайдено - Произвольный - значение, которое необходимо
//		возвратить, если атрибут не найден;
//
// Возвращаемое значение:
//	Строка - строковое значение атрибута узла;
//
Функция ЗначениеАтрибутаУзлаDOM(УзелDOM, ИмяАтрибута, ЗначениеЕслиНеНайдено = Неопределено)

	Атрибут = УзелDOM.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);

	Если Атрибут = Неопределено Тогда
		Возврат ЗначениеЕслиНеНайдено;
	Иначе
		Возврат Атрибут.Значение;
	КонецЕсли;

КонецФункции

// Возвращает тип значения корневого свойства пакета фабрики XDTO
// веб-сервиса ИПП.
//
// Параметры:
//	ИмяСвойства - Строка - имя корневого свойства;
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
//	ТипЗначенияXDTO, ТипОбъектаXDTO, Неопределено - возвращаемый тип корневого
//		свойства, Неопределено - если корневое свойство отсутствует.
//
Функция ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП(ИмяСвойства, ОписаниеСервисаИПП)

	Пакет            = ОписаниеСервисаИПП.ФабрикаXDTO.Пакеты.Получить(ОписаниеСервисаИПП.URIСервиса);
	КорневоеСвойство = Пакет.КорневыеСвойства.Получить(ИмяСвойства);
	Если КорневоеСвойство = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат КорневоеСвойство.Тип;
	КонецЕсли;

КонецФункции

// Формирует объект тип ЗаписьXML с записанными SOAP-заголовками;
//
// Возвращаемое значение:
//	ЗаписьXML - объект записи XML с записанными SOAP-заголовками;
//
Функция НовыйЗаписьКонвертаSOAP(СоответствияПространствИмен = Неопределено)

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();

	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Envelope");

	Если СоответствияПространствИмен <> Неопределено Тогда
		Для каждого КлючЗначение Из СоответствияПространствИмен Цикл
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(
				КлючЗначение.Ключ,
				КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;

	ЗаписьXML.ЗаписатьАтрибут("xmlns:soap", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Header");
	ЗаписьXML.ЗаписатьКонецЭлемента(); // </soap:Header>
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Body");

	Возврат ЗаписьXML;

КонецФункции

// Финализирует запись конверта SOAP и возвращает текст конверта.
//
// Параметры:
//	ЗаписьКонверта - ЗаписьXML - объект, в который выполнялась запись конверта;
//
// Возвращаемое значение:
//	Строка - текст конверта SOAP;
//
Функция ТекстВКонвертеSOAP(ЗаписьКонверта)

	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </soap:Body>
	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </soap:Envelope>

	Возврат ЗаписьКонверта.Закрыть();

КонецФункции

// Отправку SOAP-конверта веб-сервису ИПП и получение ответного SOAP-конверта.
//
// Параметры:
//	ТекстКонверта - Строка - текст конверта-запроса;
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
//	Строка - текст SOAP-конверта-ответа;
//
Функция ОтправитьЗапросSOAP(ТекстКонверта, ПроксиСервиса, Таймаут = -1, НастройкиПрокси = Неопределено)

	Результат = Новый Структура(
		"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке, ТелоОтвета",
		"",
		"",
		Неопределено);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ФорматОтвета"            , 1);
	ДопПараметры.Вставить("Метод"                   , "POST");
	ДопПараметры.Вставить("ДанныеДляОбработки"      , ТекстКонверта);
	ДопПараметры.Вставить("ФорматДанныхДляОбработки", 1);
	ДопПараметры.Вставить("Заголовки"               , Заголовки);
	ДопПараметры.Вставить("Таймаут"                 , Таймаут);
	ДопПараметры.Вставить("НастройкиПрокси"         , НастройкиПрокси);

	ОтветСервера = ЗагрузитьСодержимоеИзИнтернет(
		ПроксиСервиса.АдресТочкиПодключения, , , ДопПараметры);

	ЗаполнитьЗначенияСвойств(Результат, ОтветСервера, "КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
	Если ПустаяСтрока(ОтветСервера.КодОшибки) Тогда
		Результат.ТелоОтвета = ОтветСервера.Содержимое;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Чтение объекта или значения в ответном SOAP-конверте в
// соответствии с фабрикой типов XDTO веб-сервиса.
//
// Параметры:
//	ТелоОтвета - Строка - тело SOAP-конверта-ответа;
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//	ТипЗначения - ТипЗначенияXDTO, ТипОбъектаXDTO - тип читаемого значения;
//
// Возвращаемое значение:
//	ЗначениеXDTO, ОбъектXDTO - прочитанный ответ сервиса.
//
Функция ПрочитатьОтветВКонвертеSOAP(ТелоОтвета, ОписаниеСервисаИПП, ТипЗначения)

	Результат = Новый Структура;
	Результат.Вставить("Ошибка"              , Ложь);
	Результат.Вставить("СообщениеОбОшибке"   , "");
	Результат.Вставить("ИнформацияОбОшибке"  , "");
	Результат.Вставить("ВозвращенноеЗначение", Неопределено);

	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);

	URISOAP = "http://schemas.xmlsoap.org/soap/envelope/";

	Попытка

		// Переход к телу ответа
		Пока НЕ (НРег(ЧтениеОтвета.ЛокальноеИмя) = "body"
			И ЧтениеОтвета.URIПространстваИмен = URISOAP) Цикл
			Если НЕ ЧтениеОтвета.Прочитать() Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;

		// Переход к описанию объекта ответа
		ЧтениеОтвета.Прочитать();

	Исключение

		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный формат ответа.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверный формат ответа SOAP. %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Результат;

	КонецПопытки;

	Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента
		И ВРег(ЧтениеОтвета.ЛокальноеИмя) = "FAULT"
		И ЧтениеОтвета.URIПространстваИмен = URISOAP Тогда

		// Это исключение веб-сервиса
		Попытка
			ДеталиИсключения = ПрочитатьОписаниеИсключенияСервиса(ЧтениеОтвета);
		Исключение

			Результат.Ошибка = Истина;
			Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный формат ответа.'");
			Результат.ИнформацияОбОшибке =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверный формат ответа SOAP. %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Результат;

		КонецПопытки;

		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Ошибка SOAP-сервера.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка SOAP-сервера. %1'"),
				ОписаниеИсключенияSOAPВСтроку(ДеталиИсключения));
		Возврат Результат;

	КонецЕсли;

	Попытка
		Если ТипЗначения = Неопределено Тогда
			Значение = ОписаниеСервисаИПП.ФабрикаXDTO.ПрочитатьXML(ЧтениеОтвета);//, ТипЗначения);
		Иначе
			Значение = ОписаниеСервисаИПП.ФабрикаXDTO.ПрочитатьXML(ЧтениеОтвета, ТипЗначения);
		КонецЕсли;
	Исключение

		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный формат ответа.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверный формат ответа SOAP. %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Результат;

	КонецПопытки;

	Результат.ВозвращенноеЗначение = Значение;

	Возврат Результат;

КонецФункции

// Если в ответном SOAP-конверте содержится описание ошибки,
// то выполняется чтение описания ошибки.
//
// Параметры:
//	ЧтениеОтвета - ЧтениеXML - объект, используемый для чтения
//		ответного SOAP-конверта. На момент вызова спозиционирован на описании
//		исключения SOAP;
//
// Возвращаемое значение:
// Структура - описание исключения SOAP-сервера:
//	* FaultCode - Строка - код ошибки;
//	* FaultString - Строка - строковое описание ошибки;
//	* FaultActor - Строка - источник ошибки;
//
Функция ПрочитатьОписаниеИсключенияСервиса(ЧтениеОтвета)

	ОписаниеИсключения = Новый Структура("FaultCode, FaultString, FaultActor", "", "", "");

	URISOAP = "http://schemas.xmlsoap.org/soap/envelope/";

	Пока НЕ (ВРег(ЧтениеОтвета.ЛокальноеИмя) = "BODY"
		И ЧтениеОтвета.URIПространстваИмен = URISOAP
		И ЧтениеОтвета.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл

		Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяУзлаВРег = ВРег(ЧтениеОтвета.ЛокальноеИмя);

			Если ИмяУзлаВРег = "FAULTCODE"
				ИЛИ ИмяУзлаВРег = "FAULTSTRING"
				ИЛИ ИмяУзлаВРег = "FAULTACTOR" Тогда

				ЧтениеОтвета.Прочитать(); // Прочитать текст узла

				Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.Текст Тогда
					ОписаниеИсключения[ИмяУзлаВРег] = ЧтениеОтвета.Значение;
				КонецЕсли;

				ЧтениеОтвета.Прочитать(); // Прочитать конец элемента

			КонецЕсли;

		КонецЕсли;

		Если НЕ ЧтениеОтвета.Прочитать() Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат ОписаниеИсключения;

КонецФункции

// Преобразование структуры-описателя исключения SOAP
// в строку для пользовательского представления;
//
// Параметры:
//	ИсключениеSOAP - Структура - см. ПрочитатьОписаниеИсключенияСервиса();
//
// Возвращаемое значение:
//	Строка - пользовательское представление исключения SOAP;
//
Функция ОписаниеИсключенияSOAPВСтроку(ИсключениеSOAP)

	Результат = "";
	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultCode) Тогда
		Результат = ИсключениеSOAP.FaultCode;
	КонецЕсли;

	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultString) Тогда
		Результат = Результат
			+ ?(ПустаяСтрока(Результат), "", " - ")
			+ ИсключениеSOAP.FaultString;
	КонецЕсли;

	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultActor) Тогда
		Результат = Результат + ?(ПустаяСтрока(Результат), "", Символы.ПС + НСтр("ru = 'Источник ошибки:'") + " ")
			+ ИсключениеSOAP.FaultActor;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Преобразует ответ операции process() сервиса ИПП в последовательность команд
// во внутреннем представлении.
//
// Параметры:
// ОсновныеПараметры - Структура - основные параметры контекста взаимодействия;
// ОтветСервера - ОбъектXDTO - ответ сервиса, возвращенный операцией process();
// КонтекстОбработчика - - Структура - контекст клиент-серверного обработчика
//		команд (см. функцию НовыйКонтекстОбработчикаКоманд());
//
// Возвращаемое значение:
//	Массив - массив команд сервиса во внутреннем представлении.
//
Функция СтруктурироватьОтветСервера(
	ОсновныеПараметры,
	ОтветСервера,
	КонтекстОбработчика)

	МассивОтвета = Новый Массив;

	Попытка

		Для каждого КомандаСервера Из ОтветСервера.command Цикл

			СтруктураКоманды = Неопределено;

			ИмяТекКоманды = НРег(СокрЛП(КомандаСервера.name));

			Если ИмяТекКоманды = "ui.open" Тогда
				СтруктураКоманды = СтруктурироватьОткрытиеФормы(
					ОсновныеПараметры,
					КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "store.put" Тогда
				СтруктураКоманды = СтруктурироватьЗаписьПараметров(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "store.get" Тогда
				СтруктураКоманды = СтруктурироватьЧтениеПараметров(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "store.delete" Тогда
				СтруктураКоманды = СтруктурироватьУдалениеПараметров(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "ui.close" Тогда
				СтруктураКоманды = СтруктурироватьЗакрытиеФормы(
				ОсновныеПараметры,
				КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "system.halt" Тогда
				СтруктураКоманды = СтруктурироватьОстановкуМеханизма(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "launchservice" Тогда
				СтруктураКоманды = СтруктурироватьОтветСервераОПереходеБизнеспроцесса(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "message.show" ИЛИ ИмяТекКоманды = "question.show" Тогда
				СтруктураКоманды = СтруктурироватьСообщениеИлиВопросПользователю(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "input.field" Тогда
				СтруктураКоманды = СтруктурироватьВводДанных(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "store.putorganizations" Тогда
				СтруктураКоманды = СтруктурироватьЗаписьОрганизацийПользователя(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "store.putadressclassifier" Тогда
				СтруктураКоманды = СтруктурироватьЗаписьАдресногоКлассификатора(КомандаСервера);

			Иначе

				ДопОбработчик = ОбработчикБизнесПроцесса(
					ОсновныеПараметры.МестоЗапуска,
					"СтруктурироватьКомандуСервиса");
				Если ДопОбработчик <> Неопределено Тогда

					ДопОбработчик.СтруктурироватьКомандуСервиса(
						ИмяТекКоманды,
						КомандаСервера,
						СтруктураКоманды);

				КонецЕсли;

			КонецЕсли;

			Если СтруктураКоманды <> Неопределено Тогда

				Если НЕ СтруктураКоманды.Свойство("ИмяКоманды") Тогда
					СтруктураКоманды.Вставить("ИмяКоманды", ИмяТекКоманды);
				КонецЕсли;

				МассивОтвета.Добавить(СтруктураКоманды);

			КонецЕсли;

			Если КонтекстОбработчика.ПроизошлаОшибка Тогда
				Возврат Неопределено;
			КонецЕсли;

		КонецЦикла;

	Исключение

		КонтекстОбработчика.ПроизошлаОшибка = Истина;
		КонтекстОбработчика.ПолноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");

		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Неизвестная ошибка. См. подробности в журнале регистрации.'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";

		Возврат Неопределено;

	КонецПопытки;

	Если МассивОтвета.Количество() > 0 Тогда

		Для каждого СтруктураКоманды Из МассивОтвета Цикл
			СтруктураКоманды.ИмяКоманды = НРег(СокрЛП(СтруктураКоманды.ИмяКоманды));
		КонецЦикла;

		Возврат МассивОтвета;

	Иначе

		Возврат Неопределено;

	КонецЕсли;

КонецФункции

// Преобразование команд "Сообщение пользователю" и "Вопрос пользователю" во
// внутреннее представление.
//
Функция СтруктурироватьСообщениеИлиВопросПользователю(КомандаСервера)

	СтруктураКоманды = Новый Структура;

	СписокКнопок = Новый СписокЗначений;
	ОписаниеТекКнопкиОтвета = Новый Структура;
	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

		ИмяТекПараметра = НРег(СокрЛП(Параметр.name));

		Если ИмяТекПараметра = "caption" Тогда
			СтруктураКоманды.Вставить("Заголовок", Строка(Параметр.value));

		ИначеЕсли ИмяТекПараметра = "formmessage"
			ИЛИ ИмяТекПараметра = "messagetext" Тогда
			СтруктураКоманды.Вставить("ТекстСообщения", Строка(Параметр.value));

		ИначеЕсли ИмяТекПараметра = "messagetype" ИЛИ ИмяТекПараметра = "questiontype" Тогда
			СтруктураКоманды.Вставить("Тип", НРег(СокрЛП(Строка(Параметр.value))));

		ИначеЕсли ИмяТекПараметра = "button" Тогда
			СписокКнопок.Добавить(НРег(СокрЛП(Строка(Параметр.value))));

		ИначеЕсли ИмяТекПараметра = "buttonvalue" Тогда
			ОписаниеТекКнопкиОтвета.Вставить("ЗначениеКнопки", Строка(Параметр.value));

		ИначеЕсли ИмяТекПараметра = "buttontext" Тогда
			ОписаниеТекКнопкиОтвета.Вставить("ТекстКнопки", Строка(Параметр.value));

		КонецЕсли;

		Если ОписаниеТекКнопкиОтвета.Свойство("ЗначениеКнопки")
			И ОписаниеТекКнопкиОтвета.Свойство("ТекстКнопки") Тогда
			// Если получено описание очередной кнопки, тогда добавить ее в список кнопок
			СписокКнопок.Добавить(
				ОписаниеТекКнопкиОтвета.ЗначениеКнопки,
				ОписаниеТекКнопкиОтвета.ТекстКнопки);
			ОписаниеТекКнопкиОтвета = Новый Структура;
		КонецЕсли;

	КонецЦикла;

	Если НЕ СтруктураКоманды.Свойство("Заголовок") ИЛИ ПустаяСтрока(СтруктураКоманды.Заголовок) Тогда
		СтруктураКоманды.Вставить("Заголовок", НСтр("ru = 'Интернет-поддержка пользователей'"));
	КонецЕсли;

	Если СписокКнопок.Количество() > 0 Тогда
		СтруктураКоманды.Вставить("Кнопки", СписокКнопок);
	КонецЕсли;

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Ввод данных" во внутреннее представление.
//
Функция СтруктурироватьВводДанных(КомандаСервера)

	СтруктураКоманды = Новый Структура;

	Если КомандаСервера.parameters = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

		ИмяТекПараметра = НРег(СокрЛП(Параметр.name));

		Если ИмяТекПараметра = "caption" Тогда
			ПараметрыФормы.Вставить("ТекстЗаголовка", Строка(Параметр.value));

		ИначеЕсли ИмяТекПараметра = "explanationtext" Тогда
			ПараметрыФормы.Вставить("ПоясняющийТекст", Строка(Параметр.value));

		ИначеЕсли ИмяТекПараметра = "datatype" Тогда
			ПараметрыФормы.Вставить("ТипДанных", Строка(Параметр.value));

		ИначеЕсли ИмяТекПараметра = "precision" Тогда
			ПараметрыФормы.Вставить("ТочностьЧисла", Строка(Параметр.value));

		КонецЕсли;

	КонецЦикла;

	СтруктураКоманды.Вставить("ПараметрыФормы", ПараметрыФормы);

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Прочитать параметры" во внутреннее представление.
//
Функция СтруктурироватьЧтениеПараметров(КомандаСервера)

	СтруктураКоманды = Новый Структура;

	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивПараметров = Новый Массив;

	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

		Если НРег(СокрЛП(Параметр.type)) = "startup" Тогда
			СтруктураПараметра = Новый Структура("Имя, ОбластьВидимости",
				СокрЛП(Параметр.name),
				СокрЛП(Параметр.type));
		Иначе
			СтруктураПараметра = Новый Структура("Имя, БизнесПроцесс, ОбластьВидимости",
				СокрЛП(Параметр.name),
				СокрЛП(Параметр.bp),
				СокрЛП(Параметр.type));
		КонецЕсли;

		МассивПараметров.Добавить(СтруктураПараметра);

	КонецЦикла;

	СтруктураКоманды.Вставить("Параметры", 	МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Удалить параметры" во внутреннее представление.
//
Функция СтруктурироватьУдалениеПараметров(КомандаСервера)

	СтруктураКоманды = Новый Структура;

	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивПараметров = Новый Массив;

	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

		СтруктураПараметра = Новый Структура("Имя, ОбластьВидимости",
			СокрЛП(Параметр.name),
			СокрЛП(Параметр.type));

		МассивПараметров.Добавить(СтруктураПараметра);

	КонецЦикла;

	СтруктураКоманды.Вставить("Параметры" , МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Открыть форму" во внутреннее представление.
//
Функция СтруктурироватьОткрытиеФормы(ОсновныеПараметры, КомандаСервера)

	СтруктураКоманды = Новый Структура;

	// Чтение общих параметров открытия формы
	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

		Если НРег(СокрЛП(Параметр.name)) = "indexform" Тогда
			ПараметрыФормы = ПараметрыВнутреннейФормы(
				СокрЛП(Параметр.value),
				ОсновныеПараметры.МестоЗапуска);

			Если ПараметрыФормы.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;

			СтруктураКоманды.Вставить("ПараметрыФормы", ПараметрыФормы);
		КонецЕсли;

		Если НРег(СокрЛП(Параметр.name)) = "caption" Тогда
			СтруктураКоманды.Вставить("Заголовок", СокрЛП(Параметр.value));
		КонецЕсли;

		Если НРег(СокрЛП(Параметр.name)) = "text" Тогда
			СтруктураКоманды.Вставить("Текст", СокрЛП(Параметр.value));
		КонецЕсли;

		Если НРег(СокрЛП(Параметр.name)) = "formmessage" Тогда
			СтруктураКоманды.Вставить("Текст", СокрЛП(Параметр.value));
		КонецЕсли;

		Если НРег(СокрЛП(Параметр.name)) = "url" Тогда
			СтруктураКоманды.Вставить("УРЛ", СокрЛП(Параметр.value));
		КонецЕсли;

	КонецЦикла;

	Если СтруктураКоманды.Количество() > 0 Тогда
		СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);
		Возврат СтруктураКоманды;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Преобразование команды "Закрыть форму" во внутреннее представление.
//
Функция СтруктурироватьЗакрытиеФормы(ОсновныеПараметры, КомандаСервера)

	СтруктураКоманды = Новый Структура;

	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

		Если НРег(СокрЛП(Параметр.name)) = "indexform" Тогда
			ПараметрыФормы = ПараметрыВнутреннейФормы(
				СокрЛП(Параметр.value),
				ОсновныеПараметры.МестоЗапуска);

			Если ПараметрыФормы.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;

			СтруктураКоманды.Вставить("ПараметрыФормы", ПараметрыФормы);
		КонецЕсли;

	КонецЦикла;

	Если СтруктураКоманды.Количество() > 0 Тогда
		СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);
		Возврат СтруктураКоманды;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Вспомогательная функция для формирования параметров внутренней формы при
// выполнении команды "Открыть внутреннюю форму" и "Закрыть внутреннюю форму".
//
Функция ПараметрыВнутреннейФормы(ИндексФормы, МестоЗапуска)

	ПараметрыФормы = Новый Структура;

	Если ИндексФормы = "f2" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ИнтернетПоддержкаПродуктаНеОказывается");

	ИначеЕсли ИндексФормы = "f4" ИЛИ ИндексФормы = "1" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"ОбщаяФорма.ПодключениеИнтернетПоддержки");

	ИначеЕсли ИндексФормы = "f6" ИЛИ ИндексФормы = "2" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ОбщаяРегНомер");

	ИначеЕсли ИндексФормы = "f7" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ОбщаяПинкод");

	ИначеЕсли ИндексФормы = "f10" ИЛИ ИндексФормы = "19" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ДополнительнаяИнформация");

	ИначеЕсли ИндексФормы = "f11" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"ОбщаяФорма.ПодключениеИнтернетПоддержки");

	ИначеЕсли ИндексФормы = "c20" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ДействиеНеПоддерживается");

	ИначеЕсли ИндексФормы = "bh1" Тогда
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Интернет-поддержка пользователей'"));
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "ВсплывающаяПодсказка");
		ПараметрыФормы.Вставить("УспешноеЗавершениеБизнесПроцесса", Истина);

	Иначе

		ДопОбработчик = ОбработчикБизнесПроцесса(МестоЗапуска, "ЗаполнитьПараметрыВнутреннейФормы");

		Если ДопОбработчик <> Неопределено Тогда
			ДопОбработчик.ЗаполнитьПараметрыВнутреннейФормы(ИндексФормы, ПараметрыФормы);
		КонецЕсли;

		Если НЕ ПараметрыФормы.Свойство("ИмяОткрываемойФормы") Тогда
			ПараметрыФормы.Вставить("ИмяОткрываемойФормы", Неопределено);
		КонецЕсли;

	КонецЕсли;

	Возврат ПараметрыФормы;

КонецФункции

// Преобразование команды "Остановить механизм" во внутреннее представление.
//
Функция СтруктурироватьОстановкуМеханизма(КомандаСервера)

	СтруктураКоманды = Новый Структура;

	МассивПараметров = Новый Массив;
	Попытка

		Если КомандаСервера.parameters <> Неопределено
			И КомандаСервера.parameters.parameter.Количество() > 0 Тогда

			Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

				СтруктураПараметра = Неопределено;

				Если НРег(СокрЛП(Параметр.name)) = "errorcode" Тогда
					СтруктураПараметра = Новый Структура("errorCode", СокрЛП(Параметр.value));
					МассивПараметров.Добавить(СтруктураПараметра);
				КонецЕсли;

				Если СтруктураПараметра <> Неопределено Тогда
					МассивПараметров.Добавить(СтруктураПараметра);
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	Исключение
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	СтруктураКоманды.Вставить("Параметры" , МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Изменить бизнес-процесс" во внутреннее представление.
//
Функция СтруктурироватьОтветСервераОПереходеБизнеспроцесса(КомандаСервера)

	СтруктураКоманды = Новый Структура;

	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивПараметров = Новый Массив;

	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

		СтруктураПараметра = Новый Структура(Параметр.name, Параметр.value);
		МассивПараметров.Добавить(СтруктураПараметра);

	КонецЦикла;

	СтруктураКоманды.Вставить("Параметры" , МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Записать адресный классификатор" во
// внутреннее представление.
//
Функция СтруктурироватьЗаписьАдресногоКлассификатора(КомандаСервера)

	Если КомандаСервера.parameters = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СтруктураКоманды = Новый Структура;

	СписокСтран  = Новый СписокЗначений;
	РегионыСтран = Новый Соответствие;

	ПараметрыКоманды = КомандаСервера.parameters.parameter;

	Если ПараметрыКоманды.Количество() > 0 Тогда
		ПараметрыСписокСтран = ПараметрыКоманды[0].parameters.parameter;
	Иначе
		ПараметрыСписокСтран = Неопределено;
	КонецЕсли;

	Если ПараметрыСписокСтран <> Неопределено Тогда

		Для каждого Параметр Из ПараметрыСписокСтран Цикл

			ИмяТекПараметра = НРег(СокрЛП(Параметр.name));
			Если ИмяТекПараметра = "country" Тогда

				НазваниеСтраны       = Строка(Параметр.value);
				ВложенныеПараметры   = Параметр.parameters.parameter;
				ИдентификаторСтраны  = Неопределено;
				СписокРегионовСтраны = Новый СписокЗначений;

				Если ВложенныеПараметры = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				Для каждого ВложенныйПараметр Из ВложенныеПараметры Цикл

					ИмяТекВлПараметра = НРег(СокрЛП(ВложенныйПараметр.name));
					Если ИмяТекВлПараметра = "id" Тогда

						ИдентификаторСтраны = Строка(ВложенныйПараметр.value);

					ИначеЕсли ИмяТекВлПараметра = "region" Тогда

						НазваниеРегиона            = Строка(ВложенныйПараметр.value);
						ВложенныеПараметрыРегионов = ВложенныйПараметр.parameters.parameter;
						ИдентификаторРегиона       = Неопределено;

						Если ВложенныеПараметрыРегионов = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						Для каждого ВлПараметрРегиона Из ВложенныеПараметрыРегионов Цикл
							ИмяТекВлПараметраРегиона = НРег(СокрЛП(ВлПараметрРегиона.name));
							Если ИмяТекВлПараметраРегиона = "id" Тогда
								ИдентификаторРегиона = Строка(ВлПараметрРегиона.value);
								Прервать;
							КонецЕсли;
						КонецЦикла;

						Если ИдентификаторРегиона <> Неопределено Тогда
							СписокРегионовСтраны.Добавить(ИдентификаторРегиона, НазваниеРегиона);
						КонецЕсли;

					КонецЕсли;

				КонецЦикла;

				Если ИдентификаторСтраны <> Неопределено Тогда
					СписокСтран.Добавить(ИдентификаторСтраны, НазваниеСтраны);
					СписокРегионовСтраны.Вставить(0, "-1", НСтр("ru = '<не выбран>'"));
					РегионыСтран[ИдентификаторСтраны] = СписокРегионовСтраны;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	СписокСтран.Вставить(0, "-1", НСтр("ru = '<не выбрана>'"));

	СтруктураКоманды.Вставить("Страны"      , СписокСтран);
	СтруктураКоманды.Вставить("РегионыСтран", РегионыСтран);

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Записать данные организаций" во внутреннее
// представление.
//
Функция СтруктурироватьЗаписьОрганизацийПользователя(КомандаСервера)

	Если КомандаСервера.parameters = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СтруктураКоманды = Новый Структура;

	СписокОрганизаций = Новый СписокЗначений;
	ДанныеОрганизаций = Новый Соответствие;
	ПараметрыКоманды  = КомандаСервера.parameters.parameter;

	ПараметрыСписокОрганизаций = Неопределено;
	Если ПараметрыКоманды.Количество() > 0 Тогда
		ВложенныеПараметрыОбъект = ПараметрыКоманды[0].parameters;
		Если ВложенныеПараметрыОбъект <> Неопределено Тогда
			ПараметрыСписокОрганизаций = ВложенныеПараметрыОбъект.parameter;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыСписокОрганизаций <> Неопределено Тогда

		Для каждого Параметр Из ПараметрыСписокОрганизаций Цикл

			ИмяТекПараметра = НРег(СокрЛП(Параметр.name));
			Если ИмяТекПараметра = "organization" Тогда

				НазваниеОрганизации      = Строка(Параметр.value);
				ИдентификаторОрганизации = Неопределено;
				ДанныеТекОрганизации     = Новый Структура;

				Если Параметр.parameters = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				ВложенныеПараметры = Параметр.parameters.parameter;

				Для каждого ВложенныйПараметр Из ВложенныеПараметры Цикл

					ИмяТекВлПараметра = НРег(СокрЛП(ВложенныйПараметр.name));
					Если ИмяТекВлПараметра = "id" Тогда
						ИдентификаторОрганизации = Строка(ВложенныйПараметр.value);
					Иначе
						ДанныеТекОрганизации.Вставить(ИмяТекВлПараметра, Строка(ВложенныйПараметр.value));
					КонецЕсли;

				КонецЦикла;

				Если ИдентификаторОрганизации <> Неопределено Тогда
					СписокОрганизаций.Добавить(ИдентификаторОрганизации, НазваниеОрганизации);
					ДанныеТекОрганизации.Вставить("НазваниеОрганизации", НазваниеОрганизации);
					ДанныеОрганизаций[ИдентификаторОрганизации] = ДанныеТекОрганизации;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	СписокОрганизаций.Вставить(0, "-1", НСтр("ru = '<добавить новую организацию>'"));

	СтруктураКоманды.Вставить("СписокОрганизаций", СписокОрганизаций);
	СтруктураКоманды.Вставить("ДанныеОрганизаций", ДанныеОрганизаций);

	Возврат СтруктураКоманды;

КонецФункции

#КонецЕсли

// Выполнение команды "Записать параметры".
//
Процедура ВыполнениеКомандыЗаписьПараметров(КСКонтекст, СтруктураКоманды, КонтекстОбработчика) Экспорт

	Если ТипЗнч(СтруктураКоманды) = Тип("Структура") Тогда
		ЗаписываемыеПараметры = СтруктураКоманды.Параметры;
	Иначе
		ЗаписываемыеПараметры = СтруктураКоманды;
	КонецЕсли;

	ОбщиеСтартовыеПараметры = Новый Соответствие; // Параметры, записываемые в РС
	Для каждого Параметр Из ЗаписываемыеПараметры Цикл

		// Сохранение параметров как сессионных
		ЗаписатьПараметрКонтекста(
			КСКонтекст,
			Параметр.Имя,
			Параметр.Значение,
			Параметр.ОбластьВидимости,
			ОбщиеСтартовыеПараметры);

	КонецЦикла;

	Если ОбщиеСтартовыеПараметры.Количество() > 0 Тогда
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОбщиеПараметрыИПП(ОбщиеСтартовыеПараметры);
	КонецЕсли;

КонецПроцедуры

// Выполнение команды "Прочитать параметры". Выполняется чтение параметров
// и отправка их сервису посредством вызова метода process().
//
Процедура ВыполнениеКомандыПрочитатьПараметры(
	КонтекстВзаимодействия,
	СтруктураКоманды,
	КонтекстОбработчика,
	ВыполнениеНаСервере) Экспорт

	МассивПараметров = СтруктураКоманды.Параметры;
	ПараметрыЗапроса = Новый Массив;

	КСКонтекст        = КонтекстВзаимодействия.КСКонтекст;
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;

	Для каждого Параметр Из МассивПараметров Цикл

		Если Параметр.Имя = "session_id" Тогда
			НомерСессииУжеЕсть = Истина;
		КонецЕсли;

		ЗначениеПараметра = ЗначениеСессионногоПараметра(КСКонтекст, Параметр.Имя);

		ПередаваемыйПараметр = Новый Структура;
		ПередаваемыйПараметр.Вставить("Имя"             , Параметр.Имя);
		ПередаваемыйПараметр.Вставить("Значение"        , ЗначениеПараметра);
		ПередаваемыйПараметр.Вставить("БизнесПроцесс"   , ОсновныеПараметры.ИмяWSОпределения);
		ПередаваемыйПараметр.Вставить("ОбластьВидимости", Параметр.ОбластьВидимости);

		ПараметрыЗапроса.Добавить(ПередаваемыйПараметр);

	КонецЦикла;

	ДобавитьСессионныеПараметрыКЗапросу(КСКонтекст, ПараметрыЗапроса);

	Если ВыполнениеНаСервере Тогда
		ИнтернетПоддержкаПользователейВызовСервера.ДобавитьКомандыСервиса(
			ОсновныеПараметры,
			ПараметрыЗапроса,
			КонтекстОбработчика);
	Иначе
		#Если Клиент Тогда
		// Обратиться к веб-сервису за командами, и записать их в стек команд
		ИнтернетПоддержкаПользователейКлиент.ДобавитьКомандыСервиса(
			КонтекстВзаимодействия,
			ПараметрыЗапроса,
			КонтекстОбработчика);
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры

// Выполнение команды "Записать адресный классификатор".
//
Процедура ЗаписатьАдресныйКлассификатор(КСКонтекст, СтруктураКоманды) Экспорт

	КСКонтекст.КонтекстРегистрации.Вставить("Страны"      , СтруктураКоманды.Страны);
	КСКонтекст.КонтекстРегистрации.Вставить("РегионыСтран", СтруктураКоманды.РегионыСтран);

КонецПроцедуры

// Выполнение команды "Записать данные организаций".
//
Процедура ЗаписатьСписокОрганизаций(КСКонтекст, СтруктураКоманды) Экспорт

	КСКонтекст.КонтекстРегистрации = Новый Структура;
	КСКонтекст.КонтекстРегистрации.Вставить("СписокОрганизаций", СтруктураКоманды.СписокОрганизаций);
	КСКонтекст.КонтекстРегистрации.Вставить("ДанныеОрганизаций", СтруктураКоманды.ДанныеОрганизаций);

КонецПроцедуры

// Возвращает тип команды - клиентская или серверная.
//
// Параметры:
// СтруктураКоманды - Структура - сервиса ИПП во внутреннем представлении.
//
// Возвращаемое значение:
// Число - тип команды: -1 - неизвестный тип команды, 0 - выполняется на
//		сервере, 1 - выполняется на клиенте.
//
Функция ТипКоманды(СтруктураКоманды, ОбращениеССервера, МестоЗапуска) Экспорт

	Если СтруктураКоманды = Неопределено Тогда
		Возврат -1; // Неизвестный тип команды
	КонецЕсли;

	ИмяКоманды = НРег(СокрЛП(СтруктураКоманды.ИмяКоманды));

	Если ИмяКоманды = "store.put"
		ИЛИ ИмяКоманды = "store.get"
		ИЛИ ИмяКоманды = "store.delete"
		ИЛИ ИмяКоманды = "launchservice"
		ИЛИ ИмяКоманды = "store.putorganizations"
		ИЛИ ИмяКоманды = "store.putadressclassifier" Тогда

		Возврат ?(ОбращениеССервера, 0, 1);

	ИначеЕсли СтруктураКоманды.ИмяКоманды = "ui.open"
		ИЛИ ИмяКоманды = "ui.close"
		ИЛИ ИмяКоманды = "performtheaction.decode"
		ИЛИ ИмяКоманды = "message.show"
		ИЛИ ИмяКоманды = "question.show"
		ИЛИ ИмяКоманды = "input.field"
		ИЛИ ИмяКоманды = "system.halt" Тогда

		Возврат 1;

	Иначе

		Результат = -1;
		Обработчик = ОбработчикБизнесПроцесса(МестоЗапуска, "КонтекстВыполненияКоманды");
		Если Обработчик <> Неопределено Тогда
			Обработчик.КонтекстВыполненияКоманды(ИмяКоманды, ОбращениеССервера, Результат);
		КонецЕсли;

		Возврат Результат;

	КонецЕсли;

КонецФункции

// Функция создает и возвращает описатель контекста обработчика команд сервиса.
//
// Возвращаемое значение:
// Структура - структура со свойствами:
//	* Команды - Массив - стек команд сервиса во внутреннем представлении;
//	* ВыполнитьОстановку - Булево - если Истина, то требуется выполнить
//		остановку механизма ИПП;
//	* ПроизошлаОшибка - Булево - в процессе цикла обращения к веб-сервису ИПП
//		произошла ошибка;
//	* ПолноеОписаниеОшибки - Строка - полное описание ошибки для журнала
//		регистрации;
//	* ПользовательскоеОписаниеОшибки - Строка - представление ошибки
//		для пользователя;
//	* ДействияПриОшибкеДляСервера - Массив - массив элементов типа Строка -
//		имена действий, которые необходимо выполнить на сервере 1С:Предприятия;
//	ДействиеПриОшибкеДляКлиента - Строка - действие, которое нужно выполнить на
//		стороне клиента 1С:Предприятия при возникновении ошибки;
//	* ДопСвойства - Структура - структура с дополнительными данными обработчика
//		команд.
//
Функция НовыйКонтекстОбработчикаКоманд() Экспорт

	КонтекстОбработчика = Новый Структура;
	КонтекстОбработчика.Вставить("Команды"                       , Новый Массив);
	КонтекстОбработчика.Вставить("ВыполнитьОстановку"            , Ложь);
	КонтекстОбработчика.Вставить("ПроизошлаОшибка"               , Ложь);
	КонтекстОбработчика.Вставить("ПолноеОписаниеОшибки"          , "");
	КонтекстОбработчика.Вставить("ПользовательскоеОписаниеОшибки", "");
	КонтекстОбработчика.Вставить("ДействияПриОшибкеДляСервера"   , Новый Массив);
	КонтекстОбработчика.Вставить("ДействиеПриОшибкеДляКлиента"   , "");
	КонтекстОбработчика.Вставить("ПротоколОбмена"                , "");
	КонтекстОбработчика.Вставить("ДопСвойства"                   , Новый Структура);

	Возврат КонтекстОбработчика;

КонецФункции

#Если Не ВебКлиент Тогда

// Выполняет вызов операции process() сервиса ИПП. При вызове передаются
// необходимые параметры запроса.
//
// Параметры:
// ОпределениеWS - Структура - см. функцию НовыйОписаниеСервисаИПП().
// ПередаваемыеПараметрыЗапроса - Массив - массив элементов типа Структура:
//	* Значение - Строка, ДвоичныеДанные, Неопределено - значение параметра;
//	* ОбластьВидимости - Строка - область видимости параметра;
//	* БизнесПроцесс - Строка - имя бизнес-процесса;
// КонтекстОбработчика - Структура - см. функцию НовыйКонтекстОбработчикаКоманд();
// ОсновныеПараметры - Структура - основные параметры контекста взаимодействия;
//
Процедура ДобавитьКомандыСервиса(
	ОпределениеWS,
	ПередаваемыеПараметрыЗапроса,
	КонтекстОбработчика,
	ОсновныеПараметры,
	Таймаут = -1) Экспорт

	URIСервиса = ОпределениеWS.URIСервиса;

	ТипЗапроса       = ОпределениеWS.ФабрикаXDTO.Тип(URIСервиса, "Parameters");
	ПараметрыЗапроса = ОпределениеWS.ФабрикаXDTO.Создать(ТипЗапроса);

	ТипОтвета        = ОпределениеWS.ФабрикаXDTO.Тип(URIСервиса, "ProcessResponseType");
	ОтветСервера     = ОпределениеWS.ФабрикаXDTO.Создать(ТипОтвета);

	ТипПараметр = ОпределениеWS.ФабрикаXDTO.Тип(URIСервиса, "Parameter");

	// Добавление параметров запроса
	Если ПередаваемыеПараметрыЗапроса <> Неопределено Тогда

		ИндексПараметра = 0;
		ТипДвоичныеДанные = Тип("ДвоичныеДанные");
		Для каждого ПередаваемыйПараметр Из ПередаваемыеПараметрыЗапроса Цикл

			Если ТипЗнч(ПередаваемыйПараметр.Значение) <> ТипДвоичныеДанные Тогда
				ЗначениеПараметра = СокрЛП(Строка(ПередаваемыйПараметр.Значение));
			Иначе
				Попытка
					ЗначениеПараметра = ТекстВДвДанных(ПередаваемыйПараметр.Значение);
				Исключение
					ИнфОшибка = ИнформацияОбОшибке();
					ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при преобразовании передаваемых данных. %1'"),
						"%1",
						ПодробноеПредставлениеОшибки(ИнфОшибка));
					ВызватьИсключение ТекстИсключения;
				КонецПопытки;
			КонецЕсли;

			// Определение объекта параметра (Объект XDTO).
			Параметр = ОпределениеWS.ФабрикаXDTO.Создать(ТипПараметр);

			Параметр.name  = СокрЛП(ПередаваемыйПараметр.Имя);
			Параметр.value = ЗначениеПараметра;
			Параметр.index = ИндексПараметра;

			БизнесПроцесс = Неопределено;
			ПередаваемыйПараметр.Свойство("БизнесПроцесс", БизнесПроцесс);
			Если БизнесПроцесс <> Неопределено Тогда
				Параметр.bp = СокрЛП(БизнесПроцесс);
			КонецЕсли;

			Если ПередаваемыйПараметр.Свойство("ВложенныеПараметры")
				И ТипЗнч(ПередаваемыйПараметр.ВложенныеПараметры) = Тип("Массив") Тогда
				ДобавитьВложенныеПараметры(
					Параметр,
					ПередаваемыйПараметр.ВложенныеПараметры,
					ОпределениеWS,
					ТипПараметр,
					ТипЗапроса);
			КонецЕсли;

			ПараметрыЗапроса.parameter.Добавить(Параметр);

			ИндексПараметра = ИндексПараметра + 1;

		КонецЦикла;

	КонецЕсли;

	ОтветСервера = Неопределено;

	// Выполнение метода "process" WEB-Сервиса.
	ОтветСервера = СервисИПП_process(ПараметрыЗапроса, ОпределениеWS, Таймаут);

	// Если контекста нет, то ничего не структурировать, т.к. выполнение команд не последует
	// в связи с тем, что обратная связь не требуется (используется, например, для закрытия
	// бизнес-процесса, чтобы освободить ресурсы на сервере).
	Если КонтекстОбработчика = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Преобразование ответа сервера из объекта XDTO в массив структур
	МассивСтруктурыКоманд = СтруктурироватьОтветСервера(
		ОсновныеПараметры,
		ОтветСервера,
		КонтекстОбработчика);

	Если КонтекстОбработчика.ПроизошлаОшибка Тогда
		Возврат;
	КонецЕсли;

	Если МассивСтруктурыКоманд = Неопределено ИЛИ МассивСтруктурыКоманд.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Пустой ответ сервера.'");
	КонецЕсли;

	// Вставка команд в начало стека команд
	КоличествоКомандСервера = МассивСтруктурыКоманд.Количество();
	Для ОбратныйИндекс = 1 По КоличествоКомандСервера Цикл
		КонтекстОбработчика.Команды.Вставить(0, МассивСтруктурыКоманд[КоличествоКомандСервера - ОбратныйИндекс]);
	КонецЦикла;

КонецПроцедуры

#КонецЕсли

// Создает описание параметра ИПП.
// Параметры:
// Имя - Строка - имя параметра;
// Значение - Строка - значение параметра;
// ОбластьВидимости - Строка - область видимости параметра (сессионный
//		или стартовый);
//
// Возвращаемое значение:
// Структура - описание параметра с полями:
//	* Имя - Строка - имя параметра;
//	* Значение - Строка - значение параметра;
//	* ОбластьВидимости - Строка - область видимости параметра;
//
Функция НовыйПараметрИПП(Имя, Значение, ОбластьВидимости) Экспорт

	Возврат Новый Структура("Имя, Значение, ОбластьВидимости",
		Имя,
		Значение,
		ОбластьВидимости);

КонецФункции

// Добавляет вложенные параметры к параметрам запроса.
//
Процедура ДобавитьВложенныеПараметры(
	Параметр,
	ВложенныеПараметрыМассив,
	ОпределениеWS,
	ТипПараметр,
	ТипПараметры)

	Параметр.parameters = ОпределениеWS.ФабрикаXDTO.Создать(ТипПараметры);

	Индекс = 0;
	Для каждого ПередаваемыйПараметр Из ВложенныеПараметрыМассив Цикл

		ВложенныйПараметр = ОпределениеWS.ФабрикаXDTO.Создать(ТипПараметр);

		ВложенныйПараметр.name  = СокрЛП(ПередаваемыйПараметр.Имя);
		ВложенныйПараметр.value = СокрЛП(ПередаваемыйПараметр.Значение);
		ВложенныйПараметр.index = Индекс;

		Если ПередаваемыйПараметр.Свойство("БизнесПроцесс") Тогда
			Параметр.bp = СокрЛП(ПередаваемыйПараметр.БизнесПроцесс);
		КонецЕсли;

		Параметр.parameters.parameter.Добавить(ВложенныйПараметр);

		Если ПередаваемыйПараметр.Свойство("ВложенныеПараметры")
			И ТипЗнч(ПередаваемыйПараметр.ВложенныеПараметры) = Тип("Массив") Тогда

			ДобавитьВложенныеПараметры(
				ВложенныйПараметр,
				ПередаваемыйПараметр.ВложенныеПараметры,
				ОпределениеWS,
				ТипПараметр,
				ТипПараметры);

		КонецЕсли;

		Индекс = Индекс + 1;

	КонецЦикла;

КонецПроцедуры

// Добавление сессионных параметров к параметрам запроса при вызове операции
// process() сервиса ИПП.
//
Процедура ДобавитьСессионныеПараметрыКЗапросу(
	КСКонтекст,
	ПараметрыЗапроса,
	ИменаСессионныхПараметров = Неопределено) Экспорт

	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = Новый Массив;
	КонецЕсли;

	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;

	ИдентификаторСеансаДобавлен = Ложь;
	Если ИменаСессионныхПараметров <> Неопределено Тогда

		Для каждого ИмяПараметра Из ИменаСессионныхПараметров Цикл

			ЗначениеПараметра = ЗначениеСессионногоПараметра(КСКонтекст, ИмяПараметра);

			СессионныйПараметр = Новый Структура;
			СессионныйПараметр.Вставить("Имя"             , ИмяПараметра);
			СессионныйПараметр.Вставить("БизнесПроцесс"   , ОсновныеПараметры.ИмяWSОпределения);
			СессионныйПараметр.Вставить("Значение"        , ЗначениеПараметра);
			СессионныйПараметр.Вставить("ОбластьВидимости", "sessionParameter");

			ПараметрыЗапроса.Добавить(СессионныйПараметр);

			Если ИмяПараметра = "session_id" Тогда
				ИдентификаторСеансаДобавлен = Истина;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если НЕ ИдентификаторСеансаДобавлен Тогда

		ИдентификаторСеансаИПП = ЗначениеСессионногоПараметра(КСКонтекст, "session_id");

		СессионныйПараметр = Новый Структура;
		СессионныйПараметр.Вставить("Имя"             , "session_id");
		СессионныйПараметр.Вставить("БизнесПроцесс"   , ОсновныеПараметры.ИмяWSОпределения);
		СессионныйПараметр.Вставить("Значение"        , ИдентификаторСеансаИПП);
		СессионныйПараметр.Вставить("ОбластьВидимости", "sessionParameter");

		ПараметрыЗапроса.Добавить(СессионныйПараметр);

	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьДополнительныеСтартовыеПараметрыЗапроса(КСКонтекст, ДопПараметрыЗапроса, ПараметрыЗапроса) Экспорт

	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = Новый Массив;
	КонецЕсли;

	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;

	Для каждого ДопПараметр Из ДопПараметрыЗапроса Цикл

		Параметр = Новый Структура;
		Параметр.Вставить("Имя"             , ДопПараметр.Имя);
		Параметр.Вставить("БизнесПроцесс"   , ОсновныеПараметры.ИмяWSОпределения);
		Параметр.Вставить("Значение"        , ДопПараметр.Значение);
		Параметр.Вставить("ОбластьВидимости", "sessionParameter");

		ПараметрыЗапроса.Добавить(Параметр);

	КонецЦикла;

	ДопПараметрыЗапроса.Очистить();

КонецПроцедуры

// Возвращает текущий код локализации.
Функция ТекКодЛокализации()
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат ТекущийКодЛокализации();
	#Иначе
	ПараметрыИПП = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	Возврат ПараметрыИПП.КодЛокализации;
	#КонецЕсли
	
КонецФункции

// Возвращает версию обработки обновления конфигурации.
Функция ВерсияОбработкиОбновления()

	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат ИнтернетПоддержкаПользователей.ВерсияОбработкиОбновления();
	#Иначе
	ПараметрыИПП = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	Возврат ПараметрыИПП.ВерсияОбработкиОбновления;
	#КонецЕсли

КонецФункции

// Определяет, обрабатывается ли бизнес-процесс по заданной точке входа
// базовой функциональностью БИП.
//
// Параметры:
//	МестоЗапуска - Строка - точка входа в бизнес-процесс.
//
// Возвращаемое значение:
//	Булево - Истина, если бизнес-процесс обрабатывает базовой функциональностью
//		БИП, Ложь - в противном случае.
//
Функция ЭтоБазовыйБизнесПроцесс(МестоЗапуска) Экспорт

	Возврат (МестоЗапуска = "connectIPP");

КонецФункции

// Возвращает заданный обработчик бизнес-процесса в текущем контексте
// (клиент или сервер).
//
Функция ОбработчикБизнесПроцесса(МестоЗапуска, ИмяСобытия)
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат ИнтернетПоддержкаПользователей.СерверныйОбработчикБизнесПроцесса(
		МестоЗапуска,
		ИмяСобытия);
	#Иначе
	Возврат ИнтернетПоддержкаПользователейКлиент.КлиентскийОбработчикБизнесПроцесса(
		МестоЗапуска,
		ИмяСобытия);
	#КонецЕсли

КонецФункции

#Если Не ВебКлиент Тогда

// Выполняет получение содержимого двоичных данных в виде текста.
// Параметры:
// ДвоичныеДанные - ДвоичныеДанные - двоичные данные, содержимое которых
//	необходимо получить в виде текста.
//
// Возвращаемое значение:
//	Строка - текст в двоичных данных;
//
Функция ТекстВДвДанных(ДвоичныеДанные)

	Результат = "";

	Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда
		Возврат "";
	КонецЕсли;

	ИмяВремФайла = ПолучитьИмяВременногоФайла("txt");
	ДвоичныеДанные.Записать(ИмяВремФайла);
	ТекДок = Новый ТекстовыйДокумент;
	ТекДок.Прочитать(ИмяВремФайла, , "");
	Результат = ТекДок.ПолучитьТекст();

	Попытка
		УдалитьФайлы(ИмяВремФайла);
	Исключение
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Возврат Результат;

КонецФункции

#КонецЕсли

#КонецОбласти

#Область ЛогИОтладка

// Возвращает структуру шага выполнения для дальнейшей записи в журнал регистрации или вывод на экран.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Структура - Структура с определенными ключами, см. код.
//
Функция СтруктураШагаВыполнения()

	Результат = Новый Структура("
		|ИдентификаторШага, Шаг,
		|ВремяНачала, ВремяОкончания,
		|КодРезультата, ОписаниеРезультата,
		|ВложенныйКонтекстВыполнения");

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти
