////////////////////////////////////////////////////////////////////////////////
// RESTЯндексКлиентСервер
//	Выполнение и обработка запросов к сервисам Яндекса
//
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает проверку доступности ключа доступа (токена) - выполняет запрос на сервер и 
//	анализирует полученный ответ
//
//Параметры:
//	КлючДоступа - Строка - ключ (токен), который проверяется
//	СвойстваПровайдера - Структура или Неопределено - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//						Если Неопределено, заполняются авторматически как возвращаемый параметр для уменьшения серверных вызовов
//
//Возвращаемое значение:
//	Булево или Неопределено - Истина, если токен действителен, Ложь если токен отменен и Неопределено в случае ошибки соединения или сервера
//
Функция КлючДоступаДействителен(КлючДоступа, СвойстваАккаунта, СвойстваПровайдера = Неопределено) Экспорт

	ПроверитьСвойстваПровайдера(СвойстваПровайдера);
	
	// Для проверки выполняем запрос по получению информации об аккаунте
	Ответ = ОтветОбАккаунте(КлючДоступа, СвойстваПровайдера);
	
	Если Ответ = Неопределено Тогда //ОК
		Возврат Ложь;
	ИначеЕсли Ответ.КодСостояния = 200 Тогда //ОК
		Возврат Истина;
	ИначеЕсли Ответ.КодСостояния = 401 Или Ответ.КодСостояния = 402 Или Ответ.КодСостояния = 403 
		Или Ответ.КодСостояния = 410 Тогда //аккаунт недоступен или авторизация анулирована
		// Обновление токена недоступно
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Ложь;

КонецФункции

// Выполняет запрос на сервер для получения токена по коду доступа
//	Результаты выполнения команды и описания ошибок помещаются в СтруктуруРезультата
//	Значение токера помещается в СтруктуруРезультата.Токен
//
// Параметры:
//	СтруктураРезультата  - Структура - см. RESTКлиентСервер.НоваяСтруктураОтвета()
//  ИмяФайла             - Строка - Путь к файлу или папке, информацию о которых нужно получить
//	СвойстваАккаунта     - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//	СвойстваПровайдера   - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//
Процедура ОбменятьКодДоступаНаТокен(СтруктураРезультата, КодДоступа, СвойстваПровайдера) Экспорт

	ТекстЗапроса = "";
	ТекстЗапроса = ТекстЗапроса + "&" + "grant_type=authorization_code";
	ТекстЗапроса = ТекстЗапроса + "&" + "code=" + КодДоступа;
	ТекстЗапроса = ТекстЗапроса + "&" + "client_id=" + СвойстваПровайдера.Идентификатор;
	ТекстЗапроса = ТекстЗапроса + "&" + "client_secret=" + СвойстваПровайдера.Пароль;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	Ответ = RESTКлиентСервер.ВыполнитьHTTPЗапрос("POST", СвойстваПровайдера.СерверАвторизации, "token", ТекстЗапроса, , Заголовки, Истина);
	ОбработатьHTTPОтвет(Ответ, СтруктураРезультата, 200);
	
	Если СтруктураРезультата.ВыполненоУспешно Тогда
		
		ПараметрыРезультата = RESTКлиентСервер.СоответствиеИзHTTPОтвета(Ответ);
		СтруктураРезультата.Вставить("Токен", ПараметрыРезультата.Получить("access_token"));
		СтруктураРезультата.Вставить("ИДАккаунта", ПараметрыРезультата.Получить("account_id"));
		
	КонецЕсли;

КонецПроцедуры
 
// Выполняет запрос на сервер провайдера для получения информации об аккаунте
//	Результат сохраняется в настройках
//
//Параметры:
//	СтруктураРезультата  - Структура - см. RESTКлиентСервер.НоваяСтруктураОтвета()
//	СвойстваАккаунта     - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//				Значения этого параметра будут обновлены после выполнения запроса на сервер
//	СвойстваПровайдера    - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//
Процедура ОбновитьСвойстваАккаунта(СтруктураРезультата, СвойстваАккаунта, СвойстваПровайдера) Экспорт
	
	Ответ = ОтветОбАккаунте(СвойстваАккаунта.КлючАвторизации, СвойстваПровайдера);
	ОбработатьHTTPОтвет(Ответ, СтруктураРезультата, 200);
	
	Если СтруктураРезультата.ВыполненоУспешно Тогда
		
		ОписаниеАккаунта = RESTКлиентСервер.СоответствиеИзHTTPОтвета(Ответ);
		Логин = ОписаниеАккаунта.Получить("default_email");
		Если Логин = Неопределено Тогда
			Логин = ОписаниеАккаунта.Получить("login");
		КонецЕсли;
		
		СвойстваАккаунта.ПредставлениеАккаунта = Логин;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает информацию об указанных ресурсах
//	Результаты выполнения команды и описания ошибок помещаются в СтруктуруРезультата
//	Информация о ресурсе помещается в СтруктуруРезультата.ИнформацияОРесурсе
//
// Параметры:
//	СтруктураРезультата  - Структура - см. RESTКлиентСервер.НоваяСтруктураОтвета()
//  ИмяФайла             - Строка - Путь к файлу или папке, информацию о которых нужно получить
//	СвойстваАккаунта     - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//	СвойстваПровайдера   - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//
Процедура ПолучитьИнформациюОРесурсе(СтруктураРезультата, ИмяФайла, СвойстваАккаунта, СвойстваПровайдера, Количество = Неопределено, Смещение = Неопределено, Сортировка = Неопределено) Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Charset", "utf-8");		
	Заголовки.Вставить("Accept", "application/json"); 
	Заголовки.Вставить("Authorization", "OAuth " + СвойстваАккаунта.КлючАвторизации); 	
	Заголовки.Вставить("Access-Control-Allow-Origin", "*");
	
	Адрес = "v1/disk/resources";
	
	ТекстЗапроса = "&path=" + СтрокаПутиНаСервере(ПутьКФайлу(СвойстваПровайдера.КаталогОбмена, ИмяФайла));
	Если Количество <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "&limit=" + Формат(Количество, "ЧДЦ=; ЧГ=");
	КонецЕсли;
	Если Смещение <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "&offset=" + Формат(Смещение, "ЧДЦ=; ЧГ=");
	КонецЕсли;
	Если Сортировка <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "&sort=" + Сортировка;
	КонецЕсли;
	
	Ответ = RESTКлиентСервер.ВыполнитьHTTPЗапрос("GET", СвойстваПровайдера.СерверAPI, Адрес + "?" + ТекстЗапроса, , , Заголовки, Истина);
	ОбработатьHTTPОтвет(Ответ, СтруктураРезультата, 200, 404);
	
	Если СтруктураРезультата.КодСостояния = 200 Тогда
		
		СтруктураРезультата.Результат.Вставить("Существует", Истина);
		СтруктураРезультата.Результат.Вставить("ИнформацияОРесурсе", RESTКлиентСервер.СоответствиеИзHTTPОтвета(Ответ));
		
	Иначе
		
		СтруктураРезультата.Результат.Вставить("Существует", Ложь);
		СтруктураРезультата.Результат.Вставить("ИнформацияОРесурсе", Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

// Загружает в облачное хранилище указанный файл из локальной файловой системы.
//	Результаты выполнения команды и описания ошибок помещаются в СтруктуруРезультата
//
// Параметры:
//	СтруктураРезультата  - Структура - см. RESTКлиентСервер.НоваяСтруктураОтвета()
//  ИмяФайлаИсточника    - Строка - Путь к файлу, который надо закачать в облако (Источник)
//  ИмяФайлаНазначения   - Строка - Путь в облаке, куда следует записать файл (Приемник)
//	СвойстваАккаунта     - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//	СвойстваПровайдера    - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//
Процедура ЗагрузитьФайлВОблако(СтруктураРезультата, ИмяФайлаИсточника, ИмяФайлаНазначения, СвойстваАккаунта, СвойстваПровайдера) Экспорт
	
	ДанныеСсылки = ПолучитьURLЗагрузкиФайла(СтруктураРезультата, СвойстваАккаунта, СвойстваПровайдера, ПутьКФайлу(СвойстваПровайдера.КаталогОбмена, ИмяФайлаНазначения));
	Если Не ЗначениеЗаполнено(ДанныеСсылки) Тогда
		СтруктураРезультата.ПредставлениеОшибки = НСтр("ru='Не удалось получить ссылку для загрузки файла в облако'"); 
		Возврат;
	КонецЕсли;
	
	СтруктураРезультата.КодСостояния = 0;
	СтруктураРезультата.ОписаниеОшибки = "";
	СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(ДанныеСсылки);
	
	Если Не ЗначениеЗаполнено(СтруктураАдреса.ИмяСервера) Или Не ЗначениеЗаполнено(СтруктураАдреса.ПутьНаСервере) Тогда
		СтруктураРезультата.КодСостояния = -100;
		СтруктураРезультата.ОписаниеОшибки = "Неверная ссылка на загрузку файла: " + ДанныеСсылки;
		СтруктураРезультата.ПредставлениеОшибки = НСтр("ru = 'От Яндекс.Диск получена некорректная ссылка на загрузку файла в облако'");
		Возврат;
	КонецЕсли;	
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Charset", "utf-8");		
	Заголовки.Вставить("Accept", "application/json"); 
	Заголовки.Вставить("Authorization", "OAuth " + СвойстваАккаунта.КлючАвторизации); 
	
	Ответ = RESTКлиентСервер.ВыполнитьHTTPЗапрос("PUT", СтруктураАдреса.ИмяСервера, СтруктураАдреса.ПутьНаСервере, , ИмяФайлаИсточника, Заголовки, Истина);
	ОбработатьHTTPОтвет(Ответ, СтруктураРезультата, 201, 202);
	
КонецПроцедуры

// Скачивает указанный файл из облака указанного провайдера на локальный диск пользователя.
//	Результаты выполнения команды и описания ошибок помещаются в СтруктуруРезультата
//
// Параметры:
//	СтруктураРезультата  - Структура - см. RESTКлиентСервер.НоваяСтруктураОтвета()
//  ИмяФайлаИсточника    - Строка - Путь к файлу, который надо скачать из облака (Источник)
//  ИмяФайлаНазначения   - Строка - Путь в локальной файловой системе, куда следует записать файл (Приемник)
//	СвойстваАккаунта     - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//	СвойстваПровайдера    - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//
Процедура СкачатьФайлИзОблака(СтруктураРезультата, ИмяФайлаИсточника, ИмяФайлаНазначения, СвойстваАккаунта, СвойстваПровайдера) Экспорт
	
	ДанныеСсылки = ПолучитьURLСкачиванияФайла(СтруктураРезультата, СвойстваАккаунта, СвойстваПровайдера, ПутьКФайлу(СвойстваПровайдера.КаталогОбмена, ИмяФайлаИсточника));
	Если Не ЗначениеЗаполнено(ДанныеСсылки) Тогда
		СтруктураРезультата.ПредставлениеОшибки = НСтр("ru='Не удалось получить ссылку для получения файла из облака'"); 
		Возврат;
	КонецЕсли;
	
	СтруктураРезультата.КодСостояния = 0;
	СтруктураРезультата.ОписаниеОшибки = "";
	СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(ДанныеСсылки);
	
	Если Не ЗначениеЗаполнено(СтруктураАдреса.ИмяСервера) Или Не ЗначениеЗаполнено(СтруктураАдреса.ПутьНаСервере) Тогда
		СтруктураРезультата.КодСостояния = -100;
		СтруктураРезультата.ОписаниеОшибки = "Неверная ссылка на получение файла: " + ДанныеСсылки;
		СтруктураРезультата.ПредставлениеОшибки = НСтр("ru = 'От Яндекс.Диск получена некорректная ссылка на получение файла из облака'");
		Возврат;
	КонецЕсли;	
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Charset", "utf-8");
	Заголовки.Вставить("Accept", "application/json"); 
	Заголовки.Вставить("Authorization", "OAuth " + СвойстваАккаунта.КлючАвторизации); 	
	
	Ответ = RESTКлиентСервер.ВыполнитьHTTPЗапрос("GET", СтруктураАдреса.ИмяСервера, СтруктураАдреса.ПутьНаСервере, , , Заголовки, Истина, ИмяФайлаНазначения);
	
	Если Ответ <> Неопределено И Ответ.КодСостояния = 302 Тогда 
		// Обработка перенаправления сервера
		
		АдресПеренаправления = Ответ.Заголовки.Получить("Location");
		Если АдресПеренаправления = Неопределено Тогда
			
			СтруктураРезультата.КодСостояния = Ответ.КодСостояния;
			СтруктураРезультата.ОписаниеОшибки = "Сервер перенаправил вызов но не вернул значение ""Location""";
			ОбработатьОшибку(Ответ, СтруктураРезультата);
			Возврат;
			
		КонецЕсли;
		
		СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресПеренаправления);
		Ответ = RESTКлиентСервер.ВыполнитьHTTPЗапрос("GET", СтруктураАдреса.ИмяСервера, СтруктураАдреса.ПутьНаСервере, , , Заголовки, Истина, ИмяФайлаНазначения);
		
	КонецЕсли;
	
	ОбработатьHTTPОтвет(Ответ, СтруктураРезультата, 200);
	
КонецПроцедуры

// Удаляет указанный файл или папку в облачном хранилище
//	Результаты выполнения команды и описания ошибок помещаются в СтруктуруРезультата
//
// Параметры:
//	СтруктураРезультата  - Структура - см. RESTКлиентСервер.НоваяСтруктураОтвета()
//  ИмяФайла    - Строка - Путь к файлу, который нужно удалить
//	СвойстваАккаунта     - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//	СвойстваПровайдера    - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//
Процедура УдалитьФайлИзОблака(СтруктураРезультата, ИмяФайла, СвойстваАккаунта, СвойстваПровайдера) Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Charset", "utf-8");		
	Заголовки.Вставить("Accept", "application/json"); 
	Заголовки.Вставить("Authorization", "OAuth " + СвойстваАккаунта.КлючАвторизации); 	
	Заголовки.Вставить("Access-Control-Allow-Origin", "*");
	
	ТекстЗапроса = "path=" + СтрокаПутиНаСервере(ПутьКФайлу(СвойстваПровайдера.КаталогОбмена, ИмяФайла), Ложь);
	
	Адрес = "v1/disk/resources";
	
	Ответ = RESTКлиентСервер.ВыполнитьHTTPЗапрос("DELETE", СвойстваПровайдера.СерверAPI, Адрес + "?" + ТекстЗапроса, , , Заголовки, Истина);
	ОбработатьHTTPОтвет(Ответ, СтруктураРезультата, 204, 202);
	
КонецПроцедуры

// Получает список файлов, существующих в каталоге облачного сервиса и соответствующих указанной маске 
//	Результаты выполнения команды и описания ошибок помещаются в СтруктуруРезультата
//
// Параметры:
//	СтруктураРезультата  - Структура - см. RESTКлиентСервер.НоваяСтруктураОтвета()
//  Маска                - Строка - часть имени или расширения. Символы подстановки не используются. Если пусто - все файлы и каталоги
//  Путь                 - Строка - каталог, в котором нужно выполнять проверку. Если пусто (по умолчанию) - каталог приложения
//  ВключаяПодчиненные   - Булево - искать ли в подчиненных каталогах или только в указанном
//	СвойстваАккаунта     - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//	СвойстваПровайдера    - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//
Процедура СисокФайловВОблаке(СтруктураРезультата, Маска, Путь = "", ВключаяПодчиненные = Истина, СвойстваАккаунта, СвойстваПровайдера) Экспорт
	
	// В данной версии не используется
	
КонецПроцедуры

// Проверяет наличе указанного файла/каталога в облачном хранилище
//	Результаты выполнения команды и описания ошибок помещаются в СтруктуруРезультата
//
// Параметры:
//	СтруктураРезультата  - Структура - см. RESTКлиентСервер.НоваяСтруктураОтвета()
//  ИмяКаталога          - Строка - Путь к создаваемому каталогу
//	СвойстваАккаунта     - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//	СвойстваПровайдера    - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//
Процедура СоздатьКаталогВОблаке(СтруктураРезультата, ИмяКаталога, СвойстваАккаунта, СвойстваПровайдера) Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Charset", "utf-8");		
	Заголовки.Вставить("Accept", "application/json"); 
	Заголовки.Вставить("Authorization", "OAuth " + СвойстваАккаунта.КлючАвторизации); 	
	Заголовки.Вставить("Access-Control-Allow-Origin", "*");
	
	Адрес = "v1/disk/resources";
	
	ТекстЗапроса = "path=" + СтрокаПутиНаСервере(ПутьКФайлу(СвойстваПровайдера.КаталогОбмена, ИмяКаталога));
	
	Ответ = RESTКлиентСервер.ВыполнитьHTTPЗапрос("PUT", СвойстваПровайдера.СерверAPI, Адрес + "?" + ТекстЗапроса, , , Заголовки, Истина);
	ОбработатьHTTPОтвет(Ответ, СтруктураРезультата, 201);
	
КонецПроцедуры

// Отменяет атворизацию придложения в облачном сервисе
//	Результаты выполнения команды и описания ошибок помещаются в СтруктуруРезультата
//
// Параметры:
//	СтруктураРезультата  - Структура - см. RESTКлиентСервер.НоваяСтруктураОтвета()
//	СвойстваАккаунта     - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//	СвойстваПровайдера    - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//
Процедура ОтменитьАвторизациюВОблаке(СтруктураРезультата, СвойстваАккаунта, СвойстваПровайдера) Экспорт
	
	СтруктураРезультата.КодСостояния   = -100;
	СтруктураРезультата.ОписаниеОшибки = "Невозможно программно отменить авторизацию на Яндекс.Диск!";
	СтруктураРезультата.ПредставлениеОшибки = НСтр("ru='Программая отмена авторизаци на Яндекс.Диск невозможна. 
			|Откройте Яндекс.Паспорт в браузере и нажмите ссылку ""Выйти на всех устройствах""'");
	
КонецПроцедуры


#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработатьОшибку(ОтветаСервера, Результат) Экспорт
	
	Если Результат.КодСостояния = 202 Тогда
		Результат.ПредставлениеОшибки = НСтр("ru='Файл принят сервером, но не перенесен непосредственно в Яндекс.Диск'"); 
	ИначеЕсли Результат.КодСостояния = 302 Тогда
		Результат.ПредставлениеОшибки = НСтр("ru='Яндекс.Диск вернул некорректную ссылку перенаправления'"); 
	ИначеЕсли Результат.КодСостояния = 412 Тогда
		Результат.ПредставлениеОшибки = НСтр("ru='при дозагрузке файла был передан неверный диапазон в заголовке Content-Range'"); 
	ИначеЕсли Результат.КодСостояния = 413 Тогда
		Результат.ПредставлениеОшибки = НСтр("ru='слишком большой файл'"); 
	ИначеЕсли Результат.КодСостояния = 500 Тогда
		Результат.ПредставлениеОшибки = НСтр("ru='Внутренняя ошибка на сервере Яндекс. Повторите попытку позже'"); 
	ИначеЕсли Результат.КодСостояния = 507 Тогда
		Результат.ПредставлениеОшибки = НСтр("ru='Не хватает места на Диске пользователя'"); 
		
	ИначеЕсли ОтветаСервера <> Неопределено Тогда
		
		Содержимое = RESTКлиентСервер.СоответствиеИзHTTPОтвета(ОтветаСервера);
		Если Содержимое = Неопределено Тогда
			Результат.ПредставлениеОшибки = НСтр("ru='Программная ошибка'"); 
			Возврат;
		КонецЕсли;
		
		ТипОшибки = Содержимое.Получить("error");
		Если ТипОшибки <> Неопределено Тогда
			Результат.ОписаниеОшибки      = ТипОшибки + ", " + Содержимое.Получить("description");
			Результат.ПредставлениеОшибки = Содержимое.Получить("message"); 
			Возврат;
		КонецЕсли;
		
		СтруктураОшибки = Содержимое.Получить("Error");
		Если СтруктураОшибки <> Неопределено И СтруктураОшибки.Получить("message") <> Неопределено Тогда
			Результат.ОписаниеОшибки      = СтруктураОшибки.Получить("error") + ", " + СтруктураОшибки.Получить("description");
			Результат.ПредставлениеОшибки = СтруктураОшибки.Получить("message"); 
			Возврат;
		КонецЕсли;
		
		Результат.ОписаниеОшибки = ОтветаСервера.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Результат.ПредставлениеОшибки = НСтр("ru='Неизвестная ошибка'");
		Возврат;
		
	КонецЕсли;
	
	Результат.ОписаниеОшибки = "Ответ сервера не является объектом";
	Результат.ПредставлениеОшибки = НСтр("ru='Неизвестная ошибка'");
	
КонецПроцедуры



#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьHTTPОтвет(Ответ, Результат, КодУспеха1, КодУспеха2=Неопределено, КодУспеха3=Неопределено) 
	
	Если Ответ = Неопределено Тогда
		Результат.ВыполненоУспешно = Ложь;
		Результат.КодСостояния = -100;
		Результат.ПредставлениеОшибки = НСтр("ru='Программная ошибка'"); 
		Возврат;
	КонецЕсли;
	
	Результат.КодСостояния = Ответ.КодСостояния;
	Результат.ВыполненоУспешно = (Ответ.КодСостояния = КодУспеха1 
			Или (КодУспеха2 <> Неопределено И Ответ.КодСостояния = КодУспеха2)
			Или (КодУспеха3 <> Неопределено И Ответ.КодСостояния = КодУспеха3));
	
	Если Не Результат.ВыполненоУспешно Тогда
		ОбработатьОшибку(Ответ, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Получает у Яндекс.Диска URL для закачки файла на сервер
// Описание API: https://tech.yandex.ru/disk/api/reference/upload-docpage/
//
// Параметры:
//	СтруктураРезультата  - Структура - см. RESTКлиентСервер.НоваяСтруктураОтвета()
//	СвойстваАккаунта     - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//	СвойстваПровайдера   - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//	ПутьНаСервере	     - Строка - Путь и имя файла на Яндекс.Диске, куда будет загружен файл
// 
// Возвращаемое значение:
//   Соответствие - Данные ответа о ссылке от Яндекс.Диска
//
Функция ПолучитьURLЗагрузкиФайла(СтруктураРезультата, СвойстваАккаунта, СвойстваПровайдера, ПутьНаСервере)
	
	Сервер = СвойстваПровайдера.СерверAPI;
	
	ПутьНаСервереВURL = СтрокаПутиНаСервере(ПутьНаСервере);
	
	Адрес = "v1/disk/resources/upload";	
	
	ТекстЗапроса = "";
	ТекстЗапроса = ТекстЗапроса + "&path=" + ПутьНаСервереВURL;
	ТекстЗапроса = ТекстЗапроса + "&overwrite=true";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Charset", "utf-8");		
	Заголовки.Вставить("Accept", "application/json"); 
	Заголовки.Вставить("Authorization", "OAuth " + СвойстваАккаунта.КлючАвторизации); 	
	
	Ответ = RESTКлиентСервер.ВыполнитьHTTPЗапрос("GET", Сервер, Адрес + "?" + ТекстЗапроса, , , Заголовки, Истина);
	Если Ответ = Неопределено Тогда
		СтруктураРезультата.КодСостояния   = "-100";
		СтруктураРезультата.ОписаниеОшибки = НСтр("ru='Не удалось выполнить запрос на сервер (ПолучитьURLЗагрузкиФайла)'");
		Возврат Неопределено;
	КонецЕсли;
	 
	СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	Если Ответ.КодСостояния = 200 Тогда //ОК
		ОтветJSON = ПарсерJSON.РаспарситьJSON(СтрокаОтвета, 0);	
		Возврат ОтветJSON.Получить("href");
	Иначе
		СтруктураРезультата.КодСостояния   = Ответ.КодСостояния;
		СтруктураРезультата.ОписаниеОшибки = СтрокаОтвета;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает у Яндекс.Диска URL для закачки файла на сервер
// Описание API: https://tech.yandex.ru/disk/api/reference/upload-docpage/
//
// Параметры:
//	СтруктураРезультата  - Структура - см. RESTКлиентСервер.НоваяСтруктураОтвета()
//	СвойстваАккаунта     - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//	СвойстваПровайдера   - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//	ПутьНаСервере	     - Строка - Путь и имя файла на Яндекс.Диске, куда будет загружен файл
// 
// Возвращаемое значение:
//   Соответствие - Данные ответа о ссылке от Яндекс.Диска
//
Функция ПолучитьURLСкачиванияФайла(СтруктураРезультата, СвойстваАккаунта, СвойстваПровайдера, ПутьНаСервере)
	
	Сервер = СвойстваПровайдера.СерверAPI;
	
	ПутьНаСервереВURL = СтрокаПутиНаСервере(ПутьНаСервере);
	
	Адрес = "v1/disk/resources/download";	
	
	ТекстЗапроса = "";
	ТекстЗапроса = ТекстЗапроса + "&path=" + ПутьНаСервереВURL;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Charset", "utf-8");		
	Заголовки.Вставить("Accept", "application/json"); 
	Заголовки.Вставить("Authorization", "OAuth " + СвойстваАккаунта.КлючАвторизации); 	
	
	Ответ        = RESTКлиентСервер.ВыполнитьHTTPЗапрос("GET", Сервер, Адрес + "?" + ТекстЗапроса, , , Заголовки, Истина);
	Если Ответ = Неопределено Тогда
		СтруктураРезультата.КодСостояния   = "-100";
		СтруктураРезультата.ОписаниеОшибки = НСтр("ru='Не удалось выполнить запрос на сервер (ПолучитьURLСкачиванияФайла)'");
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	Если Ответ.КодСостояния = 200 Тогда //ОК
		ОтветJSON = ПарсерJSON.РаспарситьJSON(СтрокаОтвета, 0);	
		Возврат ОтветJSON.Получить("href");
	Иначе
		СтруктураРезультата.КодСостояния   = Ответ.КодСостояния;
		СтруктураРезультата.ОписаниеОшибки = СтрокаОтвета;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Приводит значение пути к виду, который понимает Яндекс.Диск
//
// Параметры:
//  Путь - Строка - Путь на Яндекс.Диск 
// 
// Возвращаемое значение:
//   Строка - Преобразованный путь
//
Функция СтрокаПутиНаСервере(Путь, Кодировать = Истина)
	
	Результат = Путь;
	
	Если Кодировать Тогда
		Результат = RESTВызовСервера.КодироватьСтрокуКакURL(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПутьКФайлу(Знач Каталог, Знач ИмяФайла) 

	Разделитель = "/";
	Возврат Каталог + ?(Прав(Каталог, 1) <> Разделитель, Разделитель, "") 
				+ ?(Лев(ИмяФайла, 1) = Разделитель, Сред(ИмяФайла, 2), ИмяФайла);

КонецФункции
 

// Если СвойстваПровайдера = Неопределено, заполняет актуальными
Процедура ПроверитьСвойстваПровайдера(СвойстваПровайдера) 
	
	Если СвойстваПровайдера = Неопределено Тогда
		СвойстваПровайдера = RESTКлиентСервер.СвойстваПровайдера(ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Яндекс"));
	КонецЕсли;
	
КонецПроцедуры

Функция ОтветОбАккаунте(КлючАвторизации, СвойстваПровайдера) 

	Сервер = "login.yandex.ru";
	Адрес  = "info";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("format", "json");  
	Заголовки.Вставить("Authorization", "OAuth " + КлючАвторизации); 	
	
	ТекстЗапроса = "";
	
	Возврат RESTКлиентСервер.ВыполнитьHTTPЗапрос("GET", Сервер, Адрес, ТекстЗапроса, , Заголовки, Истина);

КонецФункции



#КонецОбласти