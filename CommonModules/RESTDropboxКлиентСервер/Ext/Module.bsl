////////////////////////////////////////////////////////////////////////////////
// RESTDropboxКлиентСервер
//	Выполнение и обработка запросов к сервисам Dropbox
//
//
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает данные об аккаунте пользователя 
// Описание API: https://www.dropbox.com/developers/core/docs#account-info 
//
//Параметры:
//	КлючДоступа - Строка - ключ (токен), который проверяется
//	СвойстваПровайдера - Структура или Неопределено - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//						Если Неопределено, заполняются авторматически как возвращаемый параметр для уменьшения серверных вызовов
//
// Возвращаемое значение:
//  Соответствие - Данные об аккаунте пользователя
//
Функция ДанныеОбАккаунте(КлючДоступа, СвойстваПровайдера = Неопределено) Экспорт
	
	ПроверитьСвойстваПровайдера(СвойстваПровайдера);
	
	Ответ = ОтветОбАккаунте(КлючДоступа, СвойстваПровайдера);
	СтрокаДанных = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	Если Ответ = Неопределено Тогда //ОК
		Возврат Неопределено;
	ИначеЕсли Ответ.КодСостояния = 200 Тогда //ОК
		ОтветJSON = ПарсерJSON.РаспарситьJSON(СтрокаДанных, 0);
		Возврат ОтветJSON;
	Иначе
		ПолучитьОшибкуПровайдера(Ответ, НСтр("ru = 'Ошибка получения данных об аккаунте пользователя!'"));
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

// Возвращает проверку доступности ключа доступа (токена) - выполняет запрос на сервер и 
//	анализирует полученный ответ
//
//Параметры:
//	КлючДоступа - Строка - ключ (токен), который проверяется
//	СвойстваПровайдера - Структура или Неопределено - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//						Если Неопределено, заполняются авторматически как возвращаемый параметр для уменьшения серверных вызовов
//
//Возвращаемое значение:
//	Булево или Неопределено - Истина, если токен действителен, Ложь если токен отменен и Неопределено в случае ошибки соединения или сервера
//
Функция КлючДоступаДействителен(КлючДоступа, СвойстваАккаунта, СвойстваПровайдера = Неопределено) Экспорт

	ПроверитьСвойстваПровайдера(СвойстваПровайдера);
	
	// Для проверки выполняем запрос по получению информации об аккаунте
	Ответ = ОтветОбАккаунте(КлючДоступа, СвойстваПровайдера);
	
	Если Ответ = Неопределено Тогда //ОК
		Возврат Ложь;
	ИначеЕсли Ответ.КодСостояния = 200 Тогда //ОК
		Возврат Истина;
	ИначеЕсли Ответ.КодСостояния = 401 Или Ответ.КодСостояния = 402 Или Ответ.КодСостояния = 403 
		Или Ответ.КодСостояния = 410 Тогда //аккаунт недоступен или авторизация анулирована
		// Обновление токена недоступно
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Ложь;

КонецФункции

// Выполняет запрос на сервер для получения токена по коду доступа
//	Результаты выполнения команды и описания ошибок помещаются в СтруктуруРезультата
//	Значение токера помещается в СтруктуруРезультата.Токен
//
// Параметры:
//	СтруктураРезультата  - Структура - см. RESTКлиентСервер.НоваяСтруктураРезультата()
//  ИмяФайла             - Строка - Путь к файлу или папке, информацию о которых нужно получить
//	СвойстваАккаунта     - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//	СвойстваПровайдера   - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//
Процедура ОбменятьКодДоступаНаТокен(СтруктураРезультата, КодДоступа, СвойстваПровайдера) Экспорт

	ТекстЗапроса = "";
	ТекстЗапроса = ТекстЗапроса + "&" + "client_id=" + СвойстваПровайдера.Идентификатор;
	ТекстЗапроса = ТекстЗапроса + "&" + "client_secret=" + СвойстваПровайдера.Пароль;
	ТекстЗапроса = ТекстЗапроса + "&" + "code=" + КодДоступа;
	ТекстЗапроса = ТекстЗапроса + "&" + "grant_type=authorization_code";
	ТекстЗапроса = ТекстЗапроса + "&" + "redirect_uri=" + СвойстваПровайдера.CallbackURL;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");
	Заголовки.Вставить("state", СвойстваПровайдера.КонтрольнаяСтрока);
	
	Ответ = RESTКлиентСервер.ВыполнитьHTTPЗапрос("POST", СвойстваПровайдера.СерверAPI, "oauth2/token", ТекстЗапроса, , Заголовки, Истина);
	ОбработатьHTTPОтвет(Ответ, СтруктураРезультата, 200);
	
	Если СтруктураРезультата.ВыполненоУспешно Тогда
		
		ПараметрыРезультата = RESTКлиентСервер.СоответствиеИзHTTPОтвета(Ответ);
		СтруктураРезультата.Вставить("Токен", ПараметрыРезультата.Получить("access_token"));
		СтруктураРезультата.Вставить("ИДАккаунта", ПараметрыРезультата.Получить("account_id"));
		
	КонецЕсли;

КонецПроцедуры

// Выполняет запрос на сервер провайдера для получения информации об аккаунте
//	Результат сохраняется в настройках
//
//Параметры:
//	СтруктураРезультата  - Структура - см. RESTКлиентСервер.НоваяСтруктураРезультата()
//	СвойстваАккаунта     - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//				Значения этого параметра будут обновлены после выполнения запроса на сервер
//	СвойстваПровайдера    - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//
Процедура ОбновитьСвойстваАккаунта(СтруктураРезультата, СвойстваАккаунта, СвойстваПровайдера) Экспорт
	
	Ответ = ОтветОбАккаунте(СвойстваАккаунта.КлючАвторизации, СвойстваПровайдера);
	ОбработатьHTTPОтвет(Ответ, СтруктураРезультата, 200);
	
	Если СтруктураРезультата.ВыполненоУспешно Тогда
		
		ОписаниеАккаунта = RESTКлиентСервер.СоответствиеИзHTTPОтвета(Ответ);
		СвойстваАккаунта.ПредставлениеАккаунта = ОписаниеАккаунта.Получить("email");
		
	КонецЕсли;
	
КонецПроцедуры

// Получает информацию об указанных ресурсах
//	Результаты выполнения команды и описания ошибок помещаются в СтруктуруРезультата
//	Информация о ресурсе помещается в СтруктуруРезультата.ИнформацияОРесурсе
//
// Параметры:
//	СтруктураРезультата      - Структура - см. RESTКлиентСервер.НоваяСтруктураРезультата()
//  ИмяФайла             - Строка - Путь к файлу или папке, информацию о которых нужно получить
//	СвойстваАккаунта     - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//	СвойстваПровайдера   - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//
Процедура ПолучитьИнформациюОРесурсе(СтруктураРезультата, ИмяФайла, СвойстваАккаунта, СвойстваПровайдера, Количество = Неопределено, Смещение = Неопределено, Сортировка = Неопределено) Экспорт
	
	АдресРесурса = "2/files/get_metadata";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Bearer " + СвойстваАккаунта.КлючАвторизации);
	Заголовки.Вставить("Content-Type", "application/json");
	
	ТекстЗапроса = 
	"{
	|	""path"": """ + ПутьКФайлу(СвойстваПровайдера.КаталогОбмена, ИмяФайла) + """,
	|	""include_media_info"": false, 
	|	""include_deleted"": false
	|}";
	
	Ответ = RESTКлиентСервер.ВыполнитьHTTPЗапрос("POST", СвойстваПровайдера.СерверAPI, АдресРесурса, ТекстЗапроса, , Заголовки, Истина);
	ОбработатьHTTPОтвет(Ответ, СтруктураРезультата, 200, 409);
	
	
	Если СтруктураРезультата.КодСостояния = 200 Тогда
		
		СтруктураРезультата.Результат.Вставить("Существует", Истина);
		СтруктураРезультата.Результат.Вставить("ИнформацияОРесурсе", RESTКлиентСервер.СоответствиеИзHTTPОтвета(Ответ));
		
	Иначе
		
		СтруктураРезультата.Результат.Вставить("Существует", Ложь);
		СтруктураРезультата.Результат.Вставить("ИнформацияОРесурсе", Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

// Загружает в облачное хранилище указанный файл из локальной файловой системы
//		Вызывается из одноименной функции модуля RESTКлиентСервер. Прямой вызов не приветствуется
//
// Параметры:
//	СтруктураРезультата - Структура - см. RESTКлиентСервер.НоваяСтруктураРезультата()
//	ИмяФайлаИсточника    - Строка - Путь к файлу, который надо закачать в облако (Источник)
//	ИмяФайлаНазначения   - Строка - Путь в облаке, куда следует записать файл (Приемник)
//	СвойстваАккаунта - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//	СвойстваПровайдера - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//
Процедура ЗагрузитьФайлВОблако(СтруктураРезультата, ИмяФайлаИсточника, ИмяФайлаНазначения, СвойстваАккаунта, СвойстваПровайдера) Экспорт
	
	АдресРесурса = "2/files/upload?reject_cors_preflight=true";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Bearer " + СвойстваАккаунта.КлючАвторизации);
	Заголовки.Вставить("Content-Type", "application/octet-stream");
	Заголовки.Вставить("Content-Charset", "utf-8"); 
	Заголовки.Вставить("Dropbox-API-Arg", 
		"{""path"": """ + ПутьКФайлу(СвойстваПровайдера.КаталогОбмена, ИмяФайлаНазначения) + """, ""mode"": ""overwrite""}");
	
	Ответ = RESTКлиентСервер.ВыполнитьHTTPЗапрос("POST", СвойстваПровайдера.СерверРаботыСКонтентом, АдресРесурса, , ИмяФайлаИсточника, Заголовки, Истина);
	ОбработатьHTTPОтвет(Ответ, СтруктураРезультата, 200);
	
КонецПроцедуры

// Скачать файл из облака
//  Описание API: https://www.dropbox.com/developers/core/docs#files-GET
//
// Параметры:
//	СтруктураРезультата - Структура - см. RESTКлиентСервер.НоваяСтруктураРезультата()
//	ИмяФайлаИсточника    - Строка - Путь к файлу, который надо скачать из облака (Источник)
//	ИмяФайлаНазначения   - Строка - Путь в локальной ФС, куда следует записать файл (Приемник)
//	СвойстваАккаунта - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//	СвойстваПровайдера - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//
Процедура СкачатьФайлИзОблака(СтруктураРезультата, ИмяФайлаИсточника, ИмяФайлаНазначения, СвойстваАккаунта, СвойстваПровайдера) Экспорт
	
	АдресРесурса = "2/files/download?reject_cors_preflight=true";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Bearer " + СвойстваАккаунта.КлючАвторизации);
	Заголовки.Вставить("Content-Type", "");
	Заголовки.Вставить("Content-Charset", "utf-8"); 
	Заголовки.Вставить("Dropbox-API-Arg", 
		"{""path"": """ + ПутьКФайлу(СвойстваПровайдера.КаталогОбмена, ИмяФайлаИсточника) + """}");
	
	ТекстЗапроса = "";
	
	Ответ = RESTКлиентСервер.ВыполнитьHTTPЗапрос("POST", СвойстваПровайдера.СерверРаботыСКонтентом, АдресРесурса, ТекстЗапроса, , Заголовки, Истина);
	ОбработатьHTTPОтвет(Ответ, СтруктураРезультата, 200);
	
	Если СтруктураРезультата.ВыполненоУспешно Тогда
		
		СтруктураРезультата.Результат = Ответ.ПолучитьТелоКакДвоичныеДанные();
		Если ЗначениеЗаполнено(ИмяФайлаНазначения) Тогда
			СтруктураРезультата.Результат.Записать(ИмяФайлаНазначения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Удалить файл/папку 
// Описание API: https://www.dropbox.com/developers/core/docs#fileops-delete 
//
// Параметры:
//	СтруктураРезультата - Структура - см. RESTКлиентСервер.НоваяСтруктураРезультата()
//	ИмяФайла    - Строка - Путь к файлу, который надо удалить из облака 
//	СвойстваАккаунта - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//	СвойстваПровайдера - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//
Функция УдалитьФайлИзОблака(СтруктураРезультата, ИмяФайла, СвойстваАккаунта, СвойстваПровайдера) Экспорт
	
	АдресРесурса = "2/files/delete?reject_cors_preflight=true";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Bearer " + СвойстваАккаунта.КлючАвторизации);
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Content-Charset", "utf-8"); 
	
	ТекстЗапроса = "{""path"": """+ ПутьКФайлу(СвойстваПровайдера.КаталогОбмена, ИмяФайла) + """}";
	
	Ответ = RESTКлиентСервер.ВыполнитьHTTPЗапрос("POST", СвойстваПровайдера.СерверAPI, АдресРесурса, ТекстЗапроса, , Заголовки, Истина);
	ОбработатьHTTPОтвет(Ответ, СтруктураРезультата, 200);

КонецФункции

// Получает список файлов, существующих в каталоге облачного сервиса и соответствующих указанной маске 
//	Результаты выполнения команды и описания ошибок помещаются в СтруктуруРезультата
//
// Параметры:
//	СтруктураРезультата  - Структура - см. RESTКлиентСервер.НоваяСтруктураРезультата()
//  Маска                - Строка - часть имени или расширения. Символы подстановки не используются. Если пусто - все файлы и каталоги
//  Путь                 - Строка - каталог, в котором нужно выполнять проверку. Если пусто (по умолчанию) - каталог приложения
//  ВключаяПодчиненные   - Булево - искать ли в подчиненных каталогах или только в указанном
//	СвойстваАккаунта     - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//	СвойстваПровайдера    - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//
Процедура СисокФайловВОблаке(СтруктураРезультата, Маска, Путь = "", ВключаяПодчиненные = Истина, СвойстваАккаунта, СвойстваПровайдера) Экспорт
	
	// В данной версии не используется
	
КонецПроцедуры

// Проверяет наличе указанного файла/каталога в облачном хранилище
//	Результаты выполнения команды и описания ошибок помещаются в СтруктуруРезультата
//
// Параметры:
//	СтруктураРезультата  - Структура - см. RESTКлиентСервер.НоваяСтруктураРезультата()
//  ИмяКаталога          - Строка - Путь к создаваемому каталогу
//	СвойстваАккаунта     - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//	СвойстваПровайдера    - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//
Процедура СоздатьКаталогВОблаке(СтруктураРезультата, ИмяКаталога, СвойстваАккаунта, СвойстваПровайдера) Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Bearer " + СвойстваАккаунта.КлючАвторизации);
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Content-Charset", "utf-8"); 
	
	Адрес = "2/files/create_folder?reject_cors_preflight=true";
	
	ТекстЗапроса = "{""path"": """+ ПутьНаДиске(СвойстваПровайдера.КаталогОбмена + ИмяКаталога) + """,
			|""autorename"": false}";
	
	Ответ = RESTКлиентСервер.ВыполнитьHTTPЗапрос("POST", СвойстваПровайдера.СерверAPI, Адрес, ТекстЗапроса, , Заголовки, Истина);
	ОбработатьHTTPОтвет(Ответ, СтруктураРезультата, 200);
	
КонецПроцедуры

// Отменяет атворизацию приложения в облачном сервисе
//	Результаты выполнения команды и описания ошибок помещаются в СтруктуруРезультата
//
// Параметры:
//	СтруктураРезультата  - Структура - см. RESTКлиентСервер.НоваяСтруктураРезультата()
//	СвойстваАккаунта     - Структура - логин и токен доступа к серверу провайдера (см. RESTВызовСервера.НоваяСтруктураПараметровREST())
//	СвойстваПровайдера    - Структура - сервера, адреса и другие свойства провайдера (см. RESTКлиентСервер.СвойстваПровайдера())
//
Процедура ОтменитьАвторизациюВОблаке(СтруктураРезультата, СвойстваАккаунта, СвойстваПровайдера) Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Bearer " + СвойстваАккаунта.КлючАвторизации);
	
	Адрес = "2/auth/token/revoke";
	
	ТекстЗапроса = "";
	
	Ответ = RESTКлиентСервер.ВыполнитьHTTPЗапрос("PUT", СвойстваПровайдера.СерверAPI, Адрес, ТекстЗапроса, , Заголовки, Истина);
	ОбработатьHTTPОтвет(Ответ, СтруктураРезультата, 200);
	
	
КонецПроцедуры



#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработатьОшибку(ОтветСервера, Результат) Экспорт
	
	Если Результат.КодСостояния = 202 Тогда
		Результат.ПредставлениеОшибки = НСтр("ru='Файл принят сервером, но не перенесен непосредственно в Dropbox'"); 
	ИначеЕсли Результат.КодСостояния = 302 Тогда
		Результат.ПредставлениеОшибки = НСтр("ru='Dropbox вернул некорректную ссылку перенаправления'"); 
	ИначеЕсли Результат.КодСостояния = 413 Тогда
		Результат.ПредставлениеОшибки = НСтр("ru='слишком большой файл'"); 
	ИначеЕсли Результат.КодСостояния = 500 Тогда
		Результат.ПредставлениеОшибки = НСтр("ru='Внутренняя ошибка на сервере Dropbox. Повторите попытку позже'"); 
	ИначеЕсли Результат.КодСостояния = 507 Тогда
		Результат.ПредставлениеОшибки = НСтр("ru='Не хватает места на Dropbox'"); 
		
	ИначеЕсли ОтветСервера <> Неопределено Тогда
		
		ПоляОтвета  = RESTКлиентСервер.СоответствиеИзHTTPОтвета(ОтветСервера);
		
		ТекстОшибки = "";
		Инфо = ПоляОтвета["error_summary"];
		
		Если ТипЗнч(Инфо) = Тип("Соответствие") Тогда
			Для Каждого Элемент Из Инфо Цикл
				ТекстОшибки = ТекстОшибки +  "Параметр: " + Строка(Элемент.Ключ) + ", значение: " + Строка(Элемент.Значение);
			КонецЦикла;
			ТекстОшибки = ТекстОшибки + ".";
		ИначеЕсли ТипЗнч(Инфо) = Тип("Строка") Тогда
			ТекстОшибки = Инфо;
		ИначеЕсли Инфо = Неопределено И ПоляОтвета["ТекстОтвета"] <> Неопределено Тогда
			ТекстОшибки = ПоляОтвета["ТекстОтвета"];
		КонецЕсли;

		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = RESTКлиентСервер.UnicodeВСтроку(ТекстОшибки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "\""", """");
			Результат.ОписаниеОшибки = ТекстОшибки;
			Результат.ПредставлениеОшибки = НСтр("ru='Сервер вернул сообщение об ошибке'");
			Возврат;
		КонецЕсли;
		
		Результат.ОписаниеОшибки = ОтветСервера.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Результат.ПредставлениеОшибки = НСтр("ru='Неизвестная ошибка'");
		Возврат;
		
	КонецЕсли;
	
	Результат.ОписаниеОшибки = "Ответ сервера не является объектом";
	Результат.ПредставлениеОшибки = НСтр("ru='Неизвестная ошибка'");
	
КонецПроцедуры




#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Выполняет обработку HTTP-ответа сервера в соответствии с заданными параметрами
//	Если код состояния соответствует кодам успешного завершения, в структуру овтета будет помещен флаг Успеха
//	иначе - структура будет заполнена ифнформацие об ошибке
//
//Параметры:
//	СтруктураРезультата - Структура - см. НоваяСтруктураРезультата()
//	ОтветСервера - HTTPОтвет
//	КодыУспешногоЗавершения - Строка - коды ответа сервера (через запятую), соответствующие успешному выполнению запроса
//
Процедура ОбработатьHTTPОтвет(ОтветСервера, Результат, КодУспеха1, КодУспеха2 = Неопределено, КодУспеха3 = Неопределено)
	
	Если ОтветСервера = Неопределено Тогда
		Результат.ВыполненоУспешно = Ложь;
		Результат.КодСостояния = -100;
		Результат.ПредставлениеОшибки = НСтр("ru='Программная ошибка'"); 
		Возврат;
	КонецЕсли;
	
	Результат.КодСостояния = ОтветСервера.КодСостояния;
	Результат.ВыполненоУспешно = (ОтветСервера.КодСостояния = КодУспеха1 
			Или (КодУспеха2 <> Неопределено И ОтветСервера.КодСостояния = КодУспеха2)
			Или (КодУспеха3 <> Неопределено И ОтветСервера.КодСостояния = КодУспеха3));
	
	Если Не Результат.ВыполненоУспешно Тогда
		ОбработатьОшибку(ОтветСервера, Результат);
	КонецЕсли;
	
	
КонецПроцедуры

// Если СвойстваПровайдера = Неопределено, заполняет актуальными
Процедура ПроверитьСвойстваПровайдера(СвойстваПровайдера) 
	
	Если СвойстваПровайдера = Неопределено Тогда
		СвойстваПровайдера = RESTКлиентСервер.СвойстваПровайдера(ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Dropbox"));
	КонецЕсли;
	
КонецПроцедуры

// Парсит ответ от сервера Dropbox и генерирует исключение, или возвращает строку с описанием ошибки
//
// Параметры:
//  ОтветСервера	 - HTTPОтвет  - Ответ сервера, полученного в результате запроса
//  ТекстСообщения   - Строка - Текст сообщения, который будет выводится с информацией об ошибке
//  ГенерироватьИсключение - Булево - Если = Истина, то вызвает исключение с содержанием ошибки
//
// Возвращаемое значение:
//   Строка - В случае, если ГенерироватьИсключение = Ложь, возвращает описание ошибки
//
Функция ПолучитьОшибкуПровайдера(Знач ОтветСервера, Знач ТекстСообщения, Знач ГенерироватьИсключение = Истина)
	
	Текст = ТекстСообщения;
	
	Если ОтветСервера <> Неопределено Тогда
		
		Данные = ОтветСервера.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		
		Если НЕ ПустаяСтрока(Данные) Тогда
			
			Если СтрНайти(Данные, "{") = 1 Тогда
				
				ОтветJSON = ПарсерJSON.РаспарситьJSON(Данные, 0);
				ОтветJSON = ?(ОтветJSON = Неопределено, Новый Соответствие, ОтветJSON);
				
				Инфо = ОтветJSON["error_summary"];
				
				ТекстОшибки = "";
				Если ТипЗнч(Инфо) = Тип("Соответствие") Тогда
					Для Каждого Элемент Из Инфо Цикл
						ТекстОшибки = ТекстОшибки +  "Параметр: " + Строка(Элемент.Ключ) + ", значение: " + Строка(Элемент.Значение);
					КонецЦикла;
					ТекстОшибки = ТекстОшибки + ".";
				ИначеЕсли ТипЗнч(Инфо) = Тип("Строка") Тогда
					ТекстОшибки = Инфо;
				КонецЕсли;
				
				ТекстОшибки = RESTКлиентСервер.UnicodeВСтроку(ТекстОшибки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "\""", "`");
				Текст = Текст + " " + ТекстОшибки;
				
			Иначе
				Текст = Текст + " " + Данные;
			КонецЕсли;
			
		КонецЕсли;
		
		Текст = Текст + " Код ошибки: " + ОтветСервера.КодСостояния;
		
	КонецЕсли;
	
	Если ГенерироватьИсключение Тогда
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Функция ОтветОбАккаунте(КлючДоступа, СвойстваПровайдера) 

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-type", "application/json; charset=utf-8");  
	Заголовки.Вставить("Authorization", "Bearer " + КлючДоступа); 
	
	Возврат RESTКлиентСервер.ВыполнитьHTTPЗапрос("POST", СвойстваПровайдера.СерверAPI
				, "2/users/get_current_account", "null", , Заголовки, Истина);

КонецФункции

// Приводит значение пути к виду, который понимает Dropbox
//
// Параметры:
//  Путь - Строка - Путь на Dropbox 
// 
// Возвращаемое значение:
//   Строка - Преобразованный путь
//
Функция ПутьНаДиске(Знач Путь, Кодировать = Истина)
	
	Результат = Путь;
	Результат = ?(Лев(Путь, 1) = "/", "", "/") + Результат;
	
	Если Кодировать Тогда
		Результат = RESTКлиентСервер.КодироватьСтрокуКакUnicode(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПутьКФайлу(Знач Каталог, Знач ИмяФайла, Кодировать = Истина) 

	Разделитель = "/";
	Результат = Каталог + ?(Прав(Каталог, 1) <> Разделитель, Разделитель, "") 
				+ ?(Лев(ИмяФайла, 1) = Разделитель, Сред(ИмяФайла, 2), ИмяФайла);
	
	Если Кодировать Тогда
		Результат = RESTКлиентСервер.КодироватьСтрокуКакUnicode(Результат);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции



#КонецОбласти