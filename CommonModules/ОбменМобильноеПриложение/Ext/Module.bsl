////////////////////////////////////////////////////////////////////////////////
// ОбменМобильноеПриложение: 
//   поддержка обмена данными между настольной и мобильной версиями приложения
//  
// 		* Обработчики событий регистрации объектов в плане обмена
// 		* Вспомогательный функционал по обмену данными
//		* Выгрузка данных
//		* Зарузка данных
//		* Обмен данными по сценариям
//  
////////////////////////////////////////////////////////////////////////////////


#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// * Обработчики событий регистрации объектов в плане обмена

// Обработчик подписки на событие МобильноеПриложениеЗарегистрироватьИзменениеДокумента
Процедура МобильноеПриложениеЗарегистрироватьИзменениеДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Источник.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") 
		И Источник.ДополнительныеСвойства.ОтключитьМеханизмРегистрацииОбъектов = Истина Тогда
		Источник.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		Источник.ОбменДанными.Получатели.Очистить();
	Иначе
		ОбменМобильноеПриложениеВызовСервера.УдалитьНеактивныеУзлыИзСписокаПолучателей(Источник);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик подписки на событие МобильноеПриложениеЗарегистрироватьИзменение
Процедура МобильноеПриложениеЗарегистрироватьИзменениеПередЗаписью(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Источник.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") 
		И Источник.ДополнительныеСвойства.ОтключитьМеханизмРегистрацииОбъектов = Истина Тогда
		Источник.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		Источник.ОбменДанными.Получатели.Очистить();
	Иначе
		ОбменМобильноеПриложениеВызовСервера.УдалитьНеактивныеУзлыИзСписокаПолучателей(Источник);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик подписки на событие МобильноеПриложениеЗарегистрироватьИзменениеКонстанты
Процедура МобильноеПриложениеЗарегистрироватьИзменениеКонстантыПередЗаписью(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбменМобильноеПриложениеВызовСервера.УдалитьНеактивныеУзлыИзСписокаПолучателей(Источник);
	//ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("МобильноеПриложение",   Источник, Отказ);	
	
КонецПроцедуры

// Обработчик подписки на событие МобильноеПриложениеЗарегистрироватьУдаление
Процедура МобильноеПриложениеЗарегистрироватьУдалениеПередУдалением(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("МобильноеПриложение",   Источник, Отказ);	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обработчик подписки на событие МобильноеПриложениеЗарегистрироватьИзменениеДокумента
Процедура МобильноеПриложениеЗарегистрироватьИзменениеРегистраПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Источник.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") 
		И Источник.ДополнительныеСвойства.ОтключитьМеханизмРегистрацииОбъектов = Истина Тогда
		Источник.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		Источник.ОбменДанными.Получатели.Очистить();
	Иначе
		ОбменМобильноеПриложениеВызовСервера.УдалитьНеактивныеУзлыИзСписокаПолучателей(Источник);
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// * Вспомогательный функционал по обмену данными

// Возвращает строку - заголовок события для записи в журнале регистрации
Функция КлючСобытияЖурналаРегистрации(Знач Действие) Экспорт

	КлючСообщения = НСтр("ru = 'Обмен данными.МобильноеПриложение.[ДействиеПриОбмене]'");
	
	Если ТипЗнч(Действие) = Тип("Строка") Тогда
		Действие = Перечисления.ДействияПриОбмене[Действие];
	КонецЕсли;
	
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ДействиеПриОбмене]", Действие);
	
	Возврат КлючСообщения;

КонецФункции

// Возвращает пустую структуру для заполнения параметрами, необходимыми для
//	осуществления выгрузки или загрузки данных
//
//Параметры:
//	НаправлениеОбмена - Строка - "Выгрузка" или "Загрузка"
//
Функция ПустаяСтруктураПараметровОбмена(НаправлениеОбмена) Экспорт

	Результат = Новый Структура;
	
	// Информация о плане и узлах обмена 
	Результат.Вставить("МенеджерОбмена",     Неопределено); // ПланОбменаМенеджер
	Результат.Вставить("ЭтотУзел",           Неопределено); // ссылка на узел плана обмена
	Результат.Вставить("УзелКорреспондента", Неопределено); // ссылка на узел плана обмена
	Результат.Вставить("СвойстваУзлаКорреспондента", Новый Структура); // структура. Заполняется значениями 
				// реквизитов узла плана обмена, нужными для осуществления самого обмена
	Результат.Вставить("ЧтениеСообщения",    Неопределено); // чтение сообщения плана обмена
	
	// Информация о пакете XDTO
	Результат.Вставить("ИмяПакетаXDTO",    ""); // строка
	Результат.Вставить("URIПакетаXDTO",    ""); // строка
	Результат.Вставить("ВерсияФормата",    ""); // строка. Используется для контроля принимаемых сообщений
	
	// Данные сообщения
	Результат.Вставить("ИмяФайлаСообщения",   "");   // строка
	Результат.Вставить("ИспользоватьФайл",    Ложь); // булево. Принзак необходимости вести оьбмен через файл
	Результат.Вставить("ТекстСообщения",      "");   // строка (текст)
	Результат.Вставить("ОбъектXML",           Неопределено); // ЧтениеXML или ЗаписьXML
	
	// Информация о состоянии обмена
	Результат.Вставить("НаправлениеОбмена", НаправлениеОбмена); // строка
	Результат.Вставить("СценарийОбмена", "ОбъединениеДанных"); // строка. Возможные значения: "Объединение", "Замещение в этом узле", "Замещение в узле корреспондента"
	Результат.Вставить("ВремяНачалаОбмена",    ТекущаяДатаСеанса()); // время начала выполнения обмена
	Результат.Вставить("ВремяОкончанияОбмена", '00010101'); // время окончания (прерывания) выполнения обмена
	
	// Информация для регистрации ошибки и обработки исключений
	Результат.Вставить("ФлагОшибки", Ложь); // булево. Признак возникновения ошибки
	Результат.Вставить("СтрокаСообщенияОбОшибке", ""); // строка, описание ошибки
	Результат.Вставить("КлючСообщенияЖурналаРегистрации", КлючСобытияЖурналаРегистрации(НаправлениеОбмена));  // строка. Префикс для записей в журнал регистрации
	ОбрабатываемыйОбъект = Новый Структура("Тип,Представление,Ссылка");
	Результат.Вставить("ОбрабатываемыйОбъект", ОбрабатываемыйОбъект); // описание объекта, вызвавшего ошибку
	Результат.Вставить("СопоставленияПоСсылкам",    Новый Соответствие);
	Результат.Вставить("СопоставленияДляПроверки",  Новый Соответствие);
	
	Если НаправлениеОбмена = "ВыгрузкаДанных" Тогда
		
		Результат.Вставить("СчетчикВыгруженныхОбъектов", 0);
		Результат.Вставить("СписокПрикрепленныхФайлов", Новый Соответствие);
		Результат.Вставить("ПрикрепленныеФайлыИзПринадлежности", Новый Массив);
		Результат.Вставить("СписокУдаляемыхДокументов", Новый Массив);
		
	Иначе
		
		Результат.Вставить("НомерВходящегоСообщения");
		Результат.Вставить("СчетчикЗагруженныхОбъектов", 0);
		Результат.Вставить("КоличествоЭлементовВТранзакции", 0);
		Результат.Вставить("ЗаписаноЭлементовВТранзакции", 0);
		Результат.Вставить("ЗагруженныеОбъекты", Новый Массив);
		Результат.Вставить("ИспользоватьТранзакции", Ложь);
		
		// Списки объектов, нуждающихся в дополнительной обработке после загрузки
		Результат.Вставить("СписокУдаляемыхОбъектов", Новый Массив);
		Результат.Вставить("СписокКошельков", Новый Массив);
		
		// Списки объектов, измененных одновременно в двух приложениях
		Результат.Вставить("СписокКоллизий", Новый Массив);
		
		// Для контроля изменений констант
		ИзмененныеКонстанты = Новый ТаблицаЗначений;
		ИзмененныеКонстанты.Колонки.Добавить("ИмяКонстанты");
		ИзмененныеКонстанты.Колонки.Добавить("ПрежнееЗначение");
		ИзмененныеКонстанты.Колонки.Добавить("НовоеЗначение");
		Результат.Вставить("ИзмененныеКонстанты", ИзмененныеКонстанты);
		
		// Для контроля изменений справочников
		ИзмененныеСправочники = Новый ТаблицаЗначений;
		ИзмененныеСправочники.Колонки.Добавить("Ссылка");
		ИзмененныеСправочники.Колонки.Добавить("ДополнительныеСвойства");
		Результат.Вставить("ИзмененныеСправочники", ИзмененныеСправочники);
		
		// Для обработки документов после их загрузки
		ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДатаДокумента",               Новый ОписаниеТипов("Дата"));
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ВИсточникеПроведен",          Новый ОписаниеТипов("Булево"));
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ВИсточникеПомеченНаУдаление", Новый ОписаниеТипов("Булево"));
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ВИсточникеУдален",            Новый ОписаниеТипов("Булево"));
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДоЗагрузкиПроведен",          Новый ОписаниеТипов("Булево"));
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДоЗагрузкиПомеченНаУдаление", Новый ОписаниеТипов("Булево"));
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ЭтоНовый",                    Новый ОписаниеТипов("Булево"));
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ОбработанУспешно",            Новый ОписаниеТипов("Булево"));
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ОписаниеПроблемы",            Новый ОписаниеТипов("Строка"));
		Результат.Вставить("ДокументыДляОтложенногоПроведения", ДокументыДляОтложенногоПроведения);
		
		// Обработка плановых показателей плановых операций
		ПоказателиОпераций = РегистрыНакопления.ОборотыПлановыхОпераций.СоздатьНаборЗаписей().ВыгрузитьКолонки();
		Результат.Вставить("ПоказателиОпераций", ПоказателиОпераций);
		
	КонецЕсли;
	

	Возврат Результат;
	
КонецФункции

// Возвращает ссылку на узел плана обмена "МобильноеПриложение", соответствующую текущему узлу
//	В случае остутствия узла или некорректного заполнения его параметров, узел будет создан 
//	и заполнен значениями по умолчанию
Функция ПолучитьЭтотУзел() Экспорт

	СистемнаяИнформация = Неопределено;
	УзелОбъект = ПланыОбмена.МобильноеПриложение.ЭтотУзел().ПолучитьОбъект();
	Если СтрДлина(УзелОбъект.Код) < 7 Тогда
		ОбновитьОбъектСистемнойИнформации(СистемнаяИнформация);
		УзелОбъект.Код = СформироватьКодУзла(СистемнаяИнформация);
		УзелОбъект.Наименование = НСтр("ru = 'Эта информационная база'") ;
		УзелОбъект.КоличествоВыгружаемыхПериодов = 0;
		УзелОбъект.ВидВыгружаемогоПериода = Неопределено;
		УзелОбъект.ВыгружатьОперацииТолькоПоУказаннымКошелькам = Ложь;
		УзелОбъект.Кошельки.Очистить();
		УзелОбъект.Активность = Истина;
		УзелОбъект.Записать();
	КонецЕсли;
	
	Возврат УзелОбъект.Ссылка;

КонецФункции

// Регистрирует изменения для указанного узла плана обмена
Процедура ЗарегистрироватьВсеОбъектыДляУзлаОбмена(ПараметрыОбмена) Экспорт

	УзелОбмена = ПараметрыОбмена.УзелКорреспондента;
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена);
	
	МинимальнаяДата         = ПараметрыОбмена.СвойстваУзлаКорреспондента.МинимальнаяДатаУзлаКорреспондента;
	ТолькоПоСпискуКошельков = ПараметрыОбмена.СвойстваУзлаКорреспондента.ВыгружатьОперацииТолькоПоУказаннымКошелькам;
	Кошельки                = ПараметрыОбмена.СвойстваУзлаКорреспондента.Кошельки;
	
	СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
	Для каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		Если ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда
			
			ПолноеИмяОбъекта = ЭлементСоставаПланаОбмена.Метаданные.ПолноеИмя();
			Выборка = ВыбратьДокументыДляРегистрации(ПолноеИмяОбъекта, МинимальнаяДата, ТолькоПоСпискуКошельков, Кошельки);
			
			Пока Выборка.Следующий() Цикл
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
				
			КонецЦикла;
			
		Иначе
			
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементСоставаПланаОбмена.Метаданные);
			
		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры

// Копирует регистрацию изменений из прочих узлов плана обмена в узел, указанный в праметрах
Процедура СкопироватьРегистрациюИзмененийИзДругихУзлов(УзелНазначения) Экспорт

	Запрос = Новый Запрос;
	МассивУзлов = Новый Массив;
	МассивУзлов.Добавить(ПланыОбмена.МобильноеПриложение.ЭтотУзел());
	МассивУзлов.Добавить(УзелНазначения);
	Запрос.УстановитьПараметр("ИсключаемыеУзлы", МассивУзлов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МобильноеПриложение.Ссылка,
	|	МобильноеПриложение.НомерОтправленного
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|ГДЕ
	|	НЕ МобильноеПриложение.ПометкаУдаления
	|	И НЕ МобильноеПриложение.Ссылка В (&ИсключаемыеУзлы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Выборка.Ссылка, Выборка.НомерОтправленного);
		Пока ВыборкаИзменений.Следующий() Цикл
		
			ПланыОбмена.ЗарегистрироватьИзменения(УзелНазначения, ВыборкаИзменений.Получить());
		
		КонецЦикла; 
	
	КонецЦикла; 
	
КонецПроцедуры

// Считывает из пакета сообщения параметры обмена и мобильного приложения
Функция ПолучитьПараметрыСообщения(ТекстСообщения, ОписаниеПроблемы = "") Экспорт

	Перем Результат;
	
	ОписаниеПроблемы = "";
	ТекущееДействие  = НСтр("ru = 'Получение настроек мобильного приложения'"); 
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСообщения);
	ЧтениеXML.Прочитать();
	Контейнер = Неопределено;
	Настройки = Неопределено;
	Заголовок = Неопределено;
	
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		
		Контейнер = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, 
				ФабрикаXDTO.Тип(ЧтениеXML.URIПространстваИмен, ЧтениеXML.ЛокальноеИмя));
		
		Если Контейнер = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Заголовок = Контейнер.header;
		Настройки = Контейнер.body.settings;
		Прервать;
		
	КонецЦикла;  
	
	Если Настройки <> Неопределено Тогда
		
		Результат = Новый Структура;
		
		Результат.Вставить("КодЦентральнойБазы", Настройки.IDMainAPP); // Идентификатор центральной базы
		Результат.Вставить("КоличествоПеридов", Настройки.NumPeriods); 
		Результат.Вставить("ВидПериода", ?(ТипЗнч(Настройки.PeriodType) = Тип("Строка") И Найти("день,месяц,неделя", НРег(Настройки.PeriodType)) > 0,
						Перечисления.Периодичность[Настройки.PeriodType], 
						Перечисления.Периодичность.День));
		Результат.Вставить("ОграничиватьКошельками", Настройки.LimitWallets);
		Результат.Вставить("ДатаПакета", Настройки.DateOfSending);
		Результат.Вставить("ВерсияОбмена", Настройки.VersionExchange);
		Результат.Вставить("Сценарий", Настройки.Script); // Наименование сценария
		
	КонецЕсли; 
	
	ЧтениеXML.Закрыть();

	Если Результат = Неопределено Тогда
		
		ВызватьИсключение НСтр("ru = 'Сообщение не содержит описание параметров'");
		
	КонецЕсли; 

	
	Возврат Результат;
	
КонецФункции

// Проверяет, что файл является списком устройств и относится именно к данной информационной базе
//
//Параметры:
//	Файл- Файл, в котором ожидается список устройств
//
//Возвращаемое значение:
//	Булево - Истина, если файл содержит список устройств и Ложь в ином случае
//
Функция ФайлСодержитСписокУстройств(Файл) Экспорт

	Если ТипЗнч(Файл) <> Тип("Файл") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Файл.ПолноеИмя);
	КодВладельца = Неопределено;
	
	Попытка
	
		Пока ЧтениеXML.Прочитать() Цикл
		
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Owner" Тогда
				
				КодВладельца = ЧтениеXML.ПолучитьАтрибут("Code");
				Прервать;
				
			КонецЕсли; 
		
		КонецЦикла; 
	
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(КодВладельца) Или КодВладельца <> ОбменМобильноеПриложение.ПолучитьЭтотУзел().Код Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Сохдает и сохраняет под указанным именем новый файл списка устройств
//
//Параметры:
//	ИмяФайла - Строка - имя для нового файла списка устройств
//
Процедура ЗаписатьНовыйФайлСпискаУстройств(ИмяФайла) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Узел, соотвествующий этой базе
	ЗаписьXML.ЗаписатьНачалоЭлемента("Applications");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Owner");
	ЗаписьXML.ЗаписатьАтрибут("Code", ОбменМобильноеПриложение.ПолучитьЭтотУзел().Код);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Список мобильных устройств
	ЗаписьXML.ЗаписатьНачалоЭлемента("MobileApps");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
КонецПроцедуры
 

////////////////////////////////////////////////////////////////////////////////
// * Выгрузка данных

// Формирование пакетов обмена для выгрузки
// 	Процедура для указанного узла плана обмена выбирает изменения, проверяет их на соответствие настройкам
//	и добавляет в список объектов. Результат выгрузки (запись текста XML) помещается в выходной параметр "СообщениеОбмена"
//	Вслучае обшибки параметр Отказ устанавливается в Истина
//
// Параметры:
//  УзелИнформационнойБазы	– узел плана обмена "МобильноеПриложение", с которым осуществляется обмен
//	Описание других параметров см. в ОбменДаннымиПереопределяемый.ПриВыгрузкеДанных()
//
// Возвращаемое значение:
//  сформированный пакет, помещенный в хранилище значения
Процедура СформироватьПакетОбмена(УзелИнформационнойБазы, Отказ, ИмяФайлаСообщения,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции = 0,
								КлючСообщенияЖурналаРегистрации = "",
								КоличествоОбъектовОбработано = 0) Экспорт

	// Проверяем разрешение узла на выполнение обмена
	Если ЗначениеЗаполнено(УзелИнформационнойБазы) И ТипЗнч(УзелИнформационнойБазы) = Тип("ПланОбменаСсылка.МобильноеПриложение") И Не УзелИнформационнойБазы.Активность Тогда
		
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		ОписаниеПроблемы = НСтр("ru = 'Обмен с мобильным устройством запрещен'");
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ОписаниеПроблемы, УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(УзелИнформационнойБазы, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	
	// Формируем структуру, в которой будем передавать необходимые для обмена параметры
	ПараметрыОбмена = ПустаяСтруктураПараметровОбмена("ВыгрузкаДанных");
	
	
	// Заполняем параметры:
	ПараметрыОбмена.ТекстСообщения = ДанныеСообщения;
	ПараметрыОбмена.ИмяФайлаСообщения = ИмяФайлаСообщения;
	ПараметрыОбмена.ИспользоватьФайл = ЗначениеЗаполнено(ИмяФайлаСообщения);
	
	ПараметрыОбмена.МенеджерОбмена = ПланыОбмена.МобильноеПриложение;
	ДополнитьПараметрыУзламиПланаОбмена(ПараметрыОбмена, УзелИнформационнойБазы, Ложь);
	
	Если ПустаяСтрока(КлючСообщенияЖурналаРегистрации) Тогда
		КлючСообщенияЖурналаРегистрации = ПараметрыОбмена.КлючСообщенияЖурналаРегистрации;
	Иначе
		ПараметрыОбмена.КлючСообщенияЖурналаРегистрации = КлючСообщенияЖурналаРегистрации;
	КонецЕсли;
	
	ПараметрыОбмена.Вставить("СоответствиеРеквизитов", ОбменМобильноеПриложениеВызовСервераПовтИсп.СоответствиеРеквизитовЭтойБазы());
	
	// Получаем значение ресурса из Регистра сведений "ОбщиеНастройкиУзловИнформационныхБаз"
	НачальнаяВыгрузкаДанных = ОбменДаннымиСервер.УстановленПризнакНачальнойВыгрузкиДанных(УзелИнформационнойБазы);
	
	ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
			НСтр("ru = 'Формирование заголовков сообщения'"));
	// Определяем способ записи сообщения
	ЗаписьВФайл = Не ПустаяСтрока(ИмяФайлаСообщения);
	ЗаписьXML = Новый ЗаписьXML;
	Если ЗаписьВФайл Тогда
		ЗаписьXML.ОткрытьФайл(ИмяФайлаСообщения, "UTF-8");
	Иначе
		ЗаписьXML.УстановитьСтроку("UTF-8");
	КонецЕсли;
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Создаем новое сообщение планов обмена
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелИнформационнойБазы);
	
	// Добавляем определения
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8msg",  "http://v8.1c.ru/messages");
	
	// Определяем версию обмена
	ВерсияОбмена      = ПараметрыОбмена.СвойстваУзлаКорреспондента.ВерсияОбмена;
	Если Не ЗначениеЗаполнено(ВерсияОбмена) Тогда
		// По умолчанию назначаем минимально допустимую версию
		ВерсияОбмена = ОбменМобильноеПриложениеВызовСервера.МинимальноДопустимаяВерсияОбмена();
	КонецЕсли;
	ВерсияВыше131 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияОбмена + ".0", "1.3.1.0") >= 0;
	ВерсияВыше141 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияОбмена + ".0", "1.4.1.0") >= 0;
	ВерсияВыше161 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияОбмена + ".0", "1.6.1.0") >= 0;
	
	// Записываем в пакет настройки
	ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
			НСтр("ru = 'Запись настроек обмена'"));
	Попытка
	
		ОписаниеНастроек   = СоздатьОбъектXDTO("Settings");
		ОписаниеНастроек.IDMainAPP        = ПараметрыОбмена.КодЦентральнойБазы; // Идентификатор центральной базы
		ОписаниеНастроек.NumPeriods       = ПараметрыОбмена.СвойстваУзлаКорреспондента.КоличествоВыгружаемыхПериодов; 
		ОписаниеНастроек.PeriodType       = ПолучитьОбъектXDTOИзДанных(ПараметрыОбмена, ПараметрыОбмена.СвойстваУзлаКорреспондента.ВидВыгружаемогоПериода);
		ОписаниеНастроек.LimitWallets     = ПараметрыОбмена.СвойстваУзлаКорреспондента.ВыгружатьОперацииТолькоПоУказаннымКошелькам;
		ОписаниеНастроек.DateOfSending    = ?(ЗначениеЗаполнено(ПараметрыОбмена.СвойстваУзлаКорреспондента.ДатаПринятого), ПараметрыОбмена.СвойстваУзлаКорреспондента.ДатаПринятого, ТекущаяДатаСеанса());
		ТекущаяВерсияОбмена = ОбменМобильноеПриложениеВызовСервера.НомерВерсииОбмена();
		ОписаниеНастроек.VersionExchange  = ?(ПараметрыОбмена.СвойстваУзлаКорреспондента.ВерсияОбмена < ТекущаяВерсияОбмена, 
									ОбменМобильноеПриложениеВызовСервера.МинимальноДопустимаяВерсияОбмена(), ТекущаяВерсияОбмена);
		Если ПараметрыОбмена.СвойстваУзлаКорреспондента.ВыгружатьОперацииТолькоПоУказаннымКошелькам Тогда
			ОписаниеНастроек.WalletList = ФабрикаXDTO.Создать(ОписаниеНастроек.Свойства().Получить("WalletList").Тип);
			Для Каждого СтрокаКошелька Из ПараметрыОбмена.СвойстваУзлаКорреспондента.Кошельки Цикл
				ОписаниеНастроек.WalletList.Wallet.Добавить(ПолучитьОбъектXDTOИзДанных(ПараметрыОбмена, СтрокаКошелька));
			КонецЦикла; 
		КонецЕсли; 
		ЗатребованныйСценарий = ПараметрыОбмена.СвойстваУзлаКорреспондента.ЗатребованныйСценарий;
		ОписаниеНастроек.Script              = ?(ЗначениеЗаполнено(ЗатребованныйСценарий), ПолучитьОбъектXDTOИзДанных(ПараметрыОбмена, ЗатребованныйСценарий), "ОбъединениеДанных"); // Наименование сценария
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОписаниеНастроек);
	
		// Проверим кеш, используемый в режиме разделения данных
		ОбменДаннымиВызовСервера.ПроверитьКэшМеханизмаРегистрацииОбъектов();
		
		// Готовим структуру для кеширования выгружаемых объектов
		ТипДанныхУдаления = Тип("УдалениеОбъекта");
		СпискиВыгрузки = Новый Структура;
		СпискиВыгрузки.Вставить("УдалениеОбъектов",  СоздатьОбъектXDTO("ObjectDeletionList"));
		СпискиВыгрузки.Вставить("Константы",         СоздатьОбъектXDTO("ConstantList"));
		СпискиВыгрузки.Вставить("Справочники",       СоздатьОбъектXDTO("CatalogList"));
		СпискиВыгрузки.Вставить("Документы",         СоздатьОбъектXDTO("DocumentList"));
		СпискиВыгрузки.Вставить("РегистрыСведений",  СоздатьОбъектXDTO("InformationRegisterList"));
		Если ВерсияВыше141 Тогда
			СпискиВыгрузки.Вставить("РезультатыОбмена",  СоздатьОбъектXDTO("ErrorList"));
		КонецЕсли;
		
	Исключение
		
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		ПодробноеОписание = "";
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ИнформацияОбОшибке(), УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных, , , ПодробноеОписание);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатОтправкиДанных(УзелИнформационнойБазы, Перечисления.РезультатыВыполненияОбмена.Ошибка, ПодробноеОписание);
		Отказ = Истина;
		Возврат;
		
	КонецПопытки; 
	
	
	// Обработка изменений
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелИнформационнойБазы, ЗаписьСообщения.НомерСообщения);
	Попытка
		
		ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
				НСтр("ru = 'Выгрузка измененных объектов'"));
				
		Пока ВыборкаИзменений.Следующий() Цикл
			
			Данные = ВыборкаИзменений.Получить();
			
			КоличествоОбъектовОбработано = КоличествоОбъектовОбработано + 1;
			
			// Проверяем соответствие выгружаемых данных настройкам обмена
			Если НужноВыгружатьДанные(ПараметрыОбмена, Данные) Тогда
				ДобавитьВСписокОбъектXDTO(ПараметрыОбмена, СпискиВыгрузки, Данные);
				ПараметрыОбмена.СчетчикВыгруженныхОбъектов = ПараметрыОбмена.СчетчикВыгруженныхОбъектов + 1;
			КонецЕсли; 
			
		КонецЦикла;
		
		Если ВерсияВыше131 И ПараметрыОбмена.СписокПрикрепленныхФайлов.Количество() > 0 Тогда
			// Прикрепленные файлы выгружаются только для владельцев, с учетом ограничений по датам
			ДобавитьВСписокПрикрепленныеФайлы(ПараметрыОбмена, СпискиВыгрузки);
		КонецЕсли;
		
		
		//При необходимости добавляем в выгрузку "виртуальные" документы изменения остатков для формирования 
		//	остатков на начало и удаления документов, не входящих в выбранный период
		Если ПараметрыОбмена.СвойстваУзлаКорреспондента.КоличествоВыгружаемыхПериодов <> 0 Тогда
			
			// Формирование остатков на начало
			ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
					НСтр("ru = 'Выгрузка остатков на начало'"));
			ДобавитьОстаткиВСписокОбъектовXDTO(СпискиВыгрузки, ПараметрыОбмена);
			ДобавитьНеобновляемыеКурсыВалютВСписокОбъектовXDTO(СпискиВыгрузки, ПараметрыОбмена);
			
			Если ПараметрыОбмена.СписокУдаляемыхДокументов.Количество() > 0 Тогда
				
				// Удаление документов, не попавших в период выгрузи
				ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
						НСтр("ru = 'Удаление документов, не попавших в период хранения'"));
				Для каждого УдаляемыйДокумент Из ПараметрыОбмена.СписокУдаляемыхДокументов Цикл
					ДанныеДокумента = Новый УдалениеОбъекта(УдаляемыйДокумент);
					ДобавитьВСписокОбъектXDTO(ПараметрыОбмена, СпискиВыгрузки, ДанныеДокумента);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		
		// Записываем результаты обмена для передачи в мобильное приложение
		Если ВерсияВыше141 Тогда
			ДобавитьРезультатыОбмена(СпискиВыгрузки.РезультатыОбмена, УзелИнформационнойБазы);
		КонецЕсли;
		
		// Записываем список объектов
		ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
				НСтр("ru = 'Запись списков выгруженных объектов в сообщение'"));
		Для Каждого СписокВыгруженныхОбъектов Из СпискиВыгрузки Цикл
			
			Если СписокВыгруженныхОбъектов.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоЭлементов = 0;
			СвойстваКоллекции = СписокВыгруженныхОбъектов.Значение.Свойства();
			Если СвойстваКоллекции.Количество() > 0 Тогда
				КоличествоЭлементов = СписокВыгруженныхОбъектов.Значение[СвойстваКоллекции[0].Имя].Количество();
			КонецЕсли;
			
			Если КоличествоЭлементов > 0 Тогда
				ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, СписокВыгруженныхОбъектов.Значение);
			КонецЕсли;
			
		КонецЦикла; 
		
		// Завершаем запись сообщения
		ЗаписьСообщения.ЗакончитьЗапись();
		
		// Присваиваем результат выходному параметру
		ДанныеСообщения = ЗаписьXML.Закрыть();
		
	Исключение
		
		ЗаписьСообщения.ПрерватьЗапись();
		
		ЗаписьXML.Закрыть();
		
		ДанныеСообщения = Неопределено;
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		ПодробноеОписание = "";
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ИнформацияОбОшибке(), УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных, , , ПодробноеОписание);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатОтправкиДанных(УзелИнформационнойБазы, Перечисления.РезультатыВыполненияОбмена.Ошибка, ПодробноеОписание);
		Отказ = Истина;
		
		Возврат;
	КонецПопытки;
	
	ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
			НСтр("ru = 'Выгрузка изменений завершена без ошибок'"), Истина, Ложь);

КонецПроцедуры

// Формирует сообщение обмена и записывает его в указанный файл
//
// Параметры:
//  УзелКорреспондента	– узел плана обмена "МобильноеПриложение", с которым осуществляется обмен
//	ИмяФайла - Строка - наименование файла, в который нужно выгрузить данные
//	Отказ - Булево - Флаг отказа от продолжения после завершения этой процедуры
//	ОписаниеПроблемы - Строка - краткое описание причины отказа от дальнейшего выполнения аалгоритма
//
Процедура ВыполнитьВыгрузкуПакетаВФайл(УзелКорреспондента, ИмяФайла, Отказ = Ложь, ОписаниеПроблемы = "", Транспорт = Неопределено) Экспорт

	ТекущееДействие = НСтр("ru='Выгрузка изменений в файл для приложения %1'"); 
	ТекущееДействие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекущееДействие, Строка(УзелКорреспондента));
	ЭтапОбмена = "ВыгрузкаДанных";
	Транспорт       = ?(ЗначениеЗаполнено(Транспорт), Транспорт, Справочники.ТранспортыОбменаДанными.ПустаяСсылка());
	
	РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелКорреспондента, НСтр("ru='Выгрузка изменений'"));
	
	Попытка
	
		ОбменДаннымиСервер.ВыполнитьВыгрузкуДляУзлаИнформационнойБазыЧерезФайл("МобильноеПриложение", УзелКорреспондента.Код, ИмяФайла);
	
	Исключение
		
		Отказ = Истина;
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ИнформацияОбОшибке(), УзелКорреспондента, ЭтапОбмена, , , ОписаниеПроблемы);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатОтправкиДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
		Возврат;
		
	КонецПопытки; 
	
	РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатОтправкиДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Выполнено);
	
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		Отказ = Истина;
	КонецЕсли; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// * Зарузка данных

// Обработка полученного от узла пакета: загрузка данных и их изменений
Процедура ПринятьПакетОбмена(Отправитель, Отказ, ИмяФайлаСообщения = "",
								ДанныеСообщения = "",
								КоличествоЭлементовВТранзакции,
								КлючСообщенияЖурналаРегистрации,
								КоличествоПолученныхОбъектов,
								РезультатВыполненияОбмена) Экспорт

	
	ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Отправитель, Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
			НСтр("ru = 'Чтение XML'"));
	
	// Проверяем разрешение узла на выполнение обмена
	Если ЗначениеЗаполнено(Отправитель) И ТипЗнч(Отправитель) = Тип("ПланОбменаСсылка.МобильноеПриложение") И Не Отправитель.Активность Тогда
		
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		ОписаниеПроблемы = НСтр("ru = 'Обмен с мобильным устройством запрещен'");
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ОписаниеПроблемы, Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(Отправитель, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
			
	// Формируем структуру, в которой будем передавать необходимые для обмена параметры
	ПараметрыОбмена = ПустаяСтруктураПараметровОбмена("ЗагрузкаДанных");
	
	// Заполняем параметры:
	ПараметрыОбмена.ТекстСообщения    = ДанныеСообщения;
	ПараметрыОбмена.ИмяФайлаСообщения = ИмяФайлаСообщения;
	ПараметрыОбмена.ИспользоватьФайл  = ЗначениеЗаполнено(ИмяФайлаСообщения);
	
	ПараметрыОбмена.МенеджерОбмена = ПланыОбмена.МобильноеПриложение;
	ДополнитьПараметрыУзламиПланаОбмена(ПараметрыОбмена, Отправитель, Истина);
	
	ПараметрыОбмена.ИспользоватьТранзакции = Истина;
	ПараметрыОбмена.КоличествоЭлементовВТранзакции = Макс(КоличествоЭлементовВТранзакции, 10000);
	Если ПустаяСтрока(КлючСообщенияЖурналаРегистрации) Тогда
		КлючСообщенияЖурналаРегистрации = ПараметрыОбмена.КлючСообщенияЖурналаРегистрации;
	Иначе
		ПараметрыОбмена.КлючСообщенияЖурналаРегистрации = КлючСообщенияЖурналаРегистрации;
	КонецЕсли;
	
	ПараметрыОбмена.Вставить("СоответствиеРеквизитов", ОбменМобильноеПриложениеВызовСервераПовтИсп.СоответствиеРеквизитовЭтойБазы());
	
	РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(Отправитель, НСтр("ru='Чтение пакета'"));
	
	// Создаем чтение сообщения
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		
		ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
				НСтр("ru = 'Чтение XML'"));
		
		Если Не ПараметрыОбмена.ИспользоватьФайл Тогда
			ЧтениеXML.УстановитьСтроку(ПараметрыОбмена.ТекстСообщения);
		Иначе
			ЧтениеXML.ОткрытьФайл(ПараметрыОбмена.ИмяФайлаСообщения);
		КонецЕсли;
		
	Исключение
		
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		ПодробноеОписание = "";
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ИнформацияОбОшибке(), Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных, , , ПодробноеОписание);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(Отправитель, Перечисления.РезультатыВыполненияОбмена.Ошибка, ПодробноеОписание);
		Отказ = Истина;
		Возврат;
		
	КонецПопытки; 
	
	
	Попытка
	
		ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных, 
				НСтр("ru = 'Чтение настроек'"));
		
		ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
		ЧтениеСообщения.НачатьЧтение(ЧтениеXML, ДопустимыйНомерСообщения.Больший);
		ПараметрыОбмена.ЧтениеСообщения = ЧтениеСообщения;
		
		// Получаем списки объектов XDTO отдельно для каждого вида объектов
		Контейнеры = ПолучитьКонтейнерыОбъектовXDTO(ПараметрыОбмена);
	
	Исключение
	
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		ПодробноеОписание = "";
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ИнформацияОбОшибке(), Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных, , , ПодробноеОписание);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(Отправитель, Перечисления.РезультатыВыполненияОбмена.Ошибка, ПодробноеОписание);
		Отказ = Истина;
		Возврат;
		
	КонецПопытки; 
	
	ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных, 
			НСтр("ru = 'Проверка настроек'"));
	// Проверяем настройки обмена
	Если Контейнеры.Свойство("Settings") Тогда
		
		Настройки = Контейнеры.Settings; // контейнер с настройками
		ИДЦентральнойБазы = Настройки.IDMainAPP;  // Идентификатор базы, являющейся центральной
		Сценарий          = Настройки.Script;     // Сценарий обмена (Перечисление.СценарииОбменаСМобильнымПриложением)
		КоличествоПеридов = Настройки.NumPeriods; // Количество периодов хранения операций 
		ВидПериода        = ?(ЗначениеЗаполнено(Настройки.PeriodType), 
				Перечисления.Периодичность[Настройки.PeriodType], 
				Перечисления.Периодичность.День); // вид периода хранения операций ("День", "Неделя", "Месяц")
		ДатаПакета        = Настройки.DateOfSending; // Момент, в который был сформирован пакет
		ВерсияОбмена = Настройки.VersionExchange; // верися функционала обмена, с которой был создан принимаемый пакет
		ОграничиватьКошельками = Настройки.LimitWallets; // флаг ограничения остатков и операций кошельками
		Если ОграничиватьКошельками Тогда
			СписокКошельков = Новый Массив; // список кошельков, которыми нужно ограничивать операиции и остатки
			Для Каждого ОбъектКошелька Из Настройки.WalletList.Wallet Цикл
				СписокКошельков.Добавить(ПолучитьЭлементСправочникаИзXDTO(ОбъектКошелька, ПараметрыОбмена));
			КонецЦикла; 
		Иначе
			СписокКошельков = Неопределено;
		КонецЕсли; 
		
		НаименованиеУзла = ?(ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияОбмена + ".0", "1.1.0.0") >= 0, Настройки.Name, "");
		
		ПараметрыОбмена.СвойстваУзлаКорреспондента.МинимальнаяДатаУзлаКорреспондента = 
				ПолучитьМинимальнуюДатуХраненияДокументов(ПараметрыОбмена.СвойстваУзлаКорреспондента.КоличествоВыгружаемыхПериодов, 
								ПараметрыОбмена.СвойстваУзлаКорреспондента.ВидВыгружаемогоПериода, ДатаПакета);
		
		// Проверяем соответствие кода центральной базы
		ПравильныйКодЦБ = ОбменМобильноеПриложениеВызовСервера.ПолучитьКодЦентральнойБазы();
		Если ИДЦентральнойБазы <> "000" И ИДЦентральнойБазы <> ПравильныйКодЦБ Тогда
			
			Отказ = Истина;
			РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			
			//ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
			//	Отправитель.Метаданные(), Отправитель, НСтр("ru = 'Сообщение обмена не предназначено для этой базы (не совпадает код центральной базы).'",
			//	ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			ОписаниеПроблемы = НСтр("ru = 'Сообщение обмена не предназначено для этой базы (не совпадает код центральной базы).'");
			ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ОписаниеПроблемы, Отправитель, "ЗагрузкаДанных", , , ОписаниеПроблемы);
			РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(Отправитель, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
			
			Возврат;
			
		КонецЕсли; 
		
	Иначе
		
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		ОписаниеПроблемы = НСтр("ru = 'В сообщении обмена нет настроек (Settings)'");
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ОписаниеПроблемы, Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(Отправитель, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли; 
	
	// Если произошло восстановление из резервной копии, то номер принятого узлом сообщения будет больше номера сообщения, отправленного узлу
	ПараметрыРезервнойКопии = ОбменДаннымиСервер.ПараметрыРезервнойКопии(ПараметрыОбмена.ЧтениеСообщения.Отправитель, ПараметрыОбмена.ЧтениеСообщения.НомерПринятого);
	Если Не ПараметрыРезервнойКопии.ВосстановленаРезервнаяКопия Тогда
		
		// Удаляем регистрацию изменений для узла отправителя сообщения
		ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыОбмена.ЧтениеСообщения.Отправитель, ПараметрыОбмена.ЧтениеСообщения.НомерПринятого);
		РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.СнятьПризнакНачальнойВыгрузкиДанных(ПараметрыОбмена.ЧтениеСообщения.Отправитель, ПараметрыОбмена.ЧтениеСообщения.НомерПринятого);
		
	КонецЕсли;
	
	// Прверяем версию обмена данными
	Если ВерсияОбмена < ОбменМобильноеПриложениеВызовСервера.МинимальноДопустимаяВерсияОбмена() Тогда
		
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		ОписаниеПроблемы = НСтр("ru = 'Для выполнения синхронизации нужно обновить мобильное приложение'");
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ОписаниеПроблемы, Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(Отправитель, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли ВерсияОбмена > ОбменМобильноеПриложениеВызовСервера.НомерВерсииОбмена() Тогда
		
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		ОписаниеПроблемы = НСтр("ru = 'Для выполнения синхронизации нужно обновить настольное приложение'");
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ОписаниеПроблемы, Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(Отправитель, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли; 
	
	Если ПараметрыОбмена.ИспользоватьТранзакции Тогда
		// начинаем транзакцию
		НачатьТранзакцию();
	КонецЕсли;
	
	Действие = НСтр("ru = 'Предварительные действия по сценарию ""%1""'");
	Действие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Действие, Сценарий);
	ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных, Действие);
	Попытка
	
		// Прверяем сценарии обмена
		Сценарий = ?(ЗначениеЗаполнено(Сценарий), Перечисления.СценарииОбменаСМобильнымПриложением[Сценарий], Перечисления.СценарииОбменаСМобильнымПриложением.ОбъединениеДанных);
		ПараметрыОбмена.Вставить("Сценарий", Сценарий);
		
		// Если требуется полностью заменить данные настольной версии на данные мобильной то регистрация не нужна
		Если Сценарий = Перечисления.СценарииОбменаСМобильнымПриложением.НастольныеЗаменитьМобильными Тогда
			
			// Сценарий допустим только для пустой (заполненной по умолчанию) информационной базы
			Если Не ОбщегоНазначенияДеньги.ИнформационнаяБазаПустая() Тогда
				
				РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
				Отказ = Истина;
				ТекстСообщения = НСтр("ru='Настольная программа не пустая. Заменить ее данные данными мобильного приложения невозможно.'"); 
				ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ТекстСообщения, Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
				РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(Отправитель, Перечисления.РезультатыВыполненияОбмена.Ошибка, ТекстСообщения);
					
			КонецЕсли;
			
			// Очищаем все записи в базе, кроме предопределенных элементов, основных валют и 
			
			НачатьТранзакцию();
			// Удаляем дефолтные записи в справочниках, регистрах и константах
			ОчиститьСправочникиЗаполненныеПоУмолчанию();
			ОчиститьРегистрыСведений();
			ОчиститьКонстантыИНастройки();
			ЗафиксироватьТранзакцию();
			// Удаляем регистрацию всех изменений
			ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыОбмена.ЧтениеСообщения.Отправитель);
			
		ИначеЕсли Сценарий = Перечисления.СценарииОбменаСМобильнымПриложением.МобильныеЗаменитьНастольными ИЛИ
			(Сценарий = Перечисления.СценарииОбменаСМобильнымПриложением.ОбъединениеДанных И ИДЦентральнойБазы = "000") Тогда
			
			// В этом случае ничего не принимаем из мобильного приложения, но регистрируем все объекты для выгрузки
			ПараметрыОбмена.ВремяОкончанияОбмена = ТекущаяДатаСеанса();
			ЧтениеСообщения.ЗакончитьЧтение();
			Если ПараметрыОбмена.СвойстваУзлаКорреспондента.ЗатребованныйСценарий <> Сценарий Тогда
				УзелОбъект = ПараметрыОбмена.УзелКорреспондента.ПолучитьОбъект();
				УзелОбъект.ЗатребованныйСценарий = Сценарий;
				УзелОбъект.Записать();
			КонецЕсли; 
			
			ЗарегистрироватьВсеОбъектыДляУзлаОбмена(ПараметрыОбмена);
			
			ПроверитьОбновитьНастройкиУзла(ПараметрыОбмена.УзелКорреспондента, КоличествоПеридов, ВидПериода, ОграничиватьКошельками, 
						СписокКошельков, НаименованиеУзла, Сценарий, , ВерсияОбмена);
						
			Если Сценарий = Перечисления.СценарииОбменаСМобильнымПриложением.МобильныеЗаменитьНастольными Тогда
				Если ТранзакцияАктивна() Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли; 
				Возврат;
			КонецЕсли; 
			
		Иначе
			
			Если ЗначениеЗаполнено(ПараметрыОбмена.УзелКорреспондента) И ВерсияОбмена <> "" И ВерсияОбмена <> ПараметрыОбмена.УзелКорреспондента.ВерсияОбмена Тогда
				ПриИзмененииВерсииОбменаНаУзле(ПараметрыОбмена.УзелКорреспондента, ПараметрыОбмена.УзелКорреспондента.ВерсияОбмена, ВерсияОбмена);
			КонецЕсли;
			
		КонецЕсли; 
		
	
	Исключение
	
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		Отказ = Истина;
		ПодробноеОписание = "";
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ИнформацияОбОшибке(), Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных, , , ПодробноеОписание);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(Отправитель, Перечисления.РезультатыВыполненияОбмена.Ошибка, ПодробноеОписание);
			
	КонецПопытки; 
	
	
	
	Попытка
		
		//Загрузка справочников
		ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
				НСтр("ru = 'Загрузкра справочников'"));
		Если Контейнеры.Свойство("CatalogList") Тогда
			
			ПрочитатьСправочникиXDTO(ПараметрыОбмена, Контейнеры.CatalogList);
			
			// Проверка замененных ссылок
			ПроверитьСопоставленныеСсылки(ПараметрыОбмена);
			
		КонецЕсли; 
		
		//Обновление констант
		ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
				НСтр("ru = 'Обновление констант'"));
		Если Контейнеры.Свойство("ConstantList") Тогда
			ПрочитатьКонстантыXDTO(ПараметрыОбмена, Контейнеры.ConstantList);
		КонецЕсли; 
		
		//Загрузка регистров сведений
		ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
				НСтр("ru = 'Загрузка регистров сведений'"));
		Если Контейнеры.Свойство("InformationRegisterList") Тогда
			ПрочитатьРегистрыСведенийXDTO(ПараметрыОбмена, Контейнеры.InformationRegisterList);
		КонецЕсли; 

		//Загрузка документов
		ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
				НСтр("ru = 'Загрузкра операций'"));
		Если Контейнеры.Свойство("DocumentList") Тогда
			ПрочитатьДокументыXDTO(ПараметрыОбмена, Контейнеры.DocumentList);
		КонецЕсли; 

		//Загрузка удаляемых объектов
		ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
				НСтр("ru = 'Чтение информации об удаленных объектах'"));
		Если Контейнеры.Свойство("ObjectDeletionList") Тогда
			ПрочитатьУдаленияXDTO(ПараметрыОбмена, Контейнеры.ObjectDeletionList);
		КонецЕсли; 
		
		
		ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Отправитель,Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
				НСтр("ru = 'Завершение чтения сообщения'"));
		НомерСообщения = ЧтениеСообщения.НомерСообщения;
		ЧтениеСообщения.ЗакончитьЧтение();
		ЧтениеXML.Закрыть();
		
		//Регистрация загруженных изменений
		РегистрыСведений.ИзмененияОбъектовВоВнешнихПрограммах.УдалитьРегистрацииУзла(Отправитель, НомерСообщения - 3);
		Для каждого Объект Из ПараметрыОбмена.ЗагруженныеОбъекты Цикл
			РегистрыСведений.ИзмененияОбъектовВоВнешнихПрограммах.ЗарегистрироватьИзменениеОбъекта(Объект, Отправитель, НомерСообщения);
		КонецЦикла;
		 
		ПроверитьОбновитьНастройкиУзла(ПараметрыОбмена.УзелКорреспондента, КоличествоПеридов, ВидПериода, ОграничиватьКошельками, СписокКошельков, 
						НаименованиеУзла, Сценарий, ДатаПакета, ВерсияОбмена);
						
		КоличествоПолученныхОбъектов = ПараметрыОбмена.СчетчикЗагруженныхОбъектов;
		
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
	
		Отказ = Истина;
		Ошибка = ИнформацияОбОшибке();
		
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		ПодробноеОписание = "";
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(Ошибка, Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных, , , ПодробноеОписание);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(Отправитель, Перечисления.РезультатыВыполненияОбмена.Ошибка, ПодробноеОписание);
		
		Если ПараметрыОбмена.ИспользоватьТранзакции И ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Возврат;
		
	КонецПопытки; 
	
	
	// Выполняем отложенную обработку прочитанных объектов
	Попытка
		
		Если Сценарий = Перечисления.СценарииОбменаСМобильнымПриложением.НастольныеЗаменитьМобильными Тогда
			
			// Сначала обновлям настройки и курсы валюты
			ВалютаУчета = Константы.ВалютаУчета.Получить();
			Если ВалютаУчета <> ПараметрыСеанса.ВалютаУчета Тогда
				Константы.ВалютаУчета.Установить(ВалютаУчета);
			КонецЕсли;
			Константы.ОсновнойВариантБюджета.Установить(Справочники.ВариантыБюджетов.БазовыйВариант);
			
		КонецЕсли;
		
		ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
				НСтр("ru = 'Учет загруженных операций'"));
		ПерепровестиЗагруженныеДокументы(ПараметрыОбмена);
		ПрочитатьПоказателиПлановыхОперацийXDTO(ПараметрыОбмена);
		ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
				НСтр("ru = 'Обновление связанных данных'"));
		ОбновитьСвязанныеДанныеОбъектов(ПараметрыОбмена);
		БюджетированиеСервер.ОбновитьВсеКлючиСтатейБюджета();
	
		Если Сценарий = Перечисления.СценарииОбменаСМобильнымПриложением.НастольныеЗаменитьМобильными Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Отправитель);
		КонецЕсли;
		
	Исключение
		
		Отказ = Истина;
		Ошибка = ИнформацияОбОшибке();
		
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		ПодробноеОписание = "";
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(Ошибка, Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных, , , ПодробноеОписание);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(Отправитель, Перечисления.РезультатыВыполненияОбмена.Ошибка, ПодробноеОписание);
		
		Возврат;
		
	КонецПопытки; 
	
	// Фиксируем завершение обмена
	ПараметрыОбмена.ВремяОкончанияОбмена = ТекущаяДатаСеанса();
	ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Отправитель, Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
			НСтр("ru = 'Загрузка сообщения завершена без ошибок'"), Истина, Ложь);
	РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(Отправитель, Перечисления.РезультатыВыполненияОбмена.Выполнено);
	
КонецПроцедуры

// Выполняет чтение пакета из указанного файла. Предварительно проверяет настройки,
//	при необходимости создает узел плана обмена
Процедура ВыполнитьЧтениеПакетаИзФайла(ИмяФайла, УзелКорреспондента, Отказ = Ложь, ОписаниеПроблемы = "", Транспорт = Неопределено) Экспорт

	// Вспомогательные переменные
	Отказ             = Ложь; // флаг запрета на продолжение работы после завершения этой процедуры
	ОписаниеПроблемы  = "";   // Текст с описанием проблемы. Имеет смысл, если Отказ = Истина
	ЭтапОбмена = "ЗагрузкаДанных";
	//КлючЗаписиЖурнала = НСтр("ru = 'Загрузка файла из мобильного приложения'");
	ТекущееДействие   = "";   // Описание текущего действия, с которым будет сделана запись в журнал регистрации в случае возникновения исключительной ситуации
	Транспорт         = ?(ЗначениеЗаполнено(Транспорт), Транспорт, Справочники.ТранспортыОбменаДанными.ПустаяСсылка());
	
	Попытка
		
		ТекущееДействие = НСтр("ru = 'Чтение пакета из файла'"); 
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		ЧтениеXML.Прочитать();
		
		ТекущееДействие = НСтр("ru = 'Проверка настроек мобильного приложения'"); 
		Контейнер = Неопределено;
		Настройки = Неопределено;
		Заголовок = Неопределено;
		
		Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
			
			Контейнер = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, 
					ФабрикаXDTO.Тип(ЧтениеXML.URIПространстваИмен, ЧтениеXML.ЛокальноеИмя));
			
			Если Контейнер = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			Заголовок = Контейнер.header;
			Настройки = Контейнер.body.settings;
			Прервать;
			
		КонецЦикла;  
		
		ИДМобильногоПриложения = Контейнер.header.From;
		ЧтениеXML.Закрыть();
		ЭтоПерваяСинхронизация = Настройки.Script <> "ОбъединениеДанных";
		
		ЭтотУзел = ПолучитьЭтотУзел();
		Если ЭтотУзел.Код <> Настройки.IDMainAPP Тогда
			
			Если (Настройки.IDMainAPP = "000" ИЛИ Настройки.IDMainAPP = "") И Контейнер.header.To = "000" Тогда
				// Первое соединение устройства. Автоматически добавляем узел и обновляем настройки
				ЭтоПерваяСинхронизация = Истина;
				
				ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
				Текст = ЧтениеТекста.Прочитать();
				ЧтениеТекста.Закрыть();
				Текст = СтрЗаменить(Текст, "<v8msg:To>000</v8msg:To>", "<v8msg:To>" + ЭтотУзел.Код + "</v8msg:To>");
				//Текст = СтрЗаменить(Текст, "<IDMainAPP>000</IDMainAPP>", "<IDMainAPP>" + ЭтотУзел.Код + "</IDMainAPP>");
				ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
				ЗаписьТекста.Записать(Текст);
				ЗаписьТекста.Закрыть();
				
			Иначе
				
				// Файл не предназначен для этой базы
				ТекстСообщения = НСтр("ru = 'Данный файл не предназначен для загрузки в эту базу'");
				ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ТекстСообщения, Неопределено, ЭтапОбмена, , , ОписаниеПроблемы);
				Отказ = Истина;
				//ДеньгиВызовСервера.ЗаписатьОшибкуДействияВЖурналРегистрации(КлючЗаписиЖурнала, ТекущееДействие, 
				//		НСтр("ru = 'Данный файл не предназначен для загрузки в эту базу'"), 
				//		Отказ, ОписаниеПроблемы);
				Возврат;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		ВерсияОбмена = Настройки.VersionExchange;
		НаименованиеКорреспондента = ?(ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияОбмена + ".0", "1.1.0.0") >= 0, Настройки.Name, "");
		
		УзелКорреспондента = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(ИДМобильногоПриложения);
		Если УзелКорреспондента.Пустая() Тогда
			
			Узел = ПланыОбмена.МобильноеПриложение.СоздатьУзел();
			Узел.Код           = ИДМобильногоПриложения;
			Узел.Наименование  = ?(НаименованиеКорреспондента = "", НСтр("ru='Мобильное приложение'"), НаименованиеКорреспондента);
			Узел.Активность    = Истина;
			Узел.Записать();
			УзелКорреспондента = Узел.Ссылка;
			
		ИначеЕсли ЭтоПерваяСинхронизация Тогда
			
			Узел = УзелКорреспондента.ПолучитьОбъект();
			Узел.НомерПринятого = 0;
			Узел.НомерОтправленного = 0;
			Узел.Записать();
			
		КонецЕсли; 
		
		// Проверяем разрешение узла на выполнение обмена
		Если ЗначениеЗаполнено(УзелКорреспондента) И ТипЗнч(УзелКорреспондента) = Тип("ПланОбменаСсылка.МобильноеПриложение") И Не УзелКорреспондента.Активность Тогда
			ОписаниеПроблемы = НСтр("ru='Обмен с мобильным устройством запрещен'"); 
			ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ОписаниеПроблемы, УзелКорреспондента, ЭтапОбмена, , , ОписаниеПроблемы);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		// Проверяем доступность узла для выполнения обмена
		КонкурирующийСеанс = 0;
		Если НЕ РегистрыСведений.КонтрольОбменаДанными.УзелДляОбменаДоступен(УзелКорреспондента, Транспорт, ОписаниеПроблемы, КонкурирующийСеанс) Тогда
			ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ОписаниеПроблемы, УзелКорреспондента, ЭтапОбмена, , , ОписаниеПроблемы);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		// Фиксируем начало обмена в данном сеансе
		Если КонкурирующийСеанс = 0 Тогда // Для узла еще не зафиксировали начало обмена
			РегистрыСведений.КонтрольОбменаДанными.УстановитьНачалоОбмена(УзелКорреспондента, Транспорт);
		КонецЕсли;
		
		// Проверка сценария
		СценарийОбмена = Настройки.Script;
		Если СценарийОбмена = "НастольныеЗаменитьМобильными" Тогда
			
			Если Не ОбщегоНазначенияДеньги.ИнформационнаяБазаПустая() Тогда
				
				ОписаниеПроблемы = НСтр("ru='Настольная программа не пустая. Заменить ее данные данными мобильного приложения невозможно.'"); 
				ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ОписаниеПроблемы, УзелКорреспондента, ЭтапОбмена, , , ОписаниеПроблемы);
				Отказ = Истина;
					
				// Фиксируем ошибку обмена с узлом
				РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
				
				Возврат;
				
			КонецЕсли;
			
			
		ИначеЕсли СценарийОбмена <> "МобильныеЗаменитьНастольными" И СценарийОбмена <> "ОбъединениеДанных" Тогда
			
			ОписаниеПроблемы = НСтр("ru = 'Указан неверный сценарий обмена данными с приложением %1'") ;
			ОписаниеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеПроблемы, УзелКорреспондента);
			ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ОписаниеПроблемы, УзелКорреспондента, ЭтапОбмена, , , ОписаниеПроблемы);
			Отказ = Истина;
			
			// Фиксируем ошибку обмена с узлом
			РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
			
			Возврат;
			
		КонецЕсли; 
		
		РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелКорреспондента, "Чтение пакета");
		
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
		ОбменДаннымиСервер.ВыполнитьЗагрузкуДляУзлаИнформационнойБазыЧерезСтроку("МобильноеПриложение", ИДМобильногоПриложения, ЧтениеТекста.Прочитать());
		ЧтениеТекста.Закрыть();
		
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Выполнено);
		
	Исключение
		
		Информация = ИнформацияОбОшибке();
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(Информация, УзелКорреспондента, ЭтапОбмена, , , ОписаниеПроблемы);
		Отказ = Истина;
		
		Если ЗначениеЗаполнено(УзелКорреспондента) Тогда
			// Фиксируем ошибку обмена с узлом
			РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
		КонецЕсли;
		 
		Возврат;
	
	КонецПопытки; 

	// Удаление файла
	Попытка
	
		ТекущееДействие = НСтр("ru = 'Удаление принятого файла сообщения'"); 
		Файл = Новый Файл(ИмяФайла);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ИмяФайла);
		КонецЕсли; 
	
	Исключение
	
		Информация = ИнформацияОбОшибке();
		Отказ = Истина;
		//ДеньгиВызовСервера.ЗаписатьОшибкуДействияВЖурналРегистрации(КлючЗаписиЖурнала, ТекущееДействие, Информация, Отказ, ОписаниеПроблемы);
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(Информация, УзелКорреспондента, ЭтапОбмена, , , ОписаниеПроблемы);
		
	КонецПопытки; 
	
КонецПроцедуры

// Сравнивает и при необходимости обновляет настройки обмена для узла плана обмена
Процедура ПроверитьОбновитьНастройкиУзла(Узел, КоличествоПериодов, ВидПериода, ОграничиватьКошельками, СписокКошельков = Неопределено, Наименование = Неопределено, ЗатребованныйСценарий = Неопределено, ДатаВыгрузкиИзУзла = Неопределено, ВерсияОбмена = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Узел, "Наименование,КоличествоВыгружаемыхПериодов,ВидВыгружаемогоПериода,
										|ВыгружатьОперацииТолькоПоУказаннымКошелькам,ЗатребованныйСценарий,ДатаПринятого,
										|ВерсияОбмена,Кошельки");
	ТекущиеКошельки = Настройки.Кошельки.Выгрузить().ВыгрузитьКолонку("Кошелек");
	Если Не ЗначениеЗаполнено(ВидПериода) Тогда
		ЗначениеВидаПериода = Перечисления.Периодичность.День;
	ИначеЕсли ТипЗнч(ВидПериода) = тип("Строка") Тогда
		ЗначениеВидаПериода = Перечисления.Периодичность[ВидПериода];
	Иначе
		ЗначениеВидаПериода = ВидПериода;
	КонецЕсли; 
	
	РегистрироватьПоКошелькам = Настройки.ВыгружатьОперацииТолькоПоУказаннымКошелькам <> ОграничиватьКошельками 
		ИЛИ СписокКошельков <> Неопределено И ТекущиеКошельки.Количество() <> СписокКошельков.Количество();
	
	НужноОбновлять = Настройки.КоличествоВыгружаемыхПериодов <> КоличествоПериодов
			ИЛИ Настройки.ВидВыгружаемогоПериода <> ЗначениеВидаПериода
			ИЛИ Настройки.ВыгружатьОперацииТолькоПоУказаннымКошелькам <> ОграничиватьКошельками
			ИЛИ Наименование <> Неопределено И Наименование <> Настройки.Наименование
			ИЛИ ЗатребованныйСценарий <> Неопределено И ЗатребованныйСценарий <> Настройки.ЗатребованныйСценарий
			ИЛИ СписокКошельков <> Неопределено И ТекущиеКошельки.Количество() <> СписокКошельков.Количество()
			ИЛИ ДатаВыгрузкиИзУзла <> Неопределено И ДатаВыгрузкиИзУзла <> Настройки.ДатаПринятого
			ИЛИ ВерсияОбмена <> Неопределено И ВерсияОбмена <> Настройки.ВерсияОбмена;
	
	Если НЕ НужноОбновлять Тогда
		Для Каждого Кошелек Из ТекущиеКошельки Цикл
			Если СписокКошельков.Найти(Кошелек) = Неопределено Тогда
				НужноОбновлять = Истина;
				РегистрироватьПоКошелькам = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 

	Если НужноОбновлять Тогда
		
		// Проверим необходимость зарегистрировать документы при увеличении срока хранения или при изменении состава кошельков:
		ДатаПринятого = ?(ДатаВыгрузкиИзУзла <> Неопределено, ДатаВыгрузкиИзУзла, ?(ЗначениеЗаполнено(Настройки.ДатаПринятого), Настройки.ДатаПринятого, ТекущаяДатаСеанса()));
		НоваяМинимальнаяДата   = ПолучитьМинимальнуюДатуХраненияДокументов(КоличествоПериодов, ЗначениеВидаПериода, ДатаПринятого);
		НоваяМинимальнаяДата   = ?(НоваяМинимальнаяДата = Неопределено, '00010101', НоваяМинимальнаяДата);
		
		Если РегистрироватьПоКошелькам Тогда
			ТекущаяМинимальнаяДата   = КонецДня(ТекущаяДатаСеанса());
		Иначе
			ТекущаяМинимальнаяДата = ПолучитьМинимальнуюДатуХраненияДокументов(Настройки.КоличествоВыгружаемыхПериодов, Настройки.ВидВыгружаемогоПериода, ДатаПринятого);
			ТекущаяМинимальнаяДата = ?(ТекущаяМинимальнаяДата = Неопределено, '00010101', ТекущаяМинимальнаяДата);
		КонецЕсли; 
		
		Если ТекущаяМинимальнаяДата > НоваяМинимальнаяДата И ЗатребованныйСценарий <> Перечисления.СценарииОбменаСМобильнымПриложением.МобильныеЗаменитьНастольными Тогда
			ЗарегистрироватьДляОтправкиОперацииЗаПериод(Узел, НоваяМинимальнаяДата, ТекущаяМинимальнаяДата);
		КонецЕсли; 
		
		УзелОбъект = Узел.ПолучитьОбъект();
		УзелОбъект.Наименование    = ?(ЗначениеЗаполнено(Наименование), Наименование, УзелОбъект.Наименование);
		УзелОбъект.ДатаПринятого   = ДатаПринятого;
		УзелОбъект.КоличествоВыгружаемыхПериодов = КоличествоПериодов;
		УзелОбъект.ВидВыгружаемогоПериода        = ЗначениеВидаПериода;
		УзелОбъект.ВыгружатьОперацииТолькоПоУказаннымКошелькам = ОграничиватьКошельками;
		УзелОбъект.ЗатребованныйСценарий = ?(ЗатребованныйСценарий = Неопределено, УзелОбъект.ЗатребованныйСценарий, ЗатребованныйСценарий);
		УзелОбъект.Кошельки.Очистить();
		Если ОграничиватьКошельками Тогда
			Для Каждого ЭлементМассива Из СписокКошельков Цикл
				СтрокаКошелька = УзелОбъект.Кошельки.Добавить();
				СтрокаКошелька.Кошелек = ЭлементМассива;
			КонецЦикла; 
		КонецЕсли; 
		Если ВерсияОбмена <> Неопределено И УзелОбъект.ВерсияОбмена <> ВерсияОбмена Тогда
			УзелОбъект.ВерсияОбмена = ВерсияОбмена;
		КонецЕсли;
		УзелОбъект.Записать();
		
	КонецЕсли; 
	
КонецПроцедуры

// Сохраняет сообщение в регистре сведений СообщенияМобильныхПриложений для его асинхронной обработки
//	или обработки по условиям. Например, обработка пакета может быть оложена для получения 
//	интерактивного подтверждения пользователя
//
//Параметры:
//  УзелПланаОбмена	– узел плана обмена "МобильноеПриложение", с которым осуществляется обмен
//	СообщениеОбмена  - ХранилищеЗначения или Строка - содержимое пакета обмена
//	НомерСообщения  - Число - номер полученного сообщения
//	Сценарий 		- Строка или СправочникСсылка.СценарииОбменаСМобильнымПриложением - сценарий, с которым получено сообщение
//
Процедура СохранитьСообщениеДляОтложеннойОбработки(УзелПланаОбмена, СообщениеОбмена, НомерСообщения, Сценарий) Экспорт

	ЗаписьРегистра = РегистрыСведений.СообщенияМобильныхПриложений.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.УзелПланаОбмена = УзелПланаОбмена;
	ЗаписьРегистра.НомерСообщения = НомерСообщения;
	Если ТипЗнч(СообщениеОбмена) = Тип("ХранилищеЗначения") Тогда
		ЗаписьРегистра.Сообщение = СообщениеОбмена;
	Иначе
		ЗаписьРегистра.Сообщение = Новый ХранилищеЗначения(СообщениеОбмена, Новый СжатиеДанных(9));
	КонецЕсли; 
	Если ТипЗнч(Сценарий) = Тип("Строка") Тогда
		ЗаписьРегистра.СценарийОбмена = Перечисления.СценарииОбменаСМобильнымПриложением[Сценарий];
	Иначе
		ЗаписьРегистра.СценарийОбмена = Сценарий;
	КонецЕсли; 
	ЗаписьРегистра.Записать(Истина);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// * Обмен данными по сценариям

// Возвращает структуру, заполненную настройками обмена
//
// Параметры:
//	ТранспортОбмена - СправочникСсылка.ТранспортыОбменаДанными - транспорт, используемый в обмене
// 
// Возвращаемое значение:
//  Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
//
Функция СтруктураНастроекОбменаДанными(ТранспортОбмена) Экспорт

	СтруктураНастроекОбмена = СтруктураНастроекОбменаБазовая(ТранспортОбмена);
	
	СтруктураНастроекОбмена.ВидТранспортаОбмена    = СтруктураНастроекОбмена.НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию;
	
	// Инициализируем значения настроек
	СтруктураНастроекОбмена.НастройкаВыполненияОбмена             = Неопределено;
	СтруктураНастроекОбмена.НастройкаВыполненияОбменаНаименование = "";
	
	СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных = Истина;
	СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных = Истина;
	
	СтруктураНастроекОбмена.ИмяПланаОбмена = "МобильноеПриложение";
	СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов = Ложь;
	
	СтруктураНастроекОбмена.ТекущийУзелПланаОбмена    = ПолучитьЭтотУзел();
	СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод = СокрЛП(СтруктураНастроекОбмена.ТекущийУзелПланаОбмена.Код);
	
	Если ЗначениеЗаполнено(СтруктураНастроекОбмена.ВидТранспортаОбмена) Тогда
		
		//СтруктураНастроекОбмена.ИмяОбработкиТранспортаСообщенийОбмена = ОбменДаннымиСервер.ИмяОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена.ВидТранспортаОбмена);
		СтруктураНастроекОбмена.ИмяОбработкиТранспортаСообщенийОбмена = "ТранспортОбменаСообщенийОблачныйФайловыйСервис";
		
		// создаем обработку транспорта
		ОбработкаТранспортаСообщенийОбмена = Обработки[СтруктураНастроекОбмена.ИмяОбработкиТранспортаСообщенийОбмена].Создать();
		
		// заполняем настойки транспорта, различные для каждой обработки транспорта
		ЗаполнитьЗначенияСвойств(ОбработкаТранспортаСообщенийОбмена, СтруктураНастроекОбмена.НастройкиТранспорта);
		ОбработкаТранспортаСообщенийОбмена.КлючСообщенияЖурналаРегистрации = СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации;
		
		// Инициализируем транспорт
		ОбработкаТранспортаСообщенийОбмена.Инициализация();
		
		СтруктураНастроекОбмена.Вставить("ОбработкаТранспортаСообщенийОбмена", ОбработкаТранспортаСообщенийОбмена);
		
	КонецЕсли; 

	Возврат СтруктураНастроекОбмена;
	
КонецФункции

Процедура ВыполнитьОбменДаннымиПоСценариюТранспортаОбмена(ТранспортОбмена) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	// Проверяем доступность обмена для всей программы
	ОбменДаннымиСервер.ПроверитьИспользованиеОбменаДанными();
	// Проверяем доступность обмена по выбранному транспорту
	ПроверитьИспользованиеТранспорта(ТранспортОбмена);
	
	// Получаем настройки для использования в БСП
	СтруктураНастроекОбмена = СтруктураНастроекОбменаДанными(ТранспортОбмена);
	НастройкиТранспорта     = СтруктураНастроекОбмена.НастройкиТранспорта;
	
	// В текущей версии фоновый обмен возможен только с облачными провайдерами
	Если Не Справочники.ТранспортыОбменаДанными.ЭтоОблачныйТранспорт(ТранспортОбмена) Тогда
		
		ТекстОписания = СтрШаблон(НСтр("ru = 'В текущей версии фоновая синхронизация с использованием %1 не предусмотрена'"),  НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию);
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ТекстОписания, Неопределено, "ЗагрузкаДанных", НастройкиТранспорта, , );
		Возврат;
		
	КонецЕсли;
	
	Если Не РегистрыСведений.КонтрольТранспортовОбмена.УстановитьНачалоРаботыТранспорта(ТранспортОбмена, НСтр("ru='Проверка транспорта'")) Тогда
		
		ТекстОписания = СтрШаблон(НСтр("ru = 'В данный момент транспорт %1 недоступен. Возможно, он используется в фоновом задании или в другом сеансе'"),  ТранспортОбмена);
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ТекстОписания, Неопределено, "ЗагрузкаДанных", НастройкиТранспорта, , );
		Возврат;
		
	КонецЕсли;
	
	// фиксация начала обмена 
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	СтруктураНастроекОбмена.ДатаНачала                = ТекущаяДатаСеанса();
	СтруктураНастроекОбмена.ДействиеПриОбмене         = Перечисления.ДействияПриОбмене.ЗагрузкаДанных;
	
	// проверка соединения с трансопортом и заполнение массива "СписокКодовУстройств"
	ПроверитьСоединениеСТранспортом(СтруктураНастроекОбмена);
	Если НЕ ДействиеОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		ЗавершитьИспользованиеОблачногоТранспорта(СтруктураНастроекОбмена);
		Возврат;
	КонецЕсли;
	
	// Получаем пакет с изменениями от мобильного приложения
	ПолучитьСообщенияИзТранспортаОбмена(СтруктураНастроекОбмена);
	Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения Тогда
		ЗавершитьИспользованиеОблачногоТранспорта(СтруктураНастроекОбмена, Истина);
		Возврат; // если с транпортом проблемы, продолжать не имеет смысла
	КонецЕсли;
	
	// Выполняем отправку ответных сообщений узлам, зарегистрированным в обмене указанным транспортом
	ОтправитьСообщенияТранспортомОбмена(СтруктураНастроекОбмена);
	
	// удаляем временные каталоги и фиксируем в ЖР лог по обмену данными
	ЗавершитьИспользованиеОблачногоТранспорта(СтруктураНастроекОбмена, Истина, 
			СтруктураНастроекОбмена.РезультатВыполненияОбмена <> Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения);

КонецПроцедуры


#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Возвращает имя файла сообщения обмена данными по данным узла-отправителя и узла-получателя.
//
// ДЕНЬГИ
//Функция ИмяФайлаСообщенияОбмена(КодУзлаОтправителя, КодУзлаПолучателя)
Функция ИмяФайлаСообщенияОбмена(КодУзлаОтправителя, КодУзлаПолучателя) Экспорт
	
	ШаблонИмени = "[Префикс]_[УзелОтправитель]_[УзелПолучатель]";
	
	ШаблонИмени = СтрЗаменить(ШаблонИмени, "[Префикс]",         "Message");
	ШаблонИмени = СтрЗаменить(ШаблонИмени, "[УзелОтправитель]", КодУзлаОтправителя);
	ШаблонИмени = СтрЗаменить(ШаблонИмени, "[УзелПолучатель]",  КодУзлаПолучателя);
	
	Возврат ШаблонИмени;
КонецФункции

Функция ИмяФайлаОтчетаОПолучении(КодУзлаОтправителя, КодУзлаПолучателя) Экспорт
	
	Возврат СтрШаблон("resRead_%1_from_%2", КодУзлаОтправителя, КодУзлаПолучателя);
	
КонецФункции

Функция ИмяФайлаОтчетаОБОтправке(КодУзлаОтправителя, КодУзлаПолучателя) Экспорт
	
	Возврат СтрШаблон("resSend_%1_from_%2", КодУзлаОтправителя, КодУзлаПолучателя);
	
КонецФункции

// Возвращает объектXDTO указанного типа.
//
Функция СоздатьОбъектXDTO(ТипОбъекта, ЗначениеОбъекта = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ОбменМобильноеПриложениеВызовСервераПовтИсп.URIПространстваИмен(), ТипОбъекта), ЗначениеОбъекта);
	                   
КонецФункции

// Обход ошибки определения ИдентификаторКлиента мобильной платформой
// находит узел с указанным наименованием, обмен с которым был последним
Функция УзелПоследнегоОбменаСУказаннымНаименованием(НаименованиеУзла) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", НаименованиеУзла);
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.МобильноеПриложение.ЭтотУзел());
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Статистика.Ссылка,
	|	Статистика.ДатаНачала КАК ДатаНачала
	|ИЗ
	|	(ВЫБРАТЬ
	|		МобильноеПриложение.Ссылка КАК Ссылка,
	|		МАКСИМУМ(СостоянияОбменовДанными.ДатаНачала) КАК ДатаНачала
	|	ИЗ
	|		ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
	|			ПО МобильноеПриложение.Ссылка = СостоянияОбменовДанными.УзелИнформационнойБазы
	|	ГДЕ
	|		МобильноеПриложение.Наименование = &Наименование
	|		И НЕ МобильноеПриложение.ПометкаУдаления
	|		И МобильноеПриложение.Активность
	|	
	|	СГРУППИРОВАТЬ ПО
	|		МобильноеПриложение.Ссылка) КАК Статистика
	|ГДЕ
	|	Статистика.Ссылка <> &ЭтотУзел
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ПланыОбмена.МобильноеПриложение.ПустаяСсылка();
	КонецЕсли; 

КонецФункции
// Конец Обход ошибки определения ИдентификаторКлиента мобильной платформой


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// * Вспомогательный функционал по обмену данными

Процедура ДополнитьПараметрыУзламиПланаОбмена(ПараметрыОбмена, УзелКорреспондента, ЭтоЗагрузка)

	ПараметрыОбмена.ЭтотУзел = ПолучитьЭтотУзел();
	ПараметрыОбмена.УзелКорреспондента = УзелКорреспондента;

	Если ЗначениеЗаполнено(УзелКорреспондента) Тогда
		ПараметрыОбмена.СвойстваУзлаКорреспондента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УзелКорреспондента, 
					"Код,Наименование,КоличествоВыгружаемыхПериодов,ВидВыгружаемогоПериода,ДатаПринятого,ВерсияОбмена,
					|ВыгружатьОперацииТолькоПоУказаннымКошелькам,Активность,ЗатребованныйСценарий,ПользовательМобильногоУстройства");
		ПараметрыОбмена.СвойстваУзлаКорреспондента.Вставить("МинимальнаяДатаУзлаКорреспондента", 
				ПолучитьМинимальнуюДатуХраненияДокументов(ПараметрыОбмена.СвойстваУзлаКорреспондента.КоличествоВыгружаемыхПериодов, 
						ПараметрыОбмена.СвойстваУзлаКорреспондента.ВидВыгружаемогоПериода, 
						ПараметрыОбмена.СвойстваУзлаКорреспондента.ДатаПринятого));
		ПараметрыОбмена.СвойстваУзлаКорреспондента.Вставить("МинимальнаяДатаБюджетногоПериода", 
				БюджетированиеСервер.МинимальнаяДатаВариантовБюджета(ПараметрыОбмена.СвойстваУзлаКорреспондента.МинимальнаяДатаУзлаКорреспондента));
		Если ПараметрыОбмена.СвойстваУзлаКорреспондента.ВыгружатьОперацииТолькоПоУказаннымКошелькам Тогда
			ПараметрыОбмена.СвойстваУзлаКорреспондента.Вставить("Кошельки", ПолучитьКошелькиУзла(УзелКорреспондента));
		Иначе
			ПараметрыОбмена.СвойстваУзлаКорреспондента.Вставить("Кошельки", Новый Массив);
		КонецЕсли; 
	Иначе
		ПараметрыОбмена.СвойстваУзлаКорреспондента.Вставить("МинимальнаяДатаУзлаКорреспондента", Неопределено);
		ПараметрыОбмена.СвойстваУзлаКорреспондента.Вставить("Кошельки", Новый Массив);
	КонецЕсли; 
	
	// Добавляем информацию о центральной базе
	ПараметрыОбмена.Вставить("КодЦентральнойБазы", ПараметрыОбмена.ЭтотУзел.Код);
	Если ЗначениеЗаполнено(ПараметрыОбмена.КодЦентральнойБазы) Тогда
		ПараметрыОбмена.Вставить("ЭтотУзелЦентральный", ПараметрыОбмена.ЭтотУзел.Код = ПараметрыОбмена.КодЦентральнойБазы);
		ПараметрыОбмена.Вставить("УзелКорреспондентаЦентральный", ЗначениеЗаполнено(УзелКорреспондента) 
									И ПараметрыОбмена.СвойстваУзлаКорреспондента.Код = ПараметрыОбмена.КодЦентральнойБазы);
	Иначе
		ПараметрыОбмена.Вставить("ЭтотУзелЦентральный", Ложь);
		ПараметрыОбмена.Вставить("УзелКорреспондентаЦентральный", Ложь);
	КонецЕсли; 
	
	// Добавляем соответствие ссылок сопоставленных объектов
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", УзелКорреспондента);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствияОбъектовИБ.УникальныйИдентификаторИсточника,
	|	СоответствияОбъектовИБ.УникальныйИдентификаторПриемника
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИБ
	|ГДЕ
	|	СоответствияОбъектовИБ.УзелИнформационнойБазы = &Узел
	|	И СоответствияОбъектовИБ.УникальныйИдентификаторПриемника <> """"";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЭтоЗагрузка Тогда
			ПараметрыОбмена.СопоставленияПоСсылкам.Вставить(Выборка.УникальныйИдентификаторПриемника, Выборка.УникальныйИдентификаторИсточника);
		Иначе
			ПараметрыОбмена.СопоставленияПоСсылкам.Вставить(Выборка.УникальныйИдентификаторИсточника, Выборка.УникальныйИдентификаторПриемника);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура ОбновитьОбъектСистемнойИнформации(ОбъектСистемнойИнформации)

	Если ОбъектСистемнойИнформации = Неопределено Тогда
		ОбъектСистемнойИнформации = Новый СистемнаяИнформация;
	КонецЕсли; 

КонецПроцедуры

Функция СформироватьКодУзла(СистемнаяИнформация = Неопределено)

	ОбновитьОбъектСистемнойИнформации(СистемнаяИнформация);
	СлучайныйИД = Новый УникальныйИдентификатор();
	
	Возврат Лев(СистемнаяИнформация.ИдентификаторКлиента, 18) + Прав(СлучайныйИД, 18)

КонецФункции

Функция ДействиеОбменаВыполнено(РезультатВыполненияОбмена) 

	Возврат РезультатВыполненияОбмена = Неопределено
		ИЛИ РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено
		ИЛИ РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями;

КонецФункции

Функция ЗначениеXDTOЗаполнено(Значение) 

	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO") Тогда
		Возврат ЗначениеЗаполнено(Значение.Значение);
	Иначе
		Возврат ЗначениеЗаполнено(Значение);
	КонецЕсли;

КонецФункции

Процедура ОчиститьСправочникиЗаполненныеПоУмолчанию() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.Имущество КАК Спр
	|ГДЕ
	|	НЕ Спр.Предопределенный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//|ВЫБРАТЬ
	//|	Спр.Ссылка
	//|ИЗ
	//|	Справочник.Валюты КАК Спр
	//|ГДЕ
	//|	НЕ Спр.Предопределенный
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	|ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.Контакты КАК Спр
	|ГДЕ
	|	НЕ Спр.Предопределенный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.СтатьиДоходов КАК Спр
	|ГДЕ
	|	НЕ Спр.Предопределенный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.СтатьиРасходов КАК Спр
	|ГДЕ
	|	НЕ Спр.Предопределенный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.ПрикрепленныеФайлы КАК Спр
	|ГДЕ
	|	НЕ Спр.Предопределенный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.КошелькиИСчета КАК Спр
	|ГДЕ
	|	НЕ Спр.Предопределенный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.ФинансовыеЦели КАК Спр
	|ГДЕ
	|	НЕ Спр.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектСправочника.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
		ОбъектСправочника.ДополнительныеСвойства.Вставить("НеПроверятьСостояние", Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьРегистрыСведений() 
	
	НаборЗаписей = РегистрыСведений.ПоказателиБюджета.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.Записать(Истина);
	
	НаборЗаписей = РегистрыСведений.ДатыРасписаний.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.Записать(Истина);
	
	//НаборЗаписей = РегистрыСведений.КонтрольОбменаДанными.СоздатьНаборЗаписей();
	//НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	//НаборЗаписей.Записать(Истина);
	
	НаборЗаписей = РегистрыСведений.ОбъектыОпераций.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.Записать(Истина);
	
	НаборЗаписей = РегистрыСведений.ОперацииШаблонов.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.Записать(Истина);
	
	НаборЗаписей = РегистрыСведений.ПринадлежностьФайлов.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.Записать(Истина);
	
	НаборЗаписей = РегистрыСведений.СоставСтатейБюджета.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("НеОбновлятьПорядокВПоказателях", Истина);
	НаборЗаписей.Записать(Истина);
	
	НаборЗаписей = РегистрыСведений.СостоянияУспешныхОбменовДанными.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.Записать(Истина);
	
	НаборЗаписей = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ОчиститьКонстантыИНастройки() 
	
	Для каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		ПользовательскиеНастройкиДневникСервер.ЗаписатьОсновнойКошелек(Неопределено, Пользователь.Имя);
		ПользовательскиеНастройкиДневникСервер.ЗаписатьОсновнойКонтакт(Неопределено, Пользователь.Имя);
		ПользовательскиеНастройкиДневникСервер.ЗаписатьОсновноеИмущество(Неопределено, Пользователь.Имя);
	КонецЦикла;
	ПользовательскиеНастройкиДневникСервер.ЗаписатьОсновнойКошелек(Неопределено);
	ПользовательскиеНастройкиДневникСервер.ЗаписатьОсновнойКонтакт(Неопределено);
	ПользовательскиеНастройкиДневникСервер.ЗаписатьОсновноеИмущество(Неопределено);
	
	МенеджерКонстанты = Константы.ОсновнойКошелек.СоздатьМенеджерЗначения();
	МенеджерКонстанты.ОбменДанными.Загрузка = Истина;
	МенеджерКонстанты.Значение = Неопределено;
	МенеджерКонстанты.Записать();
	
	МенеджерКонстанты = Константы.ОсновнойВариантБюджета.СоздатьМенеджерЗначения();
	МенеджерКонстанты.ОбменДанными.Загрузка = Истина;
	МенеджерКонстанты.Значение = Справочники.ВариантыБюджетов.БазовыйВариант;
	МенеджерКонстанты.Записать();
	
	//МенеджерКонстанты = Константы.ВалютаУчета.СоздатьМенеджерЗначения();
	//МенеджерКонстанты.ОбменДанными.Загрузка = Истина;
	//МенеджерКонстанты.Значение = Неоределено;
	//МенеджерКонстанты.Записать();
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// * Выгрузка данных

Функция НужноВыгружатьДанные(ПараметрыОбмена, Данные)

	ЭтоУдаление = ТипЗнч(Данные) = Тип("УдалениеОбъекта");
	Если ЭтоУдаление Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Определяем содержимое объекта и его метаданные
	ДанныеОбъекта           = ?(ЭтоУдаление, Данные.Ссылка, Данные);
	МетаданныеОбъекта       = ?(ЭтоУдаление, Данные.Ссылка.Метаданные(), Данные.Метаданные());
	МинимальнаяДата         = ПараметрыОбмена.СвойстваУзлаКорреспондента.МинимальнаяДатаУзлаКорреспондента;
	МинимальнаяДатаБюджета  = ПараметрыОбмена.СвойстваУзлаКорреспондента.МинимальнаяДатаБюджетногоПериода;
	
	// Для непрерывного обмена в условиях задержки обновлений мобильных приложений
	//контролируем версии обмена
	ВерсияОбмена      = ПараметрыОбмена.СвойстваУзлаКорреспондента.ВерсияОбмена;
	Если Не ЗначениеЗаполнено(ВерсияОбмена) Тогда
		// По умолчанию назначаем минимально допустимую версию
		ВерсияОбмена = ОбменМобильноеПриложениеВызовСервера.МинимальноДопустимаяВерсияОбмена();
	КонецЕсли;
	ВерсияВыше121 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияОбмена + ".0", "1.2.1.0") >= 0;
	ВерсияВыше131 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияОбмена + ".0", "1.3.1.0") >= 0;
	ВерсияВыше161 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияОбмена + ".0", "1.6.1.0") >= 0;
	ВерсияВыше163 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияОбмена + ".0", "1.6.3.0") >= 0;
	
	Если МетаданныеОбъекта = Метаданные.РегистрыСведений.КурсыВалют  Тогда
		// Если установлено ограничение по сроку хранения операций,
		//курсы валют выгружаем на 01.01.1980 и на период, превышающий указанное ограничение на месяц.
		Если ЗначениеЗаполнено(МинимальнаяДата) Тогда 
			Возврат ДанныеОбъекта.Отбор.Период.Значение = '19800101' 
					ИЛИ ДанныеОбъекта.Отбор.Период.Значение > ДобавитьМесяц(МинимальнаяДата, -1);
		Иначе
			Возврат Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	ЭтоДокумент = ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта);
	Если ЭтоДокумент И ДанныеОбъекта.ЭтоШаблон Тогда 
		
		// Шаблоны исключаются из обмена версии ниже 1.2 но включаются все в последующих версиях
		Возврат ВерсияВыше121;
		
	ИначеЕсли Не ВерсияВыше121 И (МетаданныеОбъекта = Метаданные.РегистрыСведений.ДатыРасписаний 
							Или МетаданныеОбъекта = Метаданные.РегистрыСведений.Расписания) Тогда
		// Данные регистры доступны только для версии выше 1.2
		Возврат Ложь;
		
	ИначеЕсли Не ВерсияВыше131 И (МетаданныеОбъекта = Метаданные.РегистрыСведений.ПринадлежностьФайлов 
									Или МетаданныеОбъекта = Метаданные.Справочники.ПрикрепленныеФайлы) Тогда
		// Данные регистры и справочники доступны только для версии выше 1.3
		Возврат Ложь;
		
	ИначеЕсли Не ВерсияВыше161 И (МетаданныеОбъекта = Метаданные.РегистрыСведений.ПоказателиБюджета 
								Или МетаданныеОбъекта = Метаданные.Справочники.ВариантыБюджетов
								Или МетаданныеОбъекта = Метаданные.Справочники.ГрафыБюджета
								Или МетаданныеОбъекта = Метаданные.Константы.ОсновнойВариантБюджета) Тогда
		// Данные регистры, справочники и константы доступны только для версии выше 1.6
		Возврат Ложь;
		
	ИначеЕсли НЕ ВерсияВыше163 И МетаданныеОбъекта = Метаданные.РегистрыНакопления.ОборотыПлановыхОпераций Тогда
		
		// Записи регистра формируются отдельной процедурой только для версии 1.6.3
		Возврат Ложь;
		
	КонецЕсли;
	
	Если МетаданныеОбъекта = Метаданные.Справочники.ПрикрепленныеФайлы Тогда
		// необходимость выгрузки прикрепленных файлов проверяется отдельно в конце формирования пакета
		ПараметрыОбмена.СписокПрикрепленныхФайлов.Вставить(ДанныеОбъекта.Ссылка, Данные);
		Возврат Ложь;
	КонецЕсли;
	
	// Может ли требоваться порверка на дату для данного объекта?
	ОбъектТребуетПроверки = ЭтоДокумент;
	Если ВерсияВыше121 Тогда
		ОбъектТребуетПроверки = ОбъектТребуетПроверки Или МетаданныеОбъекта = Метаданные.РегистрыСведений.ДатыРасписаний;
	КонецЕсли;
	Если ВерсияВыше131 Тогда
		ОбъектТребуетПроверки = ОбъектТребуетПроверки Или МетаданныеОбъекта = Метаданные.РегистрыСведений.ПринадлежностьФайлов;
	КонецЕсли;
	Если ВерсияВыше161 Тогда
		ОбъектТребуетПроверки = ОбъектТребуетПроверки Или МетаданныеОбъекта = Метаданные.РегистрыСведений.ПоказателиБюджета;
	КонецЕсли;
	Если ВерсияВыше163 Тогда
		ОбъектТребуетПроверки = ОбъектТребуетПроверки Или МетаданныеОбъекта = Метаданные.РегистрыНакопления.ОборотыПлановыхОпераций;
	КонецЕсли;
	
	ОтборПоКошелькам = ПараметрыОбмена.СвойстваУзлаКорреспондента.ВыгружатьОперацииТолькоПоУказаннымКошелькам;
	Если НЕ ОбъектТребуетПроверки 
		Или НЕ ОтборПоКошелькам И НЕ ЗначениеЗаполнено(МинимальнаяДата) Тогда
		// не нужно проверять ограничения на выгрузку
		Возврат Истина;
	КонецЕсли; 
	
	// Проверка на соответствие даты
	Если ЗначениеЗаполнено(МинимальнаяДата) Тогда 
		
		Если ЭтоДокумент Тогда
			
			ДатаОбъекта = ДанныеОбъекта.Дата;
			Если ДатаОбъекта < МинимальнаяДата Тогда
				ПараметрыОбмена.СписокУдаляемыхДокументов.Добавить(ДанныеОбъекта.Ссылка);
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли МетаданныеОбъекта = Метаданные.РегистрыСведений.ДатыРасписаний Тогда
			
			Если ДанныеОбъекта.Количество() = 0 И ЗначениеЗаполнено(ДанныеОбъекта.Отбор.ПлановаяДата.Значение)
					И ДанныеОбъекта.Отбор.ПлановаяДата.Значение < МинимальнаяДата Тогда
				// Это удаление записи
				Возврат Ложь;
				
			Иначе
				
				// проверяем не только плановую дату, но и актуальную дату записи
				ЗаписиКУдалению = Новый Массив;
				Для каждого ЗаписьРегистра Из ДанныеОбъекта Цикл
					
					// Из обмена исключаем те записи, у которых и плановя и актуальная даты меньше минимальной
					Если ЗаписьРегистра.АктуальнаяДата < МинимальнаяДата И ЗаписьРегистра.ПлановаяДата < МинимальнаяДата Тогда
						ЗаписиКУдалению.Добавить(ЗаписьРегистра);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ДанныеОбъекта.Количество() > 0 И ЗаписиКУдалению.Количество() = ДанныеОбъекта.Количество() Тогда
					Возврат Ложь;
				КонецЕсли;
				 
				Для каждого ЗаписьРегистра Из ЗаписиКУдалению Цикл
					ДанныеОбъекта.Удалить(ЗаписьРегистра);
				КонецЦикла;
				
			КонецЕсли;
			
			
		ИначеЕсли МетаданныеОбъекта = Метаданные.РегистрыСведений.ПоказателиБюджета Тогда
			
			Если ЗначениеЗаполнено(ДанныеОбъекта.Отбор.НачалоПериода.Значение)
				И ЗначениеЗаполнено(ДанныеОбъекта.Отбор.ВариантБюджета.Значение) Тогда
				Возврат ДанныеОбъекта.Отбор.НачалоПериода.Значение >= КалендарноеНачалоПериодаПланирования(МинимальнаяДата, 
												ДанныеОбъекта.Отбор.ВариантБюджета.Значение.ДетальностьПланирования);
			Иначе
				Возврат Истина;
			КонецЕсли;
			
		ИначеЕсли МетаданныеОбъекта = Метаданные.РегистрыНакопления.ОборотыПлановыхОпераций Тогда
			
			Если ЗначениеЗаполнено(ДанныеОбъекта.Отбор.Регистратор.Значение) И Не ДанныеОбъекта.Отбор.Регистратор.Значение.ЭтоШаблон Тогда
				Возврат ДанныеОбъекта.Отбор.Регистратор.Значение.Дата >= МинимальнаяДатаБюджета;
			Иначе
				Возврат Истина;
			КонецЕсли;
			
		ИначеЕсли МетаданныеОбъекта = Метаданные.РегистрыСведений.ПринадлежностьФайлов Тогда
			
			ВладелецФайла = ДанныеОбъекта.Отбор.ВладелецФайла.Значение;
			Файл          = ДанныеОбъекта.Отбор.ПрикрепленныйФайл.Значение;
			Если ЗначениеЗаполнено(Файл) И Файл.НеСинхронизировать Тогда
				Возврат Ложь;
			ИначеЕсли Данные.Количество() > 0 И ЗначениеЗаполнено(ВладелецФайла) 
				И ОбщегоНазначения.ЭтоДокумент(ВладелецФайла.Метаданные())
				И Не ВладелецФайла.ЭтоШаблон И ВладелецФайла.Дата < МинимальнаяДата Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	// Проверка на соответствие кошелька
	Если ОтборПоКошелькам Тогда
		
		Кошельки = ПараметрыОбмена.СвойстваУзлаКорреспондента.Кошельки;
		
		Если ЭтоДокумент Тогда
			
			КошелькиДокумента = ПолучитьКошелькиОперации(ДанныеОбъекта);
			Если НЕ КошелькиДокументаСоответствуютОтбору(КошелькиДокумента, Кошельки) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли МетаданныеОбъекта = Метаданные.РегистрыСведений.ДатыРасписаний И ДанныеОбъекта.Количество() > 0 Тогда
			
			ПроверитьКошелькиНабораДат(ДанныеОбъекта, Кошельки);
			Возврат ДанныеОбъекта.Количество() > 0;
			
		ИначеЕсли МетаданныеОбъекта = Метаданные.РегистрыСведений.ПринадлежностьФайлов Тогда
			
			Возврат ПроверитьКошелькиПрикрепленныхФайлов(ДанныеОбъекта, Кошельки);
			
		КонецЕсли;
		
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

// Для внутреннего использования:
//	Возвращает ИСТИНА, если кощельки документа соответствуют указанному в настройках обмена отбору
Функция КошелькиДокументаСоответствуютОтбору(КошелькиДокумента, КошелькиОтбора)

	Для Каждого КошелекДокумента Из КошелькиДокумента Цикл
		Если КошелькиОтбора.Найти(КошелекДокумента) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 

	Возврат ложь;
	
КонецФункции

Функция ПолучитьМинимальнуюДатуХраненияДокументов(КоличествоПериодов, ВидПериода, ДатаПринятого)

	Если НЕ ЗначениеЗаполнено(КоличествоПериодов) ИЛИ НЕ ЗначениеЗаполнено(ДатаПринятого) Тогда
		Возврат Неопределено;
	ИначеЕсли ВидПериода = Перечисления.Периодичность.Месяц Тогда
		Возврат НачалоДня(ДобавитьМесяц(ДатаПринятого, -КоличествоПериодов));
	ИначеЕсли ВидПериода = Перечисления.Периодичность.Неделя Тогда
		Возврат НачалоДня(ДатаПринятого - КоличествоПериодов * 604800);
	Иначе
		Возврат НачалоДня(ДатаПринятого - КоличествоПериодов * 86400);
	КонецЕсли; 

КонецФункции

Функция ПолучитьКошелькиОперации(Данные)

	Результат = Новый Массив;
	ТипКошелек = Тип("СправочникСсылка.КошелькиИСчета");
	
	Если ТипЗнч(Данные) = Тип("ДокументСсылка.ВводИзменениеОстатка")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументОбъект.ВводИзменениеОстатка") Тогда
		
		Если ТипЗнч(Данные.ОбъектУчета) = ТипКошелек Тогда
			Результат.Добавить(Данные.ОбъектУчета);
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументСсылка.Доход")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументОбъект.Доход") Тогда

		ВремТаблица = Данные.Доходы.Выгрузить(, "Кошелек");
		ВремТаблица.Свернуть("Кошелек");
		Результат = ВремТаблица.ВыгрузитьКолонку("Кошелек");
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументСсылка.МыВернулиДолг")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументОбъект.МыВернулиДолг") 
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.МыВзялиВДолг") 
		ИЛИ ТипЗнч(Данные) = Тип("ДокументОбъект.МыВзялиВДолг") 
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.МыДалиВДолг") 
		ИЛИ ТипЗнч(Данные) = Тип("ДокументОбъект.МыДалиВДолг") 
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.НамВернулиДолг") 
		ИЛИ ТипЗнч(Данные) = Тип("ДокументОбъект.НамВернулиДолг") 
		Тогда
		
		Результат.Добавить(Данные.Кошелек);

	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументСсылка.ОбменВалюты")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументОбъект.ОбменВалюты")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.Перемещение") 
		ИЛИ ТипЗнч(Данные) = Тип("ДокументОбъект.Перемещение") Тогда
		
		Результат.Добавить(Данные.КошелекОткуда);
		Результат.Добавить(Данные.КошелекКуда);

	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументСсылка.Расход")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументОбъект.Расход") Тогда
		
		Результат.Добавить(Данные.КошелекДолг);

	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументСсылка.УниверсальнаяОперация")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументОбъект.УниверсальнаяОперация") Тогда
		
		ВремТаблица = Новый ТаблицаЗначений;
		ВремТаблица.Колонки.Добавить("Кошелек");
		Для Каждого СтрокаДокумента Из Данные.Доходы Цикл
			Если ТипЗнч(СтрокаДокумента.ОбъектУчета) = ТипКошелек Тогда
				СтрокаВремТаблицы = ВремТаблица.Добавить();
				СтрокаВремТаблицы.Кошелек = СтрокаДокумента.ОбъектУчета;
			КонецЕсли; 
		КонецЦикла; 
		
		Для Каждого СтрокаДокумента Из Данные.Расходы Цикл
			Если ТипЗнч(СтрокаДокумента.ОбъектУчета) = ТипКошелек Тогда
				СтрокаВремТаблицы = ВремТаблица.Добавить();
				СтрокаВремТаблицы.Кошелек = СтрокаДокумента.ОбъектУчета;
			КонецЕсли; 
		КонецЦикла; 
		
		Для Каждого СтрокаДокумента Из Данные.Перемещения Цикл
			Если ТипЗнч(СтрокаДокумента.ОбъектУчетаДт) = ТипКошелек Тогда
				СтрокаВремТаблицы = ВремТаблица.Добавить();
				СтрокаВремТаблицы.Кошелек = СтрокаДокумента.ОбъектУчетаДт;
			КонецЕсли; 
			Если ТипЗнч(СтрокаДокумента.ОбъектУчетаКт) = ТипКошелек Тогда
				СтрокаВремТаблицы = ВремТаблица.Добавить();
				СтрокаВремТаблицы.Кошелек = СтрокаДокумента.ОбъектУчетаКт;
			КонецЕсли; 
		КонецЦикла; 
		
		ВремТаблица.Свернуть("Кошелек");
		Результат = ВремТаблица.ВыгрузитьКолонку("Кошелек");

	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

Функция ПолучитьКошелькиПлановойОперации(Данные)

	Если ЗначениеЗаполнено(Данные.ПлановаяОперация) Тогда
		Возврат ПолучитьКошелькиОперации(Данные.ПлановаяОперация);
	Иначе
		Возврат ПолучитьКошелькиОперации(Данные.ВладелецРасписания);
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьКошелькиНабораДат(НаборДатРасписания, КошелькиОтбора) 
	
	ЗаписиКУдалению = Новый Массив;
	Для каждого ЗаписьРегистра Из НаборДатРасписания Цикл
		
		Если ЗначениеЗаполнено(ЗаписьРегистра.ПлановаяОперация) Тогда
			
			КошелькиДокумента = ПолучитьКошелькиПлановойОперации(ЗаписьРегистра.ПлановаяОперация);
			Если Не КошелькиДокументаСоответствуютОтбору(КошелькиДокумента, КошелькиОтбора) Тогда
				ЗаписиКУдалению.Добавить(ЗаписьРегистра);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ЗаписьРегистра Из ЗаписиКУдалению Цикл
		НаборДатРасписания.Удалить(ЗаписьРегистра);
	КонецЦикла;
	
КонецПроцедуры

Функция  ПроверитьКошелькиПрикрепленныхФайлов(НаборРегистра, КошелькиОтбора) 
	
	ВладелецФайла = НаборРегистра.Отбор.ВладелецФайла.Значение;
	Если ЗначениеЗаполнено(ВладелецФайла) 
		И ОбщегоНазначения.ЭтоДокумент(ВладелецФайла.Метаданные()) Тогда
		
		КошелькиДокумента = ПолучитьКошелькиПлановойОперации(ВладелецФайла);
		Возврат КошелькиДокументаСоответствуютОтбору(КошелькиДокумента, КошелькиОтбора);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


Функция ПолучитьКошелькиУзла(УзелОбмена)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", УзелОбмена);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Кошелек КАК Кошелек
	|ИЗ
	|	ПланОбмена.МобильноеПриложение.Кошельки КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	Иначе
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Кошелек");
	КонецЕсли; 


КонецФункции

// Добавляет в выгружаемые списки информацию о результатах последней загрузки данных
//
//Параметры:
//	Список - ОбъектXDTO - список, в который помещаются результаты загрузки данных
//	УзелИнформационнойБазы - ПланОбмена.Ссылка - узел, для которого нужно получить результаты
//
Процедура ДобавитьРезультатыОбмена(Список, УзелИнформационнойБазы) 
	
	ЗаписьРегистра = РегистрыСведений.КонтрольОбменаДанными.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.УзелИнформационнойБазы = УзелИнформационнойБазы;
	ЗаписьРегистра.Прочитать();
	
	Если Не ЗаписьРегистра.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектОшибки = СоздатьОбъектXDTO("Error");
	ОбъектОшибки.HelpInfo = "";
	ОбъектОшибки.Ref      = "";
	ОбъектОшибки.Code     = Строка(ЗаписьРегистра.РезультатПолученияДанных);
	ОбъектОшибки.TechInfo = ЗаписьРегистра.ТекстОшибокПолучения;
	ОбъектОшибки.TechInfo = ОбъектОшибки.TechInfo + ?(ОбъектОшибки.TechInfo = "", "", Символы.ПС + "  ----- " + Символы.ПС) 
					+ ЗаписьРегистра.ТекстОшибокОтправки;
	
	Представление = "";
	Если ЗначениеЗаполнено(ЗаписьРегистра.РезультатПолученияДанных) Тогда
		Представление = НСтр("ru='Последняя загрузка данных: %1'");
		Представление = СтрШаблон(Представление, Формат(ЗаписьРегистра.НачалоОбмена, "Л=ru_RU; ДЛФ=DT")) + Символы.ПС;
		Если ЗаписьРегистра.РезультатПолученияДанных = Перечисления.РезультатыВыполненияОбмена.Выполнено Тогда
			Представление = Представление + НСтр("ru='Выполнена без ошибок'");
		Иначе
			Представление = Представление + НСтр("ru='Не выполнена! Информацию об ошибках см. в журнале регистрации настольной программы'");
		КонецЕсли;
	КонецЕсли;
	
	Представление = Представление + ?(Представление = "", "", Символы.ПС);
	Если ЗначениеЗаполнено(ЗаписьРегистра.РезультатПолученияДанных) Тогда
		Представление = Представление + НСтр("ru='Последняя выгрузка данных: %1'");
		Представление = СтрШаблон(Представление, Формат(ЗаписьРегистра.НачалоОбмена, "Л=ru_RU; ДЛФ=DT")) + Символы.ПС;
		Если ЗаписьРегистра.РезультатПолученияДанных = Перечисления.РезультатыВыполненияОбмена.Выполнено Тогда
			Представление = Представление + НСтр("ru='Выполнена без ошибок'");
		Иначе
			Представление = Представление + НСтр("ru='Не выполнена! Информацию об ошибках см. в журнале регистрации настольной программы'");
		КонецЕсли;
	КонецЕсли;
	ОбъектОшибки.Description = Представление;
	
	Список.Errors.Добавить(ОбъектОшибки);
	
КонецПроцедуры
 

// Для внутреннего использования:
//	преобразует данные в объект XDTO и добавляет его в один из списков выгрузки (в зависимости от типа)
Процедура ДобавитьВСписокОбъектXDTO(ПараметрыОбмена, СпискиВыгрузки, Данные)

	ТипОбъекта = "";
	ОбъектXDTO = ПолучитьОбъектXDTOИзДанных(ПараметрыОбмена, Данные, ТипОбъекта);
	
	Если ТипОбъекта = "РегистрыНакопления" Тогда
		
		ВыгрузитьЗаписиПлановойОперации(ПараметрыОбмена, СпискиВыгрузки, Данные);
		
	ИначеЕсли ОбъектXDTO <> Неопределено И ОбъектXDTO <> "" Тогда
		
		СписокОбъектов = Неопределено;
		Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
			СписокОбъектов = СпискиВыгрузки.УдалениеОбъектов;
		Иначе
			Если НЕ СпискиВыгрузки.Свойство(ТипОбъекта, СписокОбъектов) ИЛИ СписокОбъектов = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Для объекта вида ""%1"" список выгрузки не найден'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТипОбъекта);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли; 
		КонецЕсли; 
		СписокОбъектов.Objects.Добавить(ОбъектXDTO);
		
	КонецЕсли; 

КонецПроцедуры

// Для внутреннего использования:
//	Функция преобразует данные в паект XDTO и возвращает его
//
//Параметры:
//	Данные - любые данные - зарегистрированные изменения плана обмена
//	ТипОбъекта - Строка - возвр. параметр, строковое представление типа объекта
//
//Возвращаемое значение:
//	ОбъектXDTO
Функция ПолучитьОбъектXDTOИзДанных(ПараметрыОбмена, Данные, ТипОбъекта = "")

	Если Данные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат              = Неопределено;
	ЭтоУдаление            = ТипЗнч(Данные) = Тип("УдалениеОбъекта");
	МетаданныеОбъекта      = ?(ЭтоУдаление, Данные.Ссылка.Метаданные(), Данные.Метаданные());
	ТипОбъекта             = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МетаданныеОбъекта);
	СоответствиеРеквизитов = ОбменМобильноеПриложениеВызовСервераПовтИсп.СоответствиеРеквизитовЭтойБазы();
	
	ВерсияОбмена      = ПараметрыОбмена.СвойстваУзлаКорреспондента.ВерсияОбмена;
	
	Если ЭтоУдаление Тогда
		
		Результат              = СоздатьОбъектXDTO("ObjectDeletion");
		Результат.Ref          = УточнитьЗначениеДляПомещенияВОбъектXDTO(Данные.Ссылка, ПараметрыОбмена.СопоставленияПоСсылкам);
		Результат.MetaDataName = МетаданныеОбъекта.ПолноеИмя();
		Если Нрег(Результат.MetaDataName) = "документ.перемещение" Тогда
			Результат.MetaDataName = "Документ.Перемещение";
		КонецЕсли; 
		
		СопоставленнаяСсылка = ПараметрыОбмена.СопоставленияПоСсылкам.Получить(Данные.Ссылка);

	ИначеЕсли ТипОбъекта = "Справочники" Тогда

		Результат = ПолучитьОбъектXDTOСправочника(Данные, СоответствиеРеквизитов, ПараметрыОбмена.СопоставленияПоСсылкам);

	ИначеЕсли ТипОбъекта = "Документы" Тогда

		Результат = ПолучитьОбъектXDTOДокумента(Данные, СоответствиеРеквизитов, ПараметрыОбмена.СопоставленияПоСсылкам, ВерсияОбмена);

	ИначеЕсли ТипОбъекта = "Константы" Тогда

		Результат = ПолучитьОбъектXDTOКонстанты(Данные, МетаданныеОбъекта, ПараметрыОбмена.СопоставленияПоСсылкам);

	ИначеЕсли ТипОбъекта = "Перечисления" Тогда

		Если ЗначениеЗаполнено(Данные) Тогда
			//Результат = ОбщегоНазначения.ИмяЗначенияПеречисления(Данные);  
			Результат = XMLСтрока(Данные);  
		Иначе 
			Результат = "";
		КонецЕсли; 

	ИначеЕсли ТипОбъекта = "РегистрыСведений" Тогда

		Результат = ПолучитьОбъектXDTOНабораРегистраСведений(Данные, МетаданныеОбъекта);  
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьВСписокПрикрепленныеФайлы(ПараметрыОбмена, СпискиВыгрузки) 
	
	// Для исключения дублей отобранные записи помещаем в новое соответсвтие
	ВыгружаемыеЭлементы = Новый Соответствие;
	
	СписокПрикрепленныхФайлов = ПараметрыОбмена.СписокПрикрепленныхФайлов;
	МассивФайлов = Новый Массив;
	Для каждого Файл Из СписокПрикрепленныхФайлов Цикл
		Если ТипЗнч(Файл.Значение) = Тип("УдалениеОбъекта") Тогда
			ВыгружаемыеЭлементы.Вставить(Файл.Ключ, Истина);
		Иначе
			МассивФайлов.Добавить(Файл.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивФайлов", МассивФайлов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПринадлежностьФайлов.ВладелецФайла,
	|	ПринадлежностьФайлов.ПрикрепленныйФайл,
	|	ПринадлежностьФайлов.ПрикрепленныйФайл.НеСинхронизировать КАК НеСинхронизировать
	|ИЗ
	|	РегистрСведений.ПринадлежностьФайлов КАК ПринадлежностьФайлов
	|ГДЕ
	|	ПринадлежностьФайлов.ПрикрепленныйФайл В(&МассивФайлов)
	|	И ПринадлежностьФайлов.ВладелецФайла <> НЕОПРЕДЕЛЕНО";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НужноВыгружатьДанные(ПараметрыОбмена, Выборка.ВладелецФайла) Тогда
			ВыгружаемыеЭлементы.Вставить(Выборка.ПрикрепленныйФайл, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Элемент Из ВыгружаемыеЭлементы Цикл
		// В пакет должна попасть не ссылка на файл, а зарегистрированный в плане обмена объект 
		//(т.е. либо ссылка, либо удаление объекта), который мы ранее сохранили в соответствии
		ДобавитьВСписокОбъектXDTO(ПараметрыОбмена, СпискиВыгрузки, СписокПрикрепленныхФайлов[Элемент.Ключ]);
	КонецЦикла;
	
КонецПроцедуры


// Для внутреннего использования:
//	Универсальное заполнение объекта XDTO реквизитами справочника
//	Имена реквизитов справочника должны совпадать с именами реквизтов XDTO-объекта
//	Возвращает XDTO-объект
Функция ПолучитьОбъектXDTOСправочника(ЭлементСправочника, СоответствиеРеквизитов, СопоставленияПоСсылкам)

	МетаданныеСправочника = ЭлементСправочника.Метаданные();

	Результат = СоздатьОбъектXDTO("CatalogObject." + МетаданныеСправочника.Имя);
	Результат.Ref                  = УточнитьЗначениеДляПомещенияВОбъектXDTO(ЭлементСправочника.Ссылка, СопоставленияПоСсылкам);
	Если ДневникКлиентСервер.ИмяПеременнойВалидно(ЭлементСправочника.ИмяПредопределенныхДанных) Тогда
		Результат.PredefinedDataName   = ЭлементСправочника.ИмяПредопределенныхДанных;
	КонецЕсли; 
	Результат.DeletionMark         = ЭлементСправочника.ПометкаУдаления;
	Если МетаданныеСправочника.ДлинаКода <> 0 Тогда
		Результат.Code     = ЭлементСправочника.Код;
	КонецЕсли;
	Если МетаданныеСправочника.ДлинаНаименования <> 0 Тогда
		Результат.Description     = ЭлементСправочника.Наименование;
	КонецЕсли;
	Если МетаданныеСправочника.Иерархический Тогда
		Результат.Parent = УточнитьЗначениеДляПомещенияВОбъектXDTO(ЭлементСправочника.Родитель, СопоставленияПоСсылкам);
		РазделятьРеквизитыПоГруппам = МетаданныеСправочника.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
		Если РазделятьРеквизитыПоГруппам Тогда
			Результат.IsFolder = ЭлементСправочника.ЭтоГруппа;
		КонецЕсли; 
	Иначе
		РазделятьРеквизитыПоГруппам = Ложь;
	КонецЕсли; 
	
	Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
		
		Если Результат.Свойства().Получить(Реквизит.Имя) = Неопределено
			Или Найти(Реквизит.Комментарий, "(Инф.)") = 1 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если МетаданныеСправочника = Метаданные.Справочники.ПрикрепленныеФайлы
			И Реквизит.Имя = "ДанныеФайла" И ЭлементСправочника.НеСинхронизировать Тогда
			// Не выгружаем двоичные данные по элементу, для которого установлен запрет синхронизации
			Результат[Реквизит.Имя] = УточнитьЗначениеДляПомещенияВОбъектXDTO(Неопределено, СопоставленияПоСсылкам);
			Продолжить;;
		КонецЕсли;
		
		Если НЕ РазделятьРеквизитыПоГруппам 
				ИЛИ Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента
				ИЛИ Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы И ЭлементСправочника.ЭтоГруппа
				ИЛИ Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента И НЕ ЭлементСправочника.ЭтоГруппа
			Тогда
			
			Результат[Реквизит.Имя] = УточнитьЗначениеДляПомещенияВОбъектXDTO(ЭлементСправочника[Реквизит.Имя], СопоставленияПоСсылкам);
			
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции

// Проверяет исключения для реквизитов по номеру версии обмена
//
//Параметры:
//	ВерсияОбмена - Строка - проверяемый номер версии обмена
//	ПолноеИмяРеквизита - полное имя метаданных реквизита
//
//Возвращаемое значение:
//	Булево - Истина, если для реквизита не предусмотрено исключение и ЛОЖЬ, если реквизит не может быть выгружен в указанной версии обмена
//
Функция РеквизитСоответствуетВерсииОбмена(ВерсияОбмена, ПолноеИмяРеквизита) 

	Если ПолноеИмяРеквизита = "Документ.Расход.Реквизит.ФинансоваяЦельОткуда"
			Или ПолноеИмяРеквизита = "Документ.УниверсальнаяОперация.ТабличнаяЧасть.Расходы.Реквизит.ФинансоваяЦельОткуда" 
		Тогда
		Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияОбмена + ".0", "1.5.1.0") >= 0;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Для внутреннего использования:
//	Универсальное заполнение объекта XDTO реквизитами документа и его табличных частей. 
//	Имена реквизитов документа должны совпадать с именами реквизтов XDTO-объекта
//	Возвращает XDTO-объект
Функция ПолучитьОбъектXDTOДокумента(Документ, СоответствиеРеквизитов, СопоставленияПоСсылкам, ВерсияОбмена)

	МетаданныеДокумента = Документ.Метаданные();
	
	// Имена реквизитов в этой базе могут отличаться от имен в базе получателя:
	СоответствиеИмен = Неопределено;
	СоответствиеРеквизитов.Документ.Свойство(МетаданныеДокумента.Имя, СоответствиеИмен); 
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	Результат = СоздатьОбъектXDTO("DocumentObject." + ИмяДокумента);
	// Заполнение стандартных реквизитов
	Результат.Ref          = Документ.Ссылка.УникальныйИдентификатор();
	Результат.Date         = Документ.Дата;
	Результат.DeletionMark = Документ.ПометкаУдаления;
	Результат.Posted       = Документ.Проведен;
	Если МетаданныеДокумента.ДлинаНомера <> 0 Тогда
		Результат.Number   = Документ.Номер;
	КонецЕсли;
	
	// Заполнение реквизитов
	Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		
		Если Не РеквизитСоответствуетВерсииОбмена(ВерсияОбмена, Реквизит.ПолноеИмя()) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизитаОбъекта = Реквизит.Имя;
		Если Результат.Свойства().Получить(ИмяРеквизитаОбъекта) = Неопределено Тогда
			// Проверяем соответствие имен реквизитов:
			Если СоответствиеИмен <> Неопределено И СоответствиеИмен.Свойство(Реквизит.Имя) Тогда
				ИмяРеквизитаОбъекта = СоответствиеИмен[Реквизит.Имя];
			КонецЕсли; 
		КонецЕсли; 
		Если Результат.Свойства().Получить(ИмяРеквизитаОбъекта) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Результат[ИмяРеквизитаОбъекта]   = УточнитьЗначениеДляПомещенияВОбъектXDTO(Документ[Реквизит.Имя], СопоставленияПоСсылкам);
		
	КонецЦикла;    
	
	// Заполнение табличных частей
	Для Каждого МетаданныеТабЧасти Из МетаданныеДокумента.ТабличныеЧасти Цикл
		
		Если Результат.Свойства().Получить(МетаданныеТабЧасти.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Если Не РеквизитСоответствуетВерсииОбмена(ВерсияОбмена, МетаданныеТабЧасти.ПолноеИмя()) Тогда
			Продолжить;
		КонецЕсли;
		
		СоответствиеИменТабЧасти = Неопределено;
		Если СоответствиеИмен <> Неопределено  Тогда
			СоответствиеИмен.Свойство(МетаданныеТабЧасти.Имя, СоответствиеИменТабЧасти);
		КонецЕсли; 
		
		ИмяОбъектаСтроки = "DocumentTabularSectionRow." + ИмяДокумента + "." + МетаданныеТабЧасти.Имя;
		ТаблицаДокумента = Документ[МетаданныеТабЧасти.Имя];
		Для Каждого СтрокаТабЧасти Из ТаблицаДокумента Цикл
			
			ОбъектСтроки = СоздатьОбъектXDTO(ИмяОбъектаСтроки);
			
			// Заполняем реквизиты строки:
			Для Каждого Реквизит Из МетаданныеТабЧасти.Реквизиты Цикл
				
				Если Не РеквизитСоответствуетВерсииОбмена(ВерсияОбмена, Реквизит.ПолноеИмя()) Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяРеквизитаОбъекта = Реквизит.Имя;
				Если ОбъектСтроки.Свойства().Получить(ИмяРеквизитаОбъекта) = Неопределено Тогда
					Если СоответствиеИменТабЧасти <> Неопределено И СоответствиеИменТабЧасти.Свойство(Реквизит.Имя)  Тогда
						ИмяРеквизитаОбъекта   = СоответствиеИменТабЧасти[Реквизит.Имя];
					КонецЕсли; 
				КонецЕсли;
				Если ОбъектСтроки.Свойства().Получить(ИмяРеквизитаОбъекта) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ОбъектСтроки[ИмяРеквизитаОбъекта] = УточнитьЗначениеДляПомещенияВОбъектXDTO(СтрокаТабЧасти[Реквизит.Имя], СопоставленияПоСсылкам);
					
			КонецЦикла; 
			
			// Добавляем объект строки в список табличной части результата
			Результат[МетаданныеТабЧасти.Имя].Добавить(ОбъектСтроки);
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции

Функция ПолучитьОбъектXDTOКонстанты(Константа, МетаданныеОбъекта, СопоставленияПоСсылкам)

	Результат = СоздатьОбъектXDTO("ConstantValueManager." + МетаданныеОбъекта.Имя);
	Результат.Value = УточнитьЗначениеДляПомещенияВОбъектXDTO(Константа.Значение, СопоставленияПоСсылкам);
	
	Возврат Результат;

КонецФункции

// Универсальное заполнение объекта XDTO записями набора записей регистра сведений 
//	набор записей должен содержать заполненный отбор
//	Возвращает XDTO-объект
Функция ПолучитьОбъектXDTOНабораРегистраСведений(Данные, МетаданныеОбъекта) 

	ИмяРегистра = МетаданныеОбъекта.Имя;
	Результат = СоздатьОбъектXDTO("InformationRegisterRecordSet." + ИмяРегистра);
	Фильтр    = СоздатьОбъектXDTO("InformationRegisterRecordKey." + ИмяРегистра);
	
	Для Каждого ЭлементОтбора Из Данные.Отбор Цикл
		Если ЭлементОтбора.Имя = "Период" Тогда
			
			Фильтр.Установить("Period", УточнитьЗначениеДляПомещенияВОбъектXDTO(ЭлементОтбора.Значение));
			
		Иначе
			
			Если Найти(МетаданныеОбъекта.Измерения[ЭлементОтбора.Имя].Комментарий, "(Инф.)") = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеЭлемента = УточнитьЗначениеДляПомещенияВОбъектXDTO(ЭлементОтбора.Значение);
			
			Если Не ЗначениеXDTOЗаполнено(ЗначениеЭлемента) И МетаданныеОбъекта.Измерения[ЭлементОтбора.Имя].ЗапрещатьНезаполненныеЗначения Тогда
				// В ключах регистра могут использоваться объекты, не входящие в план обмена
				Возврат Неопределено;
			КонецЕсли;
			
			Фильтр.Установить(ЭлементОтбора.Имя, ЗначениеЭлемента);
			
		КонецЕсли;
	КонецЦикла;
	
	Результат.Установить("Filter", Фильтр);
	Результат.Filter = Фильтр;
	
	МассивПолей = МассивПолейРегистраСведений(МетаданныеОбъекта);
	
	Для Каждого Запись Из Данные Цикл
		
		НоваяЗапись = СоздатьОбъектXDTO("InformationRegisterRecord." + ИмяРегистра);
		Для каждого Поле Из МассивПолей Цикл
			ПолеXML = ?(Поле = "Период", "Period", Поле);
			НоваяЗапись[ПолеXML]    = УточнитьЗначениеДляПомещенияВОбъектXDTO(Запись[Поле]);
		КонецЦикла;
		Результат.Record.Добавить(НоваяЗапись);
		
	КонецЦикла; 

	Возврат Результат;
	
КонецФункции

Функция МассивПолейРегистраСведений(МетаданныеОбъекта) 

	Результат = Новый Массив;
	Если МетаданныеОбъекта.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		Результат.Добавить("Период");
	КонецЕсли;
	Для каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
		Если Найти(Измерение.Комментарий, "(Инф.)") = 0 Тогда
			Результат.Добавить(Измерение.Имя);
		КонецЕсли;
	КонецЦикла;
	Для каждого Ресурс Из МетаданныеОбъекта.Ресурсы Цикл
		Если Найти(Ресурс.Комментарий, "(Инф.)") = 0 Тогда
			Результат.Добавить(Ресурс.Имя);
		КонецЕсли;
	КонецЦикла;
	Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Найти(Реквизит.Комментарий, "(Инф.)") = 0 Тогда
			Результат.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// Для внутреннего использования:
//	если количество выгружаемых документов ограничено периодом, создает и добавляет в пакет выгрузки 
//	"виртуальные" документы ВводИзменениеОстатка, с помощью которых в приемнике будут сформированы остатки на начало 
Процедура ДобавитьОстаткиВСписокОбъектовXDTO(СпискиВыгрузки, ПараметрыОбмена)

	Если ЗначениеЗаполнено(ПараметрыОбмена.СвойстваУзлаКорреспондента.МинимальнаяДатаУзлаКорреспондента) Тогда
		ДатаОстатковНаНачало = ПараметрыОбмена.СвойстваУзлаКорреспондента.МинимальнаяДатаУзлаКорреспондента - 1;
	Иначе
		// В случае первого обмена дата может быть пустой, а количество периодов указано 
		ДатаОстатковНаНачало = НачалоДня(ПолучитьМинимальнуюДатуХраненияДокументов(ПараметрыОбмена.СвойстваУзлаКорреспондента.КоличествоВыгружаемыхПериодов, ПараметрыОбмена.СвойстваУзлаКорреспондента.ВидВыгружаемогоПериода, ТекущаяДатаСеанса())) - 1;
		ПараметрыОбмена.СвойстваУзлаКорреспондента.МинимальнаяДатаУзлаКорреспондента = ДатаОстатковНаНачало;
	КонецЕсли; 
	
	Комментарий = НСтр("ru = 'Остатки на %1 (выгрузка данных по состоянию на %2)'");
	Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, 
				Формат(ДатаОстатковНаНачало, "Л=ru_RU; ДФ=дд.ММ.гг"), 
				Формат(ТекущаяДатаСеанса(), "Л=ru_RU; ДФ=дд.ММ.гг"));
				
	ОграничиватьКошельками = ПараметрыОбмена.СвойстваУзлаКорреспондента.ВыгружатьОперацииТолькоПоУказаннымКошелькам;
	Кошельки               = ПараметрыОбмена.СвойстваУзлаКорреспондента.Кошельки;
				
	СписокДокументов = СпискиВыгрузки.Документы;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатковНаНачало);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.ВводИзменениеОстатка.ПустаяСсылка) КАК Ref,
	|	&ДатаОстатков КАК Date,
	|	ИСТИНА КАК Posted,
	|	ЛОЖЬ КАК DeletionMark,
	|	ЛОЖЬ КАК ЭтоШаблон,
	|	ИСТИНА КАК ЭтоСинхронизацияОстатков,
	|	ВЫБОР
	|		КОГДА ЖурналОперацийОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.ПроцентыПоДолгам)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.ОсновныеСуммыДолгов)
	|		ИНАЧЕ ЖурналОперацийОстатки.Счет
	|	КОНЕЦ КАК РазделУчета,
	|	ЖурналОперацийОстатки.Субконто1 КАК ОбъектУчета,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЖурналОперацийОстатки.Субконто2, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)
	|		ИНАЧЕ ЖурналОперацийОстатки.Субконто2
	|	КОНЕЦ КАК ФинансоваяЦель,
	|	ЖурналОперацийОстатки.Валюта КАК ВалютаОперации,
	|	СУММА(ВЫБОР
	|			КОГДА ЖурналОперацийОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.ПроцентыПоДолгам)
	|				ТОГДА 0
	|			ИНАЧЕ ЖурналОперацийОстатки.ВалютнаяСуммаКонечныйОстаток
	|		КОНЕЦ) КАК СуммаНовогоОстатка,
	|	СУММА(ВЫБОР
	|			КОГДА ЖурналОперацийОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.ПроцентыПоДолгам)
	|				ТОГДА ЖурналОперацийОстатки.ВалютнаяСуммаКонечныйОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНовогоОстаткаПроцентов
	|ИЗ
	|	РегистрБухгалтерии.ЖурналОпераций.ОстаткиИОбороты(&ДатаОстатков, &ДатаОстатков, Период, ДвиженияИГраницыПериода, , , ) КАК ЖурналОперацийОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЖурналОперацийОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.ПроцентыПоДолгам)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.ОсновныеСуммыДолгов)
	|		ИНАЧЕ ЖурналОперацийОстатки.Счет
	|	КОНЕЦ,
	|	ЖурналОперацийОстатки.Субконто1,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЖурналОперацийОстатки.Субконто2, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)
	|		ИНАЧЕ ЖурналОперацийОстатки.Субконто2
	|	КОНЕЦ,
	|	ЖурналОперацийОстатки.Валюта";

	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	ТипКошелек = Тип("СправочникСсылка.КошелькиИСчета");
	
	Для Каждого СтрокаТаблицы Из ТаблицаОстатков Цикл
		
		Если СтрокаТаблицы.РазделУчета = ПланыСчетов.РазделыУчета.Деньги
			ИЛИ СтрокаТаблицы.РазделУчета = ПланыСчетов.РазделыУчета.Капитал Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ОграничиватьКошельками И ТипЗнч(СтрокаТаблицы.ОбъектУчета) = ТипКошелек 
			И Кошельки.Найти(СтрокаТаблицы.ОбъектУчета) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ОбъектОстатка = СоздатьОбъектXDTO("DocumentObject.ВводИзменениеОстатка");
		Для Каждого Колонка Из ТаблицаОстатков.Колонки Цикл
			ОбъектОстатка[Колонка.Имя] = УточнитьЗначениеДляПомещенияВОбъектXDTO(СтрокаТаблицы[Колонка.Имя], ПараметрыОбмена.СопоставленияПоСсылкам);
		КонецЦикла; 
		ОбъектОстатка.Комментарий = XMLСтрока(Комментарий);
		
		СписокДокументов.Objects.Добавить(ОбъектОстатка);
		
	КонецЦикла; 
	

КонецПроцедуры

// Для внутреннего использования:
//	если количество выгружаемых документов ограничено периодом, добавляет в выгрузку курсы валют, 
//	установленные до начала периода выгрузки, чтобы на приемнике не образовывалось валют без курсов.
Процедура ДобавитьНеобновляемыеКурсыВалютВСписокОбъектовXDTO(СпискиВыгрузки, ПараметрыОбмена)

    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("МаксимальнаяДатаКурсов", ДобавитьМесяц(ПараметрыОбмена.СвойстваУзлаКорреспондента.МинимальнаяДатаУзлаКорреспондента, -1));
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    КурсыВалютСрезПоследних.Период,
    |    КурсыВалютСрезПоследних.Валюта,
    |    КурсыВалютСрезПоследних.БазоваяВалюта
    |ИЗ
    |    РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
    |ГДЕ
    |    КурсыВалютСрезПоследних.Период < &МаксимальнаяДатаКурсов";

    ТаблицаКурсов = Запрос.Выполнить().Выгрузить();

    Для Каждого СтрокаТаблицы Из ТаблицаКурсов Цикл

        Набор = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
        Для Каждого ЭлементОтбора Из Набор.Отбор Цикл
            Набор.Отбор[ЭлементОтбора.Имя].Установить(СтрокаТаблицы[ЭлементОтбора.Имя]);
        КонецЦикла; 
        Набор.Прочитать();

        ДобавитьВСписокОбъектXDTO(ПараметрыОбмена, СпискиВыгрузки, Набор);

    КонецЦикла; 

КонецПроцедуры

// Для внутреннего использования:
//	преобазует параметр в пригодное для сериализации значение
Функция УточнитьЗначениеДляПомещенияВОбъектXDTO(Знач ЗначениеРеквизита, СопоставленияПоСсылкам = Неопределено)
	Перем Результат;
	Результат = "";
	
	ТипРеквизита = ТипЗнч(ЗначениеРеквизита);
	Если ТипРеквизита = Тип("ПланСчетовСсылка.РазделыУчета") Тогда
		
		Результат = ЗначениеРеквизита.ИмяПредопределенныхДанных;
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипРеквизита) Тогда
		
		// Ссылки всегда создаем с явным указанием типа, чтобы корректно обработать 
		//	значения составного типа
		МетаданныеЗначения = ЗначениеРеквизита.Метаданные();
		
		Если Не ОбщегоНазначения.ЭтоПеречисление(МетаданныеЗначения) 
			И Метаданные.ПланыОбмена.МобильноеПриложение.Состав.Найти(МетаданныеЗначения) = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеЗначения) Тогда
			
			// Проверяем сопоставленные ссылки
			Если СопоставленияПоСсылкам <> Неопределено Тогда
				СсылкаКорреспондента = СопоставленияПоСсылкам.Получить(ЗначениеРеквизита);
			Иначе
				СсылкаКорреспондента = Неопределено;
			КонецЕсли; 
			СсылкаКорреспондента = ?(СсылкаКорреспондента = Неопределено, ЗначениеРеквизита, СсылкаКорреспондента);
			
			Если ЗначениеРеквизита.Предопределенный Тогда
				//Предопределенные элементы выгружаем по имени
				Результат = СоздатьОбъектXDTO(XMLТипЗнч(ЗначениеРеквизита).ИмяТипа, ЗначениеРеквизита.ИмяПредопределенныхДанных);
			Иначе
				Результат = СоздатьОбъектXDTO(XMLТипЗнч(ЗначениеРеквизита).ИмяТипа, XMLСтрока(СсылкаКорреспондента));
			КонецЕсли; 
			
	
		ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаданныеЗначения) Тогда
			
			ИмяТипа = "DocumentRef." + МетаданныеЗначения.Имя;
			// Проверяем соответствие имен
			Результат = СоздатьОбъектXDTO(ИмяТипа, XMLСтрока(ЗначениеРеквизита));
			
		Иначе
		
			Результат = XMLСтрока(ЗначениеРеквизита);
		
		КонецЕсли; 
		
	Иначе
		
		Результат = XMLСтрока(ЗначениеРеквизита);
		
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

Функция ВыбратьДокументыДляРегистрации(ПолноеИмяОбъекта, МинимальнаяДата, ТолькоПоСпискуКошельков, Кошельки)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МинимальнаяДата", МинимальнаяДата);
	Запрос.УстановитьПараметр("ТолькоПоСпискуКошельков", ТолькоПоСпискуКошельков);
	Запрос.УстановитьПараметр("СписокКошельков", Кошельки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Расход КАК ТаблицаДокументов
	|ГДЕ
	|	(ТаблицаДокументов.ЭтоШаблон
	|			ИЛИ (ТаблицаДокументов.Дата >= &МинимальнаяДата
	|					И &ТолькоПоСпискуКошельков = ЛОЖЬ
	|				ИЛИ ТаблицаДокументов.КошелекДолг В (&СписокКошельков)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка
	|ИЗ
	|	Документ.ВводИзменениеОстатка КАК ТаблицаДокументов
	|ГДЕ
	|	(ТаблицаДокументов.ЭтоШаблон
	|			ИЛИ (ТаблицаДокументов.Дата >= &МинимальнаяДата
	|					И &ТолькоПоСпискуКошельков = ЛОЖЬ
	|				ИЛИ ТаблицаДокументов.ОбъектУчета В (&СписокКошельков)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокументов.Ссылка
	|ИЗ
	|	Документ.Доход.Доходы КАК ТаблицаДокументов
	|ГДЕ
	|	(ТаблицаДокументов.Ссылка.ЭтоШаблон
	|			ИЛИ (ТаблицаДокументов.Ссылка.Дата >= &МинимальнаяДата
	|					И &ТолькоПоСпискуКошельков = ЛОЖЬ
	|				ИЛИ ТаблицаДокументов.Кошелек В (&СписокКошельков)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка
	|ИЗ
	|	Документ.МыВернулиДолг КАК ТаблицаДокументов
	|ГДЕ
	|	(ТаблицаДокументов.ЭтоШаблон
	|			ИЛИ (ТаблицаДокументов.Дата >= &МинимальнаяДата
	|					И &ТолькоПоСпискуКошельков = ЛОЖЬ
	|				ИЛИ ТаблицаДокументов.Кошелек В (&СписокКошельков)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка
	|ИЗ
	|	Документ.МыВзялиВДолг КАК ТаблицаДокументов
	|ГДЕ
	|	(ТаблицаДокументов.ЭтоШаблон
	|			ИЛИ (ТаблицаДокументов.Дата >= &МинимальнаяДата
	|					И &ТолькоПоСпискуКошельков = ЛОЖЬ
	|				ИЛИ ТаблицаДокументов.Кошелек В (&СписокКошельков)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка
	|ИЗ
	|	Документ.МыДалиВДолг КАК ТаблицаДокументов
	|ГДЕ
	|	(ТаблицаДокументов.ЭтоШаблон
	|			ИЛИ (ТаблицаДокументов.Дата >= &МинимальнаяДата
	|					И &ТолькоПоСпискуКошельков = ЛОЖЬ
	|				ИЛИ ТаблицаДокументов.Кошелек В (&СписокКошельков)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка
	|ИЗ
	|	Документ.НамВернулиДолг КАК ТаблицаДокументов
	|ГДЕ
	|	(ТаблицаДокументов.ЭтоШаблон
	|			ИЛИ (ТаблицаДокументов.Дата >= &МинимальнаяДата
	|					И &ТолькоПоСпискуКошельков = ЛОЖЬ
	|				ИЛИ ТаблицаДокументов.Кошелек В (&СписокКошельков)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка
	|ИЗ
	|	Документ.ОбменВалюты КАК ТаблицаДокументов
	|ГДЕ
	|	(ТаблицаДокументов.ЭтоШаблон
	|			ИЛИ ТаблицаДокументов.Дата >= &МинимальнаяДата
	|				И (&ТолькоПоСпискуКошельков = ЛОЖЬ
	|					ИЛИ &ТолькоПоСпискуКошельков
	|						И (ТаблицаДокументов.КошелекОткуда В (&СписокКошельков)
	|							ИЛИ ТаблицаДокументов.КошелекКуда В (&СписокКошельков))))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка
	|ИЗ
	|	Документ.Перемещение КАК ТаблицаДокументов
	|ГДЕ
	|	(ТаблицаДокументов.ЭтоШаблон
	|			ИЛИ ТаблицаДокументов.Дата >= &МинимальнаяДата
	|				И (&ТолькоПоСпискуКошельков = ЛОЖЬ
	|					ИЛИ &ТолькоПоСпискуКошельков
	|						И (ТаблицаДокументов.КошелекОткуда В (&СписокКошельков)
	|							ИЛИ ТаблицаДокументов.КошелекКуда В (&СписокКошельков))))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка
	|ИЗ
	|	Документ.УниверсальнаяОперация.Доходы КАК ТаблицаДокументов
	|ГДЕ
	|	(ТаблицаДокументов.Ссылка.ЭтоШаблон
	|			ИЛИ ТаблицаДокументов.Ссылка.Дата >= &МинимальнаяДата
	|				И (&ТолькоПоСпискуКошельков = ЛОЖЬ
	|					ИЛИ ТаблицаДокументов.ОбъектУчета В (&СписокКошельков)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка
	|ИЗ
	|	Документ.УниверсальнаяОперация.Расходы КАК ТаблицаДокументов
	|ГДЕ
	|	(ТаблицаДокументов.Ссылка.ЭтоШаблон
	|			ИЛИ ТаблицаДокументов.Ссылка.Дата >= &МинимальнаяДата
	|				И (&ТолькоПоСпискуКошельков = ЛОЖЬ
	|					ИЛИ ТаблицаДокументов.ОбъектУчета В (&СписокКошельков)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка
	|ИЗ
	|	Документ.УниверсальнаяОперация.Перемещения КАК ТаблицаДокументов
	|ГДЕ
	|	(ТаблицаДокументов.Ссылка.ЭтоШаблон
	|			ИЛИ ТаблицаДокументов.Ссылка.Дата >= &МинимальнаяДата
	|				И (&ТолькоПоСпискуКошельков = ЛОЖЬ
	|					ИЛИ (&ТолькоПоСпискуКошельков
	|							И ТаблицаДокументов.ОбъектУчетаДт В (&СписокКошельков)
	|						ИЛИ ТаблицаДокументов.ОбъектУчетаКт В (&СписокКошельков))))";
	
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Процедура ЗарегистрироватьДляОтправкиОперацииЗаПериод(Узел, НачалоПериода, КонецПериода)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбщийЖурналДокументов.Ссылка
	|ИЗ
	|	ЖурналДокументов.ОбщийЖурналДокументов КАК ОбщийЖурналДокументов
	|ГДЕ
	|	ОбщийЖурналДокументов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбщийЖурналДокументов.Дата,
	|	ОбщийЖурналДокументов.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, Выборка.Ссылка);
	
	КонецЦикла; 
	
	// Кроме операций регистрируем регистры сведений и обороты плановых операций
	ПланыОбмена.ЗарегистрироватьИзменения(Узел, Метаданные.РегистрыСведений.КурсыВалют);
	ПланыОбмена.ЗарегистрироватьИзменения(Узел, Метаданные.РегистрыСведений.ПоказателиБюджета);
	ПланыОбмена.ЗарегистрироватьИзменения(Узел, Метаданные.РегистрыНакопления.ОборотыПлановыхОпераций);

КонецПроцедуры

// Из записей регистра накопления "ОборотыПлановыхОпераций" формирует записи регистра сведений 
//
//Параметры:
//	ПараметрыОбмена - структура с параметрами выполняемого обмена
//	СпискиВыгрузки - Структура с xml-списками
//	Данные - НаборЗаписейРегистраНакопления.ОборотыПлановыхОпераций
//
Процедура ВыгрузитьЗаписиПлановойОперации(ПараметрыОбмена, СпискиВыгрузки, Данные) 
	
	Если Данные.Количество() = 0 Тогда
		// удаление записей обрабатывается с удалением шаблонов
		Возврат ;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецРасписания", Данные.Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("МинимальнаяДата", ?(ЗначениеЗаполнено(ПараметрыОбмена.СвойстваУзлаКорреспондента.МинимальнаяДатаУзлаКорреспондента),
							ПараметрыОбмена.СвойстваУзлаКорреспондента.МинимальнаяДатаБюджетногоПериода, Неопределено));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыРасписаний.ВладелецРасписания,
	|	ДатыРасписаний.ПлановаяДата КАК ПлановаяДата,
	|	МАКСИМУМ(ДатыРасписаний.АктуальнаяДата) КАК АктуальнаяДата,
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.РазделБюджета, НЕОПРЕДЕЛЕНО) КАК РазделБюджета,
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.ТипПоказателя, НЕОПРЕДЕЛЕНО) КАК ТипПоказателя,
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.СтатьяБюджета, НЕОПРЕДЕЛЕНО) КАК СтатьяБюджета,
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.Кошелек, НЕОПРЕДЕЛЕНО) КАК ОткудаКуда,
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.Валюта, НЕОПРЕДЕЛЕНО) КАК Валюта,
	|	СУММА(ЕСТЬNULL(ОборотыПлановыхОпераций.Сумма, 0)) КАК Сумма,
	|	МАКСИМУМ(ДатыРасписаний.ПлановаяОперация) КАК ПлановаяОперация,
	|	МАКСИМУМ(ЕСТЬNULL(ОборотыПлановыхОпераций.Комментарий, """")) КАК Комментарий
	|ИЗ
	|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОборотыПлановыхОпераций КАК ОборотыПлановыхОпераций
	|		ПО ДатыРасписаний.ВладелецРасписания = ОборотыПлановыхОпераций.Регистратор
	|			И ДатыРасписаний.ПлановаяДата = ОборотыПлановыхОпераций.ПлановаяДата
	|ГДЕ
	|	ДатыРасписаний.ВладелецРасписания = &ВладелецРасписания
	|	//И НЕ ДатыРасписаний.ПлановаяОперация.Проведен ЕСТЬ NULL
	|	И НЕ ОборотыПлановыхОпераций.Кошелек ЕСТЬ NULL
	|	И (&МинимальнаяДата = НЕОПРЕДЕЛЕНО
	|			ИЛИ ДатыРасписаний.ПлановаяДата >= &МинимальнаяДата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыРасписаний.ВладелецРасписания,
	|	ДатыРасписаний.ПлановаяДата,
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.РазделБюджета, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.ТипПоказателя, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.СтатьяБюджета, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.Кошелек, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.Валюта, НЕОПРЕДЕЛЕНО)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлановаяДата
	|ИТОГИ ПО
	|	ПлановаяДата";
	
	
	ВладелецРасписания = УточнитьЗначениеДляПомещенияВОбъектXDTO(Данные.Отбор.Регистратор.Значение);
	ЗначенияПолей = Новый Структура("АктуальнаяДата,РазделБюджета,ГрафаБюджета,СтатьяБюджета,ОткудаКуда,Валюта,Сумма,ПлановаяОперация,Комментарий");
	
	ВыборкаПлановыхДат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПлановаяДата");
	Пока ВыборкаПлановыхДат.Следующий() Цикл
		
		Выборка = ВыборкаПлановыхДат.Выбрать();
		ОбъектXDTO = ОбъектXDTOНабораПоказателяПлановойОперации(Выборка, ЗначенияПолей, ВладелецРасписания, 
							УточнитьЗначениеДляПомещенияВОбъектXDTO(ВыборкаПлановыхДат.ПлановаяДата));
		
		Если ОбъектXDTO <> Неопределено Тогда
			СпискиВыгрузки.РегистрыСведений.Objects.Добавить(ОбъектXDTO)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбъектXDTOНабораПоказателяПлановойОперации(Выборка, ЗначенияПолей, XDTOВладельцаРасписания, XDTOПлановаяДата) 
	
	Результат = СоздатьОбъектXDTO("InformationRegisterRecordSet.ПоказателиПлановыхОпераций");
	
	Фильтр    = СоздатьОбъектXDTO("InformationRegisterRecordKey.ПоказателиПлановыхОпераций");
	Фильтр.Установить("ВладелецРасписания", XDTOВладельцаРасписания);
	Фильтр.Установить("ПлановаяДата",       XDTOПлановаяДата);
	Результат.Установить("Filter", Фильтр);
	Результат.Filter = Фильтр;
	
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ТипПоказателя) Или Не ЗначениеЗаполнено(Выборка.СтатьяБюджета) Тогда
			Продолжить;
		КонецЕсли;
		
		ГрафаБюджета = БюджетированиеСервер.ГрафаБюжетаДляСтатьи(Выборка.СтатьяБюджета, Выборка.ТипПоказателя, Выборка.РазделБюджета);
		Если Не ЗначениеЗаполнено(ГрафаБюджета) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = СоздатьОбъектXDTO("InformationRegisterRecord.ПоказателиПлановыхОпераций");
		НоваяЗапись.ВладелецРасписания  = XDTOВладельцаРасписания;
		НоваяЗапись.ПлановаяДата        = XDTOПлановаяДата;
		
		Для каждого КлючИЗначение Из ЗначенияПолей Цикл
			
			Если КлючИЗначение.Ключ = "ГрафаБюджета" Тогда
				ЗначенияПолей[КлючИЗначение.Ключ] = УточнитьЗначениеДляПомещенияВОбъектXDTO(ГрафаБюджета);
			Иначе
				ЗначенияПолей[КлючИЗначение.Ключ] = УточнитьЗначениеДляПомещенияВОбъектXDTO(Выборка[КлючИЗначение.Ключ]);
			КонецЕсли;
			
			НоваяЗапись[КлючИЗначение.Ключ] = ЗначенияПолей[КлючИЗначение.Ключ];
			
		КонецЦикла;
		
		Результат.Record.Добавить(НоваяЗапись);
		
	КонецЦикла;

	Если Результат.Record.Количество() > 0 Тогда
		Возврат Результат;
	КонецЕсли;
	 
	Возврат Неопределено;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// * Зарузка данных

Функция ПолучитьКонтейнерыОбъектовXDTO(ПараметрыОбмена)

	ЧтениеXML = ПараметрыОбмена.ЧтениеСообщения.ЧтениеXML;
	Результат = Новый Структура;
	
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		
		Контейнер = ПолучитьСледующийОбъектXDTO(ПараметрыОбмена);
		Если Контейнер = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Если Контейнер.Тип().Имя = "Settings" ИЛИ Контейнер.Свойства().Получить("Objects") <> Неопределено И Контейнер.Установлено("Objects") Тогда
			Результат.Вставить(Контейнер.Тип().Имя, Контейнер);
		КонецЕсли; 
		
	КонецЦикла;  
	
	Возврат Результат;
	
КонецФункции
 
Функция ПолучитьСледующийОбъектXDTO(ПараметрыОбмена)

	ЧтениеXML = ПараметрыОбмена.ЧтениеСообщения.ЧтениеXML;
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		// Получаем из файла ОбъектXDTO
		Возврат ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,
			ФабрикаXDTO.Тип(ЧтениеXML.URIПространстваИмен, ЧтениеXML.ЛокальноеИмя));
	КонецЕсли; 

	Возврат Неопределено;
	
КонецФункции
 
Процедура ПрочитатьСправочникиXDTO(ПараметрыОбмена, СпискоXDTO)

	Для Каждого ЭлементСписка Из СпискоXDTO.Objects Цикл
		
		// Получаем объект 1С из объекта XDTO
		РезультатЧтения = ПолучитьЭлементСправочникаИзXDTO(ЭлементСписка, ПараметрыОбмена);
		
		Если РезультатЧтения = Неопределено Тогда
			// Объект не был считан, возможно из-за коллизий
			Продолжить;
		КонецЕсли; 
		
		// Обновляем счетчики
		ПараметрыОбмена.СчетчикЗагруженныхОбъектов = ПараметрыОбмена.СчетчикЗагруженныхОбъектов + 1;
		ПараметрыОбмена.ЗаписаноЭлементовВТранзакции = ПараметрыОбмена.ЗаписаноЭлементовВТранзакции + 1;
		
		// Добавляем полученный результат в списки
		ПараметрыОбмена.ЗагруженныеОбъекты.Добавить(РезультатЧтения);
		
		// Проверяем транзакцию
		Если ПараметрыОбмена.ИспользоватьТранзакции 
			И ПараметрыОбмена.ЗаписаноЭлементовВТранзакции >= ПараметрыОбмена.КоличествоЭлементовВТранзакции Тогда
			ЗафиксироватьТранзакцию();
			ПараметрыОбмена.ЗаписаноЭлементовВТранзакции = 0;
			НачатьТранзакцию();
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры

Функция ПолучитьЭлементСправочникаИзXDTO(Объект, ПараметрыОбмена)

	УзелКорреспондента       = ПараметрыОбмена.УзелКорреспондента;
	СопоставленияПоСсылкам   = ПараметрыОбмена.СопоставленияПоСсылкам;
	СопоставленияДляПроверки = ПараметрыОбмена.СопоставленияДляПроверки;
	
	ИмяСправочника        = СтрЗаменить(Объект.Тип().Имя, "CatalogObject.", "");
	МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];
	МенеджерСправочника   = Справочники[ИмяСправочника];
	ЕстьНаименование      = МетаданныеСправочника.ДлинаНаименования <> 0;
	ЕстьКод               = МетаданныеСправочника.ДлинаКода <> 0;
	
	ЕстьИерархия = МетаданныеСправочника.Иерархический;
	РазделятьРеквизитыПоГруппам = Ложь;
	ЭтоГруппа = Ложь;
	Если ЕстьИерархия Тогда
		РазделятьРеквизитыПоГруппам = МетаданныеСправочника.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
		Если РазделятьРеквизитыПоГруппам Тогда
			ЭтоГруппа = Объект.IsFolder;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ИмяСправочника = "Пользователи" Тогда
		
		
		ИДОбъекта = Новый УникальныйИдентификатор(Прав(Объект.Ref, 36));
		Если Лев(Объект.Ref, 1) = "#" Тогда
			Ссылка = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ИДОбъекта);
		Иначе
			Ссылка = Справочники.Пользователи.ПолучитьСсылку(ИДОбъекта);
		КонецЕсли; 
		
	Иначе
		
		Если Объект.Свойства().Получить("PredefinedDataName") <> Неопределено 
			И Объект.Установлено("PredefinedDataName") 
			И ДневникКлиентСервер.ИмяПеременнойВалидно(Объект.PredefinedDataName) Тогда
			
			// Предопределенные элеметы синхронизируются по имени
			Ссылка = МенеджерСправочника[Объект.PredefinedDataName];
			
		Иначе
			
			СтрокаИдентификатора = Прав(Объект.Ref, 36);
			ИДОбъекта             = Новый УникальныйИдентификатор(СтрокаИдентификатора);
			
			Если СопоставленияПоСсылкам <> Неопределено И СопоставленияПоСсылкам.Получить(СтрокаИдентификатора) <> Неопределено Тогда
				Ссылка = СопоставленияПоСсылкам.Получить(СтрокаИдентификатора);
			Иначе
				Ссылка = МенеджерСправочника.ПолучитьСсылку(ИДОбъекта);
			КонецЕсли; 
			
			Если НЕ ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
				
				// Объект мог быть записан на разных устройствах но с одинаковым именем
				//Поиск осуществляем по наименованию или по коду но с учетом родителя
				Если ЕстьИерархия И Объект.Свойства().Получить("Parent") <> Неопределено
					И Объект.Установлено("Parent") Тогда
					
					ИДРодителя = Прав(Объект.Parent, 36);
					Попытка
					
						Если ДневникКлиентСервер.ИмяПеременнойВалидно(ИДРодителя) Тогда
							// Родителем назначен предопределенный элемет
							Родитель = МенеджерСправочника[ИДРодителя];
						Иначе
							Родитель   = МенеджерСправочника.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДРодителя));
						КонецЕсли;
						
					Исключение
						Родитель = Неопределено;
					КонецПопытки; 
					
				Иначе
					
					ИДРодителя  = Неопределено;
					Родитель    = Неопределено;
					
				КонецЕсли;
				
				Если ЕстьКод Тогда
					// Ищем элемент справочника по коду
					Ссылка = МенеджерСправочника.НайтиПоКоду(Объект.Code, Истина, Родитель);
				ИначеЕсли ЕстьНаименование Тогда
					// Ищем элемент справочника по наименованию
					Ссылка = МенеджерСправочника.НайтиПоНаименованию(Объект.Description, Истина, Родитель);
				КонецЕсли; 
				
				Если ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
					
					// Запишем соответствие объектов, сопоставленных по наименованию
					ЗаписатьСопоставлениеОбъектов(УзелКорреспондента, Ссылка, СтрокаИдентификатора);
					Если СопоставленияПоСсылкам <> Неопределено Тогда
						СопоставленияПоСсылкам.Вставить(СтрокаИдентификатора, Ссылка);
					КонецЕсли;
					// Запомним замененную ссылку и ссылку замены для проверки использования в других справочниках и регистрах
					Если СопоставленияДляПроверки <> Неопределено Тогда
						СопоставленияДляПроверки.Вставить(Справочники[ИмяСправочника].ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаИдентификатора)), Ссылка);
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	СсылкаСуществует = ОбщегоНазначения.СсылкаСуществует(Ссылка);
	
	// Проверяем возможные коллизии
	Если ПланыОбмена.ИзменениеЗарегистрировано(ПараметрыОбмена.УзелКорреспондента, Ссылка) Тогда
		Если СсылкаСуществует Тогда
			ПараметрыОбмена.СписокКоллизий.Добавить(Ссылка);
		КонецЕсли; 
		Возврат Ссылка;
	КонецЕсли; 
	
	// Получаем или создаем объект
	Если НЕ СсылкаСуществует Тогда
		Если ЭтоГруппа Тогда
			СправочникОбъект = МенеджерСправочника.СоздатьГруппу();
		Иначе
			СправочникОбъект = МенеджерСправочника.СоздатьЭлемент();
		КонецЕсли;
		СправочникОбъект.УстановитьСсылкуНового(МенеджерСправочника.ПолучитьСсылку(ИДОбъекта));
	Иначе
		СправочникОбъект = Ссылка.ПолучитьОбъект();
	КонецЕсли; 
	
	// Заполняем стандартные реквизиты
	СправочникОбъект.ИмяПредопределенныхДанных = Объект.PredefinedDataName;
	СправочникОбъект.ПометкаУдаления = Объект.DeletionMark;
	Если МетаданныеСправочника.ДлинаКода <> 0 Тогда
		СправочникОбъект.Код = Объект.Code;
	КонецЕсли;
	Если ЕстьНаименование Тогда
		СправочникОбъект.Наименование = Объект.Description;
	КонецЕсли;

	Если МетаданныеСправочника.Иерархический И Объект.Свойства().Получить("Parent") <> Неопределено И Объект.Установлено("Parent") Тогда
		СправочникОбъект.Родитель = ПрочитатьСвойствоОбъектаXDTO(Объект, 
					Объект.Свойства().Получить("Parent"), 
					ТипЗнч(СправочникОбъект.Родитель), СопоставленияПоСсылкам);
	КонецЕсли; 
	
	// Заполнение реквизитов шапки:
	Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
		
		Если Объект.Свойства().Получить(Реквизит.Имя) = Неопределено ИЛИ НЕ Объект.Установлено(Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ РазделятьРеквизитыПоГруппам 
				ИЛИ Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента
				ИЛИ Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы И СправочникОбъект.ЭтоГруппа
				ИЛИ Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента И НЕ СправочникОбъект.ЭтоГруппа
			Тогда
			
			СправочникОбъект[Реквизит.Имя] = ПрочитатьСвойствоОбъектаXDTO(Объект, 
						Объект.Свойства().Получить(Реквизит.Имя), 
						ТипЗнч(СправочникОбъект[Реквизит.Имя]), 
						СопоставленияПоСсылкам); 
			
		КонецЕсли; 
	КонецЦикла; 
	
	СправочникОбъект.ОбменДанными.Отправитель = УзелКорреспондента;
	СправочникОбъект.ОбменДанными.Загрузка    = Истина;
	
	// Проверяем обязательные реквизиты, которые не заполняются при загрузке данных
	ПроверитьСправочникОбъектПередЗаписью(СправочникОбъект, ИмяСправочника);
	
	СправочникОбъект.Записать();
	
	// Добавляем ссылку в список загруженных справочников и запоминаем прежние значения реквизитов
	СтрокаСправочника = ПараметрыОбмена.ИзмененныеСправочники.Добавить();
	СтрокаСправочника.Ссылка = СправочникОбъект.Ссылка;
	СтрокаСправочника.ДополнительныеСвойства = Новый Структура();
	Если СправочникОбъект.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
		СтрокаСправочника.ДополнительныеСвойства.Вставить("ЭтоНовый", СправочникОбъект.ДополнительныеСвойства.ЭтоНовый);
	КонецЕсли;
	Если СправочникОбъект.ДополнительныеСвойства.Свойство("ПрежниеЗначения") Тогда
		СтрокаСправочника.ДополнительныеСвойства.Вставить("ПрежниеЗначения", ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СправочникОбъект.ДополнительныеСвойства.ПрежниеЗначения));
	КонецЕсли;
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

Процедура ПроверитьСправочникОбъектПередЗаписью(СправочникОбъект, ИмяСправочника) 
	
	Если ИмяСправочника = "Валюты" Тогда
		
		Если СправочникОбъект.ЗагружаетсяИзИнтернета И СправочникОбъект.СпособУстановкиКурса <> Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета Тогда
			СправочникОбъект.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета;
		ИначеЕсли НЕ ЗначениеЗаполнено(СправочникОбъект.СпособУстановкиКурса) Тогда
			СправочникОбъект.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
		КонецЕсли; 
		
	КонецЕсли;
	
	
КонецПроцедуры
 

Процедура ПрочитатьДокументыXDTO(ПараметрыОбмена, СпискоXDTO)

	Для Каждого ЭлементСписка Из СпискоXDTO.Objects Цикл
		
		// Получаем объект 1С из объекта XDTO
		РезультатЧтения = ПолучитьДокументИзXDTO(ЭлементСписка, ПараметрыОбмена);
		
		Если РезультатЧтения = Неопределено Тогда
			// Объект не был считан, возможно из-за коллизий
			Продолжить;
		КонецЕсли; 
		
		// Обновляем счетчики
		ПараметрыОбмена.СчетчикЗагруженныхОбъектов   = ПараметрыОбмена.СчетчикЗагруженныхОбъектов + 1;
		ПараметрыОбмена.ЗаписаноЭлементовВТранзакции = ПараметрыОбмена.ЗаписаноЭлементовВТранзакции + 1;
		
		ПараметрыОбмена.ЗагруженныеОбъекты.Добавить(РезультатЧтения);
		
		// Проверяем транзакцию
		Если ПараметрыОбмена.ИспользоватьТранзакции 
			И ПараметрыОбмена.ЗаписаноЭлементовВТранзакции >= ПараметрыОбмена.КоличествоЭлементовВТранзакции Тогда
			ЗафиксироватьТранзакцию();
			ПараметрыОбмена.ЗаписаноЭлементовВТранзакции = 0;
			НачатьТранзакцию();
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры

Функция ПолучитьДокументИзXDTO(Объект, ПараметрыОбмена)

	СоответствиеРеквизитов = ПараметрыОбмена.СоответствиеРеквизитов;
	СопоставленияПоСсылкам = ПараметрыОбмена.СопоставленияПоСсылкам;
	УзелКорреспондента = ПараметрыОбмена.УзелКорреспондента;
	
	ИмяДокумента          = СтрЗаменить(Объект.Тип().Имя, "DocumentObject.", "");
	
	// Получаем метаданные и идентификаторы
	МетаданныеДокумента   = Метаданные.Документы[ИмяДокумента];
	МенеджерДокумента     = Документы[ИмяДокумента];
	ИДОбъекта = Новый УникальныйИдентификатор(Объект.Ref);

	// Имена реквизитов в базе получателе могут отличаться от имен в этой базе:
	СоответствиеИмен = Неопределено;
	СоответствиеРеквизитов.Документ.Свойство(МетаданныеДокумента.Имя, СоответствиеИмен); 
	
	Ссылка = МенеджерДокумента.ПолучитьСсылку(ИДОбъекта);
	СсылкаСуществует = НЕ Ссылка.Пустая() И ОбщегоНазначения.СсылкаСуществует(Ссылка);
	
	// Проверяем возможные коллизии
	Если ПланыОбмена.ИзменениеЗарегистрировано(ПараметрыОбмена.УзелКорреспондента, Ссылка) Тогда
		Если СсылкаСуществует Тогда
			ПараметрыОбмена.СписокКоллизий.Добавить(Ссылка);
		КонецЕсли; 
		Возврат Неопределено;
	КонецЕсли; 
	
	Если НЕ СсылкаСуществует Тогда
		ДокументОбъект = МенеджерДокумента.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(МенеджерДокумента.ПолучитьСсылку(ИДОбъекта));
	Иначе
		ДокументОбъект = Ссылка.ПолучитьОбъект();
	КонецЕсли; 
	
	ДоЗагрузкиПроведен          = ДокументОбъект.Проведен;
	ДоЗагрузкиПомеченНаУдаление = ДокументОбъект.ПометкаУдаления;
	
	// Заполняем стандартные реквизиты
	ДокументОбъект.Дата            = Объект.Date;
	ДокументОбъект.ПометкаУдаления = Объект.DeletionMark;
	ДокументОбъект.Проведен        = Объект.Posted;
	Если МетаданныеДокумента.ДлинаНомера <> 0 Тогда
		ДокументОбъект.Номер       = Объект.Number;
	КонецЕсли;
	
	// Заполнение реквизитов шапки:
	Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		
		Если СоответствиеИмен <> Неопределено И СоответствиеИмен.Свойство(Реквизит.Имя) Тогда
			ИмяРеквизитаВИсточнике = СоответствиеИмен[Реквизит.Имя];
		Иначе
			ИмяРеквизитаВИсточнике = Реквизит.Имя;
		КонецЕсли; 
		
		СвойствоОбъекта = Объект.Свойства().Получить(ИмяРеквизитаВИсточнике);
		Если СвойствоОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ДокументОбъект[Реквизит.Имя] = ПрочитатьСвойствоОбъектаXDTO(Объект, 
						СвойствоОбъекта, 
						ТипЗнч(ДокументОбъект[Реквизит.Имя]),
						СопоставленияПоСсылкам);
	
	КонецЦикла; 
	
	// Для нового документа устанавливаем пользователя, указанного в реквизитах узла
	Если НЕ СсылкаСуществует И ЗначениеЗаполнено(ПараметрыОбмена.СвойстваУзлаКорреспондента.ПользовательМобильногоУстройства) Тогда
		ДокументОбъект.Пользователь = ПараметрыОбмена.СвойстваУзлаКорреспондента.ПользовательМобильногоУстройства;
	КонецЕсли; 
	
	// Заполнение табличных частей
	Для Каждого МетаданныеТабЧасти Из МетаданныеДокумента.ТабличныеЧасти Цикл
		
		Если Объект.Свойства().Получить(МетаданныеТабЧасти.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		// Для сохранения аналитики создаем копию табличной части
		ЗначенияАналитики = ТабЧастьДокументаСАналитикой(ДокументОбъект[МетаданныеТабЧасти.Имя], МетаданныеТабЧасти);
		ДокументОбъект[МетаданныеТабЧасти.Имя].Очистить();
		
		СоответствиеИменТабЧасти = Неопределено;
		Если СоответствиеИмен <> Неопределено  Тогда
			СоответствиеИмен.Свойство(МетаданныеТабЧасти.Имя, СоответствиеИменТабЧасти);
		КонецЕсли; 
		
		СтрокиОбъекта = Объект[МетаданныеТабЧасти.Имя];
		Если СтрокиОбъекта <> Неопределено Тогда
			
			Для Каждого СтрокаОбъекта Из СтрокиОбъекта Цикл
				
				СтрокаДокумента = ДокументОбъект[МетаданныеТабЧасти.Имя].Добавить();
				
				Для Каждого РеквизитТЧ Из МетаданныеТабЧасти.Реквизиты Цикл
					
					ИмяРеквизитаТЧ = РеквизитТЧ.Имя;
					Если СоответствиеИменТабЧасти <> Неопределено И СоответствиеИменТабЧасти.Свойство(РеквизитТЧ.Имя)  Тогда
						ИмяРеквизитаТЧ = СоответствиеИменТабЧасти[РеквизитТЧ.Имя];
					КонецЕсли;
					
					СвойствоОбъекта = СтрокаОбъекта.Свойства().Получить(ИмяРеквизитаТЧ);
					Если СвойствоОбъекта = Неопределено Тогда
						Продолжить;
					КонецЕсли; 
					
					СтрокаДокумента[РеквизитТЧ.Имя] = ПрочитатьСвойствоОбъектаXDTO(СтрокаОбъекта, 
										СвойствоОбъекта, 
										ТипЗнч(СтрокаДокумента[РеквизитТЧ.Имя]),
										СопоставленияПоСсылкам); 
						
				КонецЦикла; 
				
				// Пытаемся восстановить аналитику:
				ПроверитьАналитикуВСтрокеДокумента(СтрокаДокумента, ЗначенияАналитики, МетаданныеТабЧасти);
				
			КонецЦикла; 
			
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ДокументОбъект.ОбменДанными.Отправитель = УзелКорреспондента;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.ДополнительныеСвойства.Вставить("НеВосстанавливатьПоследовательность", Истина);
	ДокументОбъект.Записать();
	
	Если ДоЗагрузкиПроведен Тогда
		Отказ = Ложь;
		ОбщегоНазначенияДеньги.УдалитьДвиженияДокумента(ДокументОбъект.Ссылка, Отказ, Истина, Ложь, Ложь);
		Если Отказ Тогда
			ВызватьИсключение "Не удалось удалить движения документа " + ДокументОбъект.Ссылка;
		КонецЕсли; 
	КонецЕсли; 
	
	// Добавляем полученный результат в списки
	СтрокаДокументаКПроведению = ПараметрыОбмена.ДокументыДляОтложенногоПроведения.Добавить();
	СтрокаДокументаКПроведению.ДокументСсылка              = ДокументОбъект.Ссылка;
	СтрокаДокументаКПроведению.ДатаДокумента               = ДокументОбъект.Дата;
	СтрокаДокументаКПроведению.ВИсточникеПроведен          = ДокументОбъект.Проведен;
	СтрокаДокументаКПроведению.ВИсточникеПомеченНаУдаление = ДокументОбъект.ПометкаУдаления;
	СтрокаДокументаКПроведению.ДоЗагрузкиПомеченНаУдаление = ДоЗагрузкиПомеченНаУдаление;
	СтрокаДокументаКПроведению.ДоЗагрузкиПроведен          = ДоЗагрузкиПроведен;
	СтрокаДокументаКПроведению.ЭтоНовый                    = Не СсылкаСуществует;
	
	Возврат ДокументОбъект.Ссылка;

КонецФункции

Функция ТабЧастьДокументаСАналитикой(ТабличнаяЧасть, МетаданныеТабличнойЧасти)

	Результат = ТабличнаяЧасть.Выгрузить();
	ИмяКолонкиАналитики = "АналитикаСтатьи";
	
	Если МетаданныеТабличнойЧасти = Метаданные.Документы.Доход.ТабличныеЧасти.Доходы Тогда
		Результат.Свернуть("Кошелек,ФинансоваяЦель,СтатьяДохода,АналитикаСтатьи");
	ИначеЕсли МетаданныеТабличнойЧасти = Метаданные.Документы.МыВернулиДолг.ТабличныеЧасти.ДополнительныеРасходы
		ИЛИ МетаданныеТабличнойЧасти = Метаданные.Документы.МыВзялиВДолг.ТабличныеЧасти.ДополнительныеРасходы
		ИЛИ МетаданныеТабличнойЧасти = Метаданные.Документы.МыДалиВДолг.ТабличныеЧасти.ДополнительныеРасходы
		ИЛИ МетаданныеТабличнойЧасти = Метаданные.Документы.НамВернулиДолг.ТабличныеЧасти.ДополнительныеРасходы
		ИЛИ МетаданныеТабличнойЧасти = Метаданные.Документы.ОбменВалюты.ТабличныеЧасти.ДополнительныеРасходы
		ИЛИ МетаданныеТабличнойЧасти = Метаданные.Документы.Перемещение.ТабличныеЧасти.ДополнительныеРасходы Тогда
		Результат.Свернуть("КошелекРасхода,ФинансоваяЦель,СтатьяРасхода,АналитикаСтатьи");
	ИначеЕсли МетаданныеТабличнойЧасти = Метаданные.Документы.Расход.ТабличныеЧасти.Расходы Тогда
		Результат.Свернуть("СтатьяРасходаИмущество,ФинансоваяЦель,АналитикаСтатьи");
	ИначеЕсли МетаданныеТабличнойЧасти = Метаданные.Документы.УниверсальнаяОперация.ТабличныеЧасти.Доходы Тогда
		Результат.Свернуть("СтатьяДохода,РазделУчета,ОбъектУчета,ФинансоваяЦель,АналитикаСтатьиДохода");
		ИмяКолонкиАналитики = "АналитикаСтатьиДохода";
	ИначеЕсли МетаданныеТабличнойЧасти = Метаданные.Документы.УниверсальнаяОперация.ТабличныеЧасти.Расходы Тогда
		Результат.Свернуть("СтатьяРасхода,РазделУчета,ОбъектУчета,ФинансоваяЦель,АналитикаСтатьиРасхода");
		ИмяКолонкиАналитики = "АналитикаСтатьиРасхода";
	Иначе
		Результат.Очистить();
	КонецЕсли; 

	Если Результат.Количество() > 0  Тогда
		СтрокиБезАналитики = Результат.НайтиСтроки(Новый Структура(ИмяКолонкиАналитики, Справочники.ЗначенияСубконтоАналитика.ПустаяСсылка()));
		Для Каждого СтрокаБезАналитики Из СтрокиБезАналитики Цикл
			Результат.Удалить(СтрокаБезАналитики);
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьАналитикуВСтрокеДокумента(СтрокаДокумента, ЗначенияАналитики, МетаданныеТабличнойЧасти)

	Если ЗначенияАналитики.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПоиска = Неопределено;
	ИмяКолонкиАналитики = "АналитикаСтатьи";
	
	Если МетаданныеТабличнойЧасти = Метаданные.Документы.Доход.ТабличныеЧасти.Доходы Тогда
		СтруктураПоиска = Новый Структура("Кошелек,ФинансоваяЦель,СтатьяДохода");
	ИначеЕсли МетаданныеТабличнойЧасти = Метаданные.Документы.МыВернулиДолг.ТабличныеЧасти.ДополнительныеРасходы
		ИЛИ МетаданныеТабличнойЧасти = Метаданные.Документы.МыВзялиВДолг.ТабличныеЧасти.ДополнительныеРасходы
		ИЛИ МетаданныеТабличнойЧасти = Метаданные.Документы.МыДалиВДолг.ТабличныеЧасти.ДополнительныеРасходы
		ИЛИ МетаданныеТабличнойЧасти = Метаданные.Документы.НамВернулиДолг.ТабличныеЧасти.ДополнительныеРасходы
		ИЛИ МетаданныеТабличнойЧасти = Метаданные.Документы.ОбменВалюты.ТабличныеЧасти.ДополнительныеРасходы
		ИЛИ МетаданныеТабличнойЧасти = Метаданные.Документы.Перемещение.ТабличныеЧасти.ДополнительныеРасходы Тогда
		СтруктураПоиска = Новый Структура("КошелекРасхода,ФинансоваяЦель,СтатьяРасхода");
	ИначеЕсли МетаданныеТабличнойЧасти = Метаданные.Документы.Расход.ТабличныеЧасти.Расходы Тогда
		СтруктураПоиска = Новый Структура("СтатьяРасходаИмущество,ФинансоваяЦель");
	ИначеЕсли МетаданныеТабличнойЧасти = Метаданные.Документы.УниверсальнаяОперация.ТабличныеЧасти.Доходы Тогда
		СтруктураПоиска = Новый Структура("СтатьяДохода,РазделУчета,ОбъектУчета,ФинансоваяЦель");
		ИмяКолонкиАналитики = "АналитикаСтатьиДохода";
	ИначеЕсли МетаданныеТабличнойЧасти = Метаданные.Документы.УниверсальнаяОперация.ТабличныеЧасти.Расходы Тогда
		СтруктураПоиска = Новый Структура("СтатьяРасхода,РазделУчета,ОбъектУчета,ФинансоваяЦель");
		ИмяКолонкиАналитики = "АналитикаСтатьиРасхода";
	Иначе
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумента);
	СтрокиАналитики = ЗначенияАналитики.НайтиСтроки(СтруктураПоиска);
	Если СтрокиАналитики.Количество() = 1 Тогда
		СтрокаДокумента[ИмяКолонкиАналитики] = СтрокиАналитики[0][ИмяКолонкиАналитики];
	КонецЕсли; 

КонецПроцедуры
 

Процедура ПрочитатьКонстантыXDTO(ПараметрыОбмена, СпискоXDTO)

	Для Каждого ЭлементСписка Из СпискоXDTO.Objects Цикл
		
		ИмяКонстанты = СтрЗаменить(ЭлементСписка.Тип().Имя, "ConstantValueManager.", "");
		
		//Валюта учета может изменяться только в настльном приложении
		Если ИмяКонстанты = "ВалютаУчета" И ПараметрыОбмена.Сценарий <> Перечисления.СценарииОбменаСМобильнымПриложением.НастольныеЗаменитьМобильными Тогда
			// Не меняем значение, но регистрируем константу, чтобы отправить в мобильное приложение ее правильное значение
			ПланыОбмена.ЗарегистрироватьИзменения(ПараметрыОбмена.УзелКорреспондента, Константы.ВалютаУчета);
			Продолжить;
		КонецЕсли; 
		
		// Проверка коллизий
		Если ПланыОбмена.ИзменениеЗарегистрировано(ПараметрыОбмена.УзелКорреспондента, Константы[ИмяКонстанты]) Тогда
			Продолжить;
		КонецЕсли; 
		
		ЗначениеКонстанты = ПрочитатьСвойствоОбъектаXDTO(ЭлементСписка, "Value", 
					ТипЗнч(Константы[ИмяКонстанты]), 
					ПараметрыОбмена.СопоставленияПоСсылкам);
		
		Если ЗначениеЗаполнено(ЗначениеКонстанты) Тогда
			
			МенеджерЗначения = Константы[ИмяКонстанты].СоздатьМенеджерЗначения();
			МенеджерЗначения.Прочитать();
			
			СтрокаКонстанты = ПараметрыОбмена.ИзмененныеКонстанты.Добавить();
			СтрокаКонстанты.ИмяКонстанты    = ИмяКонстанты;
			СтрокаКонстанты.ПрежнееЗначение = МенеджерЗначения.Значение;
			СтрокаКонстанты.НовоеЗначение   = ЗначениеКонстанты;
			
			МенеджерЗначения.Значение = ЗначениеКонстанты;
			Если МенеджерЗначения.ПроверитьЗаполнение() Тогда
				МенеджерЗначения.ОбменДанными.Отправитель = ПараметрыОбмена.УзелКорреспондента;
				МенеджерЗначения.ОбменДанными.Загрузка = Истина;
				МенеджерЗначения.Записать();
			КонецЕсли; 
			
			// Обновляем счетчики
			ПараметрыОбмена.СчетчикЗагруженныхОбъектов = ПараметрыОбмена.СчетчикЗагруженныхОбъектов + 1;
			ПараметрыОбмена.ЗаписаноЭлементовВТранзакции = ПараметрыОбмена.ЗаписаноЭлементовВТранзакции + 1;
			
		КонецЕсли; 
		
		// Проверяем транзакцию
		Если ПараметрыОбмена.ИспользоватьТранзакции 
			И ПараметрыОбмена.ЗаписаноЭлементовВТранзакции >= ПараметрыОбмена.КоличествоЭлементовВТранзакции Тогда
			ЗафиксироватьТранзакцию();
			ПараметрыОбмена.ЗаписаноЭлементовВТранзакции = 0;
			НачатьТранзакцию();
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры
 
Процедура ПрочитатьРегистрыСведенийXDTO(ПараметрыОбмена, СпискоXDTO)
	
	Для Каждого ЭлементСписка Из СпискоXDTO.Objects Цикл
		
		ИмяРегистра = СтрЗаменить(ЭлементСписка.Тип().Имя, "InformationRegisterRecordSet.", "");
		
		Если ИмяРегистра = "ПоказателиПлановыхОпераций" Тогда
			ДобавитьЗаписьПоказателяПлановойОперации(ЭлементСписка, ПараметрыОбмена);
		Иначе
			ПрочитатьСтандартныйРегистрСведенийXDTO(ЭлементСписка, ПараметрыОбмена, ИмяРегистра);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьЗаписьПоказателяПлановойОперации(ЭлементСписка, ПараметрыОбмена) 
	
	Если ЭлементСписка.Свойства().Получить("Record") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ОборотыПлановыхОпераций;
	ПоляФильтра = "ВладелецРасписания,ПлановаяДата,АктуальнаяДата,РазделБюджета,ГрафаБюджета,";
	
	Фильтр = ЭлементСписка.Filter;
	
	Регистратор   = ЗначениеРеквизитаИзКоллекцииXDTO(Фильтр, "ВладелецРасписания", Тип("Неопределено"), ПараметрыОбмена.СопоставленияПоСсылкам);
	Период        = ЗначениеРеквизитаИзКоллекцииXDTO(Фильтр, "АктуальнаяДата", Тип("Дата"), ПараметрыОбмена.СопоставленияПоСсылкам);
	РазделБюджета = ЗначениеРеквизитаИзКоллекцииXDTO(Фильтр, "РазделБюджета", Тип("СправочникСсылка.ФинансовыеЦели"), ПараметрыОбмена.СопоставленияПоСсылкам);
	Кошелек       = ЗначениеРеквизитаИзКоллекцииXDTO(Фильтр, "ОткудаКуда", Тип("СправочникСсылка.КошелькиИСчета"), ПараметрыОбмена.СопоставленияПоСсылкам);
	ГрафаБюджета  = ЗначениеРеквизитаИзКоллекцииXDTO(Фильтр, "ГрафаБюджета", Тип("СправочникСсылка.ГрафыБюджета"), ПараметрыОбмена.СопоставленияПоСсылкам);
	СтатьяБюджета = ЗначениеРеквизитаИзКоллекцииXDTO(Фильтр, "СтатьяБюджета", Тип("Неопределено"), ПараметрыОбмена.СопоставленияПоСсылкам);
	Валюта        = ЗначениеРеквизитаИзКоллекцииXDTO(Фильтр, "Валюта", Тип("СправочникСсылка.Валюты"), ПараметрыОбмена.СопоставленияПоСсылкам);
	
	Если Не ЗначениеЗаполнено(Регистратор) Или Не ЗначениеЗаполнено(Период)
		Или Не ЗначениеЗаполнено(ГрафаБюджета) Тогда
		Возврат;
	КонецЕсли;
	
	ТипПоказателя = ГрафаБюджета.ТипПоказателя;
	
	Для Каждого ПолученнаяЗапись Из ЭлементСписка.Record Цикл
		
		СтрокаТаблицы = ПараметрыОбмена.ПоказателиОпераций.Добавить();
		
		СтрокаТаблицы.Регистратор   = Регистратор;
		СтрокаТаблицы.Период        = Период;
		СтрокаТаблицы.РазделБюджета = РазделБюджета;
		СтрокаТаблицы.Кошелек       = Кошелек;
		СтрокаТаблицы.ТипПоказателя = ТипПоказателя;
		СтрокаТаблицы.СтатьяБюджета = СтатьяБюджета;
		СтрокаТаблицы.Валюта        = Валюта;
		
		СтрокаТаблицы.Сумма         = ЗначениеРеквизитаИзКоллекцииXDTO(ПолученнаяЗапись, "Сумма", Тип("Число"), ПараметрыОбмена.СопоставленияПоСсылкам);
		СтрокаТаблицы.Комментарий   = ЗначениеРеквизитаИзКоллекцииXDTO(ПолученнаяЗапись, "Комментарий", Тип("Строка"), ПараметрыОбмена.СопоставленияПоСсылкам);
		СтрокаТаблицы.ПлановаяДата  = ЗначениеРеквизитаИзКоллекцииXDTO(ПолученнаяЗапись, "ПлановаяДата", Тип("Дата"), ПараметрыОбмена.СопоставленияПоСсылкам);
		
	КонецЦикла; 
	
КонецПроцедуры

Функция ЗначениеРеквизитаИзКоллекцииXDTO(Коллекция, Имяреквизита, ТребуемыйТип, СопоставленияПоСсылкам) 

	ЗначениеРеквизита = Неопределено;
	Если Коллекция.Свойства().Получить(Имяреквизита) <> Неопределено Тогда
		ЗначениеРеквизита = ПрочитатьСвойствоОбъектаXDTO(Коллекция, Имяреквизита, ТребуемыйТип, СопоставленияПоСсылкам);
	КонецЕсли; 

	Возврат ЗначениеРеквизита;
	
КонецФункции

Процедура ПрочитатьПоказателиПлановыхОперацийXDTO(ПараметрыОбмена) 
	
	Если ПараметрыОбмена.ПоказателиОпераций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Обновляем плановые показатели плановых операций в РН ОборотыПлановыхОпераций
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПоказателиОпераций", ПараметрыОбмена.ПоказателиОпераций);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОборотыПлановыхОпераций.Период,
	|	ОборотыПлановыхОпераций.Регистратор,
	|	ОборотыПлановыхОпераций.РазделБюджета,
	|	ОборотыПлановыхОпераций.Кошелек,
	|	ОборотыПлановыхОпераций.ТипПоказателя,
	|	ОборотыПлановыхОпераций.СтатьяБюджета,
	|	ОборотыПлановыхОпераций.Валюта,
	|	ОборотыПлановыхОпераций.УдалитьГрафаБюджета,
	|	ОборотыПлановыхОпераций.УдалитьШаблонОперации,
	|	ОборотыПлановыхОпераций.Сумма,
	|	ОборотыПлановыхОпераций.ПлановаяДата,
	|	ОборотыПлановыхОпераций.Комментарий
	|ПОМЕСТИТЬ ПоказателиОпераций
	|ИЗ
	|	&ПоказателиОпераций КАК ОборотыПлановыхОпераций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыПлановыхОпераций.Период КАК Период,
	|	ОборотыПлановыхОпераций.Регистратор КАК Регистратор,
	|	ОборотыПлановыхОпераций.РазделБюджета,
	|	ОборотыПлановыхОпераций.Кошелек,
	|	ОборотыПлановыхОпераций.ТипПоказателя,
	|	ОборотыПлановыхОпераций.СтатьяБюджета,
	|	ОборотыПлановыхОпераций.Валюта,
	|	ОборотыПлановыхОпераций.УдалитьГрафаБюджета,
	|	ОборотыПлановыхОпераций.УдалитьШаблонОперации,
	|	ОборотыПлановыхОпераций.Сумма,
	|	ОборотыПлановыхОпераций.ПлановаяДата,
	|	ОборотыПлановыхОпераций.Комментарий
	|ИЗ
	|	РегистрНакопления.ОборотыПлановыхОпераций КАК ОборотыПлановыхОпераций
	|ГДЕ
	|	ОборотыПлановыхОпераций.Регистратор В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ПоказателиОпераций.Регистратор
	|			ИЗ
	|				ПоказателиОпераций КАК ПоказателиОпераций)
	|	И НЕ ОборотыПлановыхОпераций.ПлановаяДата В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПоказателиОпераций.ПлановаяДата
	|				ИЗ
	|					ПоказателиОпераций КАК ПоказателиОпераций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОборотыПлановыхОпераций.Период,
	|	ОборотыПлановыхОпераций.Регистратор,
	|	ОборотыПлановыхОпераций.РазделБюджета,
	|	ОборотыПлановыхОпераций.Кошелек,
	|	ОборотыПлановыхОпераций.ТипПоказателя,
	|	ОборотыПлановыхОпераций.СтатьяБюджета,
	|	ОборотыПлановыхОпераций.Валюта,
	|	ОборотыПлановыхОпераций.УдалитьГрафаБюджета,
	|	ОборотыПлановыхОпераций.УдалитьШаблонОперации,
	|	ОборотыПлановыхОпераций.Сумма,
	|	ОборотыПлановыхОпераций.ПлановаяДата,
	|	ОборотыПлановыхОпераций.Комментарий
	|ИЗ
	|	ПоказателиОпераций КАК ОборотыПлановыхОпераций
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	Период
	|ИТОГИ ПО
	|	Регистратор";
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор");
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		Набор = РегистрыНакопления.ОборотыПлановыхОпераций.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		
		// Прверякем наличие коллизий
		Если ПланыОбмена.ИзменениеЗарегистрировано(ПараметрыОбмена.УзелКорреспондента, Набор) Тогда
			Продолжить;
		КонецЕсли; 
		
		Выборка = ВыборкаРегистраторов.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
		КонецЦикла;
		
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.ОбменДанными.Отправитель = ПараметрыОбмена.УзелКорреспондента;
		Набор.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьСтандартныйРегистрСведенийXDTO(ЭлементСписка, ПараметрыОбмена, ИмяРегистра) 
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Отправитель = ПараметрыОбмена.УзелКорреспондента;
	НаборЗаписей.ОбменДанными.Загрузка    = Истина;
	ЭтоУдаление = ЭлементСписка.Свойства().Получить("Record") = Неопределено;
	СтруктураОтбора = Новый Структура;
	
	Фильтр = ЭлементСписка.Filter;
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Если Фильтр.Свойства().Получить(Измерение.Имя) <> Неопределено Тогда
			ЗначениеОтбора = ПрочитатьСвойствоОбъектаXDTO(Фильтр, Измерение.Имя, 
					ТипЗнч(НаборЗаписей.Отбор[Измерение.Имя].Значение), 
					ПараметрыОбмена.СопоставленияПоСсылкам);
			НаборЗаписей.Отбор[Измерение.Имя].Установить(ЗначениеОтбора);
			Если НЕ ЭтоУдаление Тогда
				СтруктураОтбора.Вставить(Измерение.Имя, ЗначениеОтбора);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		СтруктураОтбора.Вставить("Период", ПрочитатьСвойствоОбъектаXDTO(Фильтр, "Period", Тип("Дата")));
		НаборЗаписей.Отбор.Период.Установить(СтруктураОтбора.Период);
	КонецЕсли;
	
	Если МетаданныеРегистра.Имя = "ПоказателиБюджета" Тогда
		НаборЗаписей.Отбор.ТипПоказателя.Установить(НаборЗаписей.Отбор.ГрафаБюджета.Значение.ТипПоказателя);
		СтруктураОтбора.Вставить("ТипПоказателя", НаборЗаписей.Отбор.ТипПоказателя.Значение);
	КонецЕсли;
	
	// Проверка коллизии
	Если ПланыОбмена.ИзменениеЗарегистрировано(ПараметрыОбмена.УзелКорреспондента, НаборЗаписей) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЭтоУдаление Тогда
		
		Для Каждого ПолученнаяЗапись Из ЭлементСписка.Record Цикл
			
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, СтруктураОтбора);
			
			Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
				Если ПолученнаяЗапись.Свойства().Получить(Ресурс.Имя) <> Неопределено Тогда
					ЗаписьРегистра[Ресурс.Имя] = ПрочитатьСвойствоОбъектаXDTO(ПолученнаяЗапись, Ресурс.Имя, 
							ТипЗнч(ЗаписьРегистра[Ресурс.Имя]), 
							ПараметрыОбмена.СопоставленияПоСсылкам);
				КонецЕсли; 
			КонецЦикла; 
			
			Для Каждого Ресурс Из МетаданныеРегистра.Реквизиты Цикл
				Если ПолученнаяЗапись.Свойства().Получить(Ресурс.Имя) <> Неопределено Тогда
					ЗаписьРегистра[Ресурс.Имя] = ПрочитатьСвойствоОбъектаXDTO(ПолученнаяЗапись, Ресурс.Имя, 
							ТипЗнч(ЗаписьРегистра[Ресурс.Имя]), 
							ПараметрыОбмена.СопоставленияПоСсылкам);
				КонецЕсли; 
			КонецЦикла; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	// Проверка коллизий
	Если ПланыОбмена.ИзменениеЗарегистрировано(ПараметрыОбмена.УзелКорреспондента, НаборЗаписей) Тогда
		Возврат;
	КонецЕсли; 
	
	// Обновляем счетчики
	ПараметрыОбмена.СчетчикЗагруженныхОбъектов = ПараметрыОбмена.СчетчикЗагруженныхОбъектов + 1;
	ПараметрыОбмена.ЗаписаноЭлементовВТранзакции = ПараметрыОбмена.ЗаписаноЭлементовВТранзакции + 1;
	
	НаборЗаписей.Записать(Истина);
	
	// Проверяем транзакцию
	Если ПараметрыОбмена.ИспользоватьТранзакции 
		И ПараметрыОбмена.ЗаписаноЭлементовВТранзакции >= ПараметрыОбмена.КоличествоЭлементовВТранзакции Тогда
		ЗафиксироватьТранзакцию();
		ПараметрыОбмена.ЗаписаноЭлементовВТранзакции = 0;
		НачатьТранзакцию();
	КонецЕсли; 
	
КонецПроцедуры


Процедура ПрочитатьУдаленияXDTO(ПараметрыОбмена, СпискоXDTO)

	СоответствиеСтрокДокументам = Новый Соответствие;
	
	Для Каждого ЭлементСписка Из СпискоXDTO.Objects Цикл
		
		ИмяМетаданных = ЭлементСписка.MetaDataName;
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяМетаданных);
		
		ЭтоДокумент = Ложь;
		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
			ТипОбъекта = Тип("ДокументСсылка." + МетаданныеОбъекта.Имя);
			ЭтоДокумент = Истина;
		ИначеЕсли ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда
			ТипОбъекта = Тип("СправочникСсылка." + МетаданныеОбъекта.Имя);
		КонецЕсли; 
		СсылкаНаОбъект   = XMLЗначение(ТипОбъекта, ЭлементСписка.Ref);
		
		// Проверка коллизий
		Если ПланыОбмена.ИзменениеЗарегистрировано(ПараметрыОбмена.УзелКорреспондента, СсылкаНаОбъект) Тогда
			Продолжить;
		КонецЕсли; 
		
		// Обновляем счетчики
		ПараметрыОбмена.СчетчикЗагруженныхОбъектов = ПараметрыОбмена.СчетчикЗагруженныхОбъектов + 1;
		
		Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъект) Тогда
			
			ПараметрыОбмена.СписокУдаляемыхОбъектов.Добавить(СсылкаНаОбъект);
			ОбъектУдаления = СсылкаНаОбъект.ПолучитьОбъект();
			ОбъектУдаления.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
			ОбъектУдаления.УстановитьПометкуУдаления(Истина);
			
			Если ЭтоДокумент Тогда
				// Удаленные документы обрабатываются вместе с прочими документами
				СтрокаДокументаКПроведению = ПараметрыОбмена.ДокументыДляОтложенногоПроведения.Добавить();
				СтрокаДокументаКПроведению.ДокументСсылка   = СсылкаНаОбъект;
				СтрокаДокументаКПроведению.ДатаДокумента    = СсылкаНаОбъект.Дата;
				СтрокаДокументаКПроведению.ВИсточникеУдален = Истина;
				СоответствиеСтрокДокументам.Вставить(СсылкаНаОбъект, СтрокаДокументаКПроведению);
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Прверяем возможность удалить объекты
	ТаблицаЗависимостей = НайтиПоСсылкам(ПараметрыОбмена.СписокУдаляемыхОбъектов);
	КолонкаСсылок = ТаблицаЗависимостей.Колонки[0].Имя;
	
	НеудаленныеОбъекты = Новый Массив;
	Счетчик = 0;
	
	// Удаляем объекты, которые не имеют зависимостей
	Для Каждого УдаляемыйЭлемент Из ПараметрыОбмена.СписокУдаляемыхОбъектов Цикл
		
		Если ТаблицаЗависимостей.Найти(УдаляемыйЭлемент, КолонкаСсылок) = Неопределено Тогда
			
			Если СоответствиеСтрокДокументам.Получить(УдаляемыйЭлемент) <> Неопределено Тогда
				Отказ = Ложь;
				ОбщегоНазначенияДеньги.УдалитьДвиженияДокумента(УдаляемыйЭлемент, Отказ);
				Если Отказ Тогда
					ВызватьИсключение "Не удалось удалить движения документа " + УдаляемыйЭлемент;
				КонецЕсли; 
				СоответствиеСтрокДокументам.Удалить(УдаляемыйЭлемент);
			КонецЕсли; 
			
			ОбъектУдаления = УдаляемыйЭлемент.ПолучитьОбъект();
			ОбъектУдаления.ОбменДанными.Загрузка    = Истина;
			ОбъектУдаления.ОбменДанными.Отправитель = ПараметрыОбмена.УзелКорреспондента;
			ОбъектУдаления.Удалить();
			
			ПараметрыОбмена.ЗаписаноЭлементовВТранзакции = ПараметрыОбмена.ЗаписаноЭлементовВТранзакции + 1;
			// Проверяем транзакцию
			Если ПараметрыОбмена.ИспользоватьТранзакции 
				И ПараметрыОбмена.ЗаписаноЭлементовВТранзакции >= ПараметрыОбмена.КоличествоЭлементовВТранзакции Тогда
				ЗафиксироватьТранзакцию();
				ПараметрыОбмена.ЗаписаноЭлементовВТранзакции = 0;
				НачатьТранзакцию();
			КонецЕсли; 
			
		Иначе
			
			НеудаленныеОбъекты.Добавить(УдаляемыйЭлемент);
			ПланыОбмена.ЗарегистрироватьИзменения(ПараметрыОбмена.УзелКорреспондента, УдаляемыйЭлемент)
			
		КонецЕсли; 
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла; 

	// Сотавляем только неудаленные объекты
	ПараметрыОбмена.СписокУдаляемыхОбъектов = НеудаленныеОбъекты;
	
КонецПроцедуры

// Выполняет перезапись загруженных объектов для корректного восстановления связанной информации,
//	которую невозможно вычислить в момент загрузки объектов, т.к. объекты загружаются в произвольном порядке
Процедура ОбновитьСвязанныеДанныеОбъектов(ПараметрыОбмена) 
	
	// Для элемнетов справочников, в которых изменились значимые реквизиты, изменяем связанные данные,
	//что невозможно сделать до загрузки всех изменений
	Для каждого СтрокаСправочника Из ПараметрыОбмена.ИзмененныеСправочники Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСправочника.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		СправочникОбъект = СтрокаСправочника.Ссылка.ПолучитьОбъект();
		
		УдалятьРегистрацию = Не ПланыОбмена.ИзменениеЗарегистрировано(ПараметрыОбмена.УзелКорреспондента, СправочникОбъект);
		СправочникОбъект.ДополнительныеСвойства.Вставить("УдалятьРегистрацию", УдалятьРегистрацию);
		СправочникОбъект.ДополнительныеСвойства.Вставить("УзелКорреспондента", ПараметрыОбмена.УзелКорреспондента);
		
		Для каждого КлючИЗначение Из СтрокаСправочника.ДополнительныеСвойства Цикл
			СправочникОбъект.ДополнительныеСвойства.Вставить(КлючИЗначение.Ключ, СтрокаСправочника.ДополнительныеСвойства[КлючИЗначение.Ключ]);
		КонецЦикла;
		
		Если СправочникОбъект.ПроверитьЗаполнение() Тогда
			СправочникОбъект.Записать();
		Иначе
			ЗаписьЖурналаРегистрации(ПараметрыОбмена.КлючСообщенияЖурналаРегистрации, 
				УровеньЖурналаРегистрации.Ошибка, 
				СправочникОбъект.Метаданные(), 
				СправочникОбъект, 
				НСтр("ru = 'Ошибка при записи элемента справочника'") + ":" + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		КонецЕсли; 
		
		Если УдалятьРегистрацию Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыОбмена.УзелКорреспондента, СправочникОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проводит (распроводит) загуженные документы 
Процедура ПерепровестиЗагруженныеДокументы(ПараметрыОбмена)

	УзелКорреспондента = ПараметрыОбмена.УзелКорреспондента;
	ТаблицаДокументов  = ПараметрыОбмена.ДокументыДляОтложенногоПроведения;
	ТаблицаДокументов.Сортировать("ДатаДокумента, ДокументСсылка");
	МинимальнаяДата = ?(ТаблицаДокументов.Количество() =0 , Неопределено, НачалоДня(ТаблицаДокументов[0].ДатаДокумента));
	ТипИзменениеОстатка = Тип("ДокументСсылка.ВводИзменениеОстатка");
	
	Для Каждого СтрокаДокумента Из ТаблицаДокументов Цикл
		
		Если ТипЗнч(СтрокаДокумента.ДокументСсылка) = ТипИзменениеОстатка Тогда
			// Для ускорения документы "Ввод изменение остатка" обрабатываются отдельно
			СтрокаДокумента.ОбработанУспешно = Истина;
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = СтрокаДокумента.ДокументСсылка.ПолучитьОбъект();
		
		Если СтрокаДокумента.ЭтоНовый Тогда
			// Заполнение аналитики нового документа значениями по умолчанию
			АналитикаСтатей.ЗаполнитьАналитикуДокументаЗначениямиПоУмолчанию(ДокументОбъект);
		КонецЕсли;
		
		Если ДокументОбъект <> Неопределено Тогда
			
			УдалятьРегистрацию = Не ПланыОбмена.ИзменениеЗарегистрировано(ПараметрыОбмена.УзелКорреспондента, ДокументОбъект);
			
			Попытка
				
				ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
				ДокументОбъект.ДополнительныеСвойства.Вставить("НеВосстанавливатьПоследовательность",  Истина);
				
				Если СтрокаДокумента.ВИсточникеПроведен Тогда
					Если ДокументОбъект.ПроверитьЗаполнение() Тогда
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
						СтрокаДокумента.ОбработанУспешно = Истина;
					Иначе
						СтрокаДокумента.ОписаниеПроблемы = НСтр("ru = 'Реквизиты операции заполнены не полностью или неправильно'");
						ЗаписьЖурналаРегистрации(ПараметрыОбмена.КлючСообщенияЖурналаРегистрации, 
							УровеньЖурналаРегистрации.Ошибка, 
							ДокументОбъект.Метаданные(), 
							ДокументОбъект, 
							НСтр("ru = 'Ошибка при проведении операции'") + ":" + Символы.ПС + СтрокаДокумента.ОписаниеПроблемы); 
					КонецЕсли; 
				Иначе 
					ДокументОбъект.Записать(?(СтрокаДокумента.ДоЗагрузкиПроведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись));
					СтрокаДокумента.ОбработанУспешно = Истина;
				КонецЕсли;
			
			Исключение
				СтрокаДокумента.ОписаниеПроблемы = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(ПараметрыОбмена.КлючСообщенияЖурналаРегистрации, 
					УровеньЖурналаРегистрации.Ошибка, 
					ДокументОбъект.Метаданные(), 
					ДокументОбъект, 
					НСтр("ru = 'Ошибка при записи операции'") + ":" + Символы.ПС + СтрокаДокумента.ОписаниеПроблемы); 
			КонецПопытки; 
				
			Если УдалятьРегистрацию Тогда
				//Удаляем регистрацию полученного документа
				ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыОбмена.УзелКорреспондента, ДокументОбъект);
			КонецЕсли; 
			
		КонецЕсли; 
		
		
	КонецЦикла; 

	Если МинимальнаяДата <> Неопределено Тогда
		ПерепровестиИзмененияОстатков(МинимальнаяДата, ПараметрыОбмена);
	КонецЕсли;
	
КонецПроцедуры

// Выбирает и перепроводит все операции воода/изменения остатка за указанный период
//
//Параметры:
//	НачалоПериода- Дата - начало периода, с которого нужно выбрать все операции Ввода/изменения остатка
//
Процедура ПерепровестиИзмененияОстатков(НачалоПериода, ПараметрыОбмена) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводИзменениеОстатка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВводИзменениеОстатка КАК ВводИзменениеОстатка
	|ГДЕ
	|	ВводИзменениеОстатка.Дата >= &НачалоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВводИзменениеОстатка.Дата,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВводИзменениеОстатков.ОбъектУчета КАК ОбъектУчета,
	|	МАКСИМУМ(ВводИзменениеОстатков.Регистратор) КАК Регистратор,
	|	МАКСИМУМ(ВводИзменениеОстатков.Период) КАК Период,
	|	ВводИзменениеОстатков.РазделУчета
	|ИЗ
	|	Последовательность.ВводИзменениеОстатков КАК ВводИзменениеОстатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Последовательность.ВводИзменениеОстатков.Границы КАК ВводИзменениеОстатковГраницы
	|		ПО ВводИзменениеОстатков.ОбъектУчета = ВводИзменениеОстатковГраницы.ОбъектУчета
	|			И ВводИзменениеОстатков.РазделУчета = ВводИзменениеОстатковГраницы.РазделУчета
	|			И ВводИзменениеОстатков.МоментВремени > ВводИзменениеОстатковГраницы.МоментВремени
	|			И (ВводИзменениеОстатков.Регистратор.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВводИзменениеОстатков.ОбъектУчета,
	|	ВводИзменениеОстатков.РазделУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Выборка = ПакетРезультатов[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		УдалятьРегистрациюИзменений =  ЗначениеЗаполнено(ПараметрыОбмена.УзелКорреспондента) 
				И Не ПланыОбмена.ИзменениеЗарегистрировано(ПараметрыОбмена.УзелКорреспондента, Выборка.Ссылка);
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
		ДокументОбъект.ДополнительныеСвойства.Вставить("НеВосстанавливатьПоследовательность",  Истина);
		
		Попытка
			ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалость обработать <%1>.
				|Информация для службы поддержки: ""%2""'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Сообщить(ТекстСообщения);
		КонецПопытки; 
		
		//Удаляем регистрацию полученного документа
		Если УдалятьРегистрациюИзменений Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыОбмена.УзелКорреспондента, Выборка.Ссылка);
		КонецЕсли; 
		
	КонецЦикла;
	
	// Сдвигаем границу последовательности на последний документ для каждого объекта учета
	Выборка = ПакетРезультатов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Последовательности.ВводИзменениеОстатков.УстановитьГраницу(Выборка.Регистратор.МоментВремени(), 
						Новый Структура("ОбъектУчета,РазделУчета", Выборка.ОбъектУчета, Выборка.РазделУчета));
	КонецЦикла;
	
КонецПроцедуры


// Возвращает значение свойства объекта XDTO. Исользуется для корректной конвертации объектов XDTO в объекты информационной базы
//
//Параметры:
//	ОбъектXDTO  - ОбъектXDTO, чье свойство нужно получить
//	Свойство - свойство объекта, элемент коллекции ОбъектXDTO.Свойства()
//	ТребуемыйТип - тип, используется для конвертации некоторых ссылочных значений 
//	
//Возвращаемое значение
//	произвольное, зависит от типа полученного Объекта XDTO
//
Функция ПрочитатьСвойствоОбъектаXDTO(Знач ОбъектXDTO, Свойство, ТребуемыйТип = Неопределено, СопоставленияПоСсылкам = Неопределено)

	Если НЕ ОбъектXDTO.Установлено(Свойство) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ЗначениеXDTO        = ОбъектXDTO.ПолучитьXDTO(Свойство);
	Если ЗначениеXDTO.Тип().Имя = "anyType" И ЗначениеXDTO.Свойства().Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипСвойства         = ТипЗнч(ЗначениеXDTO);
	ТипЗначенияСвойства = ТипЗнч(ЗначениеXDTO.Значение);
	
	Если ТипСвойства = Неопределено Тогда
		
		Возврат ЗначениеXDTO;
		
	ИначеЕсли ТипСвойства = Тип("ЗначениеXDTO") Тогда
		
		ИмяТипа             = ЗначениеXDTO.Тип().Имя;
		ЭтоСправочник       = Найти(ИмяТипа, "CatalogRef") > 0;
		ЭтоДокумент         = Найти(ИмяТипа, "DocumentRef") > 0;
		ЭтоПеречисление     = Найти(ИмяТипа, "EnumRef") > 0;
		
		Если ЭтоСправочник Тогда
			
		    ИмяСправочника      = СтрЗаменить(ИмяТипа, "CatalogRef.", "");
			Если ИмяСправочника = "РазделыУчета" Тогда
				МенеджерСправочника = ПланыСчетов.РазделыУчета;
			Иначе
				МенеджерСправочника = Справочники[ИмяСправочника];
			КонецЕсли; 
			ЗначениеСтрокой     = Строка(ЗначениеXDTO.Значение);
			ИДСтрокой           = ?(Найти(ЗначениеСтрокой,"-") = 0, СокрЛП(ЗначениеСтрокой), Прав(ЗначениеСтрокой, 36));
			
			Если НЕ ЗначениеЗаполнено(ИДСтрокой) ИЛИ Лев(ЗначениеСтрокой, 1) = "#" ИЛИ ИДСтрокой = "00000000-0000-0000-0000-000000000000" Тогда
				Возврат МенеджерСправочника.ПустаяСсылка();
			КонецЕсли; 
			
			Если СопоставленияПоСсылкам <> Неопределено И СопоставленияПоСсылкам.Получить(ИДСтрокой) <> Неопределено Тогда
				
				// Возвращаем сопоставленную ссылку
				Возврат СопоставленияПоСсылкам.Получить(ИДСтрокой);
				
			ИначеЕсли ИмяСправочника = "РазделыУчета" Тогда
				
				// Раздел учета из мобильного приложения передается по имени предопределенного элемента
				Возврат МенеджерСправочника[ИДСтрокой];
				
			ИначеЕсли Найти(ИДСтрокой, "-") = 0 Тогда
				
				// Вместо ссылки получено имя предопределенного элемента
				Попытка
					Результат = Справочники[ИмяСправочника][ЗначениеXDTO.Значение];
				Исключение
					Результат = Неопределено;
				КонецПопытки; 
				
				Возврат Результат;
				
			Иначе
				
				// обход ошибки мобильной платформы в загрузке стандартной схемы http://v8.1c.ru/8.1/data/enterprise 
				Если ТипЗначенияСвойства = Тип("Строка") Тогда
					Возврат МенеджерСправочника.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДСтрокой));
				ИначеЕсли ТипЗначенияСвойства = Тип("УникальныйИдентификатор") Тогда
					Возврат МенеджерСправочника.ПолучитьСсылку(ЗначениеXDTO.Значение);
				Иначе
					Возврат XMLЗначение(Тип(ИмяТипа), ЗначениеXDTO.Значение);
				КонецЕсли; 
				
			КонецЕсли; 
			
		ИначеЕсли ЭтоДокумент Тогда
			
		    ИмяДокумента      = СтрЗаменить(ИмяТипа, "DocumentRef.", "");
			Если ИмяДокумента = "Перемещение" Тогда
				МенеджерДокумента = Документы.Перемещение;
			Иначе
				МенеджерДокумента = Документы[ИмяДокумента];
			КонецЕсли; 
			ЗначениеСтрокой   = Строка(ЗначениеXDTO.Значение);
			ИДСтрокой         = ?(Найти(ЗначениеСтрокой,"-") = 0, СокрЛП(ЗначениеСтрокой), Прав(ЗначениеСтрокой, 36));
			
			Если НЕ ЗначениеЗаполнено(ИДСтрокой) ИЛИ Лев(ЗначениеСтрокой, 1) = "#" ИЛИ ИДСтрокой = "00000000-0000-0000-0000-000000000000" Тогда
				// Решеткой помечаются несинхронизируемые типы
				Возврат МенеджерДокумента.ПустаяСсылка();
			КонецЕсли; 
			
			// обход ошибки мобильной платформы в загрузке стандартной схемы http://v8.1c.ru/8.1/data/enterprise 
			Если ТипЗначенияСвойства = Тип("Строка") Тогда
				Возврат МенеджерДокумента.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДСтрокой));
			ИначеЕсли ТипЗнч(ЗначениеXDTO.Значение) = Тип("УникальныйИдентификатор") Тогда
				Возврат МенеджерДокумента.ПолучитьСсылку(ЗначениеXDTO.Значение);
			Иначе
				Возврат XMLЗначение(Тип(ИмяТипа), ЗначениеXDTO.Значение);
			КонецЕсли; 
			
		ИначеЕсли ЭтоПеречисление Тогда
			
			Возврат XMLЗначение(Тип(ИмяТипа), ЗначениеXDTO.Значение);
			
		ИначеЕсли ТребуемыйТип = Тип("ПланСчетовСсылка.РазделыУчета") Тогда
			
			Возврат ПланыСчетов.РазделыУчета[ЗначениеXDTO.Значение];
				
		Иначе 
			
			Возврат XMLЗначение(ТребуемыйТип, ЗначениеXDTO.ЛексическоеЗначение);
			
		КонецЕсли; 
		
	КонецЕсли; 
	

КонецФункции

Процедура ЗаписатьСопоставлениеОбъектов(УзелКорреспондента, ОбъектВЭтойБазе, ИДОбъектаВБазеКорреспондента)

	ЗаписьРегистра = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.УзелИнформационнойБазы = УзелКорреспондента;
	ЗаписьРегистра.УникальныйИдентификаторИсточника = ОбъектВЭтойБазе;
	ЗаписьРегистра.УникальныйИдентификаторПриемника = ИДОбъектаВБазеКорреспондента;
	Если ЗначениеЗаполнено(ОбъектВЭтойБазе) Тогда
		ЗаписьРегистра.ТипИсточника = ОбъектВЭтойБазе.Метаданные().ПолноеИмя();
		ЗаписьРегистра.ТипПриемника = ЗаписьРегистра.ТипИсточника;
	КонецЕсли; 
	ЗаписьРегистра.УникальныйИдентификаторИсточникаСтрокой = ОбъектВЭтойБазе.УникальныйИдентификатор();
	ЗаписьРегистра.Записать(Истина);

КонецПроцедуры

// Проверяет и возвращает структуру, сохраненную в одноименной константе
Функция ПараметрыЦентральнойБазыМобильныхПриложений(ОбновлятьИмяБазы = Ложь) Экспорт

	// Эталонная структура, с которой будем сверять значения, сохраненные в константе
	Результат = Новый Структура;
	Результат.Вставить("ИспользованаАвтоУстановка", Ложь);
	Результат.Вставить("ЗащищенноеСоединение", Ложь);
	Результат.Вставить("ВебСервер", "");
	Результат.Вставить("КаталогВебСервера", "");
	Результат.Вставить("ИмяЭтойБазы", "");
	Результат.Вставить("НомерПорта", "");
	Результат.Вставить("IPАдрес", "");
	Результат.Вставить("ПубликацияПроверена", Ложь);
	
	СохраненныеЗначения = Константы.ПараметрыЦентральнойБазыМобильныхПриложений.Получить().Получить();
	Если ТипЗнч(СохраненныеЗначения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, СохраненныеЗначения);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Результат.ИмяЭтойБазы) Или ОбновлятьИмяБазы Тогда
		Результат.ИмяЭтойБазы = "Money_" + Формат(ТекущаяДата(), "ДФ=дчс");
		Константы.ПараметрыЦентральнойБазыМобильныхПриложений.Установить(Новый ХранилищеЗначения(Результат));
	КонецЕсли; 
	 
	Возврат Результат;

КонецФункции


// Возвращает имя файла списка устройств
// 
// Возвращаемое значение:
//  * Строка - Имя файла, хранящего список устройств 
//  * Неопределено - Имя центральной базы не задано
//
Функция ПолучитьИмяФайлаСпискаУстройств() Экспорт
	ПараметрыЦентральнойБазы = ПараметрыЦентральнойБазыМобильныхПриложений();
	ИмяЭтойБазы = ПараметрыЦентральнойБазы.ИмяЭтойБазы;	
	
	Если ПустаяСтрока(ИмяЭтойБазы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИмяЭтойБазы + "_Apps.xml";
КонецФункции

// Получает настройки прокси сервера
//
Функция НастройкиПроксиСервера() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		НастройкаПроксиСервера = МодульПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
		
	Иначе
		
		НастройкаПроксиСервера = Неопределено;
		
	КонецЕсли;
	
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		Если ИспользоватьПрокси Тогда
			Если ИспользоватьСистемныеНастройки Тогда
				// Системные настройки прокси-сервера
				Прокси = Новый ИнтернетПрокси(Истина);
			Иначе
				// Ручные настройки прокси-сервера
				Прокси = Новый ИнтернетПрокси;
				Прокси.Установить("ftp", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
				Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
				Прокси.Пароль       = НастройкаПроксиСервера["Пароль"];
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
			КонецЕсли;
		Иначе
			// Не использовать прокси-сервер
			Прокси = Новый ИнтернетПрокси(Ложь);
		КонецЕсли;
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// * Обмен данными по сценариям

// Для внутреннего использования
// 
Функция СтруктураНастроекОбменаБазовая(СсылкаНаТранспорт = Неопределено)
	
	СтруктураНастроекОбмена = Новый Структура;
	
	// Список устройств, с которыми осуществляется обмен по указанному транспорту
	СтруктураНастроекОбмена.Вставить("ТаблицаУзловКорреспондентов", Новый ТаблицаЗначений);
	СтруктураНастроекОбмена.ТаблицаУзловКорреспондентов.Колонки.Добавить("УзелИнформационнойБазы");
	СтруктураНастроекОбмена.ТаблицаУзловКорреспондентов.Колонки.Добавить("УзелИнформационнойБазыКод");
	СтруктураНастроекОбмена.ТаблицаУзловКорреспондентов.Колонки.Добавить("УзелИнформационнойБазыНаименование");
	СтруктураНастроекОбмена.ТаблицаУзловКорреспондентов.Колонки.Добавить("ВыгружатьИзменения");
	СтруктураНастроекОбмена.ТаблицаУзловКорреспондентов.Колонки.Добавить("ИмяПолученногоФайла");
	СтруктураНастроекОбмена.ТаблицаУзловКорреспондентов.Колонки.Добавить("ИмяОтправленногоФайла");
	
	// Настройки, используемыя процедурами БСП по обмену с конкретным узлом
	СтруктураНастроекОбмена.Вставить("ДатаНачала");
	СтруктураНастроекОбмена.Вставить("ДатаОкончания");
	СтруктураНастроекОбмена.Вставить("Отказ", Ложь);
	СтруктураНастроекОбмена.Вставить("ЭтоОбменВРИБ", Ложь);
	
	СтруктураНастроекОбмена.Вставить("НастройкаВыполненияОбмена",             Неопределено);
	СтруктураНастроекОбмена.Вставить("НастройкаВыполненияОбменаНаименование", "");
	
	СтруктураНастроекОбмена.Вставить("ИмяПланаОбмена", "МобильноеПриложение");
	СтруктураНастроекОбмена.Вставить("ТекущийУзелПланаОбмена", ПланыОбмена.МобильноеПриложение.ЭтотУзел());
	СтруктураНастроекОбмена.Вставить("ТекущийУзелПланаОбменаКод", СтруктураНастроекОбмена.ТекущийУзелПланаОбмена.Код);
	СтруктураНастроекОбмена.Вставить("ТекущийУзелПланаОбменаНаименование", СтруктураНастроекОбмена.ТекущийУзелПланаОбмена.Наименование);
	
	СтруктураНастроекОбмена.Вставить("ОбменПоПравиламКонвертацииОбъектов", Ложь);
	
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазы");
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазыКод", "");
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазыНаименование", "");
	
	СтруктураНастроекОбмена.Вставить("ВидТранспортаОбмена");
	СтруктураНастроекОбмена.Вставить("ДействиеПриОбмене");
	СтруктураНастроекОбмена.Вставить("КоличествоЭлементовВТранзакции", 1); // на каждый элемент отдельная транзакция
	СтруктураНастроекОбмена.Вставить("ПроизводитьЗагрузкуДанных", Истина);
	СтруктураНастроекОбмена.Вставить("ПроизводитьВыгрузкуДанных", Истина);
	СтруктураНастроекОбмена.Вставить("ИспользоватьПередачуБольшогоОбъемаДанных", Ложь);
	
	// структура настроек дополнительная (БСП)
	СтруктураНастроекОбмена.Вставить("ОбработкаОбменаДанными");
	СтруктураНастроекОбмена.Вставить("ОбработкаТранспортаСообщенийОбмена");
	СтруктураНастроекОбмена.Вставить("ИмяОбработкиТранспортаСообщенийОбмена");
	
	СтруктураНастроекОбмена.Вставить("КлючСообщенияЖурналаРегистрации", "Обмен данными." + Метаданные.ПланыОбмена.МобильноеПриложение.Синоним);
	СтруктураНастроекОбмена.Вставить("ТекущееДействие");
	
	СтруктураНастроекОбмена.Вставить("ТранспортОбмена", СсылкаНаТранспорт);
	СтруктураНастроекОбмена.Вставить("НастройкиТранспорта");
	Если СсылкаНаТранспорт <> Неопределено Тогда
		СтруктураНастроекОбмена.НастройкиТранспорта = НастройкиТранспортаОбмена(СсылкаНаТранспорт);
		СтруктураНастроекОбмена.ВидТранспортаОбмена = СтруктураНастроекОбмена.НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию;
	КонецЕсли; 
	
	// Правила конвертации в обмене с мобильными приложениями не используются
	СтруктураНастроекОбмена.Вставить("ПравилаКонвертацииОбъектов");
	СтруктураНастроекОбмена.Вставить("ПравилаЗагружены", Ложь);
	
	// Параметры для использования механизмов БСП по отладке обмена даннымм
	СтруктураНастроекОбмена.Вставить("ОтладкаОбработчиковВыгрузки ", Ложь);
	СтруктураНастроекОбмена.Вставить("ОтладкаОбработчиковЗагрузки", Ложь);
	СтруктураНастроекОбмена.Вставить("ИмяФайлаВнешнейОбработкиОтладкиВыгрузки", "");
	СтруктураНастроекОбмена.Вставить("ИмяФайлаВнешнейОбработкиОтладкиЗагрузки", "");
	СтруктураНастроекОбмена.Вставить("РежимПротоколированияОбменаДанными", Ложь);
	СтруктураНастроекОбмена.Вставить("ИмяФайлаПротоколаОбмена", "");
	СтруктураНастроекОбмена.Вставить("ПродолжитьПриОшибке", Ложь);
	
	// структура для регистрации событий в ЖР
	СтруктураНастроекОбмена.Вставить("РезультатВыполненияОбмена");
	СтруктураНастроекОбмена.Вставить("ДействиеПриОбмене");
	СтруктураНастроекОбмена.Вставить("КоличествоОбъектовОбработано", 0);
	СтруктураНастроекОбмена.Вставить("СообщениеПриОбмене",           "");
	СтруктураНастроекОбмена.Вставить("СтрокаСообщенияОбОшибке",      "");
	
	Возврат СтруктураНастроекОбмена;
	
КонецФункции

Функция НастройкиТранспортаОбмена(СсылкаНаТранспорт)

	Результат = Справочники.ТранспортыОбменаДанными.СтруктураПараметровТранспорта(СсылкаНаТранспорт);
	
	// Добавление реквизитов для процедур БСП
	Результат.Вставить("ВидТранспортаСообщенийОбменаПоУмолчанию", Результат.ВидТранспорта);
	Результат.Вставить("ПарольАрхиваСообщенияОбмена", Результат.ПарольАрхиваСообщенияОбмена);
	Результат.Вставить("Узел", ПолучитьЭтотУзел());
	Результат.Вставить("ИспользоватьВременныйКаталогДляОтправкиИПриемаСообщений", Истина);
	
	Если Результат.ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.COM Тогда
		
		Результат.Вставить("COMИмяПользователя",    Результат.ИмяПользователяНаРесурсе);
		Результат.Вставить("COMПарольПользователя", Результат.ПарольПользователяНаРесурсе);
		
	ИначеЕсли Результат.ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL Тогда
		
		Результат.Вставить("EMAILУчетнаяЗапись",                         Результат.EMAILУчетнаяЗапись);
		Результат.Вставить("EMAILСжиматьФайлИсходящегоСообщения",        Результат.СжиматьФайлИсходящегоСообщения);
		Результат.Вставить("EMAILМаксимальныйДопустимыйРазмерСообщения", Результат.МаксимальныйДопустимыйРазмерСообщения);
		
	ИначеЕсли Результат.ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.FILE Тогда
		
		Результат.Вставить("FILEСжиматьФайлИсходящегоСообщения",  Результат.СжиматьФайлИсходящегоСообщения);
		
	ИначеЕсли Результат.ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.ЯндексДиск Тогда
		
		Результат.Вставить("ЯндексДискСжиматьФайлИсходящегоСообщения",  Результат.СжиматьФайлИсходящегоСообщения);
		Результат.Вставить("ЯндексДискСжиматьФайлИсходящегоСообщения", Результат.СжиматьФайлИсходящегоСообщения);
		
	ИначеЕсли Результат.ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.Dropbox Тогда
		
		Результат.Вставить("DropBoxСжиматьФайлИсходящегоСообщения",  Результат.СжиматьФайлИсходящегоСообщения);
		
	ИначеЕсли Результат.ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.WS Тогда
		
		Результат.Вставить("WSИмяПользователя",  Результат.ИмяПользователяНаРесурсе);
		Результат.Вставить("WSПароль",           Результат.ПарольПользователяНаРесурсе);
		Результат.Вставить("WSЗапомнитьПароль",  Результат.ЗапомнитьПароль);
		
	КонецЕсли; 

	ОбменДаннымиСервер.ДополнитьНастройкиТранспортаКоличествомЭлементовВТранзакции(Результат);
	
	Возврат Результат;
	
КонецФункции
 
// Для внутреннего использования
// 	Выполняет проверку соединения с указанным транспортом обмена
Процедура ПроверитьСоединениеСТранспортом(СтруктураНастроекОбмена)

	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	ДействиеСтрокой = СтрШаблон(НСтр("ru = 'Подключение к сервису %1'"), СтруктураНастроекОбмена.ТранспортОбмена);
	
	// получаем инициализированную обработку транспорта сообщений
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	
	// создание каталогов и определеие шаблонов
	РегистрыСведений.КонтрольТранспортовОбмена.ОбновитьСостояниеТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, НСтр("ru='Подготовка транспорта к обмену'"));
	Если Не ОбработкаТранспортаСообщенийОбмена.ВыполнитьДействияПередОбработкойСообщения() Тогда
		
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР, Неопределено, "ЗагрузкаДанных", , , );
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
		
		ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Неопределено, Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
				ДействиеСтрокой, Истина, Истина, 
				ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР);
				
		РегистрыСведений.КонтрольТранспортовОбмена.УстановитьЗавершениеРаботыТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, 
				ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР);
		
		Возврат;
		
	КонецЕсли;
	
	// проверка подключения
	РегистрыСведений.КонтрольТранспортовОбмена.ОбновитьСостояниеТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, НСтр("ru='Проверка соединения с облачным сервисом'"));
	Если Не ОбработкаТранспортаСообщенийОбмена.ПодключениеУстановлено(Ложь) Тогда
		
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		
		ДополнительноеСообщение = НСтр("ru = 'Техническую информацию об ошибке см. в журнале регистрации.'");
		
		СообщениеОбОшибке = СтрШаблон("%1
						|%2", ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибке, ДополнительноеСообщение);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Транспорт сообщений обмена'"),
			УровеньЖурналаРегистрации.Ошибка,,, ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР);
		
		ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Неопределено, Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
				ДействиеСтрокой, Истина, Истина, ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР);
				
		РегистрыСведений.КонтрольТранспортовОбмена.УстановитьЗавершениеРаботыТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, 
				ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР);
				
	КонецЕсли;

КонецПроцедуры
 
Процедура ЗавершитьИспользованиеОблачногоТранспорта(СтруктураНастроекОбмена, ЗаписатьРезультатыОбмена = Ложь, УстанавливатьЗавершениеРаботыТранспорта = Ложь) 
	
	Если ЗаписатьРезультатыОбмена Тогда
		ОтправитьРезультатыОбменаВОблако(СтруктураНастроекОбмена);
	КонецЕсли;
	
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	ОбработкаТранспортаСообщенийОбмена.ВыполнитьДействияПослеОбработкиСообщения();
	
	ОбменДаннымиСервер.ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	Если УстанавливатьЗавершениеРаботыТранспорта Тогда
		РегистрыСведений.КонтрольТранспортовОбмена.УстановитьЗавершениеРаботыТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьРезультатыОбменаВОблако(СтруктураНастроекОбмена) 
	
	РегистрыСведений.КонтрольТранспортовОбмена.ОбновитьСостояниеТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, НСтр("ru='Отправка отчетов о синхронизации в облако'"));
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерСеанса", НомерСеансаИнформационнойБазы());
	Запрос.УстановитьПараметр("Транспорт", СтруктураНастроекОбмена.ТранспортОбмена);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрольОбменаДанными.УзелИнформационнойБазы КАК Узел,
	|	КонтрольОбменаДанными.УзелИнформационнойБазы.Код КАК КодУзла,
	|	КонтрольОбменаДанными.Транспорт.ВидТранспорта КАК ВидТранспорта,
	|	КонтрольОбменаДанными.ПоследнееПолучение,
	|	КонтрольОбменаДанными.РезультатПолученияДанных,
	|	КонтрольОбменаДанными.ТекстОшибокПолучения,
	|	КонтрольОбменаДанными.ПоследняяОтправка,
	|	КонтрольОбменаДанными.РезультатОтправкиДанных,
	|	КонтрольОбменаДанными.ТекстОшибокОтправки,
	|	КонтрольОбменаДанными.УзелИнформационнойБазы.Активность КАК Активность
	|ИЗ
	|	РегистрСведений.КонтрольОбменаДанными КАК КонтрольОбменаДанными
	|ГДЕ
	|	НЕ КонтрольОбменаДанными.УзелИнформационнойБазы.ЭтотУзел
	|	И КонтрольОбменаДанными.НомерСеанса = &НомерСеанса
	|	И КонтрольОбменаДанными.Транспорт = &Транспорт";
	
	Попытка
	
		РезультатОтправки = ОбработкаТранспортаСообщенийОбмена.ОтправитьРезультатыОбмена(СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод, Запрос.Выполнить().Выбрать());
	
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		РегистрыСведений.КонтрольТранспортовОбмена.УстановитьЗавершениеРаботыТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, КраткоеПредставлениеОшибки(Инфо), Неопределено);
		ВызватьИсключение ПодробноеПредставлениеОшибки(Инфо);
		
	КонецПопытки;
	
КонецПроцедуры


// Для внутреннего использования
// 
Процедура ПолучитьСообщенияИзТранспортаОбмена(СтруктураНастроекОбмена)

	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	
	// получаем инициализированную обработку транспорта сообщений
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	
	ВременныйКаталог = ОбработкаТранспортаСообщенийОбмена.ИмяКаталогаСообщенияОбмена();
	СтруктураНастроекОбмена.Вставить("ВременныйКаталогФайловОбмена", ВременныйКаталог);
	СтруктураНастроекОбмена.Вставить("СписокКодовУстройств", Новый Массив);
	
	СтруктураНастроекОбмена.ТекущееДействие = НСтр("ru='Получение файлов с помощью транспорта <%1>'"); 
	СтруктураНастроекОбмена.ТекущееДействие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтруктураНастроекОбмена.ТекущееДействие, СтруктураНастроекОбмена.ТранспортОбмена);
	ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Неопределено,	Перечисления.ДействияПриОбмене.ЗагрузкаДанных, СтруктураНастроекОбмена.ТекущееДействие);
	
	// получаем отчеты об обмене от мобильных устройств
	РегистрыСведений.КонтрольТранспортовОбмена.ОбновитьСостояниеТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, НСтр("ru='Получение отчетов по синхронизации из облака'"));
	ТаблицаОтчетов = ОбработкаТранспортаСообщенийОбмена.ПолучитьФайлыОтчетов();
	Если ТаблицаОтчетов <> Неопределено И ТаблицаОтчетов.Количество() > 0 Тогда
		ПолучитьРезультатыОбменаИзФайлов(СтруктураНастроекОбмена, ТаблицаОтчетов);
	КонецЕсли;
	
	// получаем сообщения обмена во временный каталог
	РегистрыСведений.КонтрольТранспортовОбмена.ОбновитьСостояниеТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, НСтр("ru='Получение файлов сообщений из облака'"));
	Если Не ОбработкаТранспортаСообщенийОбмена.ПолучитьВсеСообщения() Тогда
		
		//ОбменДаннымиСервер.ЗаписьЖурналаРегистрацииОбменаДанными(ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР, СтруктураНастроекОбмена, Истина);
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
		
		ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Неопределено, Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
				СтруктураНастроекОбмена.ТекущееДействие, Истина, Истина, ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР);
				
		РегистрыСведений.КонтрольТранспортовОбмена.УстановитьЗавершениеРаботыТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, 
				ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР);
		
		Возврат;
		
	КонецЕсли;
	
	// Получаем список кодов устройств, зарегистрировавшихся в данном транспорте обмена
	СтруктураНастроекОбмена.СписокКодовУстройств = ОбработкаТранспортаСообщенийОбмена.СписокКодовУстройств;
	
	// обрабатываем файлы во временном каталоге.
	СтруктураНастроекОбмена.ТекущееДействие = НСтр("ru='Чтение файлов'"); 
	ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Неопределено,	Перечисления.ДействияПриОбмене.ЗагрузкаДанных, СтруктураНастроекОбмена.ТекущееДействие);
	
	РегистрыСведений.КонтрольТранспортовОбмена.ОбновитьСостояниеТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, НСтр("ru='Чтение полученных файлов сообщений'"));
	
	ДлинаКода = СтрДлина(СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод);
	СчетчикФайлов      = 0;
	КоличествоОшибок   = 0;
	
	Для Каждого КодУстройства Из СтруктураНастроекОбмена.СписокКодовУстройств Цикл
		
		УзелКорреспондента = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодУстройства);
		Если ЗначениеЗаполнено(УзелКорреспондента) Тогда
			// для известных узлов устанавливаем отметку о начале обмена
			РегистрыСведений.КонтрольОбменаДанными.УстановитьНачалоОбмена(УзелКорреспондента, СтруктураНастроекОбмена.ТранспортОбмена);
			РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелКорреспондента, НСтр("ru='Получение файлов из облака'"));
		КонецЕсли;
		
		ИмяФайла = ИмяФайлаСообщенияОбмена(КодУстройства, СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод) + ".xml";
		Файл = Новый Файл(СтруктураНастроекОбмена.ВременныйКаталогФайловОбмена + ИмяФайла);
		Если Не Файл.Существует() Или Не Файл.ЭтоФайл() Тогда
			Если ЗначениеЗаполнено(УзелКорреспондента) Тогда
				РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелКорреспондента, НСтр("ru='От устройства нет файла'"));
			КонецЕсли;
			Продолжить;
		КонецЕсли; 
		
		// Исключаем фалы чужих сообщений
		Если Прав(Файл.ИмяБезРасширения, ДлинаКода) <> СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод Тогда
			Если ЗначениеЗаполнено(УзелКорреспондента) Тогда
				РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелКорреспондента, НСтр("ru='От устройства нет файла'"));
			КонецЕсли;
			Продолжить;
		КонецЕсли; 
		
		// Читаем сообщение из файла
		Отказ              = Ложь;
		ОписаниеПроблемы   = "";
		
		СчетчикФайлов = СчетчикФайлов + 1;
		ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Неопределено,	Перечисления.ДействияПриОбмене.ЗагрузкаДанных, СтруктураНастроекОбмена.ТекущееДействие + " (" + СчетчикФайлов + ")");
		
		Если ЗначениеЗаполнено(УзелКорреспондента) Тогда
			РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелКорреспондента, НСтр("ru='Чтение полученного файла'"));
		КонецЕсли;
		
		ВыполнитьЧтениеПакетаИзФайла(Файл.ПолноеИмя, УзелКорреспондента, Отказ, ОписаниеПроблемы, СтруктураНастроекОбмена.ТранспортОбмена);
		
		Если ЗначениеЗаполнено(УзелКорреспондента) Тогда
			РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелКорреспондента, "");
		КонецЕсли;
		
		Если Отказ Тогда
			
			ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ОписаниеПроблемы, УзелКорреспондента, "ЗагрузкаДанных", , , ОписаниеПроблемы);
			//ОбменДаннымиСервер.ЗаписьЖурналаРегистрацииОбменаДанными(ОписаниеПроблемы, СтруктураНастроекОбмена, Истина);
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			КоличествоОшибок = КоличествоОшибок + 1;
			
			Если ЗначениеЗаполнено(УзелКорреспондента) Тогда
				РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелКорреспондента, "");
				РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	
КонецПроцедуры

// Обрабатывает файлы с отчетами об обмене и записывает информацию в регистр сведений "КонтрольОбменаДанными"
// 
Процедура ПолучитьРезультатыОбменаИзФайлов(СтруктураНастроекОбмена, ТаблицаОтчетов) 
	
	Для каждого СтрокаОтчетов Из ТаблицаОтчетов Цикл
		
		ОтчетОПолучении  = Неопределено;
		Если СтрокаОтчетов.ОтчетОПолучении <> Неопределено Тогда
			Текст = Новый ЧтениеТекста(СтрокаОтчетов.ОтчетОПолучении.ПолноеИмя);
			ОтчетОПолучении = ПарсерJSON.РаспарситьJSON(Текст.Прочитать(), 0);
			Текст.Закрыть();
			УдалитьФайлы(СтрокаОтчетов.ОтчетОПолучении.ПолноеИмя);
		КонецЕсли;
		
		ОтчетОбОтправке  = Неопределено;
		Если СтрокаОтчетов.ОтчетОбОтправке <> Неопределено Тогда
			Текст = Новый ЧтениеТекста(СтрокаОтчетов.ОтчетОбОтправке.ПолноеИмя);
			ОтчетОбОтправке = ПарсерJSON.РаспарситьJSON(Текст.Прочитать(), 0);
			Текст.Закрыть();
			УдалитьФайлы(СтрокаОтчетов.ОтчетОбОтправке.ПолноеИмя);
		КонецЕсли;
		
		ЕстьОтчетОПолучении = ТипЗнч(ОтчетОПолучении) = Тип("Соответствие") 
				И ОтчетОПолучении["IDMainAPP"] = СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод И ЗначениеЗаполнено(ОтчетОПолучении["Result"]);
		ЕстьОтчетОбОтправке = ТипЗнч(ОтчетОбОтправке) = Тип("Соответствие") 
				И ОтчетОбОтправке["IDMainAPP"] = СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод И ЗначениеЗаполнено(ОтчетОбОтправке["Result"]);
		
		Если Не ЕстьОтчетОПолучении = Неопределено И Не ЕстьОтчетОбОтправке Тогда
			//Для узла нет очетов
			Продолжить;
		КонецЕсли;
		
		// Определяем узел плана обмена
		Узел = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(СтрокаОтчетов.КодКорреспондента);
		Если Не ЗначениеЗаполнено(Узел) Тогда
			// для новых подключаемых узлов отчеты не актуальны
			Продолжить;
		КонецЕсли;
		
		ЗаписьКонтроля = РегистрыСведений.КонтрольОбменаДанными.СоздатьМенеджерЗаписи();
		ЗаписьКонтроля.УзелИнформационнойБазы = Узел;
		ЗаписьКонтроля.Прочитать();
		ЗаписьКонтроля.УзелИнформационнойБазы = Узел;
		
		Если ЕстьОтчетОПолучении Тогда
			
			ЗаписьКонтроля.ПоследнееПолучениеУзлом       = ОтчетОПолучении["Date"];
			ЗаписьКонтроля.РезультатПолученияДанныхУзлом = Перечисления.РезультатыВыполненияОбмена[ОтчетОПолучении["Result"]];
			ЗаписьКонтроля.ТекстОшибокПолученияУзлом     = РаскодироватьСтроку(ОтчетОПолучении["Errors"], СпособКодированияСтроки.КодировкаURL);
			ЗаписьКонтроля.ТранспортПолученияУзлом       = ОтчетОПолучении["Transport"];
			
		КонецЕсли;
		
		Если ЕстьОтчетОбОтправке Тогда
			
			ЗаписьКонтроля.ПоследняяОтправкаУзлом        = ОтчетОбОтправке["Date"];
			ЗаписьКонтроля.РезультатОтправкиДанныхУзлом  = Перечисления.РезультатыВыполненияОбмена[ОтчетОбОтправке["Result"]];
			ЗаписьКонтроля.ТекстОшибокОтправкиУзлом      = РаскодироватьСтроку(ОтчетОбОтправке["Errors"], СпособКодированияСтроки.КодировкаURL);
			ЗаписьКонтроля.ТранспортОтправкиУзлом        = ОтчетОбОтправке["Transport"];
			
		КонецЕсли;
		
		Попытка
			ЗаписьКонтроля.Записать(Истина);
		Исключение
			Инфо = ИнформацияОбОшибке();
			ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ИнформацияОбОшибке(), Неопределено, "ЗагрузкаДанных", СтруктураНастроекОбмена.НастройкиТранспорта, , );
			РегистрыСведений.КонтрольТранспортовОбмена.ОбновитьСостояниеТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, , "+" + КраткоеПредставлениеОшибки(Инфо));
		КонецПопытки; 
		
	КонецЦикла;
	
КонецПроцедуры


// Для внутреннего использования
// 
Процедура ОтправитьСообщенияТранспортомОбмена(СтруктураНастроекОбмена)
	
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	
	ВсегоУзлов       = СтруктураНастроекОбмена.СписокКодовУстройств.Количество();
	СчетчикУзлов     = 0;
	КоличествоОшибокТранспорта = 0;
	КоличествоОшибокВыгрузки   = 0;
	ПредставлениеТранспорта = Строка(СтруктураНастроекОбмена.ТранспортОбмена);
	
	РегистрыСведений.КонтрольТранспортовОбмена.ОбновитьСостояниеТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, НСтр("ru='Отправка файлов сообщений в облако'"));
	
	// получаем инициализированную обработку транспорта сообщений
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	
	Если Не ОбработкаТранспортаСообщенийОбмена.ВыполнитьДействияПередОбработкойСообщения() Тогда
		
		//ОбменДаннымиСервер.ЗаписьЖурналаРегистрацииОбменаДанными(ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР, СтруктураНастроекОбмена, Истина);
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР, Неопределено, "ЗагрузкаДанных", , , );
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
		
		ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Неопределено, Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
				СтрШаблон(НСтр("ru = 'Отправка сообщения транспортом %1'"), Строка(СтруктураНастроекОбмена.ТранспортОбмена)), Истина, Истина, ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР);
				
		РегистрыСведений.КонтрольТранспортовОбмена.УстановитьЗавершениеРаботыТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, 
				ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР);
				
		Возврат;
		
	КонецЕсли;
	
	ВременныйКаталог = ОбработкаТранспортаСообщенийОбмена.ИмяКаталогаСообщенияОбмена();
	СтруктураНастроекОбмена.Вставить("ВременныйКаталогФайловОбмена", ВременныйКаталог);
	
	// Восстанавливаем имя этой базы для обработки первого подключения устройств
	ПараметрыЦентральнойБазы = ОбменМобильноеПриложение.ПараметрыЦентральнойБазыМобильныхПриложений();
	ИмяЭтойБазы = ПараметрыЦентральнойБазы.ИмяЭтойБазы;
	
	// Формируем файл сообщений для каждого узла, зарегистрированного в списке
	Для Каждого КодУстройства Из СтруктураНастроекОбмена.СписокКодовУстройств Цикл
		
		УзелИнформационнойБазы = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодУстройства);
		
		// Сообщение будет сформировано только если в плане обмена есть узел с указанным кодом, 
		//	и при загрузке данных от него не было ошибок
		Если НЕ ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли; 
		
		СчетчикУзлов = СчетчикУзлов + 1;
		
		// Определяем шаблон для файла ответа
		ШаблонИмениФайлаСообщения = ИмяФайлаСообщенияОбмена(СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод, УзелИнформационнойБазы.Код);
		РазделительПути = ПолучитьРазделительПутиКлиента();
		ИмяОтправленногоФайла =  СтруктураНастроекОбмена.ВременныйКаталогФайловОбмена + 
				?(Прав(СтруктураНастроекОбмена.ВременныйКаталогФайловОбмена, 1) = РазделительПути, "", РазделительПути) +
				ШаблонИмениФайлаСообщения + ".xml";
		// Формируем имена фалов сообщения в обработке транспорта
		ОбработкаТранспортаСообщенийОбмена.УстановитьИмяВременногоФайлаСообщений(ШаблонИмениФайлаСообщения);
				
		// Выгружаем изменения для узла
		Отказ = Ложь;
		ОписаниеПроблемы = "";
		
		РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелИнформационнойБазы, "Выгрузка изменений в файл");
		
		ВыполнитьВыгрузкуПакетаВФайл(УзелИнформационнойБазы, ИмяОтправленногоФайла, Отказ, ОписаниеПроблемы, СтруктураНастроекОбмена.ТранспортОбмена);
		
		РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелИнформационнойБазы, "");
		
		Если Отказ Тогда
			
			ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ОписаниеПроблемы, УзелИнформационнойБазы, "ВыгрузкаДанных", , , ОписаниеПроблемы);
			РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатОтправкиДанных(УзелИнформационнойБазы, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
			РегистрыСведений.КонтрольОбменаДанными.УстановитьОкончаниеОбмена(УзелИнформационнойБазы);
			
			КоличествоОшибокВыгрузки = КоличествоОшибокВыгрузки + 1;
			
			Продолжить;
			
		КонецЕсли; 
		
		
		СтруктураНастроекОбмена.УзелИнформационнойБазы             = УзелИнформационнойБазы;
		СтруктураНастроекОбмена.УзелИнформационнойБазыКод          = УзелИнформационнойБазы.Код;
		СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование = УзелИнформационнойБазы.Наименование;
		СтруктураНастроекОбмена.ДействиеПриОбмене                  = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
		
		
		РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелИнформационнойБазы, "Отправка сообщения в облако");
		
		ОбработкаТранспортаСообщенийОбмена.ШаблонИмениФайлаСообщения = ШаблонИмениФайлаСообщения;
		Если Не ОбработкаТранспортаСообщенийОбмена.ОтправитьСообщение() Тогда
			
			//ОбменДаннымиСервер.ЗаписьЖурналаРегистрацииОбменаДанными(ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР, СтруктураНастроекОбмена, Истина);
			ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР, УзелИнформационнойБазы, "ВыгрузкаДанных", , , );
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
			
			КоличествоОшибокТранспорта = КоличествоОшибокТранспорта + 1;
			
			РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатОтправкиДанных(УзелИнформационнойБазы, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР);
			
			ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Неопределено, Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
					НСтр("ru = 'Отправка сообщения транспортом'") + " " + СтруктураНастроекОбмена.ТранспортОбмена, Истина, Истина, ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР);
					
		Иначе
			
			РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатОтправкиДанных(УзелИнформационнойБазы, Перечисления.РезультатыВыполненияОбмена.Выполнено);
			
		КонецЕсли;
		
		РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелИнформационнойБазы, "");
		РегистрыСведений.КонтрольОбменаДанными.УстановитьОкончаниеОбмена(УзелИнформационнойБазы);
		
	КонецЦикла; 
	
	ОбработкаТранспортаСообщенийОбмена.ВыполнитьДействияПослеОбработкиСообщения();
	
	Если КоличествоОшибокТранспорта > 0 Тогда
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
	ИначеЕсли КоличествоОшибокВыгрузки > 0 Тогда
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями;
	Иначе
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
	КонецЕсли;
	 
	ТекстСостояния = НСтр("ru = 'Отправлено сообщений: %1, ошибок отправки: %2'");
	ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостояния, СчетчикУзлов, КоличествоОшибокТранспорта);
	
	ОбменМобильноеПриложениеВызовСервера.УстановитьСостояниеСинхронизации(Неопределено, Перечисления.ДействияПриОбмене.ВыгрузкаДанных, ТекстСостояния);
	
КонецПроцедуры

Процедура ПроверитьИспользованиеТранспорта(Транспорт)

	Если НЕ ЗначениеЗаполнено(Транспорт) ИЛИ Транспорт.ЗапретитьИспользование Тогда
		
		ОписаниеПроблемы = СтрШаблон(НСтр("ru = 'В настольном приложении запрещено использование транспорта <%1>.'"), Строка(Транспорт));
		ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииОбменДанными(), УровеньЖурналаРегистрации.Ошибка,,,ОписаниеПроблемы);
		ВызватьИсключение ОписаниеПроблемы;
		
	КонецЕсли;
	
	Если Не РегистрыСведений.КонтрольТранспортовОбмена.ТранспортДоступенДляНовогоОбмена(Транспорт) Тогда
		
		ОписаниеПроблемы = СтрШаблон(НСтр("ru = 'Транспорт %1 сейчас недоступен. Возможно, он уже используется в другом сеансе'"), Строка(Транспорт));
		ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииОбменДанными(), УровеньЖурналаРегистрации.Ошибка,,,ОписаниеПроблемы);
		ВызватьИсключение ОписаниеПроблемы;
		
	КонецЕсли;
	
КонецПроцедуры

Функция КалендарноеНачалоПериодаПланирования(Знач ДатаПериода, Знач ВидПериода) Экспорт

	// Если срок хранения документов ограничен неделей или днем, то в выгрузку могут не попасть бюджеты теущих месяцев
	ДатаПериода = Мин(ДатаПериода, ДобавитьМесяц(ДатаПериода, -1));
	
	Если ВидПериода = Перечисления.ПериодичностьПланирования.Неделя Тогда
		
		Возврат НачалоНедели(ДатаПериода);
		
	ИначеЕсли ВидПериода = Перечисления.ПериодичностьПланирования.Месяц Тогда
		
		Возврат НачалоМесяца(ДатаПериода);
		
	ИначеЕсли ВидПериода = Перечисления.ПериодичностьПланирования.Квартал Тогда
		
		Возврат НачалоКвартала(ДатаПериода);
		
	ИначеЕсли ВидПериода = Перечисления.ПериодичностьПланирования.Год Тогда
		
		Возврат НачалоГода(ДатаПериода);
		
	Иначе
		
		Возврат ДатаПериода;
		
	КонецЕсли;

КонецФункции

// Выполняет действия при изменении номера версии обмена на узле
//
//Параметры:
//	Узел - ПланОбменаСсылка.МобильноеПриложение - узел, на котором изменился номер версии
//	ПрежняяВерсия - Строка - номер прежней версии обмена
//	НоваяВерсия - Строка - номер текущей версии обмена
//
Процедура ПриИзмененииВерсииОбменаНаУзле(Узел, ПрежняяВерсия, НоваяВерсия) 
	
	Если Узел = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяВерсия = "1.6.3" Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, Метаданные.РегистрыНакопления.ОборотыПлановыхОпераций);
	КонецЕсли;
	
КонецПроцедуры

// Элементы справочников, сопоставленные по наименованию или коду, могут использоваться в реквизитах других справочников
//загруженных до спосоставления. Например, сначала загружается кошелек со ссылкой на валюту, а потом загружается валюта, 
//которая сопоставляется по коду. В этом случае в кошельке валюта будет равна "Объект не найден"
Процедура ПроверитьСопоставленныеСсылки(ПараметрыОбмена) 
	
	Если ПараметрыОбмена.СопоставленияДляПроверки = Неопределено Или ПараметрыОбмена.СопоставленияДляПроверки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗамены = Новый Структура;
	ПараметрыЗамены.Вставить("СпособУдаления", "");
	ПараметрыЗамены.Вставить("УчитыватьПрикладныеПравила", Ложь);
	ПараметрыЗамены.Вставить("ВключатьБизнесЛогику", Ложь);
	ПараметрыЗамены.Вставить("ЗаменаПарыВТранзакции", Ложь);
	ПараметрыЗамены.Вставить("ПривилегированнаяЗапись", Истина);
	
	ОшибкиЗамены = ОбщегоНазначения.ЗаменитьСсылки(ПараметрыОбмена.СопоставленияДляПроверки, ПараметрыЗамены);
	Если ОшибкиЗамены.Количество() > 0 Тогда
		
		ПодробностиОшибки = "Количество объектов без замены ссылок: " + ОшибкиЗамены.Количество();
		
		ЗаписьЖурналаРегистрации(КлючСобытияЖурналаРегистрации("ЗагрузкаДанных"), 
			УровеньЖурналаРегистрации.Ошибка, 
			Неопределено, 
			Неопределено, 
			"Не удалось заменить все ссылки по таблице сопоставлений." + Символы.ПС + ПодробностиОшибки); 
	КонецЕсли;
	
КонецПроцедуры
 

#КонецОбласти




