////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
// ОбщийМодуль.ИнтернетПоддержкаПользователейКлиент.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет подключение к сервису Интернет-поддержки: ввод данных
// аутентификации (логина и пароля) для подключения к сервисам
// Интернет-поддержки.
// При успешном завершении возвращается введенный логин через
// объект ОписаниеОповещения.
//
// Параметры:
//	ОповещениеОЗавершении - ОписаниеОповещения - обработчик оповещения о
//		завершении. В обработчик оповещения возвращается значение:
//			Неопределено - при нажатии пользователем кнопки Отмена;
//			Структура, при успешном вводе логина и пароля.
//			Поля структуры:
//				* Логин - Строка - введенный логин;
//	ВладелецФормы - УправляемаяФорма - владелец формы подключения
//		Интернет-поддержки. Т.к. форма подключения Интернет-поддержки открывается
//		в режиме "Блокировать окно владельца", рекомендуется заполнять
//		значение этого параметра;
//
Процедура ПодключитьИнтернетПоддержкуПользователей(
	ОповещениеОЗавершении = Неопределено,
	ВладелецФормы = Неопределено) Экспорт

	Если СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().РазделениеВключено Тогда

		ОповещениеАвторизацияНедоступна = Новый ОписаниеОповещения(
			"ПриНедоступностиПодключенияИПП",
			ЭтотОбъект,
			ОповещениеОЗавершении);

		ПоказатьПредупреждение(
			ОповещениеАвторизацияНедоступна,
			НСтр("ru = 'Использование Интернет-поддержки пользователей недоступно при работе в модели сервиса.'"));
		Возврат;

	КонецЕсли;

	// Проверить права пользователя для интерактивной авторизации.
	Если Не ИнтернетПоддержкаПользователейКлиентСервер.ДоступноПодключениеИнтернетПоддержки() Тогда

		ОповещениеАвторизацияНедоступна = Новый ОписаниеОповещения(
			"ПриНедоступностиПодключенияИПП",
			ЭтотОбъект,
			ОповещениеОЗавершении);

		ПоказатьПредупреждение(
			ОповещениеАвторизацияНедоступна,
			НСтр("ru = 'Недостаточно прав для подключения Интернет-поддержки.'"));
		Возврат;

	КонецЕсли;

	// Открыть форму подключения ИПП
	ОткрытьФорму("ОбщаяФорма.ПодключениеИнтернетПоддержки",
		Новый Структура(
			"ЗаголовокКнопкиОК, ЗапомнитьПароль",
			Неопределено,
			Истина),
		ВладелецФормы,
		,
		,
		,
		ОповещениеОЗавершении);

КонецПроцедуры

// Открывает страницу Портала 1С:ИТС для отправки сообщения в службу
// технической поддержки.
// В параметрах метода на страницу передаются данные заполнения.
//
// Параметры:
//	Тема - Строка - тема сообщения;
//	Тело - Строка - тело сообщения;
//	Получатель - Строка - условное имя получателя сообщения. Возможные значения:
//		- "webIts" - соответствует адресам "webits-info@1c.ru" и "webits-info@1c.ua",
//			необходимый адрес выбирается в соответствии с настройками доменной зоны
//			серверов Интернет-поддержки;
//		- "taxcom" - соответствует адресу "taxcom@1c.ru";
//		- "backup" - соответствует адресу "support.backup@1c.ru";
//	Вложения - Массив - массив значений типа Структура, файлы вложений.
//		Важно: допускаются только текстовые вложения (*.txt);
//		Поля структуры элемента вложения:
//			* Представление - Строка - представление вложения. Например:
//				"Вложение 1.txt";
//			Одно из полей:
//			* ИмяФайла - Строка - полное имя файла вложения;
//			* Адрес - Строка - адрес во временном хранилище значения типа ДвоичныеДанные;
//			* Текст - Строка - текст вложения;
//		К вложениям автоматически добавляется техническая информация о программе;
//	ОповещениеОЗавершении - ОписаниеОповещения - метод, в который должен быть
//		передан результат отправки сообщения. В метод передается значение типа
//		Булево: Истина, данные сообщения переданы успешно,
//			Ложь - в противном случае.
//
Процедура ОтправитьСообщениеВСлужбуТехническойПоддержки(
	Тема,
	Тело,
	Получатель = "webIts",
	Вложения = Неопределено,
	ОповещениеОЗавершении = Неопределено) Экспорт

	ОтправитьСообщениеВТехПоддержку(
		Тема,
		Тело,
		Получатель,
		Вложения,
		Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении));

КонецПроцедуры

// Определяет, зарегистрирована ли текущая конфигурация в сервисе
// Интернет-поддержки.
// Проверка выполняется по значению свойства Метаданные.Имя.
//
// Параметры:
//	ОшибкаОбращенияКВебСервису - Булево - в параметре возвращается Истина,
//		если в процессе обращения к сервису ИПП произошла ошибка
//		и "зарегистрированность" конфигурации проверить не удалось;
//
// Возвращаемое значение:
//	Булево - Истина, если конфигурация зарегистрирована в сервисе ИПП,
//		Ложь - если не зарегистрирована или в процессе обращения к сервису ИПП
//			произошла ошибка;
//
Функция КонфигурацияЗарегистрированаВСервисеИПП(ОшибкаОбращенияКВебСервису = Ложь) Экспорт
	
	Возврат ИнтернетПоддержкаПользователейВызовСервера.КонфигурацияЗарегистрированаВСервисеИПП(
		ОшибкаОбращенияКВебСервису);
	
КонецФункции

#Область ОбработкаСобытийПриложения

// Реализует обработку события ПередНачаломРаботыСистемы() клиентского
// приложения. Необходимо реализовать вызов метода из
// МодульУправляемогоПриложения.ПередНачаломРаботыСистемы()
// и МодульОбычногоПриложения.ПередНачаломРаботыСистемы().
//
// Обработчик, вызываемый перед началом работы системы.
//
Процедура ПередНачаломРаботыСистемы() Экспорт

	ПараметрыПередНачаломРаботы =
		ИнтернетПоддержкаПользователейВызовСервера.ПередНачаломРаботыСистемы(ПараметрыКлиента());
	
	// Подключение обработчика запроса настроек клиента лицензирования
	Если ПараметрыПередНачаломРаботы.ДоступнаРаботаСНастройкамиКлиентаЛицензирования Тогда
		Попытка
			КлиентЛицензированияКлиент.ПодключитьОбработчикБИПДляЗапросаНастроекКлиентаЛицензирования();
		Исключение
			ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось подключить обработчик запроса настроек клиента лицензирования.
						|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
	КонецЕсли;
	// Конец Подключение обработчика запроса настроек клиента лицензирования

КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

// См. процедуру
// ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы().
//
Процедура ПриНачалеРаботыСистемы() Экспорт

	ПараметрыРаботыКлиентаПриЗапуске = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	Если ПараметрыРаботыКлиентаПриЗапуске.ДоступноИспользованиеРазделенныхДанных Тогда
		// Выполнить только в коробочном варианте или разделенном режиме

		ПараметрыИПП = ПараметрыРаботыКлиентаПриЗапуске.ИнтернетПоддержкаПользователей;

		// Вызов обработчиков подсистем ПриНачалеРаботыСистемы()
		Обработчики = ПараметрыИПП.ПриНачалеРаботыСистемы;
		Для каждого ИмяМодуля Из Обработчики Цикл
			МодульОбработчика = ОбщегоНазначенияКлиент.ОбщийМодуль(ИмяМодуля);
			Если МодульОбработчика <> Неопределено Тогда
				МодульОбработчика.ПриНачалеРаботыСистемы();
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	// Новости.ПриНачалеРаботыСистемы
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		МодульОбработкаНовостейКлиент.ПриНачалеРаботыСистемы();
	КонецЕсли;
	// Конец Новости.ПриНачалеРаботыСистемы

	// ОблачныйАрхив.ПриНачалеРаботыСистемы
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхивКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОблачныйАрхивКлиент");
		МодульОблачныйАрхивКлиент.ПриНачалеРаботыСистемы();
	КонецЕсли;
	// Конец ОблачныйАрхив.ПриНачалеРаботыСистемы

	// СПАРКРискиКлиент.ПриНачалеРаботыСистемы
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
		МодульСПАРКРискиКлиент.ПриНачалеРаботыСистемы();
	КонецЕсли;
	// Конец СПАРКРискиКлиент.ПриНачалеРаботыСистемы

КонецПроцедуры

#Область БСПНастройкиПрограммы

// Выполняет команду подключения Интернет-поддержки пользователей
// на панели администрирования "Интернет-поддержка и сервисы" (БСП).
//
// Параметры:
//	Форма - УправляемаяФорма - форма, из которой вызывается команда;
//	Команда - КомандаФормы - выполняемая команда.
//
Процедура ИнтернетПоддержкаИСервисы_БИПВойтиИлиВыйти(Форма, Команда) Экспорт
	
	Если Форма.БИПДанныеАутентификации = Неопределено Тогда
		ПодключитьИнтернетПоддержкуПользователей(, Форма);
	Иначе
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПриОтветеНаВопросОВыходеИзИнтернетПоддержки", ЭтотОбъект, Форма),
			НСтр("ru = 'Логин и пароль для подключения к сервисам Интернет-поддержки пользователей будут удалены из программы.
				|Отключить Интернет-поддержку?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет,
			НСтр("ru = 'Выход из Интернет-поддержки пользователей'"));
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку оповещения на панели администрирования
// "Интернет-поддержка и сервисы" (БСП).
//
// Параметры:
//	Форма - УправляемаяФорма - форма, в которой обрабатывается оповещение;
//	ИмяСобытия - Строка - имя события;
//	Параметр - Произвольный - параметр;
//	Источник - Произвольный - источник события.
//
Процедура ИнтернетПоддержкаИСервисы_ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ИнтернетПоддержкаПодключена" Тогда
		
		// Обработка подключения Интернет-поддержки.
		ВведенныеДанныеАутентификации = Параметр;
		Если ВведенныеДанныеАутентификации <> Неопределено Тогда
			Форма.БИПДанныеАутентификации = ВведенныеДанныеАутентификации;
			ИнтернетПоддержкаПользователейКлиентСервер.ОтобразитьСостояниеПодключенияИПП(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку навигационных ссылок на панели администрирования
// "Интернет-поддержка и сервисы" (БСП).
//
// Параметры:
//	Форма - УправляемаяФорма - форма, в которой обрабатывается оповещение;
//	Элемент - ДекорацияФормы - декорация на форме;
//	НавигационнаяСсылкаФорматированнойСтроки - Строка - навигационная ссылка;
//	СтандартнаяОбработка - Булево - признак стандартной обработки.
//
Процедура ИнтернетПоддержкаИСервисы_ДекорацияОбработкаНавигационнойСсылки(Форма, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	Если Элемент.Имя = "ДекорацияЛогинИПП" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьВебСтраницу(
			ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыПорталаПоддержки("/software?needAccessToken=true"),
			НСтр("ru = 'Личный кабинет пользователя'"),
			Форма.БИПДанныеАутентификации.Логин,
			Форма.БИПДанныеАутентификации.Пароль);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении() элемента БИППодключатьсяКСерверамВЗонеEu
// на форме панели администрирования "Интернет-поддержка и сервисы"
// Библиотеки стандартных подсистем.
//
// Параметры:
//	Форма - УправляемаяФорма - форма панели администрирования;
//	Элемент - ПолеФормы - элементы управления формы панели администрирования.
//
Процедура ИнтернетПоддержкаИСервисы_ПодключатьсяКСерверамВЗонеEuИзменении(Форма, Элемент) Экспорт
	
	ИнтернетПоддержкаПользователейВызовСервера.ИнтернетПоддержкаИСервисы_ПодключатьсяКСерверамВЗонеEuИзменении(
		Форма.БИППодключатьсяКСерверамВЗонеEu);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Обработчик команды БИПСообщениеВСлужбуТехническойПоддержки
// на форме панели администрирования "Интернет-поддержка и сервисы"
// Библиотеки стандартных подсистем.
//
// Параметры:
//	Форма - УправляемаяФорма - форма панели администрирования;
//	Команда - КомандаФормы - команда на панели администрирования.
//
Процедура ИнтернетПоддержкаИСервисы_СообщениеВСлужбуТехническойПоддержки(Форма, Команда) Экспорт
	
	ОтправитьСообщениеВТехПоддержку(
		НСтр("ru = 'Интернет-поддержка пользователей'"),
		НСтр("ru = '<Заполните текст сообщения>'"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбщегоНазначения

// Открывает Интернет-страницу в обозревателе.
//
// Параметры:
//	АдресСтраницы - Строка - URL-адрес открываемой страницы;
//	ЗаголовокОкна - Строка - заголовок открываемой страницы,
//		если для открытия страницы используется внутренняя форма конфигурации;
//	Логин - Строка - логин для авторизации на портале поддержи пользователей;
//	Пароль - Строка - пароль для авторизации на портале поддержки пользователей;
//
Процедура ОткрытьВебСтраницу(Знач АдресСтраницы, ЗаголовокОкна = "", Логин = Неопределено, Пароль = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗаголовокОкна", ЗаголовокОкна);
	ДополнительныеПараметры.Вставить("Логин"        , Логин);
	ДополнительныеПараметры.Вставить("Пароль"       , Пароль);
	
	ОткрытьВебСтраницуСДополнительнымиПараметрами(
		АдресСтраницы,
		ДополнительныеПараметры);
	
КонецПроцедуры

// Открывает Интернет-страницу в обозревателе.
//
Процедура ОткрытьВебСтраницуСДополнительнымиПараметрами(
	Знач АдресСтраницы,
	Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗаголовокОкна"              , "");
	ПараметрыОткрытия.Вставить("Логин"                      , "");
	ПараметрыОткрытия.Вставить("Пароль"                     , "");
	ПараметрыОткрытия.Вставить("ЭтоПолноправныйПользователь", Неопределено);
	ПараметрыОткрытия.Вставить("НастройкиПрокси"            , Неопределено);
	ПараметрыОткрытия.Вставить("НастройкиСоединения"        , Неопределено);
	ПараметрыОткрытия.Вставить("РазделениеВключено"         , Ложь);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ПараметрыОткрытия.ЭтоПолноправныйПользователь = Неопределено Тогда
		ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
		ПараметрыОткрытия.ЭтоПолноправныйПользователь =
			ПараметрыРаботыКлиента.ЭтоПолноправныйПользователь;
		ПараметрыОткрытия.РазделениеВключено = ПараметрыРаботыКлиента.РазделениеВключено;
	КонецЕсли;
	
	НеобходимаАвторизации = (Найти(АдресСтраницы, "?needAccessToken=true") > 0
		Или Найти(АдресСтраницы, "&needAccessToken=true") > 0);
	
	Если НеобходимаАвторизации Тогда
		// Удаление параметра из URL
		
		АдресСтраницы = СтрЗаменить(АдресСтраницы, "?needAccessToken=true&", "");
		АдресСтраницы = СтрЗаменить(АдресСтраницы, "?needAccessToken=true" , "");
		АдресСтраницы = СтрЗаменить(АдресСтраницы, "&needAccessToken=true&", "");
		АдресСтраницы = СтрЗаменить(АдресСтраницы, "&needAccessToken=true" , "");
		
	КонецЕсли;
	
	Если НеобходимаАвторизации И ПараметрыОткрытия.ЭтоПолноправныйПользователь Тогда
		
		// Получение тикета аутентификации на портале поддержки.
		Тикет = "";
		Состояние(, , НСтр("ru = 'Переход на Портал 1С:ИТС'"));
		РезультатПолученияТикета =
			ИнтернетПоддержкаПользователейВызовСервера.ТикетАутентификацииДляОткрытияСтраницы(АдресСтраницы);
		Состояние();
		
		Если РезультатПолученияТикета <> Неопределено Тогда
			Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
				Тикет = РезультатПолученияТикета.Тикет;
			ИначеЕсли РезультатПолученияТикета.КодОшибки <> "НеверныйЛогинИлиПароль" Тогда
				ПоказатьОповещениеПользователя(
					,
					,
					НСтр("ru = 'Ошибка входа на Портал 1С:ИТС.
						|Подробнее см. в журнале регистрации.'"),
					БиблиотекаКартинок.Ошибка32);
			КонецЕсли;
			Если Не ПустаяСтрока(Тикет) Тогда
				АдресСтраницы = ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin(
					"/ticket/auth?token=" + Тикет,
					ПараметрыОткрытия.НастройкиСоединения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	ИнтернетПоддержкаПользователейКлиентПереопределяемый.ОткрытьИнтернетСтраницу(
		АдресСтраницы,
		ПараметрыОткрытия.ЗаголовокОкна,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Истина Тогда
		// Открытие Интернет-страницы стандартным способом.
		ОбщегоНазначенияКлиент.ПерейтиПоСсылке(АдресСтраницы);
	КонецЕсли;
	
КонецПроцедуры

// Открывает страницу Портала 1С:ИТС для отправки сообщения в службу
// технической поддержки.
// В параметрах метода на страницу передаются данные заполнения.
//
// Параметры:
//	Тема - Строка - тема сообщения;
//	Тело - Строка - тело сообщения;
//	Получатель - Строка - условное имя получателя сообщения. Возможные значения:
//		- "webIts" - соответствует адресам "webits-info@1c.ru" и "webits-info@1c.ua",
//			необходимый адрес выбирается в соответствии с настройками доменной зоны
//			серверов Интернет-поддержки;
//		- "taxcom" - соответствует адресу "taxcom@1c.ru";
//		- "backup" - соответствует адресу "support.backup@1c.ru";
//	Вложения - Массив - массив значений типа Структура, файлы вложений.
//		Важно: допускаются только текстовые вложения (*.txt);
//		Поля структуры элемента вложения:
//			* Представление - Строка - представление вложения. Например:
//				"Вложение 1.txt";
//			Одно из полей:
//			* ИмяФайла - Строка - полное имя файла вложения;
//			* Адрес - Строка - адрес во временном хранилище значения типа ДвоичныеДанные;
//			* Текст - Строка - текст вложения;
//		К вложениям автоматически добавляется техническая информация о программе;
//	ДополнительныеПараметры - Структура - дополнительные параметры отправки сообщения. Поля:
//		* Логин - Строка - логин пользователя для входа на портал;
//		* Пароль - Строка - пароль пользователя для входа на портал;
//		* НастройкиСоединенияССерверами - Структура - см. функцию
//			ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
//		* ОповещениеОЗавершении - ОписаниеОповещения - метод, в который должен быть
//			передан результат отправки сообщения. В метод передается значение типа
//			Булево: Истина, данные сообщения переданы успешно,
//				Ложь - в противном случае.
//
Процедура ОтправитьСообщениеВТехПоддержку(
	Тема,
	Сообщение,
	Получатель = "webIts",
	Вложения = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт

	Если Получатель <> "webIts" И Получатель <> "taxcom" И Получатель <> "backup" Тогда
		ВызватьИсключение НСтр("ru = 'Неизвестный получатель сообщения.'");
	КонецЕсли;

	Логин                         = Неопределено;
	Пароль                        = Неопределено;
	НастройкиСоединенияССерверами = Неопределено;
	НастройкиПрокси               = Неопределено;
	ЭтоПолноправныйПользователь   = Неопределено;
	ОповещениеОЗавершении         = Неопределено;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда

		Если ДополнительныеПараметры.Свойство("Логин") Тогда
			Логин = ДополнительныеПараметры.Логин;
		КонецЕсли;

		Если ДополнительныеПараметры.Свойство("Пароль") Тогда
			Пароль = ДополнительныеПараметры.Пароль;
		КонецЕсли;

		Если ДополнительныеПараметры.Свойство("НастройкиСоединенияССерверами") Тогда
			НастройкиСоединенияССерверами = ДополнительныеПараметры.НастройкиСоединенияССерверами;
		КонецЕсли;

		Если ДополнительныеПараметры.Свойство("ОповещениеОЗавершении") Тогда
			ОповещениеОЗавершении = ДополнительныеПараметры.ОповещениеОЗавершении;
		КонецЕсли;

		Если ДополнительныеПараметры.Свойство("НастройкиПрокси") Тогда
			НастройкиПрокси = ДополнительныеПараметры.НастройкиПрокси;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ЭтоПолноправныйПользователь") Тогда
			ЭтоПолноправныйПользователь = ДополнительныеПараметры.ЭтоПолноправныйПользователь;
		КонецЕсли;
		
	КонецЕсли;

	Если НастройкиСоединенияССерверами = Неопределено Тогда
		НастройкиСоединенияССерверами =
			ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВидПриложения", ВидПриложения());
	Если Логин <> Неопределено Тогда
		ДопПараметры.Вставить("Логин" , Логин);
		ДопПараметры.Вставить("Пароль", Пароль);
	КонецЕсли;

	Состояние(, , НСтр("ru = 'Подготовка сообщения в службу технической поддержки'"));

	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Тема"                 , Тема);
	ПараметрыСообщения.Вставить("Сообщение"            , Сообщение);
	ПараметрыСообщения.Вставить("Получатель"           , Получатель);
	ПараметрыСообщения.Вставить("Вложения"             , Вложения);
	ПараметрыСообщения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ПараметрыСообщения.Вставить("ДопПараметры"         , ДопПараметры);
	
	ПодготовитьВложенияКОтправкеНаСервере(ПараметрыСообщения);
	
КонецПроцедуры

// Преобразует значение из фиксированного типа.
// Параметры:
//	ЗначениеФиксированногоТипа - Произвольный - значение фиксированного типа
//		из которого необходимо получить значение нефиксированного типа.
//
// Возвращаемое значение:
//	Произвольный - полученное значение аналогичного нефиксированного типа.
//
Функция ЗначениеИзФиксированногоТипа(ЗначениеФиксированногоТипа) Экспорт

	Результат = Неопределено;
	ТипЗначения = ТипЗнч(ЗначениеФиксированногоТипа);

	Если ТипЗначения = Тип("ФиксированнаяСтруктура") Тогда

		Результат = Новый Структура;
		Для каждого КлючЗначение Из ЗначениеФиксированногоТипа Цикл
			Результат.Вставить(КлючЗначение.Ключ, ЗначениеИзФиксированногоТипа(КлючЗначение.Значение));
		КонецЦикла;

	ИначеЕсли ТипЗначения = Тип("ФиксированноеСоответствие") Тогда

		Результат = Новый Соответствие;
		Для каждого КлючЗначение Из ЗначениеФиксированногоТипа Цикл
			Результат.Вставить(КлючЗначение.Ключ, ЗначениеИзФиксированногоТипа(КлючЗначение.Значение));
		КонецЦикла;

	ИначеЕсли ТипЗначения = Тип("ФиксированныйМассив") Тогда

		Результат = Новый Массив;
		Для каждого ЭлементМассива Из ЗначениеФиксированногоТипа Цикл
			Результат.Добавить(ЗначениеИзФиксированногоТипа(ЭлементМассива));
		КонецЦикла;

	Иначе

		Результат = ЗначениеФиксированногоТипа;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Получает значение параметра приложения.
//
Функция ЗначениеПараметраПриложения(ИмяПараметра, ЗначениеПоУмолчанию = Неопределено) Экспорт

	ПараметрыБиблиотеки = ПараметрыПриложения.Получить("ИнтернетПоддержкаПользователей");
	Если ПараметрыБиблиотеки = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;

	ЗначениеПараметра = ПараметрыБиблиотеки.Получить(ИмяПараметра);
	Возврат ?(ЗначениеПараметра = Неопределено, ЗначениеПоУмолчанию, ЗначениеПараметра);

КонецФункции

// Устанавливает значение параметра приложения.
//
Процедура УстановитьЗначениеПараметраПриложения(ИмяПараметра, ЗначениеПараметра) Экспорт

	ПараметрыБиблиотеки = ПараметрыПриложения.Получить("ИнтернетПоддержкаПользователей");
	Если ПараметрыБиблиотеки = Неопределено Тогда
		ПараметрыБиблиотеки = Новый Соответствие;
		ПараметрыПриложения.Вставить(
			"ИнтернетПоддержкаПользователей",
			ПараметрыБиблиотеки);
	КонецЕсли;

	ПараметрыБиблиотеки.Вставить(ИмяПараметра, ЗначениеПараметра);

КонецПроцедуры

// Возвращает параметры клиентского приложения.
//
// Возвращаемое значение:
//	Структура - параметры клиентского приложения.
//		* ТипПлатформы - Строка - тип платформы;
//		* ВерсияОС - Строка - версия операционной системы;
//		* ЭтоКлиентЧерезВебСервер - Булево - признак того, что тонкий клиент
//			подключен через веб-сервер.
//
Функция ПараметрыКлиента() Экспорт
	
	Результат = Новый Структура;
	СистИнфо = Новый СистемнаяИнформация;
	Результат.Вставить("ТипПлатформы",
		ИнтернетПоддержкаПользователейКлиентСервер.ИмяТипПлатформыСтр(
			СистИнфо.ТипПлатформы));
	Результат.Вставить("ВерсияОС", СистИнфо.ВерсияОС);
	#Если ВебКлиент Тогда
	Результат.Вставить("ЭтоКлиентЧерезВебСервер", Ложь);
	#Иначе
	Результат.Вставить("ЭтоКлиентЧерезВебСервер",
		(НРег(Лев(СтрокаСоединенияИнформационнойБазы(), 3)) = "ws="));
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработкаБизнесПроцессов

// Выполнение сценария запуска механизма Интернет-поддержки пользователей.
//
// Параметры:
//	МестоЗапуска - Строка - место запуска механизма, из которого определяется
//		необходимый бизнес-процесс.
//	СтартовыеПараметры - Структура - стартовые параметры механизма.
//		ключ структуры соответствует имени параметра, значение - значению
//		параметра. Состав параметров произвольный;
//	Повторно - Булево - признак того, что механизм запускается из формы ошибки
//		подключения (ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету)
//		кнопкой "Повторить подключение";
//	ДопПараметры - Структура - дополнительные параметры выполнения сценария. Поля:
//		* КонтекстВзаимодействия - Структура, ФиксированнаяСтруктура, Неопределено
//			- готовый контекст для старта бизнес-процесса;
//		* ОбработчикЗавершения - ОписаниеОповещения - обработчик оповещения о
//			завершении бизнес-процесса.
//
Процедура ВыполнитьСценарий(
	МестоЗапуска,
	СтартовыеПараметры = Неопределено,
	Повторно = Ложь,
	ДопПараметры = Неопределено) Экспорт

	КонтекстВзаимодействия = Неопределено;
	ОбработчикЗавершения   = Неопределено;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("КонтекстВзаимодействия") Тогда
			КонтекстВзаимодействия = ДопПараметры.КонтекстВзаимодействия;
		КонецЕсли;
		Если ДопПараметры.Свойство("ОбработчикЗавершения") Тогда
			ОбработчикЗавершения = ДопПараметры.ОбработчикЗавершения;
		КонецЕсли;
	КонецЕсли;

	ОбработчикиЗавершенияБизнесПроцесса = Новый Структура(
		"Обработчик, Обработано",
		ОбработчикЗавершения,
		Ложь);

	Если КонтекстВзаимодействия <> Неопределено Тогда

		Если КонтекстВзаимодействия.Свойство("УправляющаяСтруктураЗапуска") Тогда
			ОбработатьСтруктуруЗапускаИПП(МестоЗапуска, КонтекстВзаимодействия.УправляющаяСтруктураЗапуска);
			ОповеститьОЗавершенииБизнесПроцесса(ОбработчикиЗавершенияБизнесПроцесса, Неопределено);
			Возврат;
		КонецЕсли;

		ПараметрыСозданияКонтекста = Неопределено;

	Иначе

		ПараметрыСозданияКонтекста = Новый Структура(
			"МестоЗапуска, ПовторныйЗапуск, СтартовыеПараметры",
			МестоЗапуска,
			Повторно,
			СтартовыеПараметры);

	КонецЕсли;

	Попытка

		ВызовСервиса(КонтекстВзаимодействия, ПараметрыСозданияКонтекста, ОбработчикиЗавершенияБизнесПроцесса);

	Исключение

		Если КонтекстВзаимодействия <> Неопределено Тогда

			ПриНачалеРаботыСистемы = КонтекстВзаимодействия.КСКонтекст.ПриНачалеРаботыСистемы;
			Логин = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
				КонтекстВзаимодействия.КСКонтекст,
				"login");

		Иначе

			ПриНачалеРаботыСистемы = Ложь;
			Логин = "";

		КонецЕсли;

		ИнфОшибка = ИнформацияОбОшибке();
		ТекстПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнфОшибка);
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ТекстПодробноеПредставлениеОшибки);

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МестоЗапуска"          , МестоЗапуска);
		ПараметрыФормы.Вставить("СтартовыеПараметры"    , СтартовыеПараметры);
		ПараметрыФормы.Вставить("ПриНачалеРаботыСистемы", ПриНачалеРаботыСистемы);
		ПараметрыФормы.Вставить("ОписаниеОшибки",
			НСтр("ru = 'Неизвестная ошибка. Подробнее см. в журнале регистрации.'"));
		ПараметрыФормы.Вставить("ПодробноеОписаниеОшибки", ТекстПодробноеПредставлениеОшибки);
		ПараметрыФормы.Вставить("Логин"                  , Логин);

		Форма = ОткрытьФорму("ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету", ПараметрыФормы);
		Форма.КонтекстВзаимодействия = КонтекстВзаимодействия;

	КонецПопытки;

КонецПроцедуры

// Отправка на сервер управляющей команды для освобождения ресурсов сервиса.
// Обработка ответа сервиса не выполняется.
//
Процедура ЗавершитьБизнесПроцесс(КонтекстВзаимодействия, ЗавершениеРаботы = Ложь) Экспорт

	Если КонтекстВзаимодействия = Неопределено Или ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;

	ОповеститьОЗавершенииБизнесПроцесса(КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса,
		КонтекстВзаимодействия);

	ЗакрытьВсеФормы(КонтекстВзаимодействия);
	ПараметрыОбращенияКСервисуИПП = Новый Структура;
	ПараметрыОбращенияКСервисуИПП.Вставить("ОбработатьОтвет"             , Ложь);
	ПараметрыОбращенияКСервисуИПП.Вставить("ОтобразитьСостояниеОбращения", Ложь);

	ОбработатьКомандуФормы(КонтекстВзаимодействия, Неопределено, "CloseBP", ПараметрыОбращенияКСервисуИПП);

	ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;

КонецПроцедуры

// Обработка выхода пользователя из ИПП (нажатие ссылки "Выход" на форме).
//
Процедура ОбработатьВыходПользователя(КонтекстВзаимодействия, Форма) Экспорт

	ДопПараметры = Новый Структура("КонтекстВзаимодействия, Форма", КонтекстВзаимодействия, Форма);

	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеПользователяНаВопросОВыходе", ЭтотОбъект, ДопПараметры);

	ТекстВопроса = ВопросПриВыходеАвторизованногоПользователя(КонтекстВзаимодействия);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);

КонецПроцедуры

// Регистрация открытой внутренней формы ИПП в контексте взаимодействия.
//
Процедура ОбработатьОткрытиеФормы(КонтекстВзаимодействия, ОткрытаяФорма) Экспорт

	Если КонтекстВзаимодействия = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ФормыОбработки = КонтекстВзаимодействия.ФормыОбработки;

	Если ТипЗнч(ФормыОбработки) <> Тип("Соответствие") Тогда
		ФормыОбработки = Новый Соответствие;
		КонтекстВзаимодействия.ФормыОбработки = ФормыОбработки;
	КонецЕсли;

	ФормыОбработки[ОткрытаяФорма.ИмяФормы] = ОткрытаяФорма;

КонецПроцедуры

// Процедура получает команды от веб-сервиса и выполняет их на стороне клиента
// или передает управление серверу 1С:Предприятия.
//
Процедура ОбработкаКомандСервиса(
	КонтекстВзаимодействия,
	ТекущаяФорма,
	ПараметрыЗапроса = Неопределено,
	КонтекстОбработчика = Неопределено,
	ДопПараметры = Неопределено) Экспорт

	ПараметрыОбращенияКСервисуИПП       = Неопределено;
	ДополнительныеПараметрыЗапроса      = Неопределено;
	ПродолжитьВыполнение                = Ложь;
	ПараметрыСозданияКонтекста          = Неопределено;
	ОбработчикиЗавершенияБизнесПроцесса = Неопределено;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ПараметрыОбращенияКСервисуИПП") Тогда
			ПараметрыОбращенияКСервисуИПП = ДопПараметры.ПараметрыОбращенияКСервисуИПП;
		КонецЕсли;
		Если ДопПараметры.Свойство("ДополнительныеПараметрыЗапроса") Тогда
			ДополнительныеПараметрыЗапроса = ДопПараметры.ДополнительныеПараметрыЗапроса;
		КонецЕсли;
		Если ДопПараметры.Свойство("ПродолжитьВыполнение") Тогда
			ПродолжитьВыполнение = ДопПараметры.ПродолжитьВыполнение;
		КонецЕсли;
		Если ДопПараметры.Свойство("ПараметрыСозданияКонтекста") Тогда
			ПараметрыСозданияКонтекста = ДопПараметры.ПараметрыСозданияКонтекста;
		КонецЕсли;
		Если ДопПараметры.Свойство("ОбработчикиЗавершенияБизнесПроцесса") Тогда
			ОбработчикиЗавершенияБизнесПроцесса = ДопПараметры.ОбработчикиЗавершенияБизнесПроцесса;
		КонецЕсли;
	КонецЕсли;

	ОтобразитьСостояниеОбращения = Истина;
	ОбработатьОтвет              = Истина;
	НеобходимоОчиститьСессию     = Ложь;

	Если ТипЗнч(ПараметрыОбращенияКСервисуИПП) = Тип("Структура") Тогда

		Если ПараметрыОбращенияКСервисуИПП.Свойство("ОбработатьОтвет") Тогда
			ОбработатьОтвет = ПараметрыОбращенияКСервисуИПП.ОбработатьОтвет;
		КонецЕсли;

		Если ПараметрыОбращенияКСервисуИПП.Свойство("ОтобразитьСостояниеОбращения") Тогда
			ОтобразитьСостояниеОбращения = ПараметрыОбращенияКСервисуИПП.ОтобразитьСостояниеОбращения;
		КонецЕсли;

		Если ПараметрыОбращенияКСервисуИПП.Свойство("ОчиститьСессиюПередВыполнениемЗапроса") Тогда
			НеобходимоОчиститьСессию = ПараметрыОбращенияКСервисуИПП.ОчиститьСессиюПередВыполнениемЗапроса;
		КонецЕсли;

	КонецЕсли;

	Если ОтобразитьСостояниеОбращения = Истина Тогда
		ОтобразитьСостояниеОбращениеКСервису();
	КонецЕсли;

	Если НеобходимоОчиститьСессию = Истина И КонтекстВзаимодействия <> Неопределено Тогда
		ОчиститьСессию(КонтекстВзаимодействия);
	КонецЕсли;

	// Если контекст обработчика команд не задан, тогда необходимо подготовить его структуру.
	Если КонтекстОбработчика = Неопределено Тогда
		// Создание контекста обработчика команд
		КонтекстОбработчика = ИнтернетПоддержкаПользователейКлиентСервер.НовыйКонтекстОбработчикаКоманд();
	КонецЕсли;

	Если КонтекстВзаимодействия = Неопределено Тогда
		ОсновныеПараметры = Неопределено;
	Иначе
		ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
	КонецЕсли;

	Если НЕ ПродолжитьВыполнение Тогда

		Если ПараметрыЗапроса = Неопределено Тогда
			ПараметрыЗапроса = Новый Массив;
		КонецЕсли;

		// Если выполняется первое обращение, тогда необходимо
		// получить команды от веб-сервиса.

		Если КонтекстВзаимодействия = Неопределено Тогда

			// Обработка первого запуска при незаданном контексте взаимодействия
			// создание на стороне сервера ИБ контекста взаимодействия и первое
			// обращение к сервису ИПП (для минимизации клиент-серверных вызовов).
			ИнтернетПоддержкаПользователейВызовСервера.ОбработкаКомандСервиса(
				Неопределено,
				ПараметрыЗапроса,
				КонтекстОбработчика,
				Ложь,
				КонтекстВзаимодействия,
				Новый Структура(
					"ПараметрыОбращенияКСервисуИПП, ПараметрыСозданияКонтекста, МассивСессионныхПараметровЗапроса",
					ПараметрыОбращенияКСервисуИПП,
					ПараметрыСозданияКонтекста,
					ДополнительныеПараметрыЗапроса));

			Если КонтекстВзаимодействия.Свойство("УправляющаяСтруктураЗапуска") Тогда
				ОбработатьСтруктуруЗапускаИПП(ПараметрыСозданияКонтекста.МестоЗапуска,
					КонтекстВзаимодействия.УправляющаяСтруктураЗапуска);
				ОповеститьОЗавершенииБизнесПроцесса(ОбработчикиЗавершенияБизнесПроцесса, Неопределено);
				Возврат;
			КонецЕсли;

			КонтекстВзаимодействия.Вставить("ОбработчикиЗавершенияБизнесПроцесса",
				ОбработчикиЗавершенияБизнесПроцесса);

			ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
			Если НЕ ОсновныеПараметры.ОбращениеССервера Тогда

				ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьСессионныеПараметрыКЗапросу(
					КонтекстВзаимодействия.КСКонтекст,
					ПараметрыЗапроса,
					ДополнительныеПараметрыЗапроса);

				ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьДополнительныеСтартовыеПараметрыЗапроса(
					КонтекстВзаимодействия.КСКонтекст,
					КонтекстВзаимодействия.ДополнительныеСтартовыеПараметры,
					ПараметрыЗапроса);

				ДобавитьКомандыСервиса(
					КонтекстВзаимодействия,
					ПараметрыЗапроса,
					КонтекстОбработчика);

			КонецЕсли;

		Иначе

			// При последующих запусках все выполняется в штатном режиме

			Если ОсновныеПараметры.ОбращениеССервера Тогда

				ИнтернетПоддержкаПользователейВызовСервера.ОбработкаКомандСервиса(
					КонтекстВзаимодействия.КСКонтекст,
					ПараметрыЗапроса,
					КонтекстОбработчика,
					Ложь,
					,
					Новый Структура(
						"ПараметрыОбращенияКСервисуИПП, МассивСессионныхПараметровЗапроса",
						ПараметрыОбращенияКСервисуИПП,
						ДополнительныеПараметрыЗапроса));

			Иначе

				ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьСессионныеПараметрыКЗапросу(
					КонтекстВзаимодействия.КСКонтекст,
					ПараметрыЗапроса,
					ДополнительныеПараметрыЗапроса);

				ДобавитьКомандыСервиса(
					КонтекстВзаимодействия,
					ПараметрыЗапроса,
					КонтекстОбработчика);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	// Если обрабатывать ответ сервиса не требуется, тогда возврат
	Если ОбработатьОтвет <> Истина Тогда
		Возврат;
	КонецЕсли;

	ПрерватьОбработкуКоманд = Ложь;
	Попытка

		Пока КонтекстОбработчика.Команды.Количество() > 0
			И НЕ КонтекстОбработчика.ПроизошлаОшибка
			И НЕ КонтекстОбработчика.ВыполнитьОстановку
			И НЕ ПрерватьОбработкуКоманд Цикл

			ТекущаяКоманда = КонтекстОбработчика.Команды[0];
			ТипКоманды = ИнтернетПоддержкаПользователейКлиентСервер.ТипКоманды(
				ТекущаяКоманда,
				ОсновныеПараметры.ОбращениеССервера,
				ОсновныеПараметры.МестоЗапуска);

			Если ТипКоманды = -1 Тогда
				// Если тип команды (клиентская или серверная) определить не удалось,
				// тогда пропустить команду.
				КонтекстОбработчика.Команды.Удалить(0);
				Продолжить;

			ИначеЕсли ТипКоманды = 1 Тогда

				// Выполнение команды на клиенте
				КонтекстОбработчика.Команды.Удалить(0);
				ВыполнитьКомандуСервиса(
					КонтекстВзаимодействия,
					ТекущаяФорма,
					ТекущаяКоманда,
					КонтекстОбработчика,
					ПрерватьОбработкуКоманд);

			Иначе
				// Если команда серверная, тогда передать управление серверу 1С:Предприятия
				// При повторном вызове, обращение к веб-сервису не выполняется
				// поэтому сессионные параметры не передаются.
				ИнтернетПоддержкаПользователейВызовСервера.ОбработкаКомандСервиса(
					КонтекстВзаимодействия.КСКонтекст,
					Неопределено,
					КонтекстОбработчика,
					Истина);

			КонецЕсли;

		КонецЦикла;

	Исключение

		КонтекстОбработчика.ПроизошлаОшибка = Истина;
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("ПрерватьБизнесПроцесс");
		КонтекстОбработчика.ПолноеОписаниеОшибки = НСтр("ru = 'Произошло необрабатываемое исключение:'")
			+ " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Неизвестная ошибка. Подробнее см. в журнале регистрации.'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";

	КонецПопытки;

	Если ОтобразитьСостояниеОбращения = Истина Тогда
		Состояние();
	КонецЕсли;

	Если ПрерватьОбработкуКоманд И НЕ КонтекстОбработчика.ПроизошлаОшибка Тогда
		// При возникновении асинхронного действия необходимо прервать обработку
		// команд сервиса. Выполнение будет инициировано завершением асинхронного
		// действия.
		Возврат;
	КонецЕсли;

	// Если в процессе выполнения произошла ошибка, тогда выполнить обработку ошибки
	Если КонтекстОбработчика.ПроизошлаОшибка Тогда

		ЗакрытьВсеФормы(КонтекстВзаимодействия);

		ОповеститьОЗавершенииБизнесПроцесса(КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса,
			КонтекстВзаимодействия);

		// Завершение сеанса
		Если КонтекстОбработчика.ДействияПриОшибкеДляСервера.Количество() > 0 Тогда

			// Завершение сеанса на сервере информационной базы
			ИнтернетПоддержкаПользователейВызовСервера.ЗавершитьСеансИнтернетПоддержки(
				КонтекстВзаимодействия.КСКонтекст,
				КонтекстОбработчика);

			Если КонтекстОбработчика.ДействияПриОшибкеДляСервера.Количество() > 0 Тогда
				// Осталось только действие закрытия сеанса, т.е. требуется отправить
				// из клиентского приложения команду завершения бизнес-процесса.
				ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
			КонецЕсли;

		КонецЕсли;

		Если КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ОтобразитьФормуОтсутствуетПодключение" Тогда

			ПараметрыФормы = ПараметрыФормыОшибкиОбращения(КонтекстВзаимодействия);
			ПараметрыФормы.Вставить("ОписаниеОшибки",
				КонтекстОбработчика.ПользовательскоеОписаниеОшибки);
			ПараметрыФормы.Вставить("ПодробноеОписаниеОшибки",
				КонтекстОбработчика.ПолноеОписаниеОшибки);

			Форма = ОткрытьФорму("ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету", ПараметрыФормы);
			Форма.КонтекстВзаимодействия = КонтекстВзаимодействия;

		ИначеЕсли КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение"
			И НЕ ПустаяСтрока(КонтекстОбработчика.ПользовательскоеОписаниеОшибки) Тогда

			ПоказатьПредупреждение(,
				КонтекстОбработчика.ПользовательскоеОписаниеОшибки,
				,
				НСтр("ru = 'Интернет-поддержка пользователей'"));
			Возврат;

		КонецЕсли;

	ИначеЕсли КонтекстОбработчика.ВыполнитьОстановку Тогда

		ОповеститьОЗавершенииБизнесПроцесса(КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса,
			КонтекстВзаимодействия);

		Если КонтекстОбработчика.Свойство("ОписаниеПричиныОстановки") Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Интернет-поддержка пользователей'"),
				,
				КонтекстОбработчика.ОписаниеПричиныОстановки,
				БиблиотекаКартинок.ИнтернетПоддержкаПользователей);
		КонецЕсли;

		ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);

	ИначеЕсли КонтекстВзаимодействия.Свойство("БизнесПроцессУспешноЗавершен")
		И КонтекстВзаимодействия.БизнесПроцессУспешноЗавершен = Истина Тогда

		ОповеститьОЗавершенииБизнесПроцесса(КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса,
			КонтекстВзаимодействия);

	КонецЕсли;

КонецПроцедуры

// Обращение к сервису ИПП с заданным параметром.
// Передается один параметр с заданным именем и значением "true".
//
Процедура ОбработатьКомандуФормы(
	КонтекстВзаимодействия,
	Форма,
	ИмяКоманды,
	ПараметрыОбращенияКСервисуИПП = Неопределено) Экспорт

	ПараметрыЗапроса        = Новый Массив;
	ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", ИмяКоманды, "true"));

	ОбработкаКомандСервиса(
		КонтекстВзаимодействия,
		Форма,
		ПараметрыЗапроса,
		,
		Новый Структура("ПараметрыОбращенияКСервисуИПП", ПараметрыОбращенияКСервисуИПП));

КонецПроцедуры

// Определяет, открыта ли заданная форма контекста.
//
Функция ФормаОткрыта(КонтекстВзаимодействия, ИмяПроверяемойФормы) Экспорт

	ФормыОбработки = КонтекстВзаимодействия.ФормыОбработки;

	Если ТипЗнч(ФормыОбработки) <> Тип("Соответствие") Тогда
		ФормыОбработки = Новый Соответствие;
	КонецЕсли;

	ПроверяемаяФорма = ФормыОбработки[ИмяПроверяемойФормы];
	Если ПроверяемаяФорма = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат ПроверяемаяФорма.Открыта();
	КонецЕсли;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтправкаСообщенийВСлужбуТехническойПоддержки

Процедура ПодготовитьВложенияКОтправкеНаСервере(ПараметрыСообщения)

	ПомещаемыеФайлы = Новый Массив;
	Если ПараметрыСообщения.Вложения <> Неопределено Тогда
		Для каждого ТекВложение Из ПараметрыСообщения.Вложения Цикл
			Если ТекВложение.Свойство("ИмяФайла") Тогда
				ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла(ТекВложение.ИмяФайла);
				ПомещаемыеФайлы.Добавить(ПередаваемыйФайл);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если ПомещаемыеФайлы.Количество() = 0 Тогда

		ПодготовитьВложенияКОтправкеЗавершение(Неопределено, ПараметрыСообщения);

	Иначе

		ПараметрыСообщения.Вставить("ПомещаемыеФайлы", ПомещаемыеФайлы);
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(
			Новый ОписаниеОповещения(
				"ПриПроверкеРасширенияДляРаботыСФайламиПередОтправкойСообщенияВТехПоддержку",
				ЭтотОбъект,
				ПараметрыСообщения),
			НСтр("ru = 'Для продолжения необходимо установить расширение для работы с файлами.'"));

	КонецЕсли;

КонецПроцедуры

Процедура ПриПроверкеРасширенияДляРаботыСФайламиПередОтправкойСообщенияВТехПоддержку(Подключено, ПараметрыСообщения) Экспорт

	НачатьПомещениеФайлов(
		Новый ОписаниеОповещения(
			"ПодготовитьВложенияКОтправкеЗавершение",
			ЭтотОбъект,
			ПараметрыСообщения),
		ПараметрыСообщения.ПомещаемыеФайлы,
		,
		Ложь);

КонецПроцедуры

Процедура ПодготовитьВложенияКОтправкеЗавершение(ФайлыВложений, ПараметрыСообщения) Экспорт

	Если ФайлыВложений <> Неопределено Тогда
		Для каждого ТекВложение Из ПараметрыСообщения.Вложения Цикл
			Если ТекВложение.Свойство("ИмяФайла") Тогда
				Для каждого ПФайл Из ФайлыВложений Цикл
					Если ПФайл.Имя = ТекВложение.ИмяФайла Тогда
						ТекВложение.Удалить("ИмяФайла");
						ТекВложение.Вставить("Адрес", ПФайл.Хранение);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	РезультатОтправки = ИнтернетПоддержкаПользователейВызовСервера.ОтправитьДанныеСообщенияВТехПоддержку(
		ПараметрыСообщения.Тема,
		ПараметрыСообщения.Сообщение,
		ПараметрыСообщения.Получатель,
		ПараметрыСообщения.Вложения,
		ПараметрыСообщения.ДопПараметры);

	ПриОтправкеДанныхСообщенияВТехПоддержку(РезультатОтправки, ПараметрыСообщения);

КонецПроцедуры

Процедура ПриОтправкеДанныхСообщенияВТехПоддержку(РезультатОтправки, ПараметрыСообщения)

	Состояние();

	Результат = ПустаяСтрока(РезультатОтправки.КодОшибки);
	Если Результат Тогда

		Если Не ПустаяСтрока(РезультатОтправки.Предупреждение) Тогда
			ПоказатьОповещениеПользователя(
				,
				,
				РезультатОтправки.Предупреждение,
				БиблиотекаКартинок.Ошибка32);
		КонецЕсли;

		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗаголовокОкна", НСтр("ru = 'Отправка сообщения в службу технической поддержки'"));
		Если ТипЗнч(ПараметрыСообщения) = Тип("Структура") Тогда
			Если ПараметрыСообщения.Свойство("НастройкиПрокси") Тогда
				ПараметрыОткрытия.Вставить("НастройкиПрокси",
					ПараметрыСообщения.НастройкиПрокси);
			КонецЕсли;
			Если ПараметрыСообщения.Свойство("НастройкиСоединенияССерверами") Тогда
				ПараметрыОткрытия.Вставить("НастройкиСоединения",
					ПараметрыСообщения.НастройкиСоединенияССерверами);
			КонецЕсли;
			Если ПараметрыСообщения.Свойство("ЭтоПолноправныйПользователь") Тогда
				ПараметрыОткрытия.Вставить("ЭтоПолноправныйПользователь",
					ПараметрыСообщения.ЭтоПолноправныйПользователь);
			КонецЕсли;
		КонецЕсли;
		ОткрытьВебСтраницуСДополнительнымиПараметрами(
			РезультатОтправки.URLСтраницы,
			ПараметрыОткрытия);

		Если ПараметрыСообщения.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ПараметрыСообщения.ОповещениеОЗавершении, Истина);
		КонецЕсли;

	Иначе

		ПоказатьПредупреждение(
			Новый ОписаниеОповещения(
				"ПриОшибкеОтправкиДанныхСообщенияВТехПоддержку",
				ЭтотОбъект,
				ПараметрыСообщения),
			РезультатОтправки.СообщениеОбОшибке);

	КонецЕсли;

КонецПроцедуры

Процедура ПриОшибкеОтправкиДанныхСообщенияВТехПоддержку(ПараметрыСообщения) Экспорт

	Если ПараметрыСообщения.ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыСообщения.ОповещениеОЗавершении, Ложь);
	КонецЕсли;

КонецПроцедуры

Функция ВидПриложения()

	#Если ВебКлиент Тогда
	Возврат НСтр("ru = 'Веб-клиент'");
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
	Возврат НСтр("ru = 'Толстый клиент, обычное приложение'");
	#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
	Возврат НСтр("ru = 'Толстый клиент, управляемое приложение'");
	#ИначеЕсли ТонкийКлиент Тогда
	Возврат НСтр("ru = 'Тонкий клиент'");
	#Иначе
	Возврат "";
	#КонецЕсли

КонецФункции

#КонецОбласти

#Область ОбработкаБизнесПроцессов

// Возвращает клиентский обработчик бизнес-процесса.
// Параметры:
//	МестоЗапуска - Строка - точка входа в бизнес-процесс;
//	ИмяСобытия - Строка - имя обрабатываемого события.
//
// Возвращаемое значение:
//	ОбщийМодуль - модуль, реализующий обработчик бизнес-процесса.
//	Неопределено - если отсутствует обработчик бизнес-процесса.
//
Функция КлиентскийОбработчикБизнесПроцесса(МестоЗапуска, ИмяСобытия) Экспорт

	Если ИнтернетПоддержкаПользователейКлиентСервер.ЭтоБазовыйБизнесПроцесс(МестоЗапуска) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	КлиентскиеОбработчики  = ПараметрыРаботыКлиента.КлиентскиеОбработчикиБизнесПроцессов;

	ИмяМодуля = КлиентскиеОбработчики.Получить(МестоЗапуска + "\" + ИмяСобытия);

	Если ИмяМодуля = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат ОбщегоНазначенияКлиент.ОбщийМодуль(ИмяМодуля);

КонецФункции

// Выполняет действия при запрете запуска ИПП по каким-либо причинам.
// Параметры:
//	МестоЗапуска - Строка - имя кнопки запуска ИПП;
//	СтруктураЗапуска - Структура - управляющая структура запуска.
//		(см. функцию  ОпределитьВозможностьЗапускаПоМестуИПараметрам()
//		общего модуля ИнтернетПоддержкаПользователейКлиентСервер).
//
Процедура ОбработатьСтруктуруЗапускаИПП(МестоЗапуска, Знач СтруктураЗапуска)

	Если СтруктураЗапуска = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураЗапуска.Действие = "Возврат" Тогда

		Состояние();

	ИначеЕсли СтруктураЗапуска.Действие = "ПоказатьСообщение" Тогда

		Состояние();

		Если СтруктураЗапуска.ПриНачалеРаботыСистемы Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Интернет-поддержка пользователей'"),
				,
				СтруктураЗапуска.Сообщение,
				БиблиотекаКартинок.ИнтернетПоддержкаПользователей);
		Иначе
			ПоказатьПредупреждение(
				,
				СтруктураЗапуска.Сообщение,
				,
				НСтр("ru = 'Интернет-поддержка пользователей'"));
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Общая (универсальная) процедура для запуска бизнес-процесса
// Интернет-поддержки пользователей.
//
// Параметры:
//	МестоЗапуска - Строка - место запуска механизма (имя кнопки);
//	СтартовыеПараметры - Структура - стартовые параметры механизма.
//		ключ структуры соответствует имени параметра, значение - значению
//		параметра.
//	Повторно - Булево - признак того, что механизм запускается из формы ошибки
//		подключения (ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету)
//		кнопкой "Повторить подключение".
//
Процедура СтартоватьМеханизм(МестоЗапуска, СтартовыеПараметры = Неопределено, Повторно = Ложь) Экспорт

	// Выполнение сценария Интернет-поддержки.
	ВыполнитьСценарий(МестоЗапуска, СтартовыеПараметры, Повторно);

КонецПроцедуры

// Вызывается стартовым механизмом для выполнения первого обращения к
// веб-сервису ИПП и получения команд от веб-сервиса для дальнейшего
// их выполнения.
//
// Параметры:
//	ПодготовленныйКонтекстВзаимодействия - Структура, ФиксированнаяСтруктура,
//		Неопределено - подготовленный контекст;
//	ПараметрыСозданияКонтекста - Структура - параметры создания
//		нового контекста взаимодействия, если контекст не существует;
//	ОбработчикиЗавершенияБизнесПроцесса - Структура - обработчики оповещения о
//		завершении бизнес-процесса.
//
Процедура ВызовСервиса(
	ПодготовленныйКонтекстВзаимодействия,
	ПараметрыСозданияКонтекста,
	ОбработчикиЗавершенияБизнесПроцесса)

	Если ПодготовленныйКонтекстВзаимодействия = Неопределено Тогда

		КонтекстВзаимодействия = Неопределено;

	Иначе

		Если ТипЗнч(ПодготовленныйКонтекстВзаимодействия) = Тип("ФиксированнаяСтруктура") Тогда
			КонтекстВзаимодействия = ЗначениеИзФиксированногоТипа(ПодготовленныйКонтекстВзаимодействия);
		Иначе
			КонтекстВзаимодействия = ПодготовленныйКонтекстВзаимодействия;
		КонецЕсли;

		КонтекстВзаимодействия.Вставить("ОбработчикиЗавершенияБизнесПроцесса",
			ОбработчикиЗавершенияБизнесПроцесса);

	КонецЕсли;

	// Параметры, передаваемые сервису при первом вызове и сохраняемые на стороне
	// сервера ИПП в сеансовых переменных.
	ДополнительныеСтартовыеПараметры = Новый Массив;
	ДополнительныеСтартовыеПараметры.Добавить("libraryVersion");
	ДополнительныеСтартовыеПараметры.Добавить("APIVersion");
	ДополнительныеСтартовыеПараметры.Добавить("versionConfiguration");
	ДополнительныеСтартовыеПараметры.Добавить("versionPlatform");
	ДополнительныеСтартовыеПараметры.Добавить("nameConfiguration");
	ДополнительныеСтартовыеПараметры.Добавить("language");
	ДополнительныеСтартовыеПараметры.Добавить("enterPoint");

	ОбработкаКомандСервиса(
		КонтекстВзаимодействия,
		Неопределено,
		Неопределено,
		,
		Новый Структура(
			"ДополнительныеПараметрыЗапроса, ПараметрыСозданияКонтекста, ОбработчикиЗавершенияБизнесПроцесса",
			ДополнительныеСтартовыеПараметры,
			ПараметрыСозданияКонтекста,
			ОбработчикиЗавершенияБизнесПроцесса));

КонецПроцедуры

// Добавляет команды в стек команд контекста обработчика команд
//
Процедура ДобавитьКомандыСервиса(
	КонтекстВзаимодействия,
	ДополнительныеПараметры,
	КонтекстОбработчика = Неопределено) Экспорт

	#Если Не ВебКлиент Тогда

	КСКонтекст        = КонтекстВзаимодействия.КСКонтекст;
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	// Если бизнес-процесс запускается при начале работы программы,
	// тогда установить таймаут 10 секунд на WSDL-описания
	// сервиса + первый вызов операции process() сервиса.
	ИспользоватьТаймаутПервогоВызова =(ОсновныеПараметры.МестоЗапуска = "systemStartNew"
		И Не КСКонтекст.ВыполненВызовОперацииСервиса);
	ДлительностьПолученияОписанияСервиса = 0;
	
	Попытка
		
		Если КонтекстВзаимодействия.ОписаниеСервисаИПП = Неопределено Тогда
			КонтекстВзаимодействия.ОписаниеСервисаИПП =
				ИнтернетПоддержкаПользователейКлиентСервер.НовыйОписаниеСервисаИПП(
					ОсновныеПараметры.ИмяWSОпределения,
					?(ОсновныеПараметры.МестоЗапуска = "systemStartNew", 10, -1));
			ДлительностьПолученияОписанияСервиса =
				КонтекстВзаимодействия.ОписаниеСервисаИПП.ПроксиСервиса.ДлительностьПолученияОписанияСервиса;
		КонецЕсли;

		ОписаниеСервисаИПП = КонтекстВзаимодействия.ОписаниеСервисаИПП;

	Исключение

		Если ТипЗнч(КонтекстОбработчика) = Тип("Структура") Тогда
			КонтекстОбработчика.ПроизошлаОшибка      = Истина;
			КонтекстОбработчика.ПолноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
			КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ОтобразитьФормуОтсутствуетПодключение";
			КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
				НСтр("ru = 'Ошибка при подключении к сервису Интернет-поддержки.'");
		КонецЕсли;
		
		Возврат;
		
	КонецПопытки;
	
	Если ИспользоватьТаймаутПервогоВызова Тогда
		Таймаут = 10 - ДлительностьПолученияОписанияСервиса;
		Если Таймаут < 1 Тогда
			Таймаут = 1;
		КонецЕсли;
	Иначе
		Таймаут = -1; // Использовать таймаут по умолчанию.
	КонецЕсли;
	
	КСКонтекст.ВыполненВызовОперацииСервиса = Истина;
	
	Попытка
		
		ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьКомандыСервиса(
			ОписаниеСервисаИПП,
			ДополнительныеПараметры,
			КонтекстОбработчика,
			ОсновныеПараметры,
			Таймаут);
		
	Исключение

		Если ТипЗнч(КонтекстОбработчика) = Тип("Структура") Тогда
			КонтекстОбработчика.ПроизошлаОшибка      = Истина;
			КонтекстОбработчика.ПолноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
			КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ОтобразитьФормуОтсутствуетПодключение";
			КонтекстОбработчика.ПользовательскоеОписаниеОшибки = НСтр("ru = 'Ошибка при получении данных с сервера Интернет-поддержки.'");
		КонецЕсли;

	КонецПопытки;

	#КонецЕсли

КонецПроцедуры

// Выполняет заданную команду сервиса.
//
Процедура ВыполнитьКомандуСервиса(
	КонтекстВзаимодействия,
	ТекущаяФорма,
	СтруктураКоманды,
	КонтекстОбработчика,
	ПрерватьОбработкуКоманд)

	ИмяКоманды = Неопределено;
	СтруктураКоманды.Свойство("ИмяКоманды", ИмяКоманды);

	Если ТипЗнч(ИмяКоманды) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;

	ИмяКоманды = НРег(СокрЛП(ИмяКоманды));

	Если ИмяКоманды = "store.put" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ВыполнениеКомандыЗаписьПараметров(
			КонтекстВзаимодействия.КСКонтекст,
			СтруктураКоманды,
			КонтекстОбработчика);

	ИначеЕсли ИмяКоманды = "store.get" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ВыполнениеКомандыПрочитатьПараметры(
			КонтекстВзаимодействия,
			СтруктураКоманды,
			КонтекстОбработчика,
			Ложь);

	ИначеЕсли ИмяКоманды = "store.delete" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.УдалитьПараметрыКонтекста(
			КонтекстВзаимодействия.КСКонтекст,
			СтруктураКоманды,
			КонтекстОбработчика);

	ИначеЕсли ИмяКоманды = "launchservice" Тогда
		ИзменитьБизнеспроцесс(КонтекстВзаимодействия, СтруктураКоманды, КонтекстОбработчика);

	ИначеЕсли ИмяКоманды = "ui.open" Тогда
		ОткрытьВнутреннююФорму(КонтекстВзаимодействия, ТекущаяФорма, СтруктураКоманды);

	ИначеЕсли ИмяКоманды = "ui.close" Тогда
		ЗакрытьВнутреннююФорму(КонтекстВзаимодействия, СтруктураКоманды);

	ИначеЕсли ИмяКоманды = "system.halt" Тогда
		ОстановитьМеханизм(КонтекстВзаимодействия, СтруктураКоманды);

	ИначеЕсли ИмяКоманды = "message.show" Тогда
		ПоказатьСообщениеПользователю(
			СтруктураКоманды,
			КонтекстВзаимодействия,
			ТекущаяФорма,
			КонтекстОбработчика,
			ПрерватьОбработкуКоманд);

	ИначеЕсли ИмяКоманды = "question.show" Тогда
		ЗадатьВопросПользователю(КонтекстВзаимодействия, ТекущаяФорма, СтруктураКоманды);

	ИначеЕсли ИмяКоманды = "input.field" Тогда
		ВвестиДанные(КонтекстВзаимодействия, ТекущаяФорма, СтруктураКоманды);

	ИначеЕсли ИмяКоманды = "store.putorganizations" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьСписокОрганизаций(
			КонтекстВзаимодействия.КСКонтекст,
			СтруктураКоманды);

	ИначеЕсли ИмяКоманды = "store.putadressclassifier" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьАдресныйКлассификатор(
			КонтекстВзаимодействия.КСКонтекст,
			СтруктураКоманды);

	Иначе

		// Обработка в доп. обработчике бизнес-процесса
		ДопОбработчик = КлиентскийОбработчикБизнесПроцесса(
			КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры.МестоЗапуска,
			"ВыполнитьКомандуСервиса");

		Если ДопОбработчик <> Неопределено Тогда

			ДопОбработчик.ВыполнитьКомандуСервиса(
				КонтекстВзаимодействия,
				ТекущаяФорма,
				СтруктураКоманды,
				КонтекстОбработчика,
				ПрерватьОбработкуКоманд);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Выполнение команды открытия формы.
//
Процедура ОткрытьВнутреннююФорму(КонтекстВзаимодействия, ТекущаяФорма, СтруктураКоманды)

	ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;

	ПараметрыФормы = Неопределено;
	СтруктураКоманды.Свойство("ПараметрыФормы", ПараметрыФормы);

	УРЛ = Неопределено;
	СтруктураКоманды.Свойство("УРЛ", УРЛ);

	ТекстФормы = Неопределено;
	СтруктураКоманды.Свойство("Текст", ТекстФормы);

	// Замена параметров в тексте формы
	Если ТекстФормы <> Неопределено Тогда
		Если Найти(ТекстФормы, "%Логин%") Тогда
			СтрокаЗамены = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
				КонтекстВзаимодействия.КСКонтекст,
				"login");
			ТекстФормы = СтрЗаменить(ТекстФормы, "%Логин%", СтрокаЗамены);
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыФормы <> Неопределено Тогда

		ИмяОткрываемойФормы = Неопределено;
		ПараметрыФормы.Свойство("ИмяОткрываемойФормы", ИмяОткрываемойФормы);

		Заголовок = Неопределено;
		ПараметрыФормы.Свойство("Заголовок", Заголовок);

		Текст = Неопределено;
		ПараметрыФормы.Свойство("Текст", Текст);

		Если ИмяОткрываемойФормы = "Вопрос" Тогда

			ТекстПредупреждения = ?(Текст = Неопределено, ТекстФормы, Текст);

			ДопПараметры = Новый Структура("КонтекстВзаимодействия, Форма", КонтекстВзаимодействия, ТекущаяФорма);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПриНажатииОКВСтатическойФормеПредупреждения",
				ЭтотОбъект,
				ДопПараметры);

			ПоказатьПредупреждение(ОписаниеОповещения, ТекстПредупреждения, , Заголовок);

		ИначеЕсли ИмяОткрываемойФормы = "ВсплывающаяПодсказка" Тогда

			ПоказатьОповещениеПользователя(
				Заголовок,
				,
				ТекстФормы,
				БиблиотекаКартинок.ИнтернетПоддержкаПользователей);

		Иначе

			Если ТекущаяФорма <> Неопределено Тогда
				ЗакрытьФормуПрограммно(ТекущаяФорма, КонтекстВзаимодействия);
			КонецЕсли;

			ПараметрыОткрытияФормы = СформироватьПараметрыОткрытияФормы(
				КонтекстВзаимодействия.КСКонтекст,
				ИмяОткрываемойФормы);

			Если УРЛ <> Неопределено Тогда
				ПараметрыОткрытияФормы.Вставить("УРЛ", УРЛ);
			КонецЕсли;

			ОткрываемаяФорма = ПолучитьФорму(ИмяОткрываемойФормы, ПараметрыОткрытияФормы);

			Попытка
				ОткрываемаяФорма.КонтекстВзаимодействия = КонтекстВзаимодействия;
			Исключение
				ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;

			ОткрываемаяФорма.Открыть();

		КонецЕсли;

		Если ПараметрыФормы.Свойство("УспешноеЗавершениеБизнесПроцесса") Тогда
			КонтекстВзаимодействия.Вставить("БизнесПроцессУспешноЗавершен", Истина);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Подготовка параметров для открытия внутренней формы.
//
Функция СформироватьПараметрыОткрытияФормы(КСКонтекст, ИмяОткрываемойФормы)

	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;

	ПараметрыНовойФормы = Новый Структура;

	// Во все формы передается значение параметра login
	ПараметрыНовойФормы.Вставить("login",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "login"));

	Если ИмяОткрываемойФормы = "ОбщаяФорма.ПодключениеИнтернетПоддержки" Тогда

		ПараметрыНовойФормы.Вставить("ЭтоФормаБизнесПроцесса", Истина);
		ПараметрыНовойФормы.Вставить("МестоЗапуска"          , КСКонтекст.ОсновныеПараметры.МестоЗапуска);

		ПараметрыНовойФормы.Вставить("ПриНачалеРаботыСистемы", КСКонтекст.ПриНачалеРаботыСистемы);
		ПараметрыНовойФормы.Вставить("password",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"password"));
		ПараметрыНовойФормы.Вставить("ИзменятьФлагЗаполнитьПароль", Истина);
		ПараметрыНовойФормы.Вставить("ЗапомнитьПароль",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"savePassword") <> "false");
		ПараметрыНовойФормы.Вставить("ЗаголовокКнопкиОК", НСтр("ru = 'Войти'"));

	ИначеЕсли ИмяОткрываемойФормы = "Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ОбщаяРегНомер" Тогда
		ПараметрыНовойФормы.Вставить("regnumber",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"regnumber"));

		ПараметрыНовойФормы.Вставить("ПриНачалеРаботыСистемы", КСКонтекст.ПриНачалеРаботыСистемы);

	ИначеЕсли ИмяОткрываемойФормы = "Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ОбщаяПинкод" Тогда
		ПараметрыНовойФормы.Вставить("regnumber",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"regnumber"));
		ПараметрыНовойФормы.Вставить("pincode",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"pincode"));

	ИначеЕсли ИмяОткрываемойФормы = "Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ИнтернетПоддержкаПродуктаНеОказывается" Тогда

		Если КСКонтекст.Свойство("ПриНачалеРаботыСистемы") Тогда
			ПараметрыНовойФормы.Вставить("ПриНачалеРаботыСистемы", КСКонтекст.ПриНачалеРаботыСистемы);
		КонецЕсли;

	Иначе

		// Получение параметров формы через доп. обработчик бизнес-процесса
		ДопОбработчик = КлиентскийОбработчикБизнесПроцесса(
			ОсновныеПараметры.МестоЗапуска,
			"ПараметрыОткрытияФормы");

		Если ДопОбработчик <> Неопределено Тогда
			ДопОбработчик.ПараметрыОткрытияФормы(КСКонтекст, ИмяОткрываемойФормы, ПараметрыНовойФормы);
		КонецЕсли;

	КонецЕсли;

	Возврат ПараметрыНовойФормы;

КонецФункции

// Выполнение команды закрытия внутренней формы.
//
Процедура ЗакрытьВнутреннююФорму(КонтекстВзаимодействия, СтруктураКоманды)

	ФормыОбработки    = КонтекстВзаимодействия.ФормыОбработки;
	ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;

	ПараметрыФормы = Неопределено;
	СтруктураКоманды.Свойство("ПараметрыФормы", ПараметрыФормы);

	Если ПараметрыФормы <> Неопределено Тогда

		ИмяОткрываемойФормы = Неопределено;
		ПараметрыФормы.Свойство("ИмяОткрываемойФормы", ИмяОткрываемойФормы);

		Если ИмяОткрываемойФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Форма = ФормыОбработки[ИмяОткрываемойФормы];

		Если Форма = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ЗакрытьФормуПрограммно(Форма, КонтекстВзаимодействия);

	КонецЕсли;

КонецПроцедуры

// Выполнение команды сервиса "Задать вопрос пользователю".
//
Процедура ЗадатьВопросПользователю(КонтекстВзаимодействия, Форма, СтруктураКоманды)

	ТипВопроса = Неопределено;
	СтруктураКоманды.Свойство("Тип", ТипВопроса);

	Если ТипВопроса = "richanswer" Тогда

		СписокКнопок = СтруктураКоманды.Кнопки;

	Иначе

		СписокКнопок = Новый СписокЗначений;
		Для каждого ЭлементКнопка Из СтруктураКоманды.Кнопки Цикл
			Если ЭлементКнопка.Значение = "yes" Тогда
				СписокКнопок.Добавить(КодВозвратаДиалога.Да);
			ИначеЕсли ЭлементКнопка.Значение = "no" Тогда
				СписокКнопок.Добавить(КодВозвратаДиалога.Нет);
			ИначеЕсли ЭлементКнопка.Значение = "cancel" Тогда
				СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			ИначеЕсли ЭлементКнопка.Значение = "ok" Тогда
				СписокКнопок.Добавить(КодВозвратаДиалога.ОК);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	ДопПараметрыВопроса = Новый Структура("КонтекстВзаимодействия, ТипВопроса, Форма",
		КонтекстВзаимодействия,
		ТипВопроса,
		Форма);

	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросКомандыВопрос",
		ЭтотОбъект,
		ДопПараметрыВопроса);

	ПоказатьВопрос(ОписаниеОповещения, СтруктураКоманды.ТекстСообщения, СписокКнопок, , , СтруктураКоманды.Заголовок);

КонецПроцедуры

// Асинхронный обработчик ответа пользователя при выполнении команды
// ЗадатьВопросПользователю().
//
Процедура ПриОтветеНаВопросКомандыВопрос(РезультатВопроса, ДопПараметры) Экспорт

	Если ДопПараметры.ТипВопроса = "richanswer" Тогда
		ОтветСервису = РезультатВопроса;

	Иначе
		ОтветСервису = "Cancel";
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			ОтветСервису = "Yes";
		ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
			ОтветСервису = "No";
		ИначеЕсли РезультатВопроса = КодВозвратаДиалога.ОК Тогда
			ОтветСервису = "OK";
		КонецЕсли;

	КонецЕсли;

	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "answer", ОтветСервису));

	ОбработкаКомандСервиса(ДопПараметры.КонтекстВзаимодействия, ДопПараметры.Форма, ПараметрыЗапроса);

КонецПроцедуры

// Выполнение команды сервиса "Показать сообщение пользователю".
//
Процедура ПоказатьСообщениеПользователю(
	СтруктураКоманды,
	КонтекстВзаимодействия,
	ТекущаяФорма,
	КонтекстОбработчика,
	ПрерватьОбработкуКоманд)

	ТипСообщения = Неопределено;
	СтруктураКоманды.Свойство("Тип", ТипСообщения);

	Если ТипСообщения = "usernotification" Тогда

		ПоказатьОповещениеПользователя(
			СтруктураКоманды.Заголовок,
			,
			СтруктураКоманды.ТекстСообщения,
			БиблиотекаКартинок.ИнтернетПоддержкаПользователей);

	Иначе

		ПрерватьОбработкуКоманд = Истина;
		ДопПараметрыОповещения = Новый Структура("КонтекстВзаимодействия, Форма, КонтекстОбработчика",
			КонтекстВзаимодействия,
			ТекущаяФорма,
			КонтекстОбработчика);

		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПриНажатииОКВФормеСообщенияПользователю",
			ЭтотОбъект,
			ДопПараметрыОповещения);

		ПоказатьПредупреждение(ОписаниеОповещения, СтруктураКоманды.ТекстСообщения, , СтруктураКоманды.Заголовок);

	КонецЕсли;

КонецПроцедуры

// Асинхронный обработчик нажатия кнопки "ОК" в форме сообщения пользователю
// при выполнении команды сервиса "Показать сообщение пользователю".
//
Процедура ПриНажатииОКВФормеСообщенияПользователю(ДопПараметры) Экспорт

	ОбработкаКомандСервиса(
		ДопПараметры.КонтекстВзаимодействия,
		ДопПараметры.Форма,
		,
		ДопПараметры.КонтекстОбработчика,
		Новый Структура("ПродолжитьВыполнение", Истина));

КонецПроцедуры

// Асинхронный обработчик нажатия пользователем кнопки "ОК" при выполнении
// команды открытия статической формы.
//
Процедура ПриНажатииОКВСтатическойФормеПредупреждения(ДопПараметры) Экспорт

	ОбработкаКомандСервиса(ДопПараметры.КонтекстВзаимодействия, ДопПараметры.Форма, Неопределено);

КонецПроцедуры

// Выполнение команды сервиса "Ввести данные". При выполнении
// открывается универсальная форма ввода данных
// Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ВводДанных.
//
Процедура ВвестиДанные(КонтекстВзаимодействия, Форма, СтруктураКоманды)

	ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;

	ДопПараметры = Новый Структура("Форма, КонтекстВзаимодействия", Форма, КонтекстВзаимодействия);

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриВводеДанныхПользователем",
		ЭтотОбъект,
		ДопПараметры);

	ИмяФормыВводаДанных = "Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ВводДанных";
	ОткрытьФорму(ИмяФормыВводаДанных,
		СтруктураКоманды.ПараметрыФормы,
		,
		,
		,
		,
		ОписаниеОповещения);

КонецПроцедуры

// Асинхронный обработчик ввода данных пользователем в результате выполнения
// команды ПриВводеДанныхПользователем().
//
Процедура ПриВводеДанныхПользователем(ВведенныеДанные, ДопПараметры) Экспорт

	Форма = ДопПараметры.Форма;
	КонтекстВзаимодействия = ДопПараметры.КонтекстВзаимодействия;

	ПараметрыЗапроса = Новый Массив;
	Если ВведенныеДанные <> Неопределено И ВведенныеДанные <> КодВозвратаДиалога.Отмена Тогда
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "value", ВведенныеДанные));
	КонецЕсли;

	ОбработкаКомандСервиса(КонтекстВзаимодействия, Форма, ПараметрыЗапроса);

КонецПроцедуры

// Выполняет команду изменения адреса текущего сервиса ИПП.
//
Процедура ИзменитьБизнеспроцесс(КонтекстВзаимодействия, СтруктураКоманды, КонтекстОбработчика)

	ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;

	ПараметрыКоманды = Неопределено;
	СтруктураКоманды.Свойство("Параметры", ПараметрыКоманды);

	БизнесПроцесс = Неопределено;
	ИмяURI        = Неопределено;

	Для каждого ПараметрКоманды Из ПараметрыКоманды Цикл

		Если ПараметрКоманды.Свойство("bp", БизнесПроцесс) Тогда
			ОсновныеПараметры.ИмяWSОпределения = БизнесПроцесс;
		КонецЕсли;

		Если ПараметрКоманды.Свойство("nameURI", ИмяURI) Тогда
			ОсновныеПараметры.URIСервиса = ИмяURI;
		КонецЕсли;

	КонецЦикла;

	// Добавление номера сессии
	ПараметрыЗапроса = Новый Массив;

	ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьСессионныеПараметрыКЗапросу(
		КонтекстВзаимодействия.КСКонтекст,
		ПараметрыЗапроса);

	// Смена подключения
	КонтекстВзаимодействия.ОписаниеСервисаИПП = Неопределено;

	// Обратиться к новому веб-сервису за командами, и записать их в стек команд
	ДобавитьКомандыСервиса(
		КонтекстВзаимодействия,
		ПараметрыЗапроса,
		КонтекстОбработчика);

КонецПроцедуры

// Выполнение команды останова механизма ИПП. Закрытие всех форм,
// при необходимости отображается форма ошибки обращения к сервису ИПП
// и записывается ошибка в журнал регистрации.
//
Процедура ОстановитьМеханизм(КонтекстВзаимодействия, СтруктураКоманды)

	ЗакрытьВсеФормы(КонтекстВзаимодействия);

	ПараметрыКоманды = Неопределено;
	СтруктураКоманды.Свойство("Параметры", ПараметрыКоманды);

	Если ПараметрыКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КодОшибки = Неопределено;
	Для каждого ПараметрКоманды Из ПараметрыКоманды Цикл

		Если ПараметрКоманды.Свойство("errorCode", КодОшибки) Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если СокрЛП(Строка(КодОшибки)) <> "0" И КодОшибки <> Неопределено Тогда

		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(КодОшибки);
		ПараметрыФормы = ПараметрыФормыОшибкиОбращения(КонтекстВзаимодействия);
		ПараметрыФормы.Вставить("ОписаниеОшибки", КодОшибки);
		ПараметрыФормы.Вставить("ПодробноеОписаниеОшибки",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка сервиса (%1).'"),
				Строка(КодОшибки)));

		Форма = ОткрытьФорму("ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету", ПараметрыФормы);
		Форма.КонтекстВзаимодействия = КонтекстВзаимодействия;

	КонецЕсли;

КонецПроцедуры

// Асинхронный обработчик ответа пользователя на вопрос о выходе из ИПП в
// процедуре ОбработатьВыходПользователя().
//
Процедура ПриОтветеПользователяНаВопросОВыходе(РезультатВопроса, ДопПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытьВсеФормы(ДопПараметры.КонтекстВзаимодействия);
		ИнтернетПоддержкаПользователейВызовСервера.ОчиститьНастройкиИПППользователя();
		ОбработатьКомандуФормы(ДопПараметры.КонтекстВзаимодействия, ДопПараметры.Форма, "exitUser");
	КонецЕсли;

КонецПроцедуры

// Удаление сессионных параметров контекста.
//
Процедура ОчиститьСессию(КонтекстВзаимодействия)

	СессионныеПараметры = КонтекстВзаимодействия.КСКонтекст.СессионныеПараметры;
	КоличествоПараметров = СессионныеПараметры.Количество();
	Если КоличествоПараметров > 0 Тогда
		Для ОбратныйИндекс = 1 По КоличествоПараметров Цикл
			Индекс = КоличествоПараметров - ОбратныйИндекс;
			Если СессионныеПараметры[Индекс].ОбластьВидимости <> "startUp" Тогда
				СессионныеПараметры.Удалить(Индекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Отображение состояния обращения к веб-сервису ИПП.
//
Процедура ОтобразитьСостояниеОбращениеКСервису()

	Состояние(
		,
		,
		НСтр("ru = 'Ожидание ответа от сервера Интернет-поддержки пользователей'"),
		БиблиотекаКартинок.ИнтернетПоддержкаПользователей);

КонецПроцедуры

// Закрытие всех форм контекста.
//
Процедура ЗакрытьВсеФормы(КонтекстВзаимодействия)

	Если КонтекстВзаимодействия = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ФормыОбработки = КонтекстВзаимодействия.ФормыОбработки;
	Если ТипЗнч(ФормыОбработки) = Тип("Соответствие") Тогда

		ТипУправляемаяФорма = Тип("УправляемаяФорма");
		Для каждого КлючЗначение Из ФормыОбработки Цикл
			Форма = КлючЗначение.Значение;
			Если ТипЗнч(Форма) = ТипУправляемаяФорма И Форма.Открыта() Тогда
				Форма.ПрограммноеЗакрытие = Истина;
				Форма.Закрыть();
			КонецЕсли;
		КонецЦикла;

		// Очистить ссылки на объекты всех форм
		КонтекстВзаимодействия.ФормыОбработки = Новый Соответствие;

	КонецЕсли;

КонецПроцедуры

// Выполняет вызов обработчиков оповещения о завершении бизнес-процесса.
//
// Параметры:
//	ОбработчикиЗавершенияБизнесПроцесса - Структура - обработчики оповещения о
//		завершении бизнес-процесса;
//	КонтекстВзаимодействия - Структура, Неопределено - контекст бизнес-процесса
//		(см. функцию
//		ИнтернетПоддержкаПользователейВызовСервера.НовыйКонтекстВзаимодействия()).
//
Процедура ОповеститьОЗавершенииБизнесПроцесса(ОбработчикиЗавершенияБизнесПроцесса, КонтекстВзаимодействия)

	Если ОбработчикиЗавершенияБизнесПроцесса = Неопределено
		Или ОбработчикиЗавершенияБизнесПроцесса.Обработано Тогда
		Возврат;
	КонецЕсли;

	Если ОбработчикиЗавершенияБизнесПроцесса.Обработчик <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОбработчикиЗавершенияБизнесПроцесса.Обработчик, Неопределено);
	КонецЕсли;

	ОбработчикиЗавершенияБизнесПроцесса.Обработано = Истина;

КонецПроцедуры

// Программное закрытие формы контекста ИПП.
//
Процедура ЗакрытьФормуПрограммно(ЗакрываемаяФорма, КонтекстВзаимодействия)

	Если ЗакрываемаяФорма <> Неопределено Тогда

		Если ЗакрываемаяФорма.Открыта() Тогда

			Попытка
				ЗакрываемаяФорма.ПрограммноеЗакрытие = Истина;
			Исключение
				ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;

			ЗакрываемаяФорма.Закрыть();

		КонецЕсли;

		Если КонтекстВзаимодействия <> Неопределено
			И ТипЗнч(КонтекстВзаимодействия.ФормыОбработки) = Тип("Соответствие") Тогда
			КонтекстВзаимодействия.ФормыОбработки.Удалить(ЗакрываемаяФорма.ИмяФормы);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Определяет текст вопроса при выходе авторизованного пользователя из ИПП.
//
Функция ВопросПриВыходеАвторизованногоПользователя(КонтекстВзаимодействия)

	ЛогинПользователя = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
		КонтекстВзаимодействия.КСКонтекст,
		"login");

	ТекстВопроса = НСтр("ru = 'Подключение пользователя с логином %1 к Интернет-поддержке будет
					|прекращено. Для нового подключения нужно заново ввести логин и пароль.
					|Продолжить?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", ЛогинПользователя);

	Возврат ТекстВопроса;

КонецФункции

// Возвращает параметры формы "ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету",
// формируемые из контекста взаимодействия с сервисом ИПП.
//
Функция ПараметрыФормыОшибкиОбращения(КонтекстВзаимодействия)

	КСКонтекст        = КонтекстВзаимодействия.КСКонтекст;
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;

	Логин = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "login");

	ПараметрыФормыОшибкиДоступа = Новый Структура;
	ПараметрыФормыОшибкиДоступа.Вставить("МестоЗапуска", ОсновныеПараметры.МестоЗапуска);
	ПараметрыФормыОшибкиДоступа.Вставить("СтартовыеПараметры", КонтекстВзаимодействия.СтартовыеПараметрыМеханизма);
	ПараметрыФормыОшибкиДоступа.Вставить("ПриНачалеРаботыСистемы", КСКонтекст.ПриНачалеРаботыСистемы);
	ПараметрыФормыОшибкиДоступа.Вставить("Логин", Логин);

	Возврат ПараметрыФормыОшибкиДоступа;

КонецФункции

#КонецОбласти

#Область НастройкиПрограммы

Процедура ПриОтветеНаВопросОВыходеИзИнтернетПоддержки(КодВозврата, Форма) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		ИнтернетПоддержкаПользователейВызовСервера.ВыйтиИзИПП();
		Форма.БИПДанныеАутентификации = Неопределено;
		ИнтернетПоддержкаПользователейКлиентСервер.ОтобразитьСостояниеПодключенияИПП(Форма);
		Оповестить("ИнтернетПоддержкаОтключена");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыИФункции

Процедура ПриНедоступностиПодключенияИПП(ОповещениеОЗавершении) Экспорт

	Если ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Неопределено);
	КонецЕсли;

КонецПроцедуры

// Итерационное копирование списка значений.
//
Процедура СкопироватьСписокЗначенийИтерационно(Источник, Приемник) Экспорт

	Приемник.Очистить();
	Для каждого ЭлементИсточника Из Источник Цикл
		Приемник.Добавить(ЭлементИсточника.Значение, ЭлементИсточника.Представление);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
