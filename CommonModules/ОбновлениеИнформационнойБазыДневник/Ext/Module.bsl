////////////////////////////////////////////////////////////////////////////////
// ОбновлениеИнформационнойБазыДеньги: Обновление информационной базы "1С:Деньги"
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "Дневник"; //+++
	Описание.Версия = "1.0.0.0";
	//Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("Дневник");
	//Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы"); //+++
	//Описание.ТребуемыеПодсистемы.Добавить("РегламентированнаяОтчетность");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
//
//	ПРИМЕРЫ:
//
//	// Обработчики, выполняемые при каждом обновлении ИБ
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "*";
//	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбязательныйОбработчик";
//	Обработчик.РежимВыполнения = "Монопольно";
//	
//	// Обработчики, выполняемые при заполнении пустой ИБ
//	Обработчик = Обработчики.Добавить();
//	Обработчик.НачальноеЗаполнение = Истина;
//	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ПервыйЗапуск";
//	
//	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.0.2.2";
//	Обработчик.НачальноеЗаполнение = Истина;
//	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ИнициализироватьРолиИсполнителей";
//
//	// Обработчики, выполняемые при переходе на новую версию.
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "2.0.1.5";
//	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьДополнительныеОбработки_2_0_1_5";
//	
//	// Обработчики отложенного обновления
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "2.1.4.11";
//	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ТестированиеОтложенногоОбновления";
//	Обработчик.РежимВыполнения = "Отложенно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	////////////////////////////////////////////////////////////////////////////////
	// Обработчики, выполняемые при каждом обновлении ИБ
	
	// Пример объявления обработчика:
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "*";
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбязательныйОбработчик";
	//Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДеньги.ПроверитьИсправитьРолиПользователей";
	Обработчик.РежимВыполнения = "Монопольно";
	
	////////////////////////////////////////////////////////////////////////////////
	// Обработчики, выполняемые при заполнении пустой ИБ
			
	// Заполняем справочники и реквизиты предопределенных элементов
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДеньги.ЗаполнитьПустуюИБ";
	
	
	////////////////////////////////////////////////////////////////////////////////
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию
	
	// Пример объявления обработчика:
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "1.0.2.2";
	//Обработчик.НачальноеЗаполнение = Истина;
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ИнициализироватьРолиИсполнителей";
	
	
	////////////////////////////////////////////////////////////////////////////////
	// Обработчики, выполняемые при переходе на новую версию
	
	// Обновление на версию 2.0.34.1
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.0.34.1";
	//Обработчик.Процедура = "ОбновлениеИнформационнойБазыДневник.Обновление_20341";
	
	////////////////////////////////////////////////////////////////////////////////
	// Обработчики отложенного обновления
	
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	ПараметрыСеанса.ВерсияНачалаОбновления = ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя);
	ТекстОбновления = НСтр("ru = 'Обновляется версия конфигурации %1'");
	ТекстОбновления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОбновления, ПараметрыСеанса.ВерсияНачалаОбновления);
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Подробности обновления'") , УровеньЖурналаРегистрации.Примечание,,, ТекстОбновления);
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
		
	ПроверитьГраницыИтогов();
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Макет) Экспорт
	// в текущих версиях не используется
КонецПроцедуры

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение ИБ при первом запуске

#Область ЗаполнитьПустуюИБ

// Начальное заполнение пустой базы
Процедура ЗаполнитьПустуюИБ(Параметр = Неопределено) Экспорт

	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы ""Деньги""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начальное заполнение информационной базы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	// Национальная валюта учета:
	ВалютаУчета = НайтиСоздатьВалюту("643", "руб.", "Российский рубль", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2", Неопределено);
	
	// Прочие валюты:
	НайтиСоздатьВалюту("840", "USD", "Доллар США", "доллар, доллара, долларов, м, цент, цента, центов, м, 2", ВалютаУчета);
	НайтиСоздатьВалюту("978", "EUR", "Евро", "евро, евро, евро, м, цент, цента, центов, м, 2", ВалютаУчета);
	
	// Проверяем справочники:
	ПроверитьКонтакты();
	// Проверка следующих справочников передана в помощник начала работы
	//ПроверитьСтатьиДоходов(); //+++
	//ПроверитьСтатьиРасходов();
	
	////БюджетированиеСервер.ОбновитьВсеКлючиСтатейБюджета(); //+++
	
	// Безусловные проверки и настройки
	//ВыполнятьВсегдаПриПервомЗапуске(); //+++

КонецПроцедуры

Процедура ПроверитьКонтакты()

	Если СправочникПустой("Контакты") Тогда
		
		СправочникОбъект = Справочники.Контакты.Магазины.ПолучитьОбъект();
		СправочникОбъект.Наименование = НСтр("ru = 'Магазины'");
		СправочникОбъект.Активность   = Истина;
		ЗаписатьСправочникОбъект(СправочникОбъект, Ложь);
		
		СправочникОбъект = Справочники.Контакты.ЧленыСемьи.ПолучитьОбъект();
		СправочникОбъект.Наименование = НСтр("ru = 'Семья'");
		СправочникОбъект.Активность   = Истина;
		ЗаписатьСправочникОбъект(СправочникОбъект, Ложь);
	
	КонецЕсли; 

КонецПроцедуры

Процедура ПроверитьСтатьиДоходов()

	Если СправочникПустой("СтатьиДоходов") Тогда
		
		СправочникОбъект = Справочники.СтатьиДоходов.ПрочиеДоходы.ПолучитьОбъект();
		СправочникОбъект.Наименование = НСтр("ru = 'Прочие доходы'");
		СправочникОбъект.Активность = Истина;
		ЗаписатьСправочникОбъект(СправочникОбъект, Ложь);
		ГруппаПрочие = СправочникОбъект.Ссылка;
		
		СправочникОбъект = Справочники.СтатьиДоходов.ИзменениеОстатка.ПолучитьОбъект();
		СправочникОбъект.Наименование = НСтр("ru = 'Увеличение остатка'");
		СправочникОбъект.Активность = Истина;
		СправочникОбъект.Родитель   = ГруппаПрочие;
		ЗаписатьСправочникОбъект(СправочникОбъект, Ложь);
		
		СправочникОбъект = Справочники.СтатьиДоходов.ОбменВалюты.ПолучитьОбъект();
		СправочникОбъект.Наименование = НСтр("ru = 'Поступление валюты'");
		СправочникОбъект.Активность = Истина;
		СправочникОбъект.Родитель   = ГруппаПрочие;
		ЗаписатьСправочникОбъект(СправочникОбъект, Ложь);
		
	КонецЕсли; 

КонецПроцедуры

Процедура ПроверитьСтатьиРасходов()

	Если СправочникПустой("СтатьиРасходов") Тогда
		
		СправочникОбъект = Справочники.СтатьиРасходов.ПрочиеРасходы.ПолучитьОбъект();
		СправочникОбъект.Наименование = НСтр("ru = 'Прочие расходы'");
		СправочникОбъект.Активность = Истина;
		ЗаписатьСправочникОбъект(СправочникОбъект, Ложь);
		ГруппаПрочие = СправочникОбъект.Ссылка;
		
		СправочникОбъект = Справочники.СтатьиРасходов.ИзменениеОстатка.ПолучитьОбъект();
		СправочникОбъект.Наименование = НСтр("ru = 'Уменьшение остатка'");
		СправочникОбъект.Активность = Истина;
		СправочникОбъект.Родитель   = ГруппаПрочие;
		ЗаписатьСправочникОбъект(СправочникОбъект, Ложь);
		
		СправочникОбъект = Справочники.СтатьиРасходов.ОбменВалюты.ПолучитьОбъект();
		СправочникОбъект.Наименование = НСтр("ru = 'Расход валюты'");
		СправочникОбъект.Активность = Истина;
		СправочникОбъект.Родитель   = ГруппаПрочие;
		ЗаписатьСправочникОбъект(СправочникОбъект, Ложь);
		
	КонецЕсли; 

КонецПроцедуры

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                 - значение соответствующего реквизита справочника,
//  Наименование          - значение соответствующего реквизита справочника,
//  НаименованиеПолное    - значение соответствующего реквизита справочника,
//  ПараметрыПрописи      - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописи, ВалютаУчета) Экспорт

	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда

		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописи          = ПараметрыПрописи;
		СправочникОбъект.Активность                = Истина;
		СправочникОбъект.ЗагружаетсяИзИнтернета    = Код <> "643";
		СправочникОбъект.СпособУстановкиКурса      = ?(Код = "643", Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод,
					Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета);

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;

		Если Код = "643" Тогда
			ЗначениеКонстанты = Константы.ВалютаУчета.Получить();
			Если НЕ ЗначениеЗаполнено(ЗначениеКонстанты) Тогда
				Константы.ВалютаУчета.Установить(Ссылка);
			КонецЕсли;
			ВалютаУчета = Ссылка;
		КонецЕсли; 
		
	КонецЕсли;

	// установим курс и кратность = 1 на 1 января 1980
	Если ВалютаУчета <> Неопределено Тогда
		//РаботаСКурсамиВалют.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка, ВалютаУчета);
		//Если  Код <> "643" Тогда
		//	ПроверитьКорректностьНачальныхКурсовВалюты(Ссылка, Код, ВалютаУчета);
		//КонецЕсли; 
	КонецЕсли;
	
	Возврат Ссылка;

КонецФункции

Процедура ПроверитьКорректностьНачальныхКурсовВалюты(Валюта, КодВалюты, ВалютаУчета) 
	
	Если КодВалюты = "840" Тогда //Доллар США
		
		ПроверитьУстановитьКурс('19800101', Валюта, ВалютаУчета, 1);
		ПроверитьУстановитьКурс('20000101', Валюта, ВалютаУчета, 27.0000);
		ПроверитьУстановитьКурс('20010101', Валюта, ВалютаУчета, 28.1600);
		ПроверитьУстановитьКурс('20020101', Валюта, ВалютаУчета, 30.1372);
		ПроверитьУстановитьКурс('20030101', Валюта, ВалютаУчета, 31.7844);
		ПроверитьУстановитьКурс('20040101', Валюта, ВалютаУчета, 29.4545);
		ПроверитьУстановитьКурс('20050101', Валюта, ВалютаУчета, 27.7487);
		ПроверитьУстановитьКурс('20060101', Валюта, ВалютаУчета, 28.7825);
		ПроверитьУстановитьКурс('20070101', Валюта, ВалютаУчета, 26.3311);
		ПроверитьУстановитьКурс('20080101', Валюта, ВалютаУчета, 24.5462);
		ПроверитьУстановитьКурс('20090101', Валюта, ВалютаУчета, 29.3916);
		ПроверитьУстановитьКурс('20100101', Валюта, ВалютаУчета, 30.1851);
		ПроверитьУстановитьКурс('20110101', Валюта, ВалютаУчета, 30.3505);
		ПроверитьУстановитьКурс('20120101', Валюта, ВалютаУчета, 32.1961);
		ПроверитьУстановитьКурс('20130101', Валюта, ВалютаУчета, 30.3727);
		ПроверитьУстановитьКурс('20130201', Валюта, ВалютаУчета, 30.0161);
		ПроверитьУстановитьКурс('20130301', Валюта, ВалютаУчета, 30.5124);
		ПроверитьУстановитьКурс('20130401', Валюта, ВалютаУчета, 31.0834);
		ПроверитьУстановитьКурс('20130501', Валюта, ВалютаУчета, 31.0433);
		ПроверитьУстановитьКурс('20130601', Валюта, ВалютаУчета, 31.7979);
		ПроверитьУстановитьКурс('20130701', Валюта, ВалютаУчета, 32.7090);
		ПроверитьУстановитьКурс('20130801', Валюта, ВалютаУчета, 33.0330);
		ПроверитьУстановитьКурс('20130901', Валюта, ВалютаУчета, 33.2474);
		ПроверитьУстановитьКурс('20131001', Валюта, ВалютаУчета, 32.4839);
		ПроверитьУстановитьКурс('20131101', Валюта, ВалютаУчета, 32.0758);
		ПроверитьУстановитьКурс('20131201', Валюта, ВалютаУчета, 33.1916);
		ПроверитьУстановитьКурс('20140101', Валюта, ВалютаУчета, 32.6587);
		ПроверитьУстановитьКурс('20140201', Валюта, ВалютаУчета, 35.1800);
		ПроверитьУстановитьКурс('20140301', Валюта, ВалютаУчета, 36.1847);
		ПроверитьУстановитьКурс('20140401', Валюта, ВалютаУчета, 35.6053);
		ПроверитьУстановитьКурс('20140501', Валюта, ВалютаУчета, 35.7227);
		ПроверитьУстановитьКурс('20140601', Валюта, ВалютаУчета, 34.7352);
		ПроверитьУстановитьКурс('20140701', Валюта, ВалютаУчета, 33.8434);
		ПроверитьУстановитьКурс('20140801', Валюта, ВалютаУчета, 35.4438);
		ПроверитьУстановитьКурс('20140901', Валюта, ВалютаУчета, 36.9316);
		ПроверитьУстановитьКурс('20141001', Валюта, ВалютаУчета, 39.3836);
		ПроверитьУстановитьКурс('20141101', Валюта, ВалютаУчета, 41.9627);
		ПроверитьУстановитьКурс('20141201', Валюта, ВалютаУчета, 49.3220);
		ПроверитьУстановитьКурс('20150101', Валюта, ВалютаУчета, 56.2376);
		ПроверитьУстановитьКурс('20150201', Валюта, ВалютаУчета, 68.9291);
		ПроверитьУстановитьКурс('20150301', Валюта, ВалютаУчета, 61.2718);
		ПроверитьУстановитьКурс('20150401', Валюта, ВалютаУчета, 57.6500);
		ПроверитьУстановитьКурс('20150501', Валюта, ВалютаУчета, 51.1388);
		ПроверитьУстановитьКурс('20150601', Валюта, ВалютаУчета, 52.9716);
		ПроверитьУстановитьКурс('20150701', Валюта, ВалютаУчета, 55.8413);
		ПроверитьУстановитьКурс('20150801', Валюта, ВалютаУчета, 60.3458);
		ПроверитьУстановитьКурс('20150901', Валюта, ВалютаУчета, 66.7152);
		ПроверитьУстановитьКурс('20151001', Валюта, ВалютаУчета, 65.7364);
		ПроверитьУстановитьКурс('20151101', Валюта, ВалютаУчета, 64.3742);
		ПроверитьУстановитьКурс('20151201', Валюта, ВалютаУчета, 66.7370);
		ПроверитьУстановитьКурс('20160101', Валюта, ВалютаУчета, 72.9299);
		ПроверитьУстановитьКурс('20160201', Валюта, ВалютаУчета, 75.1723);
		ПроверитьУстановитьКурс('20160301', Валюта, ВалютаУчета, 75.8994);
		ПроверитьУстановитьКурс('20160401', Валюта, ВалютаУчета, 67.8552);
		ПроверитьУстановитьКурс('20160501', Валюта, ВалютаУчета, 64.3334);
		ПроверитьУстановитьКурс('20160601', Валюта, ВалютаУчета, 65.9962);
		ПроверитьУстановитьКурс('20160701', Валюта, ВалютаУчета, 64.1755);
		ПроверитьУстановитьКурс('20160801', Валюта, ВалютаУчета, 67.0512);
		ПроверитьУстановитьКурс('20160901', Валюта, ВалютаУчета, 65.2535);
		ПроверитьУстановитьКурс('20161001', Валюта, ВалютаУчета, 63.3960);
		
	ИначеЕсли КодВалюты = "978" Тогда //Евро
		
		ПроверитьУстановитьКурс('19800101', Валюта, ВалютаУчета, 1);
		ПроверитьУстановитьКурс('20000101', Валюта, ВалютаУчета, 27.2000);
		ПроверитьУстановитьКурс('20010101', Валюта, ВалютаУчета, 26.1400);
		ПроверитьУстановитьКурс('20020101', Валюта, ВалютаУчета, 26.6172);
		ПроверитьУстановитьКурс('20030101', Валюта, ВалютаУчета, 33.2719);
		ПроверитьУстановитьКурс('20040101', Валюта, ВалютаУчета, 37.0979);
		ПроверитьУстановитьКурс('20050101', Валюта, ВалютаУчета, 37.8409);
		ПроверитьУстановитьКурс('20060101', Валюта, ВалютаУчета, 34.1850);
		ПроверитьУстановитьКурс('20070101', Валюта, ВалютаУчета, 34.6965);
		ПроверитьУстановитьКурс('20080101', Валюта, ВалютаУчета, 35.9332);
		ПроверитьУстановитьКурс('20090101', Валюта, ВалютаУчета, 41.4275);
		ПроверитьУстановитьКурс('20100101', Валюта, ВалютаУчета, 43.4605);
		ПроверитьУстановитьКурс('20110101', Валюта, ВалютаУчета, 40.4876);
		ПроверитьУстановитьКурс('20120101', Валюта, ВалютаУчета, 41.6714);
		ПроверитьУстановитьКурс('20130101', Валюта, ВалютаУчета, 40.2286);
		ПроверитьУстановитьКурс('20130201', Валюта, ВалютаУчета, 40.7138);
		ПроверитьУстановитьКурс('20130301', Валюта, ВалютаУчета, 40.1024);
		ПроверитьУстановитьКурс('20130401', Валюта, ВалютаУчета, 39.8023);
		ПроверитьУстановитьКурс('20130501', Валюта, ВалютаУчета, 40.6264);
		ПроверитьУстановитьКурс('20130601', Валюта, ВалютаУчета, 41.4486);
		ПроверитьУстановитьКурс('20130701', Валюта, ВалютаУчета, 42.7180);
		ПроверитьУстановитьКурс('20130801', Валюта, ВалютаУчета, 43.7786);
		ПроверитьУстановитьКурс('20130901', Валюта, ВалютаУчета, 44.0129);
		ПроверитьУстановитьКурс('20131001', Валюта, ВалютаУчета, 43.8143);
		ПроверитьУстановитьКурс('20131101', Валюта, ВалютаУчета, 43.9406);
		ПроверитьУстановитьКурс('20131201', Валюта, ВалютаУчета, 45.1870);
		ПроверитьУстановитьКурс('20140101', Валюта, ВалютаУчета, 45.0559);
		ПроверитьУстановитьКурс('20140201', Валюта, ВалютаУчета, 47.6408);
		ПроверитьУстановитьКурс('20140301', Валюта, ВалютаУчета, 49.5839);
		ПроверитьУстановитьКурс('20140401', Валюта, ВалютаУчета, 48.9680);
		ПроверитьУстановитьКурс('20140501', Валюта, ВалютаУчета, 49.3188);
		ПроверитьУстановитьКурс('20140601', Валюта, ВалютаУчета, 47.2677);
		ПроверитьУстановитьКурс('20140701', Валюта, ВалютаУчета, 46.1827);
		ПроверитьУстановитьКурс('20140801', Валюта, ВалютаУчета, 47.4699);
		ПроверитьУстановитьКурс('20140901', Валюта, ВалютаУчета, 48.6315);
		ПроверитьУстановитьКурс('20141001', Валюта, ВалютаУчета, 49.9817);
		ПроверитьУстановитьКурс('20141101', Валюта, ВалютаУчета, 52.7219);
		ПроверитьУстановитьКурс('20141201', Валюта, ВалютаУчета, 61.4108);
		ПроверитьУстановитьКурс('20150101', Валюта, ВалютаУчета, 68.3681);
		ПроверитьУстановитьКурс('20150201', Валюта, ВалютаУчета, 78.1105);
		ПроверитьУстановитьКурс('20150301', Валюта, ВалютаУчета, 68.6857);
		ПроверитьУстановитьКурс('20150401', Валюта, ВалютаУчета, 62.0487);
		ПроверитьУстановитьКурс('20150501', Валюта, ВалютаУчета, 57.1578);
		ПроверитьУстановитьКурс('20150601', Валюта, ВалютаУчета, 58.0145);
		ПроверитьУстановитьКурс('20150701', Валюта, ВалютаУчета, 62.3803);
		ПроверитьУстановитьКурс('20150801', Валюта, ВалютаУчета, 66.0002);
		ПроверитьУстановитьКурс('20150901', Валюта, ВалютаУчета, 74.8478);
		ПроверитьУстановитьКурс('20151001', Валюта, ВалютаУчета, 73.7760);
		ПроверитьУстановитьКурс('20151101', Валюта, ВалютаУчета, 70.7537);
		ПроверитьУстановитьКурс('20151201', Валюта, ВалютаУчета, 70.6478);
		ПроверитьУстановитьКурс('20160101', Валюта, ВалютаУчета, 79.6395);
		ПроверитьУстановитьКурс('20160201', Валюта, ВалютаУчета, 81.9077);
		ПроверитьУстановитьКурс('20160301', Валюта, ВалютаУчета, 83.1023);
		ПроверитьУстановитьКурс('20160401', Валюта, ВалютаУчета, 76.9207);
		ПроверитьУстановитьКурс('20160501', Валюта, ВалютаУчета, 73.3015);
		ПроверитьУстановитьКурс('20160601', Валюта, ВалютаУчета, 73.4406);
		ПроверитьУстановитьКурс('20160701', Валюта, ВалютаУчета, 71.2926);
		ПроверитьУстановитьКурс('20160801', Валюта, ВалютаУчета, 74.3799);
		ПроверитьУстановитьКурс('20160901', Валюта, ВалютаУчета, 72.6859);
		ПроверитьУстановитьКурс('20161001', Валюта, ВалютаУчета, 70.9338);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУстановитьКурс(ДатаКурса, Валюта, ВалютаУчета, Курс) 
	
	СтруктураКурса = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта, БазоваяВалюта", Валюта, ВалютаУчета));
	
	Если (СтруктураКурса.Курс <> Курс) Тогда
		
		РегистрКурсыВалют = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
		
		РегистрКурсыВалют.Период    = ДатаКурса;
		РегистрКурсыВалют.Валюта    = Валюта;
		РегистрКурсыВалют.БазоваяВалюта   = ВалютаУчета;
		РегистрКурсыВалют.Курс      = Курс;
		РегистрКурсыВалют.Кратность = 1;
		РегистрКурсыВалют.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ВыполнятьВсегдаПриПервомЗапуске

Процедура ВыполнятьВсегдаПриПервомЗапуске() 

	//Константы.ВалютаИндикаторовРабочегоСтола.Установить(Константы.ВалютаУчета.Получить()); //+++
	//Константы.ИспользоватьФинансовыеЦели.Установить(Истина);
	//ПроверитьРазделыУчета();
	//ПроверитьВидыСубконто();
	//ПроверитьВидыАналитики();
	//ПроверитьФинансовыеЦели();
	//ПроверитьГрафыБюджетов();
	//ПроверитьВариантыБюджетов();
	//ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций();
	////БюджетированиеСервер.ОбновитьВсеКлючиСтатейБюджета();

КонецПроцедуры

Процедура ПроверитьРазделыУчета()

	СчетОбъект = ПланыСчетов.РазделыУчета.Деньги.ПолучитьОбъект();
	СчетОбъект.Наименование = НСтр("ru = 'Деньги'");
	ЗаписатьСчет(СчетОбъект);

	СчетОбъект = ПланыСчетов.РазделыУчета.СвободныеДеньги.ПолучитьОбъект();
	СчетОбъект.Наименование = НСтр("ru = 'Свободные деньги'");
	СчетОбъект.Родитель     = ПланыСчетов.РазделыУчета.Деньги;
	ЗаписатьСчет(СчетОбъект);

	СчетОбъект = ПланыСчетов.РазделыУчета.Накопления.ПолучитьОбъект();
	СчетОбъект.Наименование = НСтр("ru = 'Накопления'");
	СчетОбъект.Родитель     = ПланыСчетов.РазделыУчета.Деньги;
	ЗаписатьСчет(СчетОбъект);

	СчетОбъект = ПланыСчетов.РазделыУчета.Имущество.ПолучитьОбъект();
	СчетОбъект.Наименование = НСтр("ru = 'Имущество'");
	СчетОбъект.Родитель     = ПланыСчетов.РазделыУчета.ПустаяСсылка();
	ЗаписатьСчет(СчетОбъект);

	СчетОбъект = ПланыСчетов.РазделыУчета.Долги.ПолучитьОбъект();
	СчетОбъект.Наименование = НСтр("ru = 'Долги'");
	СчетОбъект.Родитель     = ПланыСчетов.РазделыУчета.ПустаяСсылка();
	ЗаписатьСчет(СчетОбъект);

	СчетОбъект = ПланыСчетов.РазделыУчета.ОсновныеСуммыДолгов.ПолучитьОбъект();
	СчетОбъект.Наименование = НСтр("ru = 'Основные суммы долгов'");
	СчетОбъект.Родитель     = ПланыСчетов.РазделыУчета.Долги;
	ЗаписатьСчет(СчетОбъект);

	СчетОбъект = ПланыСчетов.РазделыУчета.ПроцентыПоДолгам.ПолучитьОбъект();
	СчетОбъект.Наименование = НСтр("ru = 'Проценты по долгам'");
	СчетОбъект.Родитель     = ПланыСчетов.РазделыУчета.Долги;
	ЗаписатьСчет(СчетОбъект);

	СчетОбъект = ПланыСчетов.РазделыУчета.Капитал.ПолучитьОбъект();
	СчетОбъект.Наименование = НСтр("ru = 'Капитал'");
	ЗаписатьСчет(СчетОбъект);

КонецПроцедуры

Процедура ПроверитьВидыСубконто()

	СчетОбъект = ПланыВидовХарактеристик.ВидыСубконто.КошелькиИСчета.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.КошелькиИСчета");
	СчетОбъект.Наименование = НСтр("ru = 'Кошельки и счета'");
	ЗаписатьСчет(СчетОбъект);

	СчетОбъект = ПланыВидовХарактеристик.ВидыСубконто.Имущество.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Имущество");
	СчетОбъект.Наименование = НСтр("ru = 'Имущество'");
	ЗаписатьСчет(СчетОбъект);

	СчетОбъект = ПланыВидовХарактеристик.ВидыСубконто.Долги.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Долги");
	СчетОбъект.Наименование = НСтр("ru = 'Долги'");
	ЗаписатьСчет(СчетОбъект);

	СчетОбъект = ПланыВидовХарактеристик.ВидыСубконто.Аналитика.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияСубконтоАналитика");
	СчетОбъект.Наименование = НСтр("ru = 'Аналитика статей'");
	ЗаписатьСчет(СчетОбъект);

	СчетОбъект = ПланыВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходов, СправочникСсылка.СтатьиДоходов");
	СчетОбъект.Наименование = НСтр("ru = 'Статьи доходов и расходов'");
	ЗаписатьСчет(СчетОбъект);

КонецПроцедуры

Процедура ПроверитьВидыАналитики()

	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.Важность.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ДополнительныеЗначенияВидовАналитик");
	СчетОбъект.Наименование = НСтр("ru = 'Важность'");
	ЗаписатьСчет(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.ГеографияСделки.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ДополнительныеЗначенияВидовАналитик");
	СчетОбъект.Наименование = НСтр("ru = 'География сделки'");
	ЗаписатьСчет(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.Имущество.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Имущество");
	СчетОбъект.Наименование = НСтр("ru = 'Имущество'");
	ЗаписатьСчет(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.КарточкаСкидок.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ДополнительныеЗначенияВидовАналитик");
	СчетОбъект.Наименование = НСтр("ru = 'Карточка скидок'");
	ЗаписатьСчет(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.Кредит.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Долги");
	СчетОбъект.Наименование = НСтр("ru = 'Кредит'");
	ЗаписатьСчет(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.МестоПолученияДохода.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Контакты");
	СчетОбъект.Наименование = НСтр("ru = 'Плательщик дохода'");
	ЗаписатьСчет(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.МестоТраты.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Контакты");
	СчетОбъект.Наименование = НСтр("ru = 'Магазин, продавец'");
	ЗаписатьСчет(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.НаправлениеИспользования.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ДополнительныеЗначенияВидовАналитик");
	СчетОбъект.Наименование = НСтр("ru = 'На что использовано?'");
	ЗаписатьСчет(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.Пометка.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ДополнительныеЗначенияВидовАналитик");
	СчетОбъект.Наименование = НСтр("ru = 'Пометка'");
	ЗаписатьСчет(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.Проект.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ДополнительныеЗначенияВидовАналитик");
	СчетОбъект.Наименование = НСтр("ru = 'Проект'");
	ЗаписатьСчет(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.ФинансоваяЦель.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ФинансовыеЦели");
	СчетОбъект.Наименование = НСтр("ru = 'Финансовая цель'");
	ЗаписатьСчет(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.ЧленыСемьи.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Контакты");
	СчетОбъект.Наименование = НСтр("ru = 'Члены семьи'");
	ЗаписатьСчет(СчетОбъект);
	
КонецПроцедуры

Процедура ПроверитьФинансовыеЦели()

	ОбъектВсеЦели = Справочники.ФинансовыеЦели.ОбщиеНакопления.ПолучитьОбъект();
	ОбъектВсеЦели.Активность   = Истина;
	ОбъектВсеЦели.Валюта       = Константы.ВалютаУчета.Получить();
	ОбъектВсеЦели.Наименование = НСтр("ru = 'Накопление без конкретной цели'");
	ОбъектВсеЦели.РеквизитДопУпорядочивания = 1;
	ЗаписатьСправочникОбъект(ОбъектВсеЦели);
	
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФинансовыеЦели.Ссылка,
	|	ФинансовыеЦели.РеквизитДопУпорядочивания КАК Приоритет,
	|	ФинансовыеЦели.Активность,
	|	ФинансовыеЦели.ПометкаУдаления
	|ИЗ
	|	Справочник.ФинансовыеЦели КАК ФинансовыеЦели
	|ГДЕ
	|	ФинансовыеЦели.Предопределенный = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	ФинансовыеЦели.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Счетчик = 2;
	Пока Выборка.Следующий() Цикл
	
		ОбъектЦель = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектЦель.РеквизитДопУпорядочивания = Счетчик;
		ЗаписатьСправочникОбъект(ОбъектЦель);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьГрафыБюджетов()

	// Справочник "ГрафыБюджета" используется для упорядочивания статей бюджета.
	//	Предопределенные элементы должны по умолчанию иметь однозначные коды, т.к. именно по ним 
	//	сворачиваются показатели бюджета.
	
	
	// Доходы:
	ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление;
	
	// "Прочие доходы" имеет код "10." - корень для всех планируемых поступлений
	//	Если для бюджетной статьи дохода не найдется родителя с более длинным кодом, 
	//	такая статья автоматически попадет в "Прочие доходы"
	Графа = Справочники.ГрафыБюджета.ПрочиеДоходы.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Другие доходы'");
	Графа.Код                      = "10.99.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 9999;
	Графа.ТипСтатьи                = "ВсеДоходы";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСправочникОбъект(Графа);
	
	
	Графа = Справочники.ГрафыБюджета.Доходы.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Доходы по статьям'");
	Графа.Код                      = "10.1.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1100;
	Графа.ТипСтатьи                = "СтатьяДоходов";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСправочникОбъект(Графа);
	
	
	// Только для свободных денег: возврат из накоплений в свободные деньги
	Графа = Справочники.ГрафыБюджета.СвободныеДеньгиВозвратИзНакопления.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Перевод из накоплений'");
	Графа.Код                      = "10.2.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Ложь;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1200;
	Графа.ТипСтатьи                = "Финцель";
	Графа.ОтношениеКНакоплениям    = -1;
	ЗаписатьСправочникОбъект(Графа);
	
	Графа = Справочники.ГрафыБюджета.ИспользованиеКредитнойКарты.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Использование кредитных карт'");
	Графа.Код                      = "10.3.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1300;
	Графа.ТипСтатьи                = "КредитнаяКарта";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСправочникОбъект(Графа);
	
	
	Графа = Справочники.ГрафыБюджета.ПолучениеКредита.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Получение кредитов, займов'");
	Графа.Код                      = "10.4.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1400;
	Графа.ТипСтатьи                = "НашДолг";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСправочникОбъект(Графа);
	
	
	Графа = Справочники.ГрафыБюджета.ВозвратВыданногоЗайма.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Возврат от должников'");
	Графа.Код                      = "10.5.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1500;
	Графа.ТипСтатьи                = "ДолгНам";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСправочникОбъект(Графа);
	
	
	Графа = Справочники.ГрафыБюджета.ВыручкаЗаИмущество.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Продажа имущества'");
	Графа.Код                      = "10.6.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1600;
	Графа.ТипСтатьи                = "Имущество";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСправочникОбъект(Графа);
	
	
	
	// Только для накоплений: поревод в накопление на фин.цель из св. денег или др. накоплений
	Графа = Справочники.ГрафыБюджета.ФинЦельПереводВНакопление.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Поступления из свободных денег или др. фин.целей'");
	Графа.Код                      = "10.7.";
	Графа.ДляСвободныхДенег        = Ложь;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1100;
	Графа.ТипСтатьи                = "Финцель";
	Графа.ОтношениеКНакоплениям    = 1;
	ЗаписатьСправочникОбъект(Графа);
	
	
	
	// Рахсоды
	ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание;
	
	// "Прочие расходы" имеет код "20." - корень для всех планируемых списаний.
	//	Если для бюджетной статьи расходв не найдется родителя с более длинным кодом, 
	//	такая статья автоматически попадет в "Прочие расходы"
	Графа = Справочники.ГрафыБюджета.ПрочиеРасходы.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Другие расходы'");
	Графа.Код                      = "20.99.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 9999;
	Графа.ТипСтатьи                = "ВсеРасходы";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСправочникОбъект(Графа);
	
	
	Графа = Справочники.ГрафыБюджета.Расходы.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Расходы по статьям'");
	Графа.Код                      = "20.1.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1100;
	Графа.ТипСтатьи                = "СтатьяРасходов";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСправочникОбъект(Графа);
	
	// Только для свободных денег: перевод в накопления
	Графа = Справочники.ГрафыБюджета.СвободныеДеньгиПереводВНакопление.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Перевод в накопления'");
	Графа.Код                      = "20.2.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Ложь;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1200;
	Графа.ТипСтатьи                = "Финцель";
	Графа.ОтношениеКНакоплениям    = -1;
	ЗаписатьСправочникОбъект(Графа);
	
	Графа = Справочники.ГрафыБюджета.ПереводНаКредитнуюКарту.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Пополнение кредитных карт'");
	Графа.Код                      = "20.3.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1300;
	Графа.ТипСтатьи                = "КредитнаяКарта";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСправочникОбъект(Графа);
	
	
	Графа = Справочники.ГрафыБюджета.ПогашениеКредита.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Погашение кредитов, займов'");
	Графа.Код                      = "20.4.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1400;
	Графа.ТипСтатьи                = "НашДолг";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСправочникОбъект(Графа);
	
	Графа = Справочники.ГрафыБюджета.ВыдачаВзаймы.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Выдача в долг'");
	Графа.Код                      = "20.5.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1500;
	Графа.ТипСтатьи                = "ДолгНам";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСправочникОбъект(Графа);
	
	
	Графа = Справочники.ГрафыБюджета.ПокупкаИмущества.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Покупка имущества'");
	Графа.Код                      = "20.6.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1600;
	Графа.ТипСтатьи                = "Имущество";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСправочникОбъект(Графа);
	
	
	// Только для накоплений: перевод из накоплений в свободные деньги или на другую фин.цель
	Графа = Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Перевод в св. деньги или на другую фин.цель'");
	Графа.Код                      = "20.7.";
	Графа.ДляСвободныхДенег        = Ложь;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1150;
	Графа.ТипСтатьи                = "Финцель";
	Графа.ОтношениеКНакоплениям    = 1;
	ЗаписатьСправочникОбъект(Графа);
	
	// удаляем предопределенные данные, ставшие лишними
	
	СсылкаПредопределенного = ПолучитьПредопределенный("Справочник.ГрафыБюджета", "ФинЦельНакопление");
	Если СсылкаПредопределенного <> Неопределено Тогда
		Графа = СсылкаПредопределенного.ПолучитьОбъект();
		Графа.ИмяПредопределенныхДанных = "";
		Графа.ПометкаУдаления = Истина;
		Графа.Наименование = НСтр("ru='Поступление накоплений (не используется)'");
		Графа.Записать();
	КонецЕсли;
	
	СсылкаПредопределенного = ПолучитьПредопределенный("Справочник.ГрафыБюджета", "СвободныеДеньгиНакопление");
	Если СсылкаПредопределенного <> Неопределено Тогда
		Графа = СсылкаПредопределенного.ПолучитьОбъект();
		Графа.ИмяПредопределенныхДанных = "";
		Графа.ПометкаУдаления = Истина;
		Графа.Наименование = НСтр("ru='Поступление накоплений (не используется)'");
		Графа.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВариантыБюджетов()

	ПределПланирования = Константы.ПределПланирования.Получить();
	ПределНеУстановлен = НЕ ЗначениеЗаполнено(ПределПланирования);
	Если ПределНеУстановлен Тогда
		ПределПланирования = НачалоДня(КонецГода(ДобавитьМесяц(ТекущаяДата(), 24)));
	КонецЕсли;
	
	// заполним основной вариант бюджета значенниями по умолчанию
	ВариантОбъект = Справочники.ВариантыБюджетов.БазовыйВариант.ПолучитьОбъект();
	ВариантОбъект.Валюта = Константы.ВалютаУчета.Получить();
	ВариантОбъект.ДетальностьПланирования = Перечисления.ПериодичностьПланирования.Месяц;
	ВариантОбъект.Наименование = НСтр("ru = 'Основной вариант'");
	ТекущаяДата = ТекущаяДата();
	ВариантОбъект.НачалоПланирования    = НачалоГода(?(Месяц(ТекущаяДата) < 2, ДобавитьМесяц(ТекущаяДата, -12), ТекущаяДата));
	ВариантОбъект.НомерМесяца = 1;
	ВариантОбъект.ЧислоМесяца = 1;
	ЗаписатьСчет(ВариантОбъект);
	ОсновнойВариант = Константы.ОсновнойВариантБюджета.Получить();
	Если НЕ ЗначениеЗаполнено(ОсновнойВариант) Тогда
		Константы.ОсновнойВариантБюджета.Установить(Справочники.ВариантыБюджетов.БазовыйВариант);
		//БюджетированиеСервер.ЗаполнитьВариантБюджетаСтатьямиПоУмолчанию(Справочники.ВариантыБюджетов.БазовыйВариант);
	КонецЕсли; 
	
	// Проверяем и устанавливаем предел планирования
	Если ПределНеУстановлен Тогда
		Константы.ПределПланирования.Установить(ПределПланирования);
	Иначе
		// Пересчитаем показатели плановых операций и бюджетов
		ПлановыеОперации.ПересчитатьПланыПриИзмененииПределаПланирования();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций()
	
	//Константы.ИсточникДанныхАдресногоКлассификатора.Установить("Сервис1С");
	//
	//ПараметрыПроверкиАдреса = Новый Структура;
	//ПараметрыПроверкиАдреса.Вставить("АдресТолькоРоссийский", Истина);
	//ПараметрыПроверкиАдреса.Вставить("ПроверятьКорректность", Ложь);
	//ПараметрыПроверкиАдреса.Вставить("ЗапрещатьВводНекорректного", Ложь);
	//ПараметрыПроверкиАдреса.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
	//ПараметрыПроверкиАдреса.Вставить("ВключатьСтрануВПредставление", Ложь);
	//
	//ПараметрыАдреса = Новый Структура;
	//ПараметрыАдреса.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	//ПараметрыАдреса.Вставить("МожноИзменятьСпособРедактирования",    Истина);
	//ПараметрыАдреса.Вставить("РедактированиеТолькоВДиалоге",         Ложь);
	//ПараметрыАдреса.Вставить("ОбязательноеЗаполнение",               Ложь);
	//ПараметрыАдреса.Вставить("РазрешитьВводНесколькихЗначений",      Ложь);
	//ПараметрыАдреса.Вставить("ЗапретитьРедактированиеПользователем", Ложь);
	//ПараметрыАдреса.Вставить("Используется",                         Истина);
	//ПараметрыАдреса.Вставить("НастройкиПроверки",                    ПараметрыПроверкиАдреса);
	//ПараметрыАдреса.Вставить("ХранитьИсториюИзменений",              Ложь);
	//
	//ПараметрыАдреса.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	//ПараметрыАдреса.Вставить("Порядок", 1);
	//ПараметрыАдреса.Вставить("Подсказка", НСтр("ru='Юридический адрес организации'"));
	//УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыАдреса);
	//
	//ПараметрыАдреса.Вид      = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	//ПараметрыАдреса.Порядок  = 2;
	//ПараметрыАдреса.Вставить("Подсказка", НСтр("ru='Фактический адрес организации'"));
	//УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыАдреса);
	//
	//ПараметрыАдреса.Вид      = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	//ПараметрыАдреса.Порядок  = 6;
	//ПараметрыАдреса.Вставить("Подсказка", НСтр("ru='Почтовый адрес организации'"));
	//УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыАдреса);
	//
	//ПараметрыАдреса.НастройкиПроверки = Неопределено;
	//
	//ПараметрыАдреса.Вид      = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
	//ПараметрыАдреса.Тип      = Перечисления.ТипыКонтактнойИнформации.Телефон;
	//ПараметрыАдреса.Порядок  = 3;
	//ПараметрыАдреса.Вставить("Подсказка", НСтр("ru='Телефон организации'"));
	//УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыАдреса);
	//
	//ПараметрыАдреса.Вид      = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
	//ПараметрыАдреса.Тип      = Перечисления.ТипыКонтактнойИнформации.Факс;
	//ПараметрыАдреса.Порядок  = 4;
	//ПараметрыАдреса.Вставить("Подсказка", НСтр("ru='Факс организации'"));
	//УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыАдреса);
	//
	//ПараметрыАдреса.Вид      = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
	//ПараметрыАдреса.Тип      = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	//ПараметрыАдреса.Порядок  = 5;
	//ПараметрыАдреса.Вставить("Подсказка", НСтр("ru='Адрес электронной почты организации'"));
	//УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыАдреса);
	//
	//ПараметрыАдреса.Вид      = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации;
	//ПараметрыАдреса.Тип      = Перечисления.ТипыКонтактнойИнформации.Другое;
	//ПараметрыАдреса.Порядок  = 5;
	//ПараметрыАдреса.Вставить("Подсказка", НСтр("ru='Любая другая контактная информация'"));
	//ПараметрыАдреса.Вставить("ВидПоляДругое",     "ОднострочноеШирокое");
	//УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыАдреса);
	
КонецПроцедуры

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//  Сообщать - булево - признак необходимости выводить сообщения
//  НеРегистрироватьВПланахОбмена - булево - необходимость исключить регистрацию изменений в планах обмена
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект, Сообщать = Ложь, НеРегистрироватьВПланахОбмена = Ложь) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru = 'Создана группа справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru = 'Создан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		КонецЕсли; 
	Иначе
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru = 'Обработана группа справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru = 'Обработан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		КонецЕсли; 
	КонецЕсли;

	Если СправочникОбъект.Метаданные().ДлинаКода > 0 Тогда
		ПолныйКод = СправочникОбъект.ПолныйКод();
	Иначе
		ПолныйКод = НСтр("ru = '<без кода>'");
	КонецЕсли; 
	СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСообщения, СправочникОбъект.Метаданные().Синоним, ПолныйКод, СправочникОбъект.Наименование);

	Если НеРегистрироватьВПланахОбмена Тогда
		СправочникОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		СправочникОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Попытка
		
		СправочникОбъект.ДополнительныеСвойства.Вставить("НеПроверятьСостояние", Истина);
		СправочникОбъект.Записать();
		Если Сообщать = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСообщения, СправочникОбъект);
		КонецЕсли;

	Исключение

		ТекстСообщения = НСтр("ru='Не удалось завершить действие: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрСообщения);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);

	КонецПопытки;

КонецПроцедуры

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСчет(СчетОбъект, Сообщать = Ложь, НеРегистрироватьВПланахОбмена = Ложь) Экспорт

	Если НЕ СчетОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	СтрСообщения = НСтр("ru = 'Обработан раздел учета ""%1""'") ;

	СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСообщения, СчетОбъект.Наименование);

	Если НеРегистрироватьВПланахОбмена Тогда
		СчетОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		СчетОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Попытка
		
		СчетОбъект.ДополнительныеСвойства.Вставить("НеПроверятьСостояние", Истина);
		СчетОбъект.Записать();
		Если Сообщать = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСообщения, Неопределено);
		КонецЕсли;

	Исключение

		ТекстСообщения = НСтр("ru='Не удалось завершить действие: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрСообщения);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);

	КонецПопытки;

КонецПроцедуры

Функция СправочникПустой(ИмяСправочника)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаСтправочника.Ссылка) КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК ТаблицаСтправочника
	|ГДЕ
	|	ТаблицаСтправочника.Предопределенный = Ложь
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка = 0;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции

#КонецОбласти 


#Область ВыполнятьПриКаждомОбновлении

// Проверяет/устанавливает у пользователя ИБ минимально необходимые роли
//
Процедура ПроверитьИсправитьРолиПользователей(Параметр = Неопределено) Экспорт 
	
	Если Пользователи.ЭтоПолноправныйПользователь(Неопределено, Истина) Тогда
		
		Для каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
			
			Записывать = Ложь;
			Если Не ПользовательИБ.Роли.Содержит(Метаданные.Роли.АдминистраторСистемы) Тогда
				ПользовательИБ.Роли.Добавить(Метаданные.Роли.АдминистраторСистемы);
				Записывать = Истина;
			КонецЕсли;
			
			Если Не ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
				ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
				Записывать = Истина;
			КонецЕсли;
			
			Если Записывать Тогда
				ПользовательИБ.Записать();
			КонецЕсли;
			
		КонецЦикла;
		 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьПредопределенный(ПолноеИмяиМетаданных, ИмяПредопределенныхДанных)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ИмяПредопределенныхДанных);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	" + ПолноеИмяиМетаданных + " КАК Спр
	|ГДЕ
	|	Спр.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных";
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки; 

КонецФункции


#Область ОбновлениеНа_2_0_28_3

Процедура Обновление_20283() Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти


#Область ОбновлениеНа_2_0_28_4

Процедура Обновление_20284() Экспорт
	
	Возврат;

КонецПроцедуры
#КонецОбласти


#Область ОбновлениеНа_2_0_29_3

Процедура Обновление_20293() Экспорт

	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьСтатьиПоказателей() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиБюджета.ВариантБюджета КАК ВариантБюджета,
	|	ПоказателиБюджета.РазделБюджета КАК РазделБюджета,
	|	ПоказателиБюджета.НачалоПериода КАК НачалоПериода
	|ПОМЕСТИТЬ ПериодыБюджета
	|ИЗ
	|	РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВариантБюджета,
	|	РазделБюджета,
	|	НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставСтатейБюджета.ВариантБюджета КАК ВариантБюджета,
	|	СоставСтатейБюджета.РазделБюджета КАК РазделБюджета,
	|	СоставСтатейБюджета.ГрафаБюджета КАК ГрафаБюджета,
	|	СоставСтатейБюджета.СтатьяБюджета КАК СтатьяБюджета,
	|	СоставСтатейБюджета.Видимость КАК Видимость,
	|	СоставСтатейБюджета.Порядок КАК Порядок,
	|	ПериодыБюджета.НачалоПериода КАК НачалоПериода,
	|	СоставСтатейБюджета.ГрафаБюджета.ТипПоказателя КАК ТипПоказателя
	|ПОМЕСТИТЬ ВидимыеСтатьи
	|ИЗ
	|	РегистрСведений.СоставСтатейБюджета КАК СоставСтатейБюджета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодыБюджета КАК ПериодыБюджета
	|		ПО СоставСтатейБюджета.ВариантБюджета = ПериодыБюджета.ВариантБюджета
	|			И СоставСтатейБюджета.РазделБюджета = ПериодыБюджета.РазделБюджета
	|ГДЕ
	|	СоставСтатейБюджета.Видимость
	|	И НЕ ПериодыБюджета.НачалоПериода ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидимыеСтатьи.ВариантБюджета КАК ВариантБюджета,
	|	ВидимыеСтатьи.НачалоПериода КАК НачалоПериода,
	|	ВидимыеСтатьи.РазделБюджета КАК РазделБюджета,
	|	ВидимыеСтатьи.ГрафаБюджета КАК ГрафаБюджета,
	|	ВидимыеСтатьи.ТипПоказателя,
	|	ВидимыеСтатьи.СтатьяБюджета КАК СтатьяБюджета,
	|	ВидимыеСтатьи.Видимость КАК Видимость,
	|	ВидимыеСтатьи.Порядок КАК Порядок
	|ИЗ
	|	ВидимыеСтатьи КАК ВидимыеСтатьи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|		ПО ВидимыеСтатьи.ВариантБюджета = ПоказателиБюджета.ВариантБюджета
	|			И ВидимыеСтатьи.РазделБюджета = ПоказателиБюджета.РазделБюджета
	|			И ВидимыеСтатьи.ГрафаБюджета = ПоказателиБюджета.ГрафаБюджета
	|			И ВидимыеСтатьи.СтатьяБюджета = ПоказателиБюджета.СтатьяБюджета
	|			И ВидимыеСтатьи.НачалоПериода = ПоказателиБюджета.НачалоПериода
	|ГДЕ
	|	ПоказателиБюджета.Порядок ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВариантБюджета,
	|	НачалоПериода,
	|	РазделБюджета,
	|	ГрафаБюджета,
	|	СтатьяБюджета
	|ИТОГИ ПО
	|	ВариантБюджета,
	|	НачалоПериода,
	|	РазделБюджета";
	
	ВыборкаВариантов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВариантБюджета");
	Пока ВыборкаВариантов.Следующий() Цикл
		
		ВыборкаПериодов = ВыборкаВариантов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НачалоПериода");
		Пока ВыборкаПериодов.Следующий() Цикл
			
			ВыборкаРазделов = ВыборкаПериодов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "РазделБюджета");
			Пока ВыборкаРазделов.Следующий() Цикл
				
				Набор = РегистрыСведений.ПоказателиБюджета.СоздатьНаборЗаписей();
				Набор.Отбор.ВариантБюджета.Установить(ВыборкаРазделов.ВариантБюджета);
				Набор.Отбор.НачалоПериода.Установить(ВыборкаРазделов.НачалоПериода);
				Набор.Отбор.РазделБюджета.Установить(ВыборкаРазделов.РазделБюджета);
				
				Набор.ОбменДанными.Загрузка = Истина;
				Набор.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Набор.ОбменДанными.Получатели.Очистить();
				
				Выборка = ВыборкаРазделов.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Запись = Набор.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, Выборка);
					
				КонецЦикла;
				
				Набор.Записать(Ложь);
				
			КонецЦикла;
			 
		КонецЦикла;
		 
	КонецЦикла;
	 
	
КонецПроцедуры

Процедура ОбновитьШаблоныПеремещений() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыРасписаний.ВладелецРасписания КАК ВладелецРасписания
	|ИЗ
	|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|ГДЕ
	|	НЕ ДатыРасписаний.ВладелецРасписания.ПометкаУдаления
	|	И (ДатыРасписаний.ВладелецРасписания ССЫЛКА Документ.Перемещение
	|			ИЛИ ДатыРасписаний.ВладелецРасписания ССЫЛКА Документ.ОбменВалюты)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВладелецРасписания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Выборка.ВладелецРасписания.ПолучитьОбъект().Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЛишниеЭлементы() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафыБюджета.Ссылка,
	|	ГрафыБюджета.Наименование
	|ИЗ
	|	Справочник.ГрафыБюджета КАК ГрафыБюджета
	|ГДЕ
	|	ГрафыБюджета.ПометкаУдаления
	|	И НЕ ГрафыБюджета.Предопределенный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыАналитик.Ссылка,
	|	ВидыАналитик.Наименование
	|ИЗ
	|	ПланВидовХарактеристик.ВидыАналитик КАК ВидыАналитик
	|ГДЕ
	|	ВидыАналитик.ПометкаУдаления
	|	И НЕ ВидыАналитик.Предопределенный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыСубконто.Ссылка,
	|	ВидыСубконто.Наименование
	|ИЗ
	|	ПланВидовХарактеристик.ВидыСубконто КАК ВидыСубконто
	|ГДЕ
	|	ВидыСубконто.ПометкаУдаления
	|	И НЕ ВидыСубконто.Предопределенный";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[0].Выбрать();
	МассивКУдалению = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Наименование) И Найти(нрег(Выборка.Наименование), "не используется") > 0 Тогда
			МассивКУдалению.Добавить(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьОбъекты(МассивКУдалению, Истина);
	
КонецПроцедуры

#КонецОбласти


#Область ОбновлениеНа_2_0_29_7

Процедура Обновление_20297() Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы ""Деньги""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начало обновления на 2.0.29.7'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	//БюджетированиеСервер.ОбновитьВсеКлючиСтатейБюджета();
	
	ОбновитьПоказателиБюджета();
	
	Узлы = УзлыМобильныхУстройств();
	ОбновитьВариантыБюджетов(Узлы);
	
	ПроверитьДатыНеактивныхОпераций();
	
	ОбновитьОборотыШаблонов();
	
	ЗарегистрироватьПоказателиПлановыхОпераций();
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы ""Деньги""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Завершение обновления на 2.0.29.7'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

Процедура ОбновитьПоказателиБюджета() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиБюджета.ВариантБюджета КАК ВариантБюджета,
	|	ПоказателиБюджета.НачалоПериода КАК НачалоПериода,
	|	ПоказателиБюджета.РазделБюджета,
	|	ПоказателиБюджета.ТипПоказателя,
	|	НЕОПРЕДЕЛЕНО КАК ГрафаБюджета,
	|	ПоказателиБюджета.СтатьяБюджета,
	|	СУММА(ПоказателиБюджета.Сумма) КАК Сумма,
	|	МАКСИМУМ(ПоказателиБюджета.Порядок) КАК Порядок,
	|	МАКСИМУМ(ПоказателиБюджета.Комментарий) КАК Комментарий
	|ИЗ
	|	РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоказателиБюджета.ВариантБюджета,
	|	ПоказателиБюджета.НачалоПериода,
	|	ПоказателиБюджета.РазделБюджета,
	|	ПоказателиБюджета.ТипПоказателя,
	|	ПоказателиБюджета.СтатьяБюджета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВариантБюджета,
	|	НачалоПериода
	|ИТОГИ ПО
	|	ВариантБюджета";
	
	ВыборкаВариантов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВариантБюджета");
	Пока ВыборкаВариантов.Следующий() Цикл
		
		Набор = РегистрыСведений.ПоказателиБюджета.СоздатьНаборЗаписей();
		Набор.Отбор.ВариантБюджета.Установить(ВыборкаВариантов.ВариантБюджета);
		
		Выборка = ВыборкаВариантов.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Графа = Неопределено; //БюджетированиеСервер.ГрафаБюжетаДляСтатьи(Выборка.СтатьяБюджета, Выборка.ТипПоказателя, Выборка.РазделБюджета);
			Если Не ЗначениеЗаполнено(Графа) Тогда
				Продолжить;
			КонецЕсли;
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.ГрафаБюджета = Графа;
		
		КонецЦикла;
		
		Набор.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДатыНеактивныхОпераций() 
	
	ДатаПрекращения = КонецМесяца(ТекущаяДата());
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаПрекращения);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расписания.ВладелецРасписания КАК ВладелецРасписания,
	|	Расписания.ДатаОкончанияРасписания КАК ДатаОкончанияРасписания,
	|	Расписания.НеИспользовать КАК НеИспользовать,
	|	ДатыРасписаний.ВладелецРасписания КАК ВладелецРасписания1
	|ИЗ
	|	РегистрСведений.Расписания КАК Расписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|		ПО (ДатыРасписаний.ВладелецРасписания = Расписания.ВладелецРасписания)
	|			И (ДатыРасписаний.ПлановаяДата > ВЫБОР
	|				КОГДА Расписания.ДатаОкончанияРасписания = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА &ДатаОкончания
	|				ИНАЧЕ Расписания.ДатаОкончанияРасписания
	|			КОНЕЦ)
	|ГДЕ
	|	Расписания.НеИспользовать
	|	И (НЕ ДатыРасписаний.ПлановаяДата ЕСТЬ NULL
	|			ИЛИ Расписания.ДатаОкончанияРасписания = ДАТАВРЕМЯ(1, 1, 1))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВладелецРасписания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если не ЗначениеЗаполнено(Выборка.ДатаОкончанияРасписания) Тогда
			
			Запись = РегистрыСведений.Расписания.СоздатьМенеджерЗаписи();
			Запись.ВладелецРасписания = Выборка.ВладелецРасписания;
			Запись.Прочитать();
			Если Запись.Выбран() Тогда
				Запись.ДатаОкончанияРасписания = ДатаПрекращения;
				Запись.Записать(Истина);
			КонецЕсли;
			КонецШаблона = Запись.ДатаОкончанияРасписания;
		Иначе
			КонецШаблона = Выборка.ДатаОкончанияРасписания;
		КонецЕсли;
		
		Набор = РегистрыСведений.ДатыРасписаний.СоздатьНаборЗаписей();
		Набор.Отбор.ВладелецРасписания.Установить(Выборка.ВладелецРасписания);
		Набор.Прочитать();
		МассивЛишнихДат = Новый Массив;
		Для каждого Запись Из Набор Цикл
			Если Запись.ПлановаяДата > КонецШаблона Тогда
				МассивЛишнихДат.Добавить(Запись);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Запись Из МассивЛишнихДат Цикл
			Набор.Удалить(Запись);
		КонецЦикла;
		
		Набор.Записать(Истина);
		
		Выборка.ВладелецРасписания.ПолучитьОбъект().Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьПоказателиПлановыхОпераций() 
	
	Узлы = УзлыМобильныхУстройств();
	Если Узлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПланыОбмена.ЗарегистрироватьИзменения(Узлы, Метаданные.РегистрыНакопления.ОборотыПлановыхОпераций);
	
КонецПроцедуры

Процедура ОбновитьВариантыБюджетов(Узлы) 
	
	Выборка = Справочники.ВариантыБюджетов.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления <> (Не Выборка.Активность) Или Не ЗначениеЗаполнено(Выборка.ДетальностьПланирования) Тогда
			
			ОбъектВыборки = Выборка.ПолучитьОбъект();
			ОбъектВыборки.Активность = Не ОбъектВыборки.ПометкаУдаления;
			Если Не ЗначениеЗаполнено(ОбъектВыборки.ДетальностьПланирования) Тогда
				ОбъектВыборки.ДетальностьПланирования = Перечисления.ПериодичностьПланирования.Месяц;
			КонецЕсли;
			
			ОбъектВыборки.Записать();
			
		КонецЕсли;
		
		//БюджетированиеСервер.ОбновитьПорядокИзСоставаСтатей(Выборка.Ссылка);
		//БюджетированиеСервер.ОбновитьПорядокСтатейИзПоказателейБюджета(Выборка.Ссылка);
		
		Если Узлы.Количество() > 0 Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(Узлы, Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Узлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПланыОбмена.ЗарегистрироватьИзменения(Узлы, Константы.ОсновнойВариантБюджета);
	
КонецПроцедуры

Процедура ОбновитьОборотыШаблонов() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОборотыПлановыхОпераций.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ОборотыПлановыхОпераций КАК ОборотыПлановыхОпераций";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры
 
#КонецОбласти


#Область ОбновлениеНа_2_0_29_9

Процедура Обновление_20299() Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы ""Деньги""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начало обновления на 2.0.29.9'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	ПроверитьГрафыБюджетов();
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы ""Деньги""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Завершение обновления на 2.0.29.9'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры


#КонецОбласти


#Область ОбновлениеНа_2_0_31_4

Процедура Обновление_20314() Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы ""Деньги""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начало обновления на 2.0.31.4'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	ЗарегистрироватьПоказателиПлановыхОпераций();
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы ""Деньги""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Завершение обновления на 2.0.31.4'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры


#КонецОбласти


#Область ОбновлениеНа_2_0_33_3

Процедура Обновление_20333() Экспорт
	
	//
	
КонецПроцедуры


#КонецОбласти

#Область ОбновлениеНа_2_0_34_1

Процедура Обновление_20341() Экспорт
	
	//
	
КонецПроцедуры


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

#Область ВспомогательныеПроцедурыИФункции

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

Процедура ПроверитьГраницыИтогов()

	//++
	//Если УправлениеИтогамиИАгрегатамиСлужебный.НадоСдвинутьГраницуИтогов() Тогда
	//	УправлениеИтогамиИАгрегатамиСлужебный.РассчитатьИтоги();
	//КонецЕсли;

КонецПроцедуры

Функция УзлыМобильныхУстройств() 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РАЗЛИЧНЫЕ МобильноеПриложение.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|ГДЕ
	|	НЕ МобильноеПриложение.ЭтотУзел";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	Иначе
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Узел");
	КонецЕсли;

КонецФункции


#КонецОбласти 

