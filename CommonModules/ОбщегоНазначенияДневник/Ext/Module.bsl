////////////////////////////////////////////////////////////////////////////////
// ОбщегоНазначенияДеньги: Серверные процедуры и функции общего назначения конфигурации Деньги
// - заполнение и изменение значений в реквизитах объектов;
// - дополнение механизмов БСП
// - работа со свойтвами объектов учета
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// БСП. Обслуживание механизмов БСП
Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	Если ИмяПараметра = "ВалютаУчета" ИЛИ ИмяПараметра = "ВалютаОтчетов" Тогда
		
		ПараметрыСеанса["ВалютаУчета"] = Константы.ВалютаУчета.Получить();
		
		ПараметрыСеанса["ВалютаОтчетов"] = Константы.ВалютаИндикаторовРабочегоСтола.Получить();
		Если НЕ ЗначениеЗаполнено(ПараметрыСеанса["ВалютаОтчетов"]) Тогда
			ПараметрыСеанса["ВалютаОтчетов"] = ПараметрыСеанса.ВалютаУчета;
		КонецЕсли; 
		
		УстановленныеПараметры.Добавить("ВалютаУчета");
		УстановленныеПараметры.Добавить("ВалютаОтчетов");
		
	ИначеЕсли ИмяПараметра = "ОбщиеЗначения" Тогда
		ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Новый Структура);
		УстановленныеПараметры.Добавить("ОбщиеЗначения");
		
	ИначеЕсли ИмяПараметра = "ПараметрыПереходаПоНавигационнойСсылке" Тогда
		ПараметрыСеанса.ПараметрыПереходаПоНавигационнойСсылке = "";
		УстановленныеПараметры.Добавить("ПараметрыПереходаПоНавигационнойСсылке");
		
	ИначеЕсли ИмяПараметра = "АктивныеИндикаторы" Тогда
		ПараметрыСеанса.АктивныеИндикаторы = Новый ФиксированнаяСтруктура("ФоновоеЗаданиеЧтения", Новый УникальныйИдентификатор("eee000fc" + Сред(Строка(Новый УникальныйИдентификатор), 9)));//Неопределено);
		УстановленныеПараметры.Добавить("АктивныеИндикаторы");
		
	ИначеЕсли ИмяПараметра = "ИдентификаторЗаданияИндикаторов" Тогда
		ПараметрыСеанса.ИдентификаторЗаданияИндикаторов = "";
		УстановленныеПараметры.Добавить("ИдентификаторЗаданияИндикаторов");
		
	ИначеЕсли ИмяПараметра = "СостояниеСинхронизацииСМобильнымПриложением" Тогда
		ПараметрыСеанса.СостояниеСинхронизацииСМобильнымПриложением = Новый ФиксированнаяСтруктура(ОбменМобильноеПриложениеВызовСервера.СтруктураСостоянияСинхронизации());
		УстановленныеПараметры.Добавить("СостояниеСинхронизацииСМобильнымПриложением");
		
	ИначеЕсли ИмяПараметра = "ДатаПоследнейОперации" Тогда
		ПараметрыСеанса.ДатаПоследнейОперации = ТекущаяДата();
		УстановленныеПараметры.Добавить("ДатаПоследнейОперации");
		
	ИначеЕсли ИмяПараметра = "АвторизацияREST" Тогда
		RESTВызовСервера.ВосстановитьПараметрыREST();
		УстановленныеПараметры.Добавить("АвторизацияREST");
		
	ИначеЕсли ИмяПараметра = "ПредставленияФайлов" Тогда
		ПрикрепленныеФайлыСервер.ОбновитьСтруктуруПредставленияФайлов();
		УстановленныеПараметры.Добавить("ПредставленияФайлов");
		
	КонецЕсли;

КонецПроцедуры

// БСП. Одноименный обработчик из общего модуля ОбщегоНазначенияПереопределяемый
//  Позволяет настроить общие параметры подсистемы.
// 	подробней см. комментарий к одноименной процедуре в модуле ОбщегоНазначенияПереопределяемый.
Процедура ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры) Экспорт

	// Определение мимнимальной версии платформы
	ОбщиеПараметры.МинимальноНеобходимаяВерсияПлатформы = "8.3.8.2197";
	
	// Форма для управления персональными настройками пользователя Денег
	ОбщиеПараметры.ИмяФормыПерсональныхНастроек = "Обработка.НастройкаИОбслуживание.Форма.НастройкиПользователя";

КонецПроцедуры

// БСП. Одноименный обработчик из общего модуля ОбщегоНазначенияПереопределяемый
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("Валюта*", "ОбщегоНазначенияДеньги.УстановкаПараметровСеанса");
	Обработчики.Вставить("ОбщиеЗначения", "ОбщегоНазначенияДеньги.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПараметрыПереходаПоНавигационнойСсылке", "ОбщегоНазначенияДеньги.УстановкаПараметровСеанса");
	Обработчики.Вставить("АктивныеИндикаторы", "ОбщегоНазначенияДеньги.УстановкаПараметровСеанса");
	Обработчики.Вставить("ИдентификаторЗаданияИндикаторов", "ОбщегоНазначенияДеньги.УстановкаПараметровСеанса");
	Обработчики.Вставить("СостояниеСинхронизацииСМобильнымПриложением", "ОбщегоНазначенияДеньги.УстановкаПараметровСеанса");
	Обработчики.Вставить("ДатаПоследнейОперации", "ОбщегоНазначенияДеньги.УстановкаПараметровСеанса");
	Обработчики.Вставить("ИспользуемыеПланыОбмена", "ОбщегоНазначенияДеньги.УстановкаПараметровСеанса");
	Обработчики.Вставить("АвторизацияREST", "ОбщегоНазначенияДеньги.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПредставленияФайлов", "ОбщегоНазначенияДеньги.УстановкаПараметровСеанса");
	
КонецПроцедуры

// БСП. Одноименный обработчик из общего модуля ОбщегоНазначенияПереопределяемый
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ДатыРасписаний.Ресурсы.ПлановаяОперация);
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ПараметрыГрафикаПогашенияДолгов.Ресурсы.ШаблонОперации);
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ОбъектыОпераций.Измерения.Операция);
	ИсключенияПоискаСсылок.Добавить(Метаданные.Справочники.ЗначенияСубконтоАналитика);
	
КонецПроцедуры
 

// БСП. Одноименный обработчик из общего модуля ОбщегоНазначенияПереопределяемый
// Возвращает структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	// Если это заполненная ИБ версии 1.0, для корректного ее обновления заполним регистр ВерсииПодсистем
	НомерВерсииПервойРедакции = Неопределено;
	Если Метаданные.Константы.Найти("УдалитьНомерВерсииКонфигурации") <> Неопределено Тогда
		НомерВерсииПервойРедакции = Константы["УдалитьНомерВерсииКонфигурации"].Получить();
	КонецЕсли;
	Если ЗначениеЗаполнено(НомерВерсииПервойРедакции) Тогда
		Запись = РегистрыСведений.ВерсииПодсистем.СоздатьМенеджерЗаписи();
		Запись.ИмяПодсистемы = "Деньги";
		Запись.Прочитать();
		Если НЕ Запись.Выбран() Тогда
			Запись.ИмяПодсистемы = "Деньги";
			Запись.Версия = НомерВерсииПервойРедакции;
			Запись.Записать();
		КонецЕсли;
	КонецЕсли;
	
	// Добавляем настройки пользователя на открытие форм
	Параметры.Вставить("ПриЗапускеОткрыватьРаздел", ПользовательскиеНастройкиДневникСервер.ПриЗапускеОткрыватьРаздел());
	
	// Проверяем состояние помощника начала работы
	СостояниеПомощника = Константы.СостояниеПомощникаНачалаРаботы.Получить().Получить();
	Если СостояниеПомощника = Неопределено Тогда
		
		СостояниеПомощника = Обработки.ПомощникНачалаРаботы.СтруктураСостоянияПомощника();
		
		Если ОбщегоНазначенияДневник.ИнформационнаяБазаПустая() Тогда
			СостояниеПомощника.Сценарий =              "";
			СостояниеПомощника.СпособПолученияФайлов = "Файл";
			СостояниеПомощника.ТекущийШагПомощника =   "СтраницаПользователь";
		Иначе
			СостояниеПомощника.ПомощникЗавершен = Истина;
		КонецЕсли;
		
		Константы.СостояниеПомощникаНачалаРаботы.Установить(Новый ХранилищеЗначения(СостояниеПомощника));
		
	КонецЕсли;
	
	// Добавляем признак открытия помощника начала работы
	Параметры.Вставить("ОткрытьПомощникНачалаРаботы", Не СостояниеПомощника.ПомощникЗавершен);
	
КонецПроцедуры

// Проверяет активность сеанса с указанным номером
Функция СеансАктивен(НомерСеанса) Экспорт

	МассивСеансов = ПолучитьСеансыИнформационнойБазы();
	Для Каждого Сеанс Из МассивСеансов Цикл
		Если Сеанс.НомерСеанса = НомерСеанса Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 

	Возврат Ложь;
	
КонецФункции

// Сравнивает версию платформы с указанной. Возвращает Истина, если версия платформы больше 
//	требуемой и ложь в ином случае
//
//Параметры:
//	ТребуемаяВерсия - Строка - версия, с которой сравнивается версия платформы. Например: "8.3.4", "8.3.5.1068"
//	УчитыватьСовместимость - булево - признак необходимости проверять режим совместимости. Например,
//			если версия платформы 8.3.5.ххх, но режим совмесимости установлен в "Версия8_1", функция будет сравнивать 
//			"Требуемую версию" с 8.1.17.0
//
Функция ВерсияПлатформыБольшеИлиРавна(знач ТребуемаяВерсия, УчитыватьСовместимость = Истина) Экспорт

	СистемнаяИнформация = Новый СистемнаяИнформация;
	НомерВерсииПлатформы = СистемнаяИнформация.ВерсияПриложения;
	
	Если УчитыватьСовместимость Тогда
		// При определении СвойстваОбъектов.РежимСовместимости не проверяем номер версии платформы до минимально допустимой
		Если Вычислить("Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_1") Тогда
			НомерВерсииПлатформы = "8.1.17.0"
		ИначеЕсли Вычислить("Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_13") Тогда
			НомерВерсииПлатформы = "8.2.13.0"
		ИначеЕсли Вычислить("Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_16") Тогда
			НомерВерсииПлатформы = "8.2.16.0"
		ИначеЕсли Вычислить("Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_3_1") Тогда
			НомерВерсииПлатформы = "8.3.1.0"
		ИначеЕсли ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НомерВерсииПлатформы, "8.3.3.0") >= 0 
			И Вычислить("Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_3_2") Тогда
			НомерВерсииПлатформы = "8.3.2.0"
		ИначеЕсли ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НомерВерсииПлатформы, "8.3.4.0") >= 0 
			И Вычислить("Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_3_3") Тогда
			НомерВерсииПлатформы = "8.3.3.0"
		ИначеЕсли ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НомерВерсииПлатформы, "8.3.5.0") >= 0 
			И Вычислить("Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_3_4") Тогда
			НомерВерсииПлатформы = "8.3.4.0"
		КонецЕсли; 
	КонецЕсли; 
	
	МассивРазрядов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ТребуемаяВерсия, ".");
	Если МассивРазрядов.Количество() = 2 Тогда
		ТребуемаяВерсия = ТребуемаяВерсия + ".0.0";
	ИначеЕсли МассивРазрядов.Количество() = 3 Тогда
		ТребуемаяВерсия = ТребуемаяВерсия + ".0";
	КонецЕсли; 
	
	Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НомерВерсииПлатформы, ТребуемаяВерсия) >= 0;

КонецФункции

// Заполняет реквизиты объекта, для которых установлено свойство "ЗаполнятьИзДанныхЗаполнения"
//	значениями из переданной в параметрах структуры.
//
//Параметры:
//	Объект - СправочникОбъект, ДокументОбъект и др. объекты, в метаданных которых существует свойство ЗаполнятьИзДанныхЗаполнения
//	ДанныеЗаполнения - Структура, ключи которой соответствуют именам реквизитов объекта, а значения - данным заполнения
//	МетаданныеОбъекта - Метаданные (необязательный) - метаданные объекта
//
//Применение:
//	Вызывается из обработчика события ОбработкаЗаполнения() модулей объектов.
//
Процедура ЗаполнитьОбъектПоСтруктуре(Объект, ДанныеЗаполнения, МетаданныеОбъекта = Неопределено)	Экспорт

	Если Объект = Неопределено
		ИЛИ ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
		ИЛИ ДанныеЗаполнения.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	Если МетаданныеОбъекта = Неопределено Тогда
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	Если  Метаданные.Справочники.Содержит(МетаданныеОбъекта)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		РазличатьГруппыИЭлементы = МетаданныеОбъекта.Иерархический И МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
	Иначе
		РазличатьГруппыИЭлементы = Ложь;
	КонецЕсли;

	СтруктураЗаполнения = Новый Структура;
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			СтруктураЗаполнения.Вставить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			Если РазличатьГруппыИЭлементы Тогда
				Если (Объект.ЭтоГруппа И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
					ИЛИ
					(НЕ Объект.ЭтоГруппа И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)
					Тогда
					СтруктураЗаполнения.Вставить(Реквизит.Имя);
				КонецЕсли;
			Иначе
				СтруктураЗаполнения.Вставить(Реквизит.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, ДанныеЗаполнения);
	
	Для Каждого ЭлементСтруктуры Из СтруктураЗаполнения Цикл
		Если ЭлементСтруктуры.Ключ = "Родитель" Тогда
			Продолжить;
		КонецЕсли; 
		Если ЗначениеЗаполнено(ЭлементСтруктуры.Значение) И ОбщегоНазначения.ЗначениеСсылочногоТипа(ЭлементСтруктуры.Значение) Тогда
			МетаданныеЗначения = ЭлементСтруктуры.Значение.Метаданные();
			Если  (Метаданные.Справочники.Содержит(МетаданныеЗначения)
				ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеЗначения)) Тогда
				РазличатьГруппыИЭлементы = МетаданныеЗначения.Иерархический И МетаданныеЗначения.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
			Иначе
				РазличатьГруппыИЭлементы = Ложь;
			КонецЕсли;
			ВыборГрупп = МетаданныеОбъекта.Реквизиты[ЭлементСтруктуры.Ключ].ВыборГруппИЭлементов;
			Если РазличатьГруппыИЭлементы И ВыборГрупп <> ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
				Если ЭлементСтруктуры.Значение.ЭтоГруппа И ВыборГрупп = ИспользованиеГруппИЭлементов.Элементы Тогда
					СтруктураЗаполнения[ЭлементСтруктуры.Ключ] = Неопределено;
					ДанныеЗаполнения[ЭлементСтруктуры.Ключ] = Неопределено;
				ИначеЕсли НЕ ЭлементСтруктуры.Значение.ЭтоГруппа И ВыборГрупп = ИспользованиеГруппИЭлементов.Группы Тогда
					СтруктураЗаполнения[ЭлементСтруктуры.Ключ] = Неопределено;
					ДанныеЗаполнения[ЭлементСтруктуры.Ключ] = Неопределено;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);

КонецПроцедуры

// Вызывается из события объекта ПриКопировании для контроля заполняемых реквизитов
//
// Параметры
//  НовыйОбъект        - ДокументОбъект - Документ, создаваемый путем копирования
//  ОбъектКопирования  - ДокументОбъект, Структура - копируемый документ
//
Процедура ОбработкаСобытияПриКопировании(НовыйОбъект, ОбъектКопирования) Экспорт
	
	// Заполняем реквизиты шапки из объекта копирования, исключив некоторые реквизиты 
	ЗаполнитьЗначенияСвойств(НовыйОбъект, ОбъектКопирования, "", "Ссылка, Дата, ПометкаУдаления, Проведен, Пользователь");
	
	Если ОбъектКопирования.ЭтоШаблон Тогда
		ОписаниеОперации = НСтр("ru = 'Копия'") + ": " + ОбъектКопирования.ОписаниеОперации; 
	КонецЕсли; 
	
	// Проверяем реквизиты нового документа в соответствии с настройками пользователя
	ОбслуживаниеДокументов.ПроверитьЗаполнениеНовогоДокумента(НовыйОбъект, Истина);
	
КонецПроцедуры

// Для Кошелька возвращает ТипСчета, для Долга - вид долга, для остальных - Неопределено
//
// Параметры
//  ОбъектУчета  - СправочникСсылка - 
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьПодтипОбъектаУчета(ОбъектУчета) Экспорт

	Если ТипЗнч(ОбъектУчета) = Тип("СправочникСсылка.КошелькиИСчета") Тогда
		Возврат ОбъектУчета.ТипСчета;
	ИначеЕсли ТипЗнч(ОбъектУчета) = Тип("СправочникСсылка.Долги") Тогда
		Если ОбъектУчета.ИспользоватьДляУчетаВыданныхДолгов И НЕ ОбъектУчета.ИспользоватьДляУчетаВзятыхДолгов Тогда
			Возврат Перечисления.ТипыДолгов.ВыданныйЗаем;
		ИначеЕсли НЕ ОбъектУчета.ИспользоватьДляУчетаВыданныхДолгов И ОбъектУчета.ИспользоватьДляУчетаВзятыхДолгов Тогда
			Возврат Перечисления.ТипыДолгов.ПолученныйКредит;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

// Удаляет движения указанного документа вне зависимости от его состояния
//	Используется, например, при обмене данными или для физического удаления документа
//
//Параметры:
//	ДокументСсылка - ссылка на документ, движения которого нужно удалить
//	УдалятьЗаписиОбъектов - Булево - удалять ли записи в регистрах сведений регистрации 
//	УдалятьЗаписиВДатахКалендаря - Булево - удалять ли записи о документе в плановых операциях 
//	УдалятьЗаписиСоответствий - Булево - удалять ли записи в регистрах сведений СоответствиеОбъектов...
//
Процедура УдалитьДвиженияДокумента(ДокументСсылка, Отказ = Ложь, УдалятьРегистрацииОбъектов = Истина, УдалятьЗаписиВДатахКалендаря = Истина, УдалятьЗаписиСоответствий = Истина) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "";
	НомераРезультатов = Новый Структура;
	Счетчик = 0;
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Для Каждого Регистр Из МетаданныеДокумента.Движения Цикл
		ИмяРегистра = Регистр.ПолноеИмя();
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "", Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС );
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	""" + ИмяРегистра + """ КАК ИмяРегистра
		|ИЗ
		|	" + ИмяРегистра + " КАК НаборДвижений
		|ГДЕ
		|	НаборДвижений.Регистратор = &Регистратор";
	КонецЦикла; 
	Если ТекстЗапроса <> "" Тогда
		НомераРезультатов.Вставить("Движения", Счетчик);
		Счетчик = Счетчик + 1;
	КонецЕсли;
	
	Если УдалятьРегистрацииОбъектов Тогда
		
		// Добавляем запрос по объектам операций
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "", Символы.ПС + Символы.ПС + ";" + Символы.ПС + Символы.ПС );
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	""РегистрСведений.ОбъектыОпераций"" КАК ИмяРегистра
		|ИЗ
		|	РегистрСведений.ОбъектыОпераций КАК НаборДвижений
		|ГДЕ
		|	НаборДвижений.Операция = &Регистратор";
		
		НомераРезультатов.Вставить("РегистрацияОбъекта", Счетчик);
		Счетчик = Счетчик + 1;
		
	КонецЕсли; 
	
	Если УдалятьЗаписиВДатахКалендаря Тогда
		
		// Добавляем запрос по объектам операций
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "", Символы.ПС + Символы.ПС + ";" + Символы.ПС + Символы.ПС );
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДатыРасписаний.ВладелецРасписания,
		|	ДатыРасписаний.ПлановаяДата,
		|	ДатыРасписаний.ПлановаяОперация,
		|	ДатыРасписаний.АктуальнаяДата,
		|	ДатыРасписаний.Пропустить,
		|	ДатыРасписаний.СуммаДолга,
		|	ДатыРасписаний.СуммаПроцентов,
		|	ДатыРасписаний.СуммаКомиссии
		|ИЗ
		|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
		|ГДЕ
		|	(ДатыРасписаний.ВладелецРасписания = &Регистратор
		|			ИЛИ ДатыРасписаний.ПлановаяОперация = &Регистратор)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОперацииШаблонов.Шаблон,
		|	ОперацииШаблонов.Операция,
		|	ОперацииШаблонов.ПлановаяДата
		|ИЗ
		|	РегистрСведений.ОперацииШаблонов КАК ОперацииШаблонов
		|ГДЕ
		|	(ОперацииШаблонов.Шаблон = &Регистратор
		|			ИЛИ ОперацииШаблонов.Операция = &Регистратор)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расписания.ВладелецРасписания
		|ИЗ
		|	РегистрСведений.Расписания КАК Расписания
		|ГДЕ
		|	Расписания.ВладелецРасписания = &Регистратор";
		
		НомераРезультатов.Вставить("РегистрацияКалендаря", Счетчик);
		Счетчик = Счетчик + 3;
		
	КонецЕсли; 
	
	// У документа нет движений
	Если ТекстЗапроса = "" Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	НачатьТранзакцию();
	
	Попытка
		
		// Удаляем движения по регистрам
		Если НомераРезультатов.Свойство("Движения") Тогда
			
			ВыборкаДвижений = РезультатыЗапроса[НомераРезультатов.Движения].Выбрать();
			Пока ВыборкаДвижений.Следующий() Цикл
				
				ТипРегистра = Лев(ВыборкаДвижений.ИмяРегистра, Найти(ВыборкаДвижений.ИмяРегистра, ".") - 1);
				ИмяРегистра = СтрЗаменить(ВыборкаДвижений.ИмяРегистра, ТипРегистра + ".", "");
				
				Если ТипРегистра = "РегистрНакопления" Тогда
					МетаданныеНабора = Метаданные.РегистрыНакопления[ИмяРегистра];
					Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
					
				ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
					МетаданныеНабора = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
					Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
					
				ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
					МетаданныеНабора = Метаданные.РегистрыСведений[ИмяРегистра];
					Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
					
				ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
					МетаданныеНабора = Метаданные.РегистрыРасчета[ИмяРегистра];
					Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
					
				КонецЕсли;
			
				Набор.Отбор.Регистратор.Установить(ДокументСсылка);
				Набор.Записать(Истина);
				
			КонецЦикла; 
			
		КонецЕсли; 
		
		// Удаляем регистрацию объектов
		Если УдалятьРегистрацииОбъектов Тогда
			
			ВыборкаДвижений = РезультатыЗапроса[НомераРезультатов.РегистрацияОбъекта].Выбрать();
			Если ВыборкаДвижений.Следующий() Тогда
				Набор = РегистрыСведений.ОбъектыОпераций.СоздатьНаборЗаписей();
				Набор.Отбор.Операция.Установить(ДокументСсылка);
				Набор.Записать(Истина);
			КонецЕсли; 
			
		КонецЕсли; 
		
		// Удаляем запсии календаря
		Если УдалятьЗаписиВДатахКалендаря Тогда
			
			ВыборкаДвижений = РезультатыЗапроса[НомераРезультатов.РегистрацияКалендаря].Выбрать();
			Пока ВыборкаДвижений.Следующий() Цикл
				ЗаписьРегистра = РегистрыСведений.ДатыРасписаний.СоздатьМенеджерЗаписи();
				Если ДокументСсылка = ВыборкаДвижений.ВладелецРасписания Тогда
					ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДвижений, "ВладелецРасписания,ПлановаяДата");
					ЗаписьРегистра.Удалить();
				Иначе
					ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДвижений, , "ПлановаяОперация");
					ЗаписьРегистра.Записать(Истина);
				КонецЕсли; 
			КонецЦикла;
			
			ВыборкаДвижений = РезультатыЗапроса[НомераРезультатов.РегистрацияКалендаря + 1].Выбрать();
			Пока ВыборкаДвижений.Следующий() Цикл
				ЗаписьРегистра = РегистрыСведений.ОперацииШаблонов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДвижений, "Шаблон,Операция");
				ЗаписьРегистра.Удалить();
			КонецЦикла;
			
			ВыборкаДвижений = РезультатыЗапроса[НомераРезультатов.РегистрацияКалендаря + 2].Выбрать();
			Пока ВыборкаДвижений.Следующий() Цикл
				Набор = РегистрыСведений.Расписания.СоздатьНаборЗаписей();
				Набор.Отбор.ВладелецРасписания.Установить(ДокументСсылка);
				Набор.Записать(Истина);
			КонецЦикла;
			
		КонецЕсли; 
		
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Отказ = Истина;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Удаление движний документа", 
					УровеньЖурналаРегистрации.Ошибка, 
					ДокументСсылка.Метаданные(), 
					ДокументСсылка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли; 
		
	КонецПопытки; 

КонецПроцедуры

// Вместо формы устаревших объектов открывает общую форму с сообщением
//
//Параметры:
//	ОбъектМетаданных - ОбъектМетаданных - объект, форму которого пытаются открыть
//	Параметры процедуры соответствуют параметрам обработчика события ОбработкаПолученияФормы() модуля менеджера документа или справочника
//
Процедура ПоказатьФормуУстаревшегоОбъекта(ОбъектМетаданных, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт

	ШрифтПояснения = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста);
	ШрифтОбычный   = Новый Шрифт(ШрифтыСтиля.КрупныйШрифтТекста, , 11);
	ШрифтЖирный    = Новый Шрифт(ШрифтОбычный, , , Истина);
	
	ЗаголовокФормы = ОбъектМетаданных.Синоним;
	ЗаголовокФормы = СокрЛП(СтрЗаменить(ЗаголовокФормы, "(не используется)", ""));
	ЗаголовокФормы = Врег(Лев(ЗаголовокФормы, 1)) + Сред(ЗаголовокФормы, 2);
	Параметры.Вставить("Заголовок", ЗаголовокФормы);
	
	ТекстСообщения = Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока("Невозможно открыть форму <", ШрифтОбычный),
		Новый ФорматированнаяСтрока(ЗаголовокФормы, ШрифтЖирный),
		Новый ФорматированнаяСтрока(">", ШрифтОбычный)
		);
	Параметры.Вставить("ТекстСообщения", ТекстСообщения);
	
	ТекстПояснения = НСтр("ru = 'Объект ""%1"" устарел и в текущей версии программы не используется'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПояснения, ЗаголовокФормы);
	ТекстПояснения = Новый ФорматированнаяСтрока(ТекстПояснения, ШрифтПояснения);
	Параметры.Вставить("ТекстПояснения", ТекстПояснения);
		
	ВыбраннаяФорма = Метаданные.ОбщиеФормы.ОбъектБезИнтерактивногоДоступа;
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

// Сбрасывает настройки размера и положения указанной в параметрах формы 
Процедура СброситьРазмерИПоложениеФормы(Форма, КлючСохраненияНастройки = Неопределено) Экспорт
	
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		ХранилищеСистемныхНастроек.Удалить(Форма.ИмяФормы, "", ИмяПользователя);
		ХранилищеСистемныхНастроек.Удалить(Форма.ИмяФормы, КлючСохраненияНастройки, ИмяПользователя);
	КонецЕсли;
	
	Форма.КлючСохраненияПоложенияОкна = ?(КлючСохраненияНастройки = Неопределено, Строка(Новый УникальныйИдентификатор), КлючСохраненияНастройки);
	
КонецПроцедуры

// Проверяет наличие разрывов в периодах курсов валют. Для точного расчета оборотов по валютам в регистре сведений "КурсыВалют"
//	необходимо записи о курсах каждой валюты на каждую календарную дату
Процедура ПроверитьРазрывыКурсовВалют(ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	Если ДатаНачала = Неопределено Тогда
		ДатаНачала = ДатаПервойОперации();
	КонецЕсли;
	
	Если ДатаОкончания = Неопределено Тогда
		ДатаОкончания = ТекущаяДата();
	КонецЕсли;
	
	СтруктураЗапроса = Новый Структура;
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", ДатаОкончания);
	Запрос.УстановитьПараметр("ВалютаУчета", ВалютаУчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыВалют.Период КАК Период,
	|	КурсыВалют.Валюта КАК Валюта,
	|	КурсыВалют.БазоваяВалюта КАК БазоваяВалюта,
	|	ВЫБОР
	|		КОГДА КурсыВалют.Курс = 0
	|			ТОГДА 1
	|		ИНАЧЕ КурсыВалют.Курс
	|	КОНЕЦ КАК Курс,
	|	ВЫБОР
	|		КОГДА КурсыВалют.Кратность = 0
	|			ТОГДА 1
	|		ИНАЧЕ КурсыВалют.Кратность
	|	КОНЕЦ КАК Кратность,
	|	МИНИМУМ(Сравнения.Период) КАК ПериодСравнения
	|ПОМЕСТИТЬ КурсыСравнения
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК Сравнения
	|		ПО КурсыВалют.Валюта = Сравнения.Валюта
	|			И КурсыВалют.БазоваяВалюта = Сравнения.БазоваяВалюта
	|			И КурсыВалют.Период < Сравнения.Период
	|			И (КурсыВалют.Период >= &Дата1)
	|ГДЕ
	|	КурсыВалют.Период МЕЖДУ &Дата1 И &Дата2
	|	И КурсыВалют.БазоваяВалюта = &ВалютаУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	КурсыВалют.Период,
	|	КурсыВалют.Валюта,
	|	КурсыВалют.БазоваяВалюта,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодСравнения,
	|	Валюта,
	|	БазоваяВалюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подзапрос.Период КАК Период,
	|	ЕСТЬNULL(Подзапрос.ПериодСравнения, Подзапрос.Период) КАК ПериодСравнения,
	|	РАЗНОСТЬДАТ(Подзапрос.Период, ЕСТЬNULL(Подзапрос.ПериодСравнения, Подзапрос.Период), ДЕНЬ) КАК Разница,
	|	Подзапрос.Валюта КАК Валюта,
	|	Подзапрос.БазоваяВалюта КАК БазоваяВалюта,
	|	Подзапрос.Курс,
	|	Подзапрос.Кратность
	|ИЗ
	|	КурсыСравнения КАК Подзапрос
	|ГДЕ
	|	РАЗНОСТЬДАТ(Подзапрос.Период, ЕСТЬNULL(Подзапрос.ПериодСравнения, Подзапрос.Период), ДЕНЬ) > 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	БазоваяВалюта,
	|	Валюта,
	|	Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПериодКурса = Выборка.Период;
		Пока ПериодКурса < Выборка.ПериодСравнения Цикл
			
			ЗаписьРегистра = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
			ЗаписьРегистра.Период = ПериодКурса;
			ЗаписьРегистра.Записать(Истина);
			
			ПериодКурса = КонецДня(ПериодКурса) + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДатаПервойОперации() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ОбщийЖурналДокументов.Дата) КАК Дата
	|ИЗ
	|	ЖурналДокументов.ОбщийЖурналДокументов КАК ОбщийЖурналДокументов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Дата) Тогда
		Возврат Выборка.Дата;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Возвращает список значений с видами операций. 
//	Используется для выбора вида операции перед их добавлением, для установки отборов и т.п.
//
//Параметры:
//	ВключаемыеВиды - Массив или Неопределено - содержит строки, которые нужно добавить в список. 
//			Если неопределено, добавляются все виды операций
//	ИсключаемыеВиды - Массив или Неопределено - содержит строки, которые нужно исключить из списка. 
//			Если неопределено, добавляются все виды операций. При наличии вида операции в обоих массивах одновременно
//			вид операции будет исключен
//
//
Функция ПолучитьСписокВидовОпераций(ВключаемыеВиды = Неопределено, Знач ИсключаемыеВиды = Неопределено) Экспорт

	Если ТипЗнч(ВключаемыеВиды) = Тип("Строка") Тогда
		ВключаемыеВиды = СтрРазделить(ВключаемыеВиды, ",", Ложь);
	КонецЕсли;
	Если ТипЗнч(ИсключаемыеВиды) = Тип("Строка") Тогда
		ИсключаемыеВиды = СтрРазделить(ИсключаемыеВиды, ",", Ложь);
	КонецЕсли;
	
	СписокТипов = Новый СписокЗначений;
	
	ИмяВида = "Расход";
	Если ВключаемыеВиды = Неопределено ИЛИ ВключаемыеВиды.Найти(ИмяВида) <> Неопределено Тогда
		Если ИсключаемыеВиды = Неопределено ИЛИ ИсключаемыеВиды.Найти(ИмяВида) = Неопределено Тогда
			СписокТипов.Добавить(ИмяВида, Метаданные.Документы[ИмяВида].Синоним, , ДневникКлиентСервер.ПолучитьКартинкуВидаОперации(ИмяВида));
		КонецЕсли; 
	КонецЕсли; 
	
	ИмяВида = "Доход";
	Если ВключаемыеВиды = Неопределено ИЛИ ВключаемыеВиды.Найти(ИмяВида) <> Неопределено Тогда
		Если ИсключаемыеВиды = Неопределено ИЛИ ИсключаемыеВиды.Найти(ИмяВида) = Неопределено Тогда
			СписокТипов.Добавить(ИмяВида, Метаданные.Документы[ИмяВида].Синоним, , ДневникКлиентСервер.ПолучитьКартинкуВидаОперации(ИмяВида));
		КонецЕсли; 
	КонецЕсли; 
	
	ИмяВида = "Перемещение";
	Если ВключаемыеВиды = Неопределено ИЛИ ВключаемыеВиды.Найти(ИмяВида) <> Неопределено Тогда
		Если ИсключаемыеВиды = Неопределено ИЛИ ИсключаемыеВиды.Найти(ИмяВида) = Неопределено Тогда
			СписокТипов.Добавить(ИмяВида, Метаданные.Документы[ИмяВида].Синоним, , ДневникКлиентСервер.ПолучитьКартинкуВидаОперации(ИмяВида));
		КонецЕсли; 
	КонецЕсли; 
	
	ИмяВида = "ОбменВалюты";
	Если ВключаемыеВиды = Неопределено ИЛИ ВключаемыеВиды.Найти(ИмяВида) <> Неопределено Тогда
		Если ИсключаемыеВиды = Неопределено ИЛИ ИсключаемыеВиды.Найти(ИмяВида) = Неопределено Тогда
			СписокТипов.Добавить(ИмяВида, Метаданные.Документы[ИмяВида].Синоним, , ДневникКлиентСервер.ПолучитьКартинкуВидаОперации(ИмяВида));
		КонецЕсли; 
	КонецЕсли; 
	
	ИмяВида = "МыДалиВДолг";
	Если ВключаемыеВиды = Неопределено ИЛИ ВключаемыеВиды.Найти(ИмяВида) <> Неопределено Тогда
		Если ИсключаемыеВиды = Неопределено ИЛИ ИсключаемыеВиды.Найти(ИмяВида) = Неопределено Тогда
			СписокТипов.Добавить(ИмяВида, Метаданные.Документы[ИмяВида].Синоним, , ДневникКлиентСервер.ПолучитьКартинкуВидаОперации(ИмяВида));
		КонецЕсли; 
	КонецЕсли; 
	
	ИмяВида = "НамВернулиДолг";
	Если ВключаемыеВиды = Неопределено ИЛИ ВключаемыеВиды.Найти(ИмяВида) <> Неопределено Тогда
		Если ИсключаемыеВиды = Неопределено ИЛИ ИсключаемыеВиды.Найти(ИмяВида) = Неопределено Тогда
			СписокТипов.Добавить(ИмяВида, Метаданные.Документы[ИмяВида].Синоним, , ДневникКлиентСервер.ПолучитьКартинкуВидаОперации(ИмяВида));
		КонецЕсли; 
	КонецЕсли; 
	
	ИмяВида = "МыВзялиВДолг";
	Если ВключаемыеВиды = Неопределено ИЛИ ВключаемыеВиды.Найти(ИмяВида) <> Неопределено Тогда
		Если ИсключаемыеВиды = Неопределено ИЛИ ИсключаемыеВиды.Найти(ИмяВида) = Неопределено Тогда
			СписокТипов.Добавить(ИмяВида, Метаданные.Документы[ИмяВида].Синоним, , ДневникКлиентСервер.ПолучитьКартинкуВидаОперации(ИмяВида));
		КонецЕсли; 
	КонецЕсли; 
	
	ИмяВида = "МыВернулиДолг";
	Если ВключаемыеВиды = Неопределено ИЛИ ВключаемыеВиды.Найти(ИмяВида) <> Неопределено Тогда
		Если ИсключаемыеВиды = Неопределено ИЛИ ИсключаемыеВиды.Найти(ИмяВида) = Неопределено Тогда
			СписокТипов.Добавить(ИмяВида, Метаданные.Документы[ИмяВида].Синоним, , ДневникКлиентСервер.ПолучитьКартинкуВидаОперации(ИмяВида));
		КонецЕсли; 
	КонецЕсли; 
	
	ИмяВида = "ВводИзменениеОстатка";
	Если ВключаемыеВиды = Неопределено ИЛИ ВключаемыеВиды.Найти(ИмяВида) <> Неопределено Тогда
		Если ИсключаемыеВиды = Неопределено ИЛИ ИсключаемыеВиды.Найти(ИмяВида) = Неопределено Тогда
			СписокТипов.Добавить(ИмяВида, Метаданные.Документы[ИмяВида].Синоним, , ДневникКлиентСервер.ПолучитьКартинкуВидаОперации(ИмяВида));
		КонецЕсли; 
	КонецЕсли; 
	
	ИмяВида = "УниверсальнаяОперация";
	Если ВключаемыеВиды = Неопределено ИЛИ ВключаемыеВиды.Найти(ИмяВида) <> Неопределено Тогда
		Если ИсключаемыеВиды = Неопределено ИЛИ ИсключаемыеВиды.Найти(ИмяВида) = Неопределено Тогда
			СписокТипов.Добавить(ИмяВида, Метаданные.Документы[ИмяВида].Синоним, , ДневникКлиентСервер.ПолучитьКартинкуВидаОперации(ИмяВида));
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат СписокТипов;
	
КонецФункции


// Создает табличный документ, заполненый содержимым произвольной таблицы значений
//	Для каждой колонки таблицы типа "ТаблицаЗначений" или "СписокЗначений" создается вложенная таблица
//
//Параметры:
//	ТаблицаЗначений	- таблица, которую нужно вывести в табличный документ
//	Заголовок - Строка - заголовок таблицы значений
//	Колонки - Строка или массив с именами колонок, которые нужно выводить в табличный документ. Если Неопределено - выводятся все колонки
//	ИсключаемыеКолонки - Строка или массив с именами колонок, которые НЕ нужно выводить в табличный документ. Если Неопределено - выводятся все колонки
//	Уровень - Число - определяет уровень вложенности резульата при выводе вложенных таблиц значений
//
//Возвращаемое значение:
//	ТабличныйДокумент
//
Функция ТабличныйДокументИзТаблицыЗначений(знач ТаблицаЗначений, знач Заголовок = "", знач Колонки = Неопределено, знач ИсключаемыеКолонки = Неопределено, Уровень = 0) Экспорт

	// Проверяем параметры
	Если ТипЗнч(ТаблицаЗначений) <> Тип("ТаблицаЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Колонки <> Неопределено Тогда
		
		Если ТипЗнч(Колонки) = Тип("Строка") Тогда
			Колонки = СтрРазделить(Колонки, ",", Ложь);
		КонецЕсли;
		
		Если Колонки.Количество() = 0 Тогда
			Возврат Неопределено
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ИсключаемыеКолонки) = Тип("Строка") Тогда
		ИсключаемыеКолонки = СтрРазделить(ИсключаемыеКолонки, ",", Ложь);
	КонецЕсли;
	
	// Создаем результат
	Результат = Новый ТабличныйДокумент;
	
	Если ЗначениеЗаполнено(Заголовок) Тогда
		Результат.Вывести(ЗаголовокТаблицыЗначений(Заголовок,Уровень));
	КонецЕсли;
	
	// Получаем структуру колонок и макеты таблицы
	СтруктураТаблицы = СтруктураТаблицыЗначений(ТаблицаЗначений, Колонки, ИсключаемыеКолонки);
	
	// Выводим шапку
	Результат.Вывести(СтруктураТаблицы.МакетШапки);
	НачалоТаблицы = Результат.ВысотаТаблицы;
	
	// Заполняем строки таблицы
	ПодчиненныеОтчеты = Новый Массив;
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		МакетСтроки = СтруктураТаблицы.МакетСтроки.ПолучитьОбласть("МакетСтроки");
		ПодчиненныеОтчеты.Очистить();
		
		Для каждого КолонкаТаблицы Из СтруктураТаблицы.Колонки Цикл
			
			ЗначениеЯчейки = СтрокаТаблицы[КолонкаТаблицы.Ключ];
			Если ТипЗнч(ЗначениеЯчейки) = Тип("ТаблицаЗначений") Тогда
				
				Если ЗначениеЯчейки.Количество() > 0 Тогда
					ЗаголовокЯчейки = ?(ПустаяСТрока(КолонкаТаблицы.Значение.Заголовок), КолонкаТаблицы.Значение.Имя, КолонкаТаблицы.Значение.Заголовок);
					ПодчиненныеОтчеты.Добавить(ТабличныйДокументИзТаблицыЗначений(ЗначениеЯчейки, ЗаголовокЯчейки, Колонки, ИсключаемыеКолонки, Уровень + 1));
				КонецЕсли;
				Продолжить;
				
			ИначеЕсли ТипЗнч(ЗначениеЯчейки) = Тип("СписокЗначений") Тогда
				
				Если ЗначениеЯчейки.Количество() > 0 Тогда
					ЗаголовокЯчейки = ?(ПустаяСТрока(КолонкаТаблицы.Значение.Заголовок), КолонкаТаблицы.Значение.Имя, КолонкаТаблицы.Значение.Заголовок);
					ПодчиненныеОтчеты.Добавить(ТабличныйДокументИзСпискаЗначений(ЗначениеЯчейки, ЗаголовокЯчейки, Уровень + 1));
				КонецЕсли;
				Продолжить;
				
			КонецЕсли;
			
			МакетСтроки.Параметры[КолонкаТаблицы.Ключ] = ЗначениеЯчейки;
			
		КонецЦикла;
		
		Результат.Вывести(МакетСтроки);
		Для каждого ПодОтчет Из ПодчиненныеОтчеты Цикл
			Если Подотчет <> Неопределено Тогда
				Результат.Вывести(ПодОтчет, Уровень, );
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Обводим таблицу рамкой
	ОбластьОтчета = Результат.Область(НачалоТаблицы, 1, Результат.ВысотаТаблицы, Результат.ШиринаТаблицы); 
	ОбластьОтчета.ЦветРамки = ЦветаСтиля.ЦветРамки;
	ЛинияОбвода = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Двойная, 1);
	ОбластьОтчета.Обвести(ЛинияОбвода, ЛинияОбвода, ЛинияОбвода, ЛинияОбвода);
	
	Возврат Результат;

КонецФункции

// Выводит список значений в табличный документ
//
//Параметры:
//	СписокЗначений
//	Заголовок - Строка
//	Уровень - Число
//
//Возвращаемое значение:
//	ТабличныйДокумент
//
Функция ТабличныйДокументИзСпискаЗначений(СписокЗначений, ЗаголовокТабличногоДокумента, Уровень = 0) Экспорт

	// Проверяем параметры
	Если ТипЗнч(СписокЗначений) <> Тип("СписокЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"), НСтр("ru='Представление'"), 15);
	ТаблицаЗначений.Колонки.Добавить("Значение", , НСтр("ru='Значение'"), 25);
	
	Для каждого ЭлементСписка Из СписокЗначений Цикл
		
		СтрокаТаблицы = ТаблицаЗначений.Добавить();
		СтрокаТаблицы.Представление = ЭлементСписка.Представление;
		СтрокаТаблицы.Значение = ЭлементСписка.Значение;
		
	КонецЦикла;

	Возврат ТабличныйДокументИзТаблицыЗначений(ТаблицаЗначений, ЗаголовокТабличногоДокумента, "", "", Уровень);
	
КонецФункции

// Опеределяет отсутствие в информационной данных, введенных пользователем, потеря которых может быть нежелательной
//
//Параметры:
//	нет
//
//Возвращаемое значение:
//	Булево - Истина, если база не содержит операций, плановых показателей и записей в справочниках,
//			потеря которых может быть 
//
Функция ИнформационнаяБазаПустая() Экспорт

	Запрос = Новый Запрос;//+++
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дДневник.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.дДневник КАК дДневник";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает имя группировки итогов в запросах по длительности периода
Функция ИмяГруппировкиПоДлительности(НачДата, КонДата) Экспорт

	НачалоПериода = НачалоДня(НачДата);
	КонецПериода  = КонецДня(КонДата);
	СекундВПериоде = КонецПериода - НачалоПериода;
	СекундВСутках  = 60*60*24;
	
	ТекстПериода = "ДЕНЬ";
	
	Если ДобавитьМесяц(НачалоПериода, 14) <= КонецПериода Тогда
		ТекстПериода = "ГОД";
	ИначеЕсли ДобавитьМесяц(НачалоПериода, 2) <= КонецПериода Тогда
		ТекстПериода = "МЕСЯЦ";
	КонецЕсли;
	
	Возврат ТекстПериода;

КонецФункции

// Копирует дополнительные свойства и параметры обмена даннымиодного объекта в свойства друного объекта
Процедура СкопироватьДополнительныеПараметрыОбъекта(ОбъектНазначения, ИсточникДопПараметров) Экспорт
	
	Если ИсточникДопПараметров.ДополнительныеСвойства <> Неопределено Тогда
		Для каждого КлючИЗначение Из ИсточникДопПараметров.ДополнительныеСвойства Цикл
			ОбъектНазначения.ДополнительныеСвойства.Вставить(КлючИЗначение.Ключ, ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(КлючИЗначение.Значение));
		КонецЦикла;
	КонецЕсли;
	Если ИсточникДопПараметров.ОбменДанными <> Неопределено Тогда
		ОбъектНазначения.ОбменДанными.Загрузка                   = ИсточникДопПараметров.ОбменДанными.Загрузка;
		ОбъектНазначения.ОбменДанными.Отправитель                = ИсточникДопПараметров.ОбменДанными.Отправитель;
		ОбъектНазначения.ОбменДанными.Получатели.АвтоЗаполнение  = ИсточникДопПараметров.ОбменДанными.Получатели.АвтоЗаполнение;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат проверки, разрешено ли пользователю открытие внешних отчетов и обработок
//
//Параметры:
//	Пользователь - Строка или пользователь ИБ, для которого проверяется разрешение
//
//Возвращаемое значение:
//	Число: 0 - запрещено, 1 - разрешено ролью, -1 - разрешено правами (т.е. роль изменена)
//
Функция РазрешеноОткрытиеВнешнихОтчетовИОбработок(Пользователь = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	ИначеЕсли ТипЗнч(Пользователь) = Тип("Строка") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Пользователь);
	Иначе
		ПользовательИБ = Пользователь;
	КонецЕсли;
	
	РольОткрытие = Метаданные.Роли.ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок;
	
	Если ПользовательИБ.Роли.Содержит(РольОткрытие) Тогда
		Возврат 1;
	КонецЕсли;
	
	Если ПравоДоступа("ИнтерактивноеОткрытиеВнешнихОбработок", Метаданные, ПользовательИБ)
			Или ПравоДоступа("ИнтерактивноеОткрытиеВнешнихОтчетов", Метаданные, ПользовательИБ) Тогда
		Возврат -1;
	КонецЕсли;
	
	Возврат 0;

КонецФункции

// Изменяет разрешение на открытие внешних отчетов и обработок для указанного или для всех пользователей
//
//Параметры:
//	РазрешитьИнтерактивноеОткрытие - Булево - разрешить или запретить открытие обработок и отчетов
//	Пользователь - Строка или пользователь ИБ, для которого проверяется разрешение.
//				При значении "ВСЕ" разрешение меняется для всех пользователей ИБ
//
Процедура ИзменитьРазрешениеОткрыватьВнешниеОтчетыИОбработки(РазрешитьИнтерактивноеОткрытие, Пользователь = Неопределено) Экспорт
	
	СписокПользователей = Новый Массив;
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		СписокПользователей.Добавить(ПользователиИнформационнойБазы.ТекущийПользователь());
	ИначеЕсли ВРег(Пользователь) = "ВСЕ" Тогда
		СписокПользователей =  ПользователиИнформационнойБазы;
	ИначеЕсли ТипЗнч(Пользователь) = Тип("Строка") Тогда
		СписокПользователей.Добавить(ПользователиИнформационнойБазы.НайтиПоИмени(Пользователь));
	Иначе
		СписокПользователей.Добавить(Пользователь);
	КонецЕсли;
	
	Для каждого ПользовательИБ Из СписокПользователей Цикл
		ИзменитьРазрешениеОткрыватьВнешниеОтчетыИОбработкиДляПользователя(РазрешитьИнтерактивноеОткрытие, ПользовательИБ);
	КонецЦикла;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры
 

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Удаляет все записи из таблиц справочников, документов и регистров подсистемы Деньги.
//Из других подстстме удаляются только записи, связанные с подсистемой Деньги. 
//
//Параметры:
//	СохранитьСправочники - Булево - нужно ли сохранять записи справочников?
//
//Возвращаемое значение:
//	Булево - Истина, если данные удалось уалить и Ложь, если при удалении данных возникли проблемы
//
Функция ОчиститьДанныеПодсистемыДеньги(СохранитьСправочники, ОписаниеПроблемы = "") Экспорт

	РаботаМонопольно = МонопольныйРежим();
	Попытка
		УстановитьМонопольныйРежим(Истина);
	Исключение
		ОписаниеПроблемы = НСтр("ru='Невозможно установить монопольный режим'");
		Возврат Ложь;
	КонецПопытки; 
	
	НачатьТранзакцию();
	
	Попытка
		ОчиститьРегистрыСведений(СохранитьСправочники);
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		ОписаниеПроблемы = СтрШаблон(НСтр("ru='Не удалось очистить регистры сведений:%1 %2'"), Символы.ПС, КраткоеПредставлениеОшибки(Ошибка));
		ЗаписьЖурналаРегистрации("Очистка подсистемы Деньги", УровеньЖурналаРегистрации.Ошибка, , , 
					"Ошибка при очистке регистров сведений: " + Символы.ПС + ПодробноеПредставлениеОшибки(Ошибка));
		УстановитьМонопольныйРежим(Ложь);
		Возврат Ложь;
		
	КонецПопытки;
	
	Попытка
		ОчиститьВалюты(СохранитьСправочники);
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		ОписаниеПроблемы = СтрШаблон(НСтр("ru='Не удалось очистить справочник валют и курсы:%1 %2'"), Символы.ПС, КраткоеПредставлениеОшибки(Ошибка));
		ЗаписьЖурналаРегистрации("Очистка подсистемы Деньги", УровеньЖурналаРегистрации.Ошибка, , , 
					"Ошибка при очистке валют и их курсов: " + Символы.ПС + ПодробноеПредставлениеОшибки(Ошибка));
		УстановитьМонопольныйРежим(Ложь);
		Возврат Ложь;
		
	КонецПопытки;
	
	Попытка
		УдалитьВсеДокументы();
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		ОписаниеПроблемы = СтрШаблон(НСтр("ru='Не удалось удалить операции:%1 %2'"), Символы.ПС, КраткоеПредставлениеОшибки(Ошибка));
		ЗаписьЖурналаРегистрации("Очистка подсистемы Деньги", УровеньЖурналаРегистрации.Ошибка, , , 
					"Ошибка при удалении документов: " + Символы.ПС + ПодробноеПредставлениеОшибки(Ошибка));
		УстановитьМонопольныйРежим(Ложь);
		Возврат Ложь;
		
	КонецПопытки;
	
	Если Не СохранитьСправочники Тогда
		
		Попытка
			ОчиститьСправочники();
		Исключение
			
			Ошибка = ИнформацияОбОшибке();
			ОтменитьТранзакцию();
			ОписаниеПроблемы = СтрШаблон(НСтр("ru='Не удалось удалить элементы справочников:%1 %2'"), Символы.ПС, КраткоеПредставлениеОшибки(Ошибка));
			ЗаписьЖурналаРегистрации("Очистка подсистемы Деньги", УровеньЖурналаРегистрации.Ошибка, , , 
						"Ошибка при удалении справочников: " + Символы.ПС + ПодробноеПредставлениеОшибки(Ошибка));
			УстановитьМонопольныйРежим(Ложь);
			Возврат Ложь;
			
		КонецПопытки;
		
		Попытка
			ОчиститьКонстантыИНастройки();
		Исключение
			
			Ошибка = ИнформацияОбОшибке();
			ОтменитьТранзакцию();
			ОписаниеПроблемы = СтрШаблон(НСтр("ru='Не удалось очистить пользовательские настройки:%1 %2'"), Символы.ПС, КраткоеПредставлениеОшибки(Ошибка));
			ЗаписьЖурналаРегистрации("Очистка подсистемы Деньги", УровеньЖурналаРегистрации.Ошибка, , , 
						"Ошибка очистки пользовательских настроек: " + Символы.ПС + ПодробноеПредставлениеОшибки(Ошибка));
			УстановитьМонопольныйРежим(Ложь);
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	ОчиститьПланОбмена();
	
	ЗафиксироватьТранзакцию();
	
	Если Не РаботаМонопольно Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ВыводТаблицыЗначенийВТабличныйДокумент

Функция ЗаголовокТаблицыЗначений(Заголовок, Уровень) 

	Результат = Новый ТабличныйДокумент;
	
	ОбластьЗаголовка = Результат.Область(1,1);
	ОбластьЗаголовка.Текст = Заголовок;
	ОбластьЗаголовка.Шрифт = Новый Шрифт(ШрифтыСтиля.ШрифтТекста, , Макс(16-Уровень, 10), Истина);
	Результат.Область(2,,2).Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	
	Возврат Результат;

КонецФункции

Функция СтруктураТаблицыЗначений(ТаблицаЗначений, Колонки, ИсключаемыеКолонки) 

	СтруктураКолонок = Новый Структура();
	МакетШапки  = Новый ТабличныйДокумент;
	МакетСтроки = Новый ТабличныйДокумент;
	
	Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		
		Если Колонки <> Неопределено И Колонки.Найти(Колонка.Имя) = Неопределено  Тогда
			Продолжить;
		КонецЕсли;
		Если ИсключаемыеКолонки <> Неопределено И ИсключаемыеКолонки.Найти(Колонка.Имя) <> Неопределено  Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураКолонок.Вставить(Колонка.Имя, Колонка);
		
		ЧислоТипов = Колонка.ТипЗначения.Типы().Количество();
		Если ЧислоТипов = 1 И (Колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Или Колонка.ТипЗначения.СодержитТип(Тип("СписокЗначений"))) Тогда
			// Для таких колонок макеты не создаем
			Продолжить;
		КонецЕсли;
		
		// Определяем ширину, положение и другие параметры
		Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			РазмещениеВКолонке = ТипРазмещенияТекстаТабличногоДокумента.Авто;
			ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.Право;
			ШиринаКолонки = 15;
		ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
			РазмещениеВКолонке = ТипРазмещенияТекстаТабличногоДокумента.Авто;
			ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.Центр;
			ШиринаКолонки = 10;
		ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
			РазмещениеВКолонке = ТипРазмещенияТекстаТабличногоДокумента.Авто;
			ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.Центр;
			ШиринаКолонки = 4;
		Иначе
			РазмещениеВКолонке = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.Авто;
			ШиринаКолонки = 25;
		КонецЕсли;
		
		// Задаем колонку в макете шапки
		ОбластьШапки = МакетШапки.Область(1, МакетШапки.ШиринаТаблицы + 1);
		ОбластьШапки.ШиринаКолонки               = ШиринаКолонки;
		ОбластьШапки.Текст                       = ?(ПустаяСтрока(Колонка.Заголовок), Колонка.Имя, Колонка.Заголовок);
		ОбластьШапки.Шрифт                       = Новый Шрифт(ШрифтыСтиля.ШрифтТекста, , , Истина);
		ОбластьШапки.ВертикальноеПоложение       = ВертикальноеПоложение.Центр;
		ОбластьШапки.ГоризонтальноеПоложение     = ГоризонтальноеПоложение.Центр;
		ОбластьШапки.РазмещениеТекста            = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ОбластьШапки.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
		ОбластьШапки.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		
		// Задаем область в макете строки
		ОбластьЗначения = МакетСтроки.Область(1, МакетСтроки.ШиринаТаблицы + 1);
		ОбластьЗначения.Имя                      = Колонка.Имя;
		ОбластьЗначения.ШиринаКолонки            = ШиринаКолонки;
		ОбластьЗначения.Заполнение               = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		ОбластьЗначения.Параметр                 = Колонка.Имя;
		ОбластьЗначения.ВертикальноеПоложение       = ВертикальноеПоложение.Верх;
		ОбластьЗначения.ГоризонтальноеПоложение     = ГоризонтальноеПоложениеТекста;
		ОбластьЗначения.РазмещениеТекста            = РазмещениеВКолонке;
		ОбластьЗначения.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
		ОбластьЗначения.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
		
	КонецЦикла;

	МакетСтроки.Область(1, , 1, ).Имя = "МакетСтроки";
	
	Результат = Новый Структура();
	Результат.Вставить("Колонки", СтруктураКолонок);
	Результат.Вставить("МакетШапки", МакетШапки);
	Результат.Вставить("МакетСтроки", МакетСтроки);
	
	Возврат Результат;
	
КонецФункции
 

#КонецОбласти 

Процедура ИзменитьРазрешениеОткрыватьВнешниеОтчетыИОбработкиДляПользователя(РазрешитьИнтерактивноеОткрытие, ПользовательИБ) 
	
	РольОткрытие       = Метаданные.Роли.ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок;
	РольАдминистратора = Метаданные.Роли.АдминистраторСистемы;
	
	Если РазрешитьИнтерактивноеОткрытие Тогда
		Если ПользовательИБ.Роли.Содержит(РольАдминистратора)
			И Не ПользовательИБ.Роли.Содержит(РольОткрытие) Тогда
			ПользовательИБ.Роли.Добавить(РольОткрытие);
			ПользовательИБ.Записать();
		КонецЕсли;
	Иначе
		Если ПользовательИБ.Роли.Содержит(РольОткрытие) Тогда
			ПользовательИБ.Роли.Удалить(РольОткрытие);
			ПользовательИБ.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ОчисткаПодсистемыДеньги


Процедура ОчиститьРегистрыСведений(СохранитьСправочники) 
	
	ОчиститьРегистрСведений("Расписания");
	ОчиститьРегистрСведений("ДатыРасписаний");
	ОчиститьРегистрСведений("ПоказателиБюджета");
	
	ОчиститьРегистрСведений("ОбъектыОпераций");
	ОчиститьРегистрСведений("ОперацииШаблонов");
	
	//ОчиститьРегистрСведений("КонтрольОбменаДанными");
	//ОчиститьРегистрСведений("КонтрольТранспортовОбмена");
	ОчиститьРегистрСведений("СостоянияУспешныхОбменовДанными");
	ОчиститьРегистрСведений("СоответствияОбъектовИнформационныхБаз");
	ОчиститьРегистрСведений("ИзмененияОбъектовВоВнешнихПрограммах");
	
	ОчиститьРегистрСведений("СоставСтатейБюджета", Новый Структура("НеОбновлятьПорядокВПоказателях", Истина));
	
	Если СохранитьСправочники Тогда
		
		УдалитьИзРегистровЗаписиДокументов();
		
	Иначе
		
		ОчиститьРегистрСведений("КлючиСтатей");
		ОчиститьРегистрСведений("КлючевыеСловаОбъектов");
		ОчиститьРегистрСведений("ПринадлежностьФайлов");
		ОчиститьРегистрСведений("ПараметрыГрафикаПогашенияДолгов");
		ОчиститьРегистрСведений("НастройкиАналитикиВДокументахПоУмолчанию");
		ОчиститьРегистрСведений("НастройкиАналитикиПоСтатьям");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРегистрСведений(ИмяРегистра, ДополнительныеСвойства = Неопределено) 
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	
	Если ТипЗнч(ДополнительныеСвойства) = Тип("Структура") Тогда
		Для каждого КлючИЗначение Из ДополнительныеСвойства Цикл
			НаборЗаписей.ДополнительныеСвойства.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура УдалитьИзРегистровЗаписиДокументов() 
	
	СписокТипов = Новый Массив;
	Для каждого Документ Из Метаданные.Документы Цикл
		СписокТипов.Добавить(Тип("ДокументСсылка." + Документ.Имя));
	КонецЦикла;
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("СписокТипов", СписокТипов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПринадлежностьФайлов.ВладелецФайла,
	|	ПринадлежностьФайлов.ПрикрепленныйФайл
	|ИЗ
	|	РегистрСведений.ПринадлежностьФайлов КАК ПринадлежностьФайлов
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ПринадлежностьФайлов.ВладелецФайла) В (&СписокТипов)";
	
	ФайлыДляПроверки = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ПрикрепленныйФайл) Тогда
			ФайлыДляПроверки.Добавить(Выборка.ПрикрепленныйФайл);
		КонецЕсли;
		
		Запись = РегистрыСведений.ПринадлежностьФайлов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Удалить();
		
	КонецЦикла;
	
	Если ФайлыДляПроверки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокФайлов", ФайлыДляПроверки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрикрепленныеФайлы.Ссылка,
	|	ПринадлежностьФайлов.ВладелецФайла
	|ИЗ
	|	Справочник.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПринадлежностьФайлов КАК ПринадлежностьФайлов
	|		ПО ПринадлежностьФайлов.ПрикрепленныйФайл = ПрикрепленныеФайлы.Ссылка
	|ГДЕ
	|	ПрикрепленныеФайлы.Ссылка В(&СписокФайлов)
	|	И ПринадлежностьФайлов.ВладелецФайла ЕСТЬ NULL";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			Выборка.Ссылка.ПолучитьОбъект().Удалить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьВсеДокументы() 
	
	Для Каждого Документ Из Метаданные.Документы Цикл
		
		УдалятьДвиженияВручную = Документ.УдалениеДвижений = Метаданные.СвойстваОбъектов.УдалениеДвижений.НеУдалятьАвтоматически;
		
		Выборка = Документы[Документ.Имя].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
			ДокументОбъект.ДополнительныеСвойства.Вставить("НеВосстанавливатьПоследовательность",  Истина);
			Для каждого Набор Из ДокументОбъект.Движения Цикл
				Набор.Записать(Истина);
			КонецЦикла;
			ДокументОбъект.Удалить();
			
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОчиститьВалюты(СохранитьСправочники) 
	
	ОчиститьРегистрСведений("КурсыВалют", Новый Структура("ОтключитьКонтрольПодчиненныхВалют", Истина));
	
	ОставшиесяВалюты = Новый Соответствие;
	Выборка = Справочники.Валюты.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не СохранитьСправочники И СтрНайти("643,840,978,", Выборка.Код + ",") = 0 Тогда
			УдалитьЭлементСправочника(Выборка.Ссылка);
		Иначе
			ОставшиесяВалюты.Вставить(Выборка.Код, Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ОставшиесяВалюты.Вставить("643", ОбновлениеИнформационнойБазыДневник.НайтиСоздатьВалюту("643", "руб.", "Российский рубль", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2", Неопределено));
	ОставшиесяВалюты.Вставить("840", ОбновлениеИнформационнойБазыДневник.НайтиСоздатьВалюту("840", "USD", "Доллар США", "доллар, доллара, долларов, м, цент, цента, центов, м, 2", ОставшиесяВалюты["643"]));
	ОставшиесяВалюты.Вставить("978", ОбновлениеИнформационнойБазыДневник.НайтиСоздатьВалюту("978", "EUR", "Евро", "евро, евро, евро, м, цент, цента, центов, м, 2", ОставшиесяВалюты["643"]));
	
	Для Каждого Валюта Из ОставшиесяВалюты Цикл
		//РаботаСКурсамиВалют.ПроверитьКорректностьКурсаНа01_01_1980(Валюта.Значение, ОставшиесяВалюты["643"]); //+++
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСправочники() 
	
	Запрос = Новый Запрос;
	#Область ТекстЗапроса
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.ВариантыБюджетов КАК Спр
	|ГДЕ
	|	НЕ Спр.Предопределенный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.Долги КАК Спр
	|ГДЕ
	|	НЕ Спр.Предопределенный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.ЗначенияСубконтоАналитика КАК Спр
	|ГДЕ
	|	НЕ Спр.Предопределенный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.Имущество КАК Спр
	|ГДЕ
	|	НЕ Спр.Предопределенный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.Контакты КАК Спр
	|ГДЕ
	|	НЕ Спр.Предопределенный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.СтатьиДоходов КАК Спр
	|ГДЕ
	|	НЕ Спр.Предопределенный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.СтатьиРасходов КАК Спр
	|ГДЕ
	|	НЕ Спр.Предопределенный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.ПрикрепленныеФайлы КАК Спр
	|ГДЕ
	|	НЕ Спр.Предопределенный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.ПравилаЧтенияТабличныхДокументов КАК Спр
	|ГДЕ
	|	НЕ Спр.Предопределенный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.КошелькиИСчета КАК Спр
	|ГДЕ
	|	НЕ Спр.Предопределенный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.ФинансовыеЦели КАК Спр
	|ГДЕ
	|	НЕ Спр.Предопределенный";
	#КонецОбласти 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УдалитьЭлементСправочника(Выборка.Ссылка);
	КонецЦикла;
	
	Справочники.ПравилаЧтенияТабличныхДокументов.ЗаполнитьПредустановленнымиПравилами(Истина);
	
КонецПроцедуры

Процедура УдалитьЭлементСправочника(Элемент) 
	
	СправочникОбъект = Элемент.ПолучитьОбъект();
	СправочникОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	СправочникОбъект.ДополнительныеСвойства.Вставить("НеПроверятьСостояние", Истина);
	СправочникОбъект.ОбменДанными.Загрузка = Истина;
	СправочникОбъект.Удалить();
	
КонецПроцедуры

Процедура ОчиститьКонстантыИНастройки() 
	
	Для каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		ПользовательскиеНастройкиДневникСервер.ЗаписатьОсновнойКошелек(Неопределено, Пользователь.Имя);
		ПользовательскиеНастройкиДневникСервер.ЗаписатьОсновнойКонтакт(Неопределено, Пользователь.Имя);
		ПользовательскиеНастройкиДневникСервер.ЗаписатьОсновноеИмущество(Неопределено, Пользователь.Имя);
	КонецЦикла;
	ПользовательскиеНастройкиДневникСервер.ЗаписатьОсновнойКошелек(Неопределено);
	ПользовательскиеНастройкиДневникСервер.ЗаписатьОсновнойКонтакт(Неопределено);
	ПользовательскиеНастройкиДневникСервер.ЗаписатьОсновноеИмущество(Неопределено);
	
	МенеджерКонстанты = Константы.ОсновнойКошелек.СоздатьМенеджерЗначения();
	МенеджерКонстанты.ОбменДанными.Загрузка = Истина;
	МенеджерКонстанты.Значение = Неопределено;
	МенеджерКонстанты.Записать();
	
	МенеджерКонстанты = Константы.ОсновнойВариантБюджета.СоздатьМенеджерЗначения();
	МенеджерКонстанты.ОбменДанными.Загрузка = Истина;
	МенеджерКонстанты.Значение = Справочники.ВариантыБюджетов.БазовыйВариант;
	МенеджерКонстанты.Записать();
	
КонецПроцедуры

Процедура ОчиститьПланОбмена() 
	
	// Узлы из плана обмена не удаляются, т.к. очистка базы может быть вызвана первой синхронизацией с одним из узлов
	//только обнуляются номера полученых и отправленных пакетов
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МобильноеПриложение.Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|ГДЕ
	|	НЕ МобильноеПриложение.ЭтотУзел";
	
	СписокУзлов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если СписокУзлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Узел Из СписокУзлов Цикл
		
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел);
		
		УзелОбъект = Узел.ПолучитьОбъект();
		Если УзелОбъект.ПометкаУдаления Тогда
			УзелОбъект.Удалить();
		Иначе
			УзелОбъект.НомерПринятого = 0;
			УзелОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
 

#КонецОбласти 


#КонецОбласти


