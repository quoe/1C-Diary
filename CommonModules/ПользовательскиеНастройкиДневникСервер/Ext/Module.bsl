////////////////////////////////////////////////////////////////////////////////
// ПользовательскиеНастройкиДеньгиСервер - управление пользовательскими настройками
//  
//  * Чтение пользовательских настроек
//  * Запись пользовательских настроек
//  
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
//  * Чтение пользовательских настроек

// Считывает, проверяет и возвращает значение одноименной настройки
//
//Параметры:
//	ИмяПользователя - Строка - пользователь, для которого считываются настройки (по умолчанию - пусто)
//
//Возвращаемое значение:
//	Строка - "Бюджет", "Операции", "Календарь" или "Накопления"
//
Функция ПриЗапускеОткрыватьРаздел(ИмяПользователя = "") Экспорт

	ИмяПользователя= ?(ЗначениеЗаполнено(ИмяПользователя), ИмяПользователя, ИмяПользователя());
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбщиеНастройкиПользователя",
		"ПриЗапускеОткрыватьРаздел",
		Неопределено,
		Неопределено,
		ИмяПользователя);
		
	Если Результат = Неопределено Тогда
		Результат = "";
		ЗаписатьПриЗапускеОткрыватьРаздел(Результат, ИмяПользователя);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

// Считывает, проверяет и возвращает значение одноименной настройки
//
//Параметры:
//	ИмяПользователя - Строка - пользователь, для которого считываются настройки (по умолчанию - пусто)
//
//Возвращаемое значение:
//	СправочникСсылка.КошелькиИСчета
//
Функция ОсновнойКошелек(ИмяПользователя = "") Экспорт

	ИмяПользователя= ?(ЗначениеЗаполнено(ИмяПользователя), ИмяПользователя, ИмяПользователя());
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ЗначенияПоУмолчанию",
		"ОсновнойКошелек",
		Неопределено,
		Неопределено,
		ИмяПользователя);
		
	Если Результат = Неопределено Тогда
		Результат = Константы.ОсновнойКошелек.Получить();
		ЗаписатьОсновнойКошелек(Результат, ИмяПользователя);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

// Считывает, проверяет и возвращает значение одноименной настройки
//
//Параметры:
//	ИмяПользователя - Строка - пользователь, для которого считываются настройки (по умолчанию - пусто)
//
//Возвращаемое значение:
//	СправочникСсылка.Контакты
//
Функция ОсновнойКонтакт(ИмяПользователя = "") Экспорт

	ИмяПользователя= ?(ЗначениеЗаполнено(ИмяПользователя), ИмяПользователя, ИмяПользователя());
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ЗначенияПоУмолчанию",
		"ОсновнойКонтакт",
		Неопределено,
		Неопределено,
		?(ЗначениеЗаполнено(ИмяПользователя), ИмяПользователя, ИмяПользователя()));
		
	Если Результат = Неопределено Тогда
		Результат = Справочники.Контакты.ПустаяСсылка();
		ЗаписатьОсновнойКонтакт(Результат, ?(ЗначениеЗаполнено(ИмяПользователя), ИмяПользователя, ИмяПользователя()));
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

// Считывает, проверяет и возвращает значение одноименной настройки
//
//Параметры:
//	ИмяПользователя - Строка - пользователь, для которого считываются настройки (по умолчанию - пусто)
//
//Возвращаемое значение:
//	СправочникСсылка.Имущество
//
Функция ОсновноеИмущество(ИмяПользователя = "") Экспорт

	ИмяПользователя= ?(ЗначениеЗаполнено(ИмяПользователя), ИмяПользователя, ИмяПользователя());
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ЗначенияПоУмолчанию",
		"ОсновноеИмущество",
		Неопределено,
		Неопределено,
		ИмяПользователя);
		
	Если Результат = Неопределено Тогда
		Результат = Справочники.Имущество.ПустаяСсылка();
		ЗаписатьОсновноеИмущество(Результат, ИмяПользователя);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

// Считывает, проверяет и возвращает значение одноименной настройки
//
//Параметры:
//	ИмяПользователя - Строка - пользователь, для которого считываются настройки (по умолчанию - пусто)
//
//Возвращаемое значение:
//	Число - 0:режим открытия свободный, 1:блокировать владельца
//
Функция СпособОткрытияФорм(ИмяПользователя = "") Экспорт

	ИмяПользователя= ?(ЗначениеЗаполнено(ИмяПользователя), ИмяПользователя, ИмяПользователя());
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбщиеНастройкиПользователя",
		"СпособОткрытияФорм",
		Неопределено,
		Неопределено,
		ИмяПользователя);
		
	Если Результат = Неопределено Тогда
		Результат = 1;
		ЗаписатьСпособОткрытияФорм(Результат, ИмяПользователя);
	КонецЕсли; 

	Возврат Результат;

КонецФункции

// Считывает, проверяет и возвращает значение одноименной настройки
//
//Параметры:
//	ИмяПользователя - Строка - пользователь, для которого считываются настройки (по умолчанию - пусто)
//
//Возвращаемое значение:
//	Число - 0:режим открытия свободный, 1:блокировать владельца
//
Функция ТипДатыНовойОперации(ИмяПользователя = "") Экспорт

	ИмяПользователя= ?(ЗначениеЗаполнено(ИмяПользователя), ИмяПользователя, ИмяПользователя());
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбщиеНастройкиПользователя",
		"ТипДатыНовойОперации",
		Неопределено,
		Неопределено,
		ИмяПользователя);
		
	Если Результат = Неопределено Тогда
		Результат = "ТекущаяДата";
		ЗаписатьТипДатыНовойОперации(Результат, ИмяПользователя);
	КонецЕсли; 

	Возврат Результат;

КонецФункции



////////////////////////////////////////////////////////////////////////////////
//  * Запись пользовательских настроек

// Проверяет и записывает значение одноименной настройки
//
//Параметры:
//	ЗначениеНастройки - Булево
//	ИмяПользователя - Строка - пользователь, для которого считываются настройки (по умолчанию - пусто)
//
Процедура ЗаписатьПриЗапускеОткрыватьРаздел(ЗначениеНастройки, ИмяПользователя = "") Экспорт

	ИмяПользователя= ?(ЗначениеЗаполнено(ИмяПользователя), ИмяПользователя, ИмяПользователя());
	
	Если ТипЗнч(ЗначениеНастройки) <> Тип("Строка")
		ИЛИ Найти("ОПЕРАЦИИ,БЮДЖЕТ,НАКОПЛЕНИЯ,КАЛЕНДАРЬ", ВРег(ЗначениеНастройки)) = 0 Тогда
		ЗначениеНастройки = "";
	КонецЕсли; 

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ОбщиеНастройкиПользователя",
		"ПриЗапускеОткрыватьРаздел",
		ЗначениеНастройки,
		Неопределено,
		ИмяПользователя,
		Ложь);
	
КонецПроцедуры

// Проверяет и записывает значение одноименной настройки
//
//Параметры:
//	ЗначениеНастройки - Число - 0:режим открытия свободный, 1:блокировать владельца
//	ИмяПользователя - Строка - пользователь, для которого считываются настройки (по умолчанию - пусто)
//
Процедура ЗаписатьТипДатыНовойОперации(ЗначениеНастройки, ИмяПользователя = "") Экспорт

	ИмяПользователя= ?(ЗначениеЗаполнено(ИмяПользователя), ИмяПользователя, ИмяПользователя());
	
	Если ТипЗнч(ЗначениеНастройки) <> Тип("Строка")
		ИЛИ СтрНайти(Нрег("ТекущаяДата,ИзПоследнейОперации"), НРег(ЗначениеНастройки)) = 0 Тогда
		ЗначениеНастройки = "ТекущаяДата";
	КонецЕсли; 

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ОбщиеНастройкиПользователя",
		"ТипДатыНовойОперации",
		ЗначениеНастройки,
		Неопределено,
		ИмяПользователя,
		Ложь);
	
КонецПроцедуры

// Проверяет и записывает значение одноименной настройки
//
//Параметры:
//	ЗначениеНастройки - Число - 0:режим открытия свободный, 1:блокировать владельца
//	ИмяПользователя - Строка - пользователь, для которого считываются настройки (по умолчанию - пусто)
//
Процедура ЗаписатьСпособОткрытияФорм(ЗначениеНастройки, ИмяПользователя = "") Экспорт

	ИмяПользователя= ?(ЗначениеЗаполнено(ИмяПользователя), ИмяПользователя, ИмяПользователя());
	
	Если ТипЗнч(ЗначениеНастройки) <> Тип("Число")
		ИЛИ ЗначениеНастройки < 0 Или ЗначениеНастройки > 1 Тогда
		ЗначениеНастройки = 1;
	КонецЕсли; 

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ОбщиеНастройкиПользователя",
		"СпособОткрытияФорм",
		ЗначениеНастройки,
		Неопределено,
		ИмяПользователя,
		Ложь);
	
КонецПроцедуры

// Проверяет и записывает значение одноименной настройки
//
//Параметры:
//	ЗначениеНастройки - Булево
//	ИмяПользователя - Строка - пользователь, для которого считываются настройки (по умолчанию - пусто)
//
Процедура ЗаписатьОсновнойКошелек(ЗначениеНастройки, ИмяПользователя = "") Экспорт

	ИмяПользователя= ?(ЗначениеЗаполнено(ИмяПользователя), ИмяПользователя, ИмяПользователя());
	
	Если ТипЗнч(ЗначениеНастройки) <> Тип("СправочникСсылка.КошелькиИСчета")  Тогда
		ЗначениеНастройки = Справочники.КошелькиИСчета.ПустаяСсылка();
	КонецЕсли; 

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ЗначенияПоУмолчанию",
		"ОсновнойКошелек",
		ЗначениеНастройки,
		Неопределено,
		ИмяПользователя,
		Ложь);
		
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		КошелекДляВсехПользователей = Константы.ОсновнойКошелек.Получить();
		Если НЕ ЗначениеЗаполнено(КошелекДляВсехПользователей) Тогда
			Константы.ОсновнойКошелек.Установить(ЗначениеНастройки);
		КонецЕсли; 
	КонецЕсли; 
		
КонецПроцедуры

// Проверяет и записывает значение одноименной настройки
//
//Параметры:
//	ЗначениеНастройки - Булево
//	ИмяПользователя - Строка - пользователь, для которого считываются настройки (по умолчанию - пусто)
//
Процедура ЗаписатьОсновнойКонтакт(ЗначениеНастройки, ИмяПользователя = "") Экспорт

	ИмяПользователя= ?(ЗначениеЗаполнено(ИмяПользователя), ИмяПользователя, ИмяПользователя());
	
	Если ТипЗнч(ЗначениеНастройки) <> Тип("СправочникСсылка.Контакты")  Тогда
		ЗначениеНастройки = Справочники.Контакты.ПустаяСсылка();
	КонецЕсли; 

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ЗначенияПоУмолчанию",
		"ОсновнойКонтакт",
		ЗначениеНастройки,
		Неопределено,
		ИмяПользователя,
		Ложь);
	
КонецПроцедуры

// Проверяет и записывает значение одноименной настройки
//
//Параметры:
//	ЗначениеНастройки - Булево
//	ИмяПользователя - Строка - пользователь, для которого считываются настройки (по умолчанию - пусто)
//
Процедура ЗаписатьОсновноеИмущество(ЗначениеНастройки, ИмяПользователя = "") Экспорт

	ИмяПользователя= ?(ЗначениеЗаполнено(ИмяПользователя), ИмяПользователя, ИмяПользователя());
	
	Если ТипЗнч(ЗначениеНастройки) <> Тип("СправочникСсылка.Имущество")  Тогда
		ЗначениеНастройки = Справочники.Имущество.ПустаяСсылка();
	КонецЕсли; 

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ЗначенияПоУмолчанию",
		"ОсновноеИмущество",
		ЗначениеНастройки,
		Неопределено,
		ИмяПользователя,
		Ложь);
	
КонецПроцедуры



#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//Код процедур и функций
#КонецОбласти


