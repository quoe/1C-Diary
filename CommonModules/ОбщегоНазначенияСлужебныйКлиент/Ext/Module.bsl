////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры и функции общего назначения
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  Контекст - Структура - контекст процедуры:
//      * Оповещение           - ОписаниеОповещения - .
//      * Идентификатор        - Строка             - .
//      * Местоположение       - Строка             - .
//      * Кэшировать           - Булево             - .
//      * ПредложитьУстановить - Булево             - .
//      * ТекстПояснения       - Строка             - .
//
Процедура ПодключитьКомпоненту(Контекст) Экспорт
	
	Если Не МестоположениеКомпонентыКорректно(Контекст.Местоположение) Тогда 
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Некорректное значение параметра Местоположение (%1) 
			     |в ОбщегоНазначенияСлужебныйКлиент.ПодключитьКомпоненту'"), Контекст.Местоположение);
	КонецЕсли;
	
	Если Контекст.Кэшировать Тогда 
		
		// Получение из кэша экземпляра внешней компоненты.
		
		ПодключаемыйМодуль = Неопределено;
		КэшированныеКомпоненты = ПараметрыПриложения["СтандартныеПодсистемы.ВнешниеКомпоненты.КэшированныеКомпоненты"];
		
		Если ТипЗнч(КэшированныеКомпоненты) = Тип("ФиксированноеСоответствие") Тогда
			ПодключаемыйМодуль = КэшированныеКомпоненты.Получить(Контекст.Местоположение);
		КонецЕсли;
		
		Если ПодключаемыйМодуль <> Неопределено Тогда 
			
			Результат = Новый Структура;
			Результат.Вставить("Подключено", Истина);
			Результат.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
			ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СимволическоеИмя = "С" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""); //генерация уникального имени
	Контекст.Вставить("СимволическоеИмя", СимволическоеИмя);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПодключитьКомпонентуЗавершение", ЭтотОбъект, Контекст,
		"ПодключитьКомпонентуЗавершениеПоОшибке", ЭтотОбъект);
	
	НачатьПодключениеВнешнейКомпоненты(Оповещение, Контекст.Местоположение, СимволическоеИмя);

КонецПроцедуры

// Параметры:
//  Контекст - Структура - контекст процедуры:
//      * Оповещение     - ОписаниеОповещения - .
//      * Местоположение - Строка             - .
//      * ТекстПояснения - Строка             - .
//
Процедура УстановитьКомпоненту(Контекст) Экспорт
	
	Если Не МестоположениеКомпонентыКорректно(Контекст.Местоположение) Тогда 
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Некорректное значение параметра Местоположение (%1) 
			     |в ОбщегоНазначенияСлужебныйКлиент.УстановитьКомпоненту'"), Контекст.Местоположение);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьКомпонентуПослеОтветаНаВопросОбУстановке", ЭтотОбъект, Контекст);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстПояснения", Контекст.ТекстПояснения);
	
	ОткрытьФорму("ОбщаяФорма.ВопросОбУстановкеВнешнейКомпоненты", 
		ПараметрыФормы,,,,, Оповещение);
	
КонецПроцедуры

// Параметры:
//  Расширение - Строка - свойство Расширение объекта Файл.
//
Функция ЭтоРасширениеИсполняемогоФайла(Знач Расширение) Экспорт
	
	Расширение = ВРег(Расширение);
	
	// Windows
	Возврат Расширение = ".BAT" // Batch File
		Или Расширение = ".BIN" // Binary Executable
		Или Расширение = ".CMD" // Command Script
		Или Расширение = ".COM" // Приложение MS-DOS
		Или Расширение = ".CPL" // Control Panel Extension
		Или Расширение = ".EXE" // Исполняемый файл
		Или Расширение = ".GADGET" // Binary Executable
		Или Расширение = ".HTA" // HTML Application
		Или Расширение = ".INF1" // Setup Information File
		Или Расширение = ".INS" // Internet Communication Settings
		Или Расширение = ".INX" // InstallShield Compiled Script
		Или Расширение = ".ISU" // InstallShield Uninstaller Script
		Или Расширение = ".JOB" // Windows Task Scheduler Job File
		Или Расширение = ".LNK" // File Shortcut
		Или Расширение = ".MSC" // Microsoft Common Console Document
		Или Расширение = ".MSI" // Windows Installer Package
		Или Расширение = ".MSP" // Windows Installer Patch
		Или Расширение = ".MST" // Windows Installer Setup Transform File
		Или Расширение = ".OTM" // Макрос Microsoft Outlook
		Или Расширение = ".PAF" // Portable Application Installer File
		Или Расширение = ".PIF" // Program Information File
		Или Расширение = ".PS1" // Windows PowerShell Cmdlet
		Или Расширение = ".REG" // Registry Data File
		Или Расширение = ".RGS" // Registry Script
		Или Расширение = ".SCT" // Windows Scriptlet
		Или Расширение = ".SHB" // Windows Document Shortcut
		Или Расширение = ".SHS" // Shell Scrap Object
		Или Расширение = ".U3P" // U3 Smart Application
		Или Расширение = ".VB"  // VBScript File
		Или Расширение = ".VBE" // VBScript Encoded Script
		Или Расширение = ".VBS" // VBScript File
		Или Расширение = ".VBSCRIPT" // Visual Basic Script
		Или Расширение = ".WS"  // Windows Script
		Или Расширение = ".WSF" // Windows Script
	// Linux
		Или Расширение = ".CSH" // C Shell Script
		Или Расширение = ".KSH" // Unix Korn Shell Script
		Или Расширение = ".OUT" // Исполняемый файл
		Или Расширение = ".RUN" // Исполняемый файл
		Или Расширение = ".SH"  // Shell Script
	// MacOS
		Или Расширение = ".ACTION" // Automator Action
		Или Расширение = ".APP" // Исполняемый файл
		Или Расширение = ".COMMAND" // Terminal Command
		Или Расширение = ".OSX" // Исполняемый файл
		Или Расширение = ".WORKFLOW" // Automator Workflow
	// Прочие
		Или Расширение = ".AIR" // Установочный пакет Adobe AIR
		Или Расширение = ".COFFIE" // Сценарий CoffeeScript (JavaScript)
		Или Расширение = ".JAR" // Архив Java
		Или Расширение = ".JS"  // JScript File
		Или Расширение = ".JSE" // JScript Encoded File
		Или Расширение = ".PLX" // Исполняемый файл Perl
		Или Расширение = ".PYC" // Компилированный файл Python
		Или Расширение = ".PYO"; // Оптимизированный код Python
	
КонецФункции

// Проверяет, является ли переданная строка навигационной ссылкой.
//  
// Параметры:
//  Строка - Строка - навигационная ссылка.
//
Функция ЭтоНавигационнаяСсылка(Строка) Экспорт
	
	Возврат СтрНайти(Строка, "e1cib/data/") <> 0             // объект или запись или реквизит информационной базы
		                                                     // или запись таблицы внешнего источника
		Или СтрНайти(Строка, "e1cib/app/") <> 0              // обработка или отчет
		Или СтрНайти(Строка, "e1cib/navigationpoint/") <> 0  // раздел или точка навигации стандартной команды 
		                                                     // или начальная страница
		Или СтрНайти(Строка, "e1cib/command/") <> 0          // команда глобального командного интерфейса
		Или СтрНайти(Строка, "e1cib/list/") <> 0;            // форма списка
		
		// e1cib/tempstorage/ ссылки на временное хранилище запрещены.
	
КонецФункции

// Проверяет, является ли переданная строка веб ссылкой.
// 
// Параметры:
//  Строка - Строка - переданная ссылка.
//
Функция ЭтоВебСсылка(Строка) Экспорт
	
	Возврат СтрНачинаетсяС(Строка, "http://")  // обычное соединение.
		Или СтрНачинаетсяС(Строка, "https://");// защищенное соединение.
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПоказатьВопросОбУстановкеРасширенияРаботыСФайламиПриУстановкеРасширения(Подключено, ДополнительныеПараметры) Экспорт
	
	// Если расширение и так уже подключено, незачем про него спрашивать.
	Если Подключено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение, "ПодключениеНеТребуется");
		Возврат;
	КонецЕсли;
	
	// В веб клиенте под MacOS расширение не доступно.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоMacКлиент = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64);
	Если ЭтоMacКлиент Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение);
		Возврат;
	КонецЕсли;
	
	ИмяПараметра = "СтандартныеПодсистемы.ПредлагатьУстановкуРасширенияРаботыСФайлами";
	ПервоеОбращениеЗаСеанс = ПараметрыПриложения[ИмяПараметра] = Неопределено;
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, ОбщегоНазначенияКлиент.ПредлагатьУстановкуРасширенияРаботыСФайлами());
	КонецЕсли;
	ПредлагатьУстановкуРасширенияРаботыСФайлами	= ПараметрыПриложения[ИмяПараметра] Или ПервоеОбращениеЗаСеанс;
	
	Если ДополнительныеПараметры.ВозможноПродолжениеБезУстановки И Не ПредлагатьУстановкуРасширенияРаботыСФайлами Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстПредложения", ДополнительныеПараметры.ТекстПредложения);
	ПараметрыФормы.Вставить("ВозможноПродолжениеБезУстановки", ДополнительныеПараметры.ВозможноПродолжениеБезУстановки);
	ОткрытьФорму("ОбщаяФорма.ВопросОбУстановкеРасширенияРаботыСФайлами", ПараметрыФормы,,,,,ДополнительныеПараметры.ОписаниеОповещенияЗавершение);
	
КонецПроцедуры

Процедура ПоказатьВопросОбУстановкеРасширенияРаботыСФайламиЗавершение(Действие, ОповещениеОЗакрытии) Экспорт
	
	РасширениеПодключено = (Действие = "РасширениеПодключено" Или Действие = "ПодключениеНеТребуется");
#Если ВебКлиент Тогда
	Если Действие = "БольшеНеПредлагать"
		Или Действие = "РасширениеПодключено" Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
		ПараметрыПриложения["СтандартныеПодсистемы.ПредлагатьУстановкуРасширенияРаботыСФайлами"] = Ложь;
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
			"НастройкиПрограммы/ПредлагатьУстановкуРасширенияРаботыСФайлами", ИдентификаторКлиента, Ложь);
	КонецЕсли;
#КонецЕсли
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗакрытии, РасширениеПодключено);
	
КонецПроцедуры

Процедура ПроверитьРасширениеРаботыСФайламиПодключеноЗавершение(РасширениеПодключено, ДополнительныеПараметры) Экспорт
	
	Если РасширениеПодключено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗакрытии);
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = ДополнительныеПараметры.ТекстПредупреждения;
	Если ПустаяСтрока(ТекстСообщения) Тогда
		ТекстСообщения = НСтр("ru = 'Действие недоступно, так как не установлено расширение для веб-клиента 1С:Предприятие.'")
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

Процедура КомментарийЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	РеквизитФормы = ДополнительныеПараметры.ФормаВладелец;
	
	ПутьКРеквизитуФормы = СтрРазделить(ДополнительныеПараметры.ИмяРеквизита, ".");
	// Если реквизит вида "Объект.Комментарий" и т.п.
	Если ПутьКРеквизитуФормы.Количество() > 1 Тогда
		Для Индекс = 0 По ПутьКРеквизитуФормы.Количество() - 2 Цикл 
			РеквизитФормы = РеквизитФормы[ПутьКРеквизитуФормы[Индекс]];
		КонецЦикла;
	КонецЕсли;	
	
	РеквизитФормы[ПутьКРеквизитуФормы[ПутьКРеквизитуФормы.Количество() - 1]] = ВведенныйТекст;
	ДополнительныеПараметры.ФормаВладелец.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ЗарегистрироватьCOMСоединительЗавершение(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ПропуститьПредупреждениеПередЗавершениемРаботыСистемы", Истина);
		ЗавершитьРаботуСистемы(Истина, Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ПодтвердитьЗакрытиеФормы() Экспорт
	
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Неопределено);
	КонецЕсли;
	
	Параметры = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"];
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"] = Неопределено;
	
	Оповещение = Новый ОписаниеОповещения("ПодтвердитьЗакрытиеФормыЗавершение", ЭтотОбъект, Параметры);
	Если ПустаяСтрока(Параметры.ТекстПредупреждения) Тогда
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
	Иначе
		ТекстВопроса = Параметры.ТекстПредупреждения;
	КонецЕсли;
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,
		КодВозвратаДиалога.Нет);
	
КонецПроцедуры

Процедура ПодтвердитьЗакрытиеФормыЗавершение(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеСохранитьИЗакрыть);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Форма = Параметры.ОповещениеСохранитьИЗакрыть.Модуль;
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();
	Иначе
		Форма = Параметры.ОповещениеСохранитьИЗакрыть.Модуль;
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодтвердитьЗакрытиеПроизвольнойФормы() Экспорт
	
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Неопределено);
	КонецЕсли;
	
	Параметры = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"];
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"] = Неопределено;
	РежимВопроса = РежимДиалогаВопрос.ДаНет;
	
	Оповещение = Новый ОписаниеОповещения("ПодтвердитьЗакрытиеПроизвольнойФормыЗавершение", ЭтотОбъект, Параметры);
	
	ПоказатьВопрос(Оповещение, Параметры.ТекстПредупреждения, РежимВопроса);
	
КонецПроцедуры

Процедура ПодтвердитьЗакрытиеПроизвольнойФормыЗавершение(Ответ, Параметры) Экспорт
	
	Форма = Параметры.Форма;
	Если Ответ = КодВозвратаДиалога.Да
		Или Ответ = КодВозвратаДиалога.ОК Тогда
		Форма[Параметры.ИмяРеквизитаЗакрытьФормуБезПодтверждения] = Истина;
		Если Параметры.ОписаниеОповещенияЗакрыть <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещенияЗакрыть);
		КонецЕсли;
		Форма.Закрыть();
	Иначе
		Форма[Параметры.ИмяРеквизитаЗакрытьФормуБезПодтверждения] = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяОбъектаМетаданных(Тип) Экспорт
	
	ИмяПараметра = "СтандартныеПодсистемы.ИменаОбъектовМетаданных";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Новый Соответствие);
	КонецЕсли;
	ИменаОбъектовМетаданных = ПараметрыПриложения[ИмяПараметра];
	
	Результат = ИменаОбъектовМетаданных[Тип];
	Если Результат = Неопределено Тогда
		Результат = СтандартныеПодсистемыВызовСервера.ИмяОбъектаМетаданных(Тип);
		ИменаОбъектовМетаданных.Вставить(Тип, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция МестоположениеКомпонентыКорректно(Местоположение)
	
	Если СтрНачинаетсяС(Местоположение, "e1cib/") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ШагиПути = СтрРазделить(Местоположение, ".");
	Если ШагиПути.Количество() < 2 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Путь = Новый Структура;
	Попытка
		Для каждого ШагПути Из ШагиПути Цикл 
			Путь.Вставить(ШагПути);
		КонецЦикла;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#Область ПодключениеВнешнейКомпоненты

// Продолжение процедуры ПодключитьКомпоненту.
Процедура ПодключитьКомпонентуЗавершение(Подключено, Контекст) Экспорт 
	
	ПодключаемыйМодуль = Неопределено;
	
	Результат = Новый Структура;
	Результат.Вставить("Подключено", Подключено);
	
	Если Не Подключено Тогда 
		
		Если Контекст.ПредложитьУстановить Тогда 
		
			ПодключитьКомпонентуНачатьУстановку(Контекст);
			Возврат;
			
		КонецЕсли;
		
		Результат.Вставить("ОписаниеОшибки", НСтр("ru = 'Ошибка при подключении внешней компоненты'"));
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		Если Контекст.ИдентификаторыСозданияОбъектов.Количество() = 0 Тогда 
			
			ПодключаемыйМодуль = Новый("AddIn." + Контекст.СимволическоеИмя + "." + Контекст.Идентификатор);
			
			Если ПодключаемыйМодуль = Неопределено Тогда 
				ВызватьИсключение НСтр("ru = 'Ошибка при создании экземпляра внешней компоненты'");
			КонецЕсли;
			
		Иначе 
			
			ПодключаемыеМодули = Новый Соответствие;
			Для каждого Идентификатор Из Контекст.ИдентификаторыСозданияОбъектов Цикл 
				
				ПодключаемыйМодуль = Новый("AddIn." + Контекст.СимволическоеИмя + "." + Идентификатор);
				
				Если ПодключаемыйМодуль = Неопределено Тогда 
					ВызватьИсключение НСтр("ru = 'Ошибка при создании экземпляра внешней компоненты'");
				КонецЕсли;
				
				ПодключаемыеМодули.Вставить(Идентификатор, ПодключаемыйМодуль);
				
			КонецЦикла;
			
			ПодключаемыйМодуль = Новый ФиксированноеСоответствие(ПодключаемыеМодули);
			
		КонецЕсли;
		
	Исключение
		Результат.Вставить("Подключено"    , Ложь);
		Результат.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если Контекст.Кэшировать Тогда 
		
		// Помещение в кэш экземпляра внешней компоненты.
		
		Соответствие = Новый Соответствие;
		КэшированныеКомпоненты = ПараметрыПриложения["СтандартныеПодсистемы.ВнешниеКомпоненты.КэшированныеКомпоненты"];
		Если ТипЗнч(КэшированныеКомпоненты) = Тип("ФиксированноеСоответствие") Тогда
			Для Каждого Элемент Из КэшированныеКомпоненты Цикл
				Соответствие.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Соответствие.Вставить(Контекст.Местоположение, ПодключаемыйМодуль);
		
		ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ВнешниеКомпоненты.КэшированныеКомпоненты",
			Новый ФиксированноеСоответствие(Соответствие));
		
	КонецЕсли;
	
	Результат.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры

// Продолжение процедуры ПодключитьКомпоненту.
Процедура ПодключитьКомпонентуНачатьУстановку(Контекст)
	
	Оповещение = Новый ОписаниеОповещения(
		"ПодключитьКомпонентуПослеУстановки", ЭтотОбъект, Контекст);
	
	КонтекстУстановки = Новый Структура;
	КонтекстУстановки.Вставить("Оповещение"    , Оповещение);
	КонтекстУстановки.Вставить("Местоположение", Контекст.Местоположение);
	КонтекстУстановки.Вставить("ТекстПояснения", Контекст.ТекстПояснения);
	
	УстановитьКомпоненту(КонтекстУстановки);
	
КонецПроцедуры

// Продолжение процедуры ПодключитьКомпоненту.
Процедура ПодключитьКомпонентуПослеУстановки(Результат, Контекст) Экспорт 
	
	Если Не Результат.Установлено Тогда 
		
		РезультатПодключения = Новый Структура;
		РезультатПодключения.Вставить("Подключено"    , Ложь);
		РезультатПодключения.Вставить("ОписаниеОшибки", Результат.ОписаниеОшибки);
		
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, РезультатПодключения);
		Возврат;
		
	КонецЕсли;
	
	Контекст.ПредложитьУстановить = Ложь; // Одна попытка установки уже прошла.
	ПодключитьКомпоненту(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПодключитьКомпоненту.
Процедура ПодключитьКомпонентуЗавершениеПоОшибке(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Результат = Новый Структура;
	Результат.Вставить("Подключено"    , Ложь);
	Результат.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаВнешнейКомпоненты

// Продолжение процедуры УстановитьКомпоненту.
Процедура УстановитьКомпонентуПослеОтветаНаВопросОбУстановке(Ответ, Контекст) Экспорт
	
	// Результат: 
	// - КодВозвратаДиалога.Да - Установить.
	// - КодВозвратаДиалога.Отмена - Отклонить.
	// - Неопределено - Закрыто окно.
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьКомпонентуНачатьУстановку(Контекст);
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("Установлено"   , Ложь);
		Результат.Вставить("ОписаниеОшибки", "");
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры УстановитьКомпоненту.
Процедура УстановитьКомпонентуНачатьУстановку(Контекст)
	
	Если Не МестоположениеКомпонентыКорректно(Контекст.Местоположение) Тогда 
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Некорректное значение параметра Местоположение (%1) 
			     |в ОбщегоНазначенияСлужебныйКлиент.УстановитьКомпонентуНачатьУстановку'"), Контекст.Местоположение);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьКомпонентуЗавершение", ЭтотОбъект, Контекст,
		"УстановитьКомпонентуЗавершениеПоОшибке", ЭтотОбъект);
	
	// Если компонента была ранее подключена, то выдается интерактивное сообщение платформой вместо исключения.
	// Скорее всего ошибка платформы.
	
	НачатьУстановкуВнешнейКомпоненты(Оповещение, Контекст.Местоположение);
	
КонецПроцедуры

// Продолжение процедуры УстановитьКомпоненту.
Процедура УстановитьКомпонентуЗавершение(Контекст) Экспорт 
	
	Результат = Новый Структура;
	Результат.Вставить("Установлено", Истина);
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры

// Продолжение процедуры УстановитьКомпоненту.
Процедура УстановитьКомпонентуЗавершениеПоОшибке(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Результат = Новый Структура;
	Результат.Вставить("Установлено"   , Ложь);
	Результат.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ОткрытьПроводник

// Продолжение процедуры ОбщегоНазначенияКлиент.ОткрытьПроводник.
Процедура ОткрытьПроводникПослеПроверкиРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	
	ФайлИнфо = Контекст.ФайлИнфо;
	
	Если РасширениеПодключено Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьПроводникПослеПроверкиСуществования", ЭтотОбъект, Контекст);
		ФайлИнфо.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Расширение для работы с файлами не установлено, открытие папки не возможно.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбщегоНазначенияКлиент.ОткрытьПроводник.
Процедура ОткрытьПроводникПослеПроверкиСуществования(Существует, Контекст) Экспорт 
	
	ФайлИнфо = Контекст.ФайлИнфо;
	
	Если Существует Тогда 
		Оповещение = Новый ОписаниеОповещения("ОткрытьПроводникПослеПроверкиЭтоФайл", ЭтотОбъект, Контекст);
		ФайлИнфо.НачатьПроверкуЭтоФайл(Оповещение);
	Иначе 
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдена папка, которую требуется открыть в проводнике:
			           |%1'"),
			ФайлИнфо.ПолноеИмя);
		ПоказатьПредупреждение(, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбщегоНазначенияКлиент.ОткрытьПроводник.
Процедура ОткрытьПроводникПослеПроверкиЭтоФайл(ЭтоФайл, Контекст) Экспорт 
	
	ФайлИнфо = Контекст.ФайлИнфо;
	
	Если ТипЗнч(ФайлИнфо) <> Тип("Файл") Тогда 
		ВызватьИсключение НСтр("ru = 'ОткрытьПроводник: Ошибка контекста исполнения.'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьПроводникПослеОткрытияКаталога", ЭтотОбъект);
	Если ЭтоФайл Тогда
		Если ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
			НачатьЗапускПриложения(Оповещение, "explorer.exe /select, """ + ФайлИнфо.ПолноеИмя + """");
		Иначе // Это Linux или MacOS.
			НачатьЗапускПриложения(Оповещение, "file:///" + ФайлИнфо.Путь);
		КонецЕсли;
	Иначе // Это каталог.
		НачатьЗапускПриложения(Оповещение, "file:///" + ФайлИнфо.ПолноеИмя);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбщегоНазначенияКлиент.ОткрытьПроводник.
Процедура ОткрытьПроводникПослеОткрытияКаталога(КодВозврата, Контекст) Экспорт 
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОткрытьСсылку

// Продолжение процедуры ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку.
Процедура ОткрытьНавигационнуюСсылкуПослеПроверкиРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	
	Если РасширениеПодключено Тогда
		
		НавигационнаяСсылка = Контекст.НавигационнаяСсылка;
		
		Если ЭтоСсылкаНаФайл(НавигационнаяСсылка) Тогда 
			ВызватьИсключение НСтр("ru = 'Недопустимо значение параметра НавигационнаяСсылка.
			                             |Протокол (file:) запрещен.'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьНавигационнуюСсылкуПослеЗапускаПриложения", ЭтотОбъект, Контекст,
			"ОткрытьНавигационнуюСсылкуПриОбработкеОшибки", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение, НавигационнаяСсылка);
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Расширение для работы с файлами не установлено, переход по ссылке невозможен.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Оповещение = Контекст.Оповещение;
		
		Если Оповещение <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку.
Процедура ОткрытьНавигационнуюСсылкуПослеЗапускаПриложения(КодВозврата, Контекст) Экспорт 
	
	Оповещение = Контекст.Оповещение;
	
	Если Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку.
Процедура ОткрытьНавигационнуюСсылкуПриОбработкеОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Контекст.Оповещение;
	
	Если Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, является ли переданная строка ссылкой на файл.
// 
// Параметры:
//  Строка - Строка - переданная ссылка.
//
Функция ЭтоСсылкаНаФайл(Строка)
	
	Возврат СтрНачинаетсяС(Строка, "file://");
	
КонецФункции

#КонецОбласти

#КонецОбласти