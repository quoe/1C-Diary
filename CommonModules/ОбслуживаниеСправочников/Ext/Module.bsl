////////////////////////////////////////////////////////////////////////////////
// Общий модуль ОбслуживаниеСправочников: 
//	* обработка событий объектов справочников
//	* контроль актуальности элементов в иерархических справочниках
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик собятия ПередЗаписью объектов справочников, контролирующий изменение  реквизитов предопределеных элементов справочников
//
//Параметры:
//	Источник - СправочникОбъект - записываемый элемент справочника
//	Отказ - Булево - стандартный параметр события ПередЗаписью элемента справочника
//	
Процедура ПроверкаИзмененияПредопределенныхЭлементовПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
		ИЛИ (Источник.ДополнительныеСвойства.Свойство("НеПроверятьСостояние") И Источник.ДополнительныеСвойства.НеПроверятьСостояние = Истина)
		ИЛИ НЕ Источник.Предопределенный
		ИЛИ Источник.Ссылка.Пустая() Тогда 
		Возврат; 
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("СправочникОбъект.ФинансовыеЦели") Тогда
		// Нельзя изменять Наименование, Сумму, Срок, Приоритет
		Если Источник.Наименование <> Источник.Ссылка.Наименование
			ИЛИ Источник.Сумма <> Источник.Ссылка.Сумма
			ИЛИ Источник.Срок <> Источник.Ссылка.Срок
			ИЛИ Источник.РеквизитДопУпорядочивания <> Источник.Ссылка.РеквизитДопУпорядочивания Тогда
			Отказ = Истина;
			ВызватьИсключение НСтр("ru = 'Изменять Наименование, Сумму, Срок, Приоритет 
											|предопределенной финансовой цели нельзя'"); 
		КонецЕсли;
		
	ИначеЕсли ТипИсточника <> Тип("СправочникОбъект.ВариантыБюджетов")
		И ТипИсточника <> Тип("СправочникОбъект.Контакты")
		Тогда
		
		// Нельзя изменять Наименование
		Если Источник.Наименование <> Источник.Ссылка.Наименование Тогда
			Отказ = Истина;
			ВызватьИсключение НСтр("ru = 'Изменять наименование предопределенного элемента нельзя'"); 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПередУдалениемСправочника. 
//	Проверяет и вычищает вспомогательные ссылки, которые создавались программно, без участия 
//	пользователя или к которым пользователь не имеет непосредственного доступа
//
//
Процедура ПередУдалениемСправочника(Источник, Отказ) Экспорт

	
	ТипИсточника = ТипЗнч(Источник.Ссылка);
	
	// Проверяем и очищаем ссылки на значения аналитики
	Если Метаданные.ПланыВидовХарактеристик.ВидыАналитик.Тип.СодержитТип(ТипИсточника) Тогда
		УдалитьСсылкуИзНабораАналитики(Источник.Ссылка, Отказ, Ложь);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 

	// Проверяем и очищаем ссылки на виды субконто
	Если Метаданные.ПланыВидовХарактеристик.ВидыСубконто.Тип.СодержитТип(ТипИсточника) 
		Или Метаданные.ОпределяемыеТипы.СтатьяБюджета.Тип.СодержитТип(ТипИсточника) Тогда
		УдалитьСсылкуИзЗначенийСубконто(Источник.Ссылка, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 

	// Удаляем ссылки в структуре статей бюджета
	Если Метаданные.ОпределяемыеТипы.СтатьяБюджета.Тип.СодержитТип(ТипИсточника) Тогда
		УдалитьСсылкуИзКлючейСтатейБюджета(Источник.Ссылка, Отказ);
	КонецЕсли;
	
	// Уникальные проверки для разных видов справочников
	Если ТипИсточника = Тип("СправочникСсылка.Долги") Тогда
		
		УдалитьПараметрыПогашенияДолга(Источник.Ссылка, Отказ);
		
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка.ФинансовыеЦели") Тогда
		
		УдалитьИспользованиеФинансовыхЦелей(Источник.Ссылка, Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик собятия ПередЗаписью объектов справочников, обеспечивающий согласованное состояние 
//	элемента справочника, его подчиненных и родительских элементов. 
//	  - Каждый элемент или группа справочника имеют три состояния: Активный, Неактивный, Помеченный на удаление
//	  - Помеченный на удаление элемент не может быть активным
//	  - Неактивный элемент не может иметь активные подчиненые элементы
//	  - Группа не может быть неактивной, если в ней содержатся активные элементы
//
//Параметры:
//	Объект - СправочникОбъект - записываемый элемент справочника
//	Отказ - Булево - стандартный параметр события ПередЗаписью элемента справочника
//	
Процедура ПередЗаписьюОбъектовИерархическихСправочников(Объект, Отказ) Экспорт

	// Контроль активности и пометки удаления не осуществляется для загружаемых объектов 
	// и в случаях, когда в дополнительных свойствах установлен флаг "НеПроверятьСостояние"
	Если Отказ Или Объект.ОбменДанными.Загрузка Или Объект.Предопределенный
		Или Объект.ДополнительныеСвойства.Свойство("НеПроверятьСостояние") 
			И Объект.ДополнительныеСвойства.НеПроверятьСостояние = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	Если Объект.ЭтоНовый() Тогда
		ПометкаУдаленияДоЗаписи = Объект.ПометкаУдаления;
		АктивностьДоЗаписи      = Объект.Активность;
		НаименованиеДоЗаписи    = Объект.Наименование;
	Иначе
		ПометкаУдаленияДоЗаписи = Объект.Ссылка.ПометкаУдаления;
		АктивностьДоЗаписи      = Объект.Ссылка.Активность;
		НаименованиеДоЗаписи    = Объект.Ссылка.Наименование;
	КонецЕсли; 
	
	ИзмениласьПометка      = Объект.ПометкаУдаления <> ПометкаУдаленияДоЗаписи;
	ИзмениласьАктивность   = Объект.Активность <> АктивностьДоЗаписи;
	ЗаполнятьИнфоПоля      = ТипЗнч(Объект) = Тип("СправочникОбъект.КошелькиИСчета");
	
	МетаданныеОбъекта       = Объект.Метаданные();
	
	// Проверяем дубли наименований с учетом родителя
	Если НаименованиеИспользуетсяДругимЭлементом(Объект.Наименование, Объект.Ссылка, 
									?(МетаданныеОбъекта.Иерархический, Объект.Родитель, Неопределено)) Тогда
		
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Наименование ""%1"" используется в другом элементе справочника ""%2"".
			|Измените наименование и повторите попытку.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстСообщения = СтрШаблон(ТекстСообщения, Объект.Наименование, МетаданныеОбъекта.Синоним);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(?(Объект.Ссылка.Пустая(), "Данные.Добавление", "Данные.Изменение"), УровеньЖурналаРегистрации.Ошибка,
					МетаданныеОбъекта, Объект.Ссылка, ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	// Проверяем изменение пометки на удаление:
	Если ИзмениласьПометка Тогда
		Объект.Активность    = ?(Объект.ПометкаУдаления, Ложь, Объект.Активность);
		ИзмениласьАктивность = Объект.Активность <> АктивностьДоЗаписи;
	Иначе
		// Проверяем изменение активности
		Если Объект.Активность И НЕ АктивностьДоЗаписи И Объект.ПометкаУдаления Тогда
			Объект.ПометкаУдаления = Ложь;
			ИзмениласьПометка      = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	НеРегистрироватьВОбмене = Объект.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов"); 
	
	// Проверяем подчиненные элементы
	КонтролироватьПодчиненные = МетаданныеОбъекта.Иерархический 
			И МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов ИЛИ Объект.ЭтоГруппа;
	
	Если КонтролироватьПодчиненные И (ИзмениласьПометка
		ИЛИ ИзмениласьАктивность) Тогда
		Если НЕ ОбновитьАктивностьПодчиненныхЭлементов(Объект.Ссылка, Объект.Активность, ИзмениласьАктивность, Объект.ПометкаУдаления, ИзмениласьПометка, НеРегистрироватьВОбмене, ЗаполнятьИнфоПоля) Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Элемент справочника не записан, т.к. не удалось обновить подчиненные элементы.
				|Закройте другие элементы этого справочника и повторите попытку.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ЗаписьЖурналаРегистрации(?(Объект.Ссылка.Пустая(), "Данные.Добавление", "Данные.Изменение"), УровеньЖурналаРегистрации.Ошибка,
					МетаданныеОбъекта, Объект.Ссылка, ТекстСообщения);
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	// Заполняем информационные поля объекта
	Если ЗаполнятьИнфоПоля Тогда
		Объект.ЗаполнитьИнформационныеПоля();
	КонецЕсли;
	
	// Проверяем родительские элементы
	КонтролироватьРодителей = МетаданныеОбъекта.Иерархический И ЗначениеЗаполнено(Объект.Родитель);
	
	Если КонтролироватьРодителей Тогда
		
		// Родителей обновляем только если родитель неактивен, а сохраняемый элемент - активен,
		// а так же при необходимости обновить информационные поля родителей
		Если (НЕ Объект.Родитель.Активность И Объект.Активность 
				ИЛИ Объект.Родитель.ПометкаУдаления И НЕ Объект.ПометкаУдаления)
				ИЛИ ЗаполнятьИнфоПоля Тогда
			
			Если НЕ ОбновитьСостояниеРодителейЭлемента(Объект, Объект.Активность, НеРегистрироватьВОбмене, ЗаполнятьИнфоПоля) Тогда
				Отказ = Истина;
				ТекстСообщения = НСтр("ru = 'Элемент справочника не записан, т.к. не удалось обновить его родительские элементы.
					|Закройте формы других элементов этого справочника и повторите попытку.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()); 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ЗаписьЖурналаРегистрации(?(Объект.Ссылка.Пустая(), "Данные.Добавление", "Данные.Изменение"), УровеньЖурналаРегистрации.Ошибка,
					МетаданныеОбъекта, Объект.Ссылка, ТекстСообщения);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие стандартных (общих для всех справочников) полей отбора
//Используется в обработчкиах события ОбработкаПолученияДанныхВыбора() справочников и планов видов характеристик
//
// Для тех реквизитов, где это поведение нужно изменить, следует явно установить свойства «Параметры выбора» и «Связи параметров выбора» 
// с необходимыми в конкретном контексте значениями выбора:
//   - если требуется выбирать неактивные элементы, указываем в свойстве реквизита «Параметры выбора» значение Отбор.Активность(Ложь),
//   - а если не требуется ограничивать выбор вообще, то оба значения - Истина и Ложь в фиксированном массиве.
//
//Параметры:
//	Параметры - Структура - параметры, в которой проверяется вложенная структура "Отбор"
//	ПарметрыИзменены - Булево - сигнализирует, что в процессе проверки параметры отбора изменились
//
Процедура ПроверитьСтандартныеПараметрыОтбора(Параметры, ПараметрыИзменены = Ложь) Экспорт
	
	Если Не Параметры.Свойство("Отбор") Тогда
		Параметры.Вставить("Отбор", Новый Структура);
	КонецЕсли;
	
	Если Не Параметры.Отбор.Свойство("Активность") Тогда
		Параметры.Отбор.Вставить("Активность", Истина);
		ПараметрыИзменены = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет расширенную обработку получения данных выбора, если такая обработка настроена в 
//параметрах.
//	Параметры полностью соответствуют параметрам события ОбработкаПолученияДанныхВыбора() из менеджера справочников.
//
//Параметры:
//	ДанныеВыбора - СписокЗначений - содержит выбранные значения, (подрбоней в синтаксис-помощнике)
//	Параметры - Структура - содержит параметры выбора (подрбоней в синтаксис-помощнике). 
//				Если для поля настроен расширенный выбор значений, в параметрах должна быть вложенная структура
//				"РасширенныйВыбор" следующего содержания:
//					* РасширенныйВыбор.Разрешить - булево - разрешает или запрещает использование расширенного выбора
//					* РасширенныйВыбор.ИсточникиДанных - фиксированный Массив - имена справочников, из которых делается выбор
//					* РасширенныйВыбор.ОтборыПоИсточникам - фиксированный Массив - строковое представление условий, которые нужно добавить к тексту запроса для каждого источника данных
//					* РасширенныйВыбор.РазрешитьБыстроеСоздание - Булево - рарешить ли создание без открытия формы объекта
//					* РасширенныйВыбор.МаксимальноеКоличествоЭлементов - Число - сколько элементов допускается в списке?
//					* РасширенныйВыбор.Параметры - Структура - содержит параметры, которые нужно установить в запросе. Эти параметры могут использоваться в строках условий
//
Процедура ВыполнитьРасширенноеПолучениеДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	РасширенныйВыбор = Неопределено;
	Если Не Параметры.Свойство("РасширенныйВыбор", РасширенныйВыбор) 
			Или РасширенныйВыбор.Свойство("Разрешить") И  РасширенныйВыбор.Разрешить <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем все настройки расширенного выбора:
	ИсточникиДанных = Неопределено;
	Если Не РасширенныйВыбор.Свойство("ИсточникиДанных", ИсточникиДанных) Или Не ЗначениеЗаполнено(ИсточникиДанных) Тогда
		// Если не описаны источники, расширенному выбору делать нечего
		Возврат;
	КонецЕсли;
	
	// Определяем строку поиска
	СтрокаПоиска = Неопределено;
	Если Не Параметры.Свойство("СтрокаПоиска", СтрокаПоиска) Или Не ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	//Обрабатываем полученную строку поиска
	// 1. экранируем символ процента
	СтрокаСлов       = СтрЗаменить(СтрокаПоиска, "%", "[%]");
	// 2. раскладываем строку на массив слов
	// слова могут разделяться пробелом или иным знаком препинания
	МассивСловПоиска = СтрРазделить(СтрокаСлов, " ,;.", Ложь);
	Если МассивСловПоиска.Количество() = 0 Тогда
		// В строке поиска только разделители слов
		МассивСловПоиска = Новый Массив;
		МассивСловПоиска.Добавить(СтрокаСлов);
	КонецЕсли;
	
	// 3. оформляем саму строку поиска
	СтрокаПоиска = ВРег(Лев(СтрокаПоиска, 1)) + Сред(СтрокаПоиска,2);
	Параметры.СтрокаПоиска = СтрокаПоиска;
	
	ОтборыПоИсточникам = Неопределено;
	РасширенныйВыбор.Свойство("ОтборыПоИсточникам", ОтборыПоИсточникам);
	
	РазрешитьБыстроеСоздание = Неопределено;
	Если Не РасширенныйВыбор.Свойство("РазрешитьБыстроеСоздание", РазрешитьБыстроеСоздание) Тогда
		РазрешитьБыстроеСоздание = Ложь;
	КонецЕсли;
	
	МаксимальноеКоличествоЭлементов = Неопределено;
	Если Не РасширенныйВыбор.Свойство("МаксимальноеКоличествоЭлементов", МаксимальноеКоличествоЭлементов) Тогда
		МаксимальноеКоличествоЭлементов = 50;
	КонецЕсли;
	
	ВыборГруппИЭлементов = Неопределено;
	Если Не Параметры.Свойство("ВыборГруппИЭлементов", ВыборГруппИЭлементов) Или Не ЗначениеЗаполнено(ВыборГруппИЭлементов) Тогда
		ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	КонецЕсли;
	
	// Отключаем стандартную обработку
	СтандартнаяОбработка = Ложь;

	ДанныеВыбора = Новый СписокЗначений;
	
	// Отбор, настроенный для поля (должен быть универсальным, если используется несколько источников данных)
	ОбщиеПараметрыОтбора = Неопределено;
	Если Не Параметры.Свойство("Отбор", ОбщиеПараметрыОтбора) Тогда
		ОбщиеПараметрыОтбора = Новый Структура;
	КонецЕсли;
	
	// Готовим запрос
	Запрос = Новый Запрос;
	
	// Добавляем параметры по словам поиска:
	Счетчик = 0;
	Для каждого Слово Из МассивСловПоиска Цикл
		Счетчик = Счетчик + 1;
		Запрос.УстановитьПараметр("СтрокаПоиска" + Формат(Счетчик, "ЧДЦ=; ЧРГ=") , "%" + Слово + "%");   // для поиска по подстроке
		Запрос.УстановитьПараметр("СтрокаПоискаСНачала" + Формат(Счетчик, "ЧДЦ=; ЧРГ="), Слово + "%");  // чтобы сначала выбрать элементы, наименование которых начинается с указанной строки
	КонецЦикла;
	
	// Обрабатываем общие условия отбора
	ТекстОбщегоОтбора = "";
	Для каждого КлючИЗначение Из ОбщиеПараметрыОтбора Цикл
		
		ИмяПараметра = "П" + ОбщиеПараметрыОтбора.Количество() + "_" + КлючИЗначение.Ключ;
		ПраваяЧасть = ?(ТипЗнч(КлючИЗначение.Значение) = Тип("ФиксированныйМассив"), " В (%1)", " = %1");
		ПраваяЧасть = СтрЗаменить(ПраваяЧасть, "%1", "&" + ИмяПараметра);
		
		ТекстОбщегоОтбора = ТекстОбщегоОтбора + ?(ТекстОбщегоОтбора = "", "", Символы.ПС + Символы.Таб + Символы.Таб + Символы.Таб + " И ");
		ТекстОбщегоОтбора = ТекстОбщегоОтбора + "Спр." + КлючИЗначение.Ключ + ПраваяЧасть;
		
		Запрос.УстановитьПараметр(ИмяПараметра, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	// Добавляем в запрос параметры улучшенного поля выбора
	ПрочиеПараметрыЗапроса = Неопределено;
	Если Не РасширенныйВыбор.Свойство("Параметры", ПрочиеПараметрыЗапроса) И ТипЗнч(ПрочиеПараметрыЗапроса) = Тип("Структура") Тогда
		
		Для каждого ПараметрЗапроса Из ПрочиеПараметрыЗапроса Цикл
			Запрос.Параметры.Вставить(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	КоличествоПоИСточникам = Окр(МаксимальноеКоличествоЭлементов / ИсточникиДанных.Количество(), 0);
	
	// Формируем текст и команды создания по источникам
	КомандыСоздания = Новый СписокЗначений;
	Для Счетчик = 0 По ИсточникиДанных.Количество() - 1 Цикл
		
		Если ОтборыПоИсточникам = Неопределено Или ОтборыПоИсточникам.Количество() - 1 < Счетчик Тогда
			ОтборПоИсточнику = "";
		Иначе
			ОтборПоИсточнику = ОтборыПоИсточникам[Счетчик];
		КонецЕсли;
		 
		ДобавитьВЗапросТекстПоИсточнику(Запрос, Счетчик, ИсточникиДанных[Счетчик], ОтборПоИсточнику, ТекстОбщегоОтбора, ВыборГруппИЭлементов, КоличествоПоИСточникам, КомандыСоздания, РазрешитьБыстроеСоздание, СтрокаПоиска, МассивСловПоиска);
		
		
	КонецЦикла;
	
	// Упорядочиваем записи:
	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"УПОРЯДОЧИТЬ ПО
	|	Порядок1,
	|	Порядок2,
	|	Наименование";
	
	// Заполняем ДанныеВыбора результатом запроса
	ШрифтСтроки = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста);
	ШрифтПодСтроки = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина);
	ЦветПодстроки   = Новый Цвет(0, 175, 0);
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	ДобавлятьКартинку = ИсточникиДанных.Количество() > 1;
	
	ТипФорматСтроки = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/ui", "FormattedString");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Представление = Выборка.Наименование;
		
		// раскрашиваем подстроки в найденом
		// получаем форматированную строку и сериализуем ее в XDTO
		Представление = Новый ФорматированнаяСтрока(Представление, ШрифтСтроки);
		ОбъектФС = ФабрикаXDTO.Создать(ТипФорматСтроки, Представление);
		ЛексическоеЗначение = ОбъектФС.ЛексическоеЗначение;
		
		// в лексическом значении объекта XDTO заменяем подстановки на строки с оформлением
		КоличествоСлов = МассивСловПоиска.Количество();
		Для Счетчик = 1 По МассивСловПоиска.Количество() Цикл
			
			//добавляем в представление оформление без учета регистра 
			Слово = МассивСловПоиска[Счетчик - 1];
			Слово = СтрЗаменить(Слово, "[%]", "%");
			ДлинаСлова = СтрДлина(Слово);
			КоличествоВхождений = СтрЧислоВхождений(Нрег(ЛексическоеЗначение), НРег(Слово));
			Для СчетчикВхождений = 1 По КоличествоВхождений Цикл
				НачалоСлова = СтрНайти(Нрег(ЛексическоеЗначение), НРег(Слово), НаправлениеПоиска.СНачала, , СчетчикВхождений);
				ЛексическоеЗначение = Лев(ЛексическоеЗначение, НачалоСлова - 1)
						+ "<b><color #00af00>" + Сред(ЛексическоеЗначение, НачалоСлова, ДлинаСлова ) + "</></>"
						+ Сред(ЛексическоеЗначение, НачалоСлова + ДлинаСлова);
			КонецЦикла;
			
		КонецЦикла;
		Представление = ФабрикаXDTO.Создать(ТипФорматСтроки, ЛексическоеЗначение).Значение;
		
		КартинкаЭлемента = ?(ДобавлятьКартинку, РаботаСФормамиДокументовПовтИсп.ПолучитьИконкуПоВидуОбъектаУчета(Выборка.ИмяИсточника), Новый Картинка);
		ДанныеВыбора.Добавить(Выборка.Ссылка, Представление, , КартинкаЭлемента); 
		
	КонецЦикла;
	
	// Добавляем команды
	ШрифтКоманды = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина);
	Для каждого ЭлементСписка Из КомандыСоздания Цикл
		
		ДанныеВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление, , ЭлементСписка.Картинка); 
		
	КонецЦикла;
	 
	
	
КонецПроцедуры

// Обработчик события ПриЗаписи элементов справочников, используемых в качестве статей бюджета
//	Каждому элементу устанавливается уникальный ключ, с помощью которого показатели по этим 
//	справочникам группируются по статьям бюджета.
Процедура РегистрацияИзмененийСтатьиБюджета(Источник, Отказ) Экспорт
	
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Определяем значения для записи в РС КлючиСтатей
	ЗначенияКлюча1     = Новый Структура("РодительскаяСтатья,ТипСтатьи,РодительскаяСтатьяВБюджете,ИсключатьИзБюджета",
			Неопределено, "", Неопределено, Ложь);
	ЗначенияКлюча2     = Неопределено;
	ТипИсточника       = ТипЗнч(Источник);
	
	Если Источник.ДополнительныеСвойства.Свойство("ПрежниеЗначения") Тогда
		ПрежняяАктивность   = Источник.ДополнительныеСвойства.ПрежниеЗначения.Активность;
		ПрежнееНаименование = Источник.ДополнительныеСвойства.ПрежниеЗначения.Наименование;
	Иначе
		ПрежняяАктивность   = Источник.Ссылка.Активность;
		ПрежнееНаименование = Источник.Ссылка.Наименование;
	КонецЕсли;
	ЭтоНовый  = ?(Источник.ДополнительныеСвойства.Свойство("ЭтоНовый"), Источник.ДополнительныеСвойства.ЭтоНовый, Ложь);
	
	// добавить при установке активности
	ДобавлятьСтатью = Источник.Активность И Не ПрежняяАктивность;
	// При снятии активности удаляются
	УдалятьСтатью   = Не ЭтоНовый И Не Источник.Активность И ПрежняяАктивность;
	// При изменении существенных реквизитов перепровести документы
	ПерепроводитьДокументы       = Ложь;
	ПереписыватьОписанияОпераций = Не ЭтоНовый И Источник.Наименование <> ПрежнееНаименование;
	
	Если ТипИсточника = Тип("СправочникОбъект.Долги") Тогда
		
		// проверяем необходимость перепроводить документы
		Если Источник.ДополнительныеСвойства.Свойство("ПрежниеЗначения") Тогда
			ПрежнийИспользоватьДляУчетаВзятыхДолгов   = Источник.ДополнительныеСвойства.ПрежниеЗначения.ИспользоватьДляУчетаВзятыхДолгов;
			ПрежнийИспользоватьДляУчетаВыданныхДолгов = Источник.ДополнительныеСвойства.ПрежниеЗначения.ИспользоватьДляУчетаВыданныхДолгов
		Иначе
			ПрежнийИспользоватьДляУчетаВзятыхДолгов   = Источник.Ссылка.ИспользоватьДляУчетаВзятыхДолгов;
			ПрежнийИспользоватьДляУчетаВыданныхДолгов = Источник.Ссылка.ИспользоватьДляУчетаВыданныхДолгов;
		КонецЕсли;
		ПерепроводитьДокументы = Источник.ИспользоватьДляУчетаВзятыхДолгов <> ПрежнийИспользоватьДляУчетаВзятыхДолгов
				ИЛИ Источник.ИспользоватьДляУчетаВыданныхДолгов <> ПрежнийИспользоватьДляУчетаВыданныхДолгов;
				
		// Заполняем ключи статей бюджета
		Если Источник.ИспользоватьДляУчетаВзятыхДолгов И Источник.ИспользоватьДляУчетаВыданныхДолгов Тогда
			
			ЗначенияКлюча1.ТипСтатьи = "ДолгНам";
			ЗначенияКлюча2  = Новый Структура("РодительскаяСтатья,ТипСтатьи,РодительскаяСтатьяВБюджете,ИсключатьИзБюджета");
			ЗаполнитьЗначенияСвойств(ЗначенияКлюча2, ЗначенияКлюча1, , "ТипСтатьи");
			ЗначенияКлюча2.ТипСтатьи = "НашДолг";
			
		ИначеЕсли Источник.ИспользоватьДляУчетаВзятыхДолгов Тогда

			ЗначенияКлюча1.ТипСтатьи = "НашДолг";
			
		ИначеЕсли Источник.ИспользоватьДляУчетаВыданныхДолгов Тогда

			ЗначенияКлюча1.ТипСтатьи = "ДолгНам";
			
		Иначе
			
			ЗначенияКлюча1.ТипСтатьи = "Долг";
			ЗначенияКлюча1.ИсключатьИзБюджета = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.КошелькиИСчета") Тогда
		
		Если Источник.ДополнительныеСвойства.Свойство("ПрежниеЗначения") Тогда
			ПрежнийТипСчета      = Источник.ДополнительныеСвойства.ПрежниеЗначения.ТипСчета;
			ПрежнийДляНакоплений = Источник.ДополнительныеСвойства.ПрежниеЗначения.ИспользоватьДляНакоплений
		Иначе
			ПрежнийТипСчета      = Источник.Ссылка.ТипСчета;
			ПрежнийДляНакоплений = Источник.Ссылка.ИспользоватьДляНакоплений;
		КонецЕсли;
		
		// добавить новую (или заново активизированную) кредитную карту
		ДобавлятьСтатью = Источник.ТипСчета = Перечисления.ТипыСчетов.БанковскаяКартаКредитная И 
			(ПрежнийТипСчета <> Перечисления.ТипыСчетов.БанковскаяКартаКредитная
				ИЛИ Источник.Активность И Не ПрежняяАктивность);
		// удалить кошелек, переставший быть активной кредитной картой
		УдалятьСтатью = Источник.ТипСчета <> Перечисления.ТипыСчетов.БанковскаяКартаКредитная И 
			ПрежнийТипСчета = Перечисления.ТипыСчетов.БанковскаяКартаКредитная
			ИЛИ Источник.ТипСчета = Перечисления.ТипыСчетов.БанковскаяКартаКредитная 
				И Источник.Активность И Не ПрежняяАктивность;
		
		// Перепроводить, если тип счета сменился с/на кредитные карты или изменилось назначение
		ПерепроводитьДокументы = Источник.ИспользоватьДляНакоплений <> ПрежнийДляНакоплений
			ИЛИ Источник.ТипСчета = Перечисления.ТипыСчетов.БанковскаяКартаКредитная
				И ПрежнийТипСчета <> Перечисления.ТипыСчетов.БанковскаяКартаКредитная 
			ИЛИ ПрежнийТипСчета = Перечисления.ТипыСчетов.БанковскаяКартаКредитная 
				И Источник.ТипСчета <> Перечисления.ТипыСчетов.БанковскаяКартаКредитная;
				
		// Заполняем ключи статей бюджета
		ЗначенияКлюча1.РодительскаяСтатья = Источник.Родитель;
		Если Источник.ЭтоГруппа Или (Источник.ТипСчета <> Перечисления.ТипыСчетов.БанковскаяКартаКредитная) Тогда
			ЗначенияКлюча1.ТипСтатьи = "Кошелек";
			ЗначенияКлюча1.ИсключатьИзБюджета = Истина;
		Иначе
			ЗначенияКлюча1.ТипСтатьи = "КредитнаяКарта";
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.Имущество") Тогда
		
		ДобавлятьСтатью = Ложь;
		УдалятьСтатью   = Ложь;
		
		// Заполняем ключи статей бюджета
		ЗначенияКлюча1.РодительскаяСтатья = Источник.Родитель;
		ЗначенияКлюча1.ТипСтатьи = "Имущество";
		ЗначенияКлюча1.ИсключатьИзБюджета = Истина;
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.СтатьиДоходов") Или ТипИсточника = Тип("СправочникОбъект.СтатьиРасходов") Тогда
		
		// Добавляются только новые статьи верхнего уровня
		ДобавлятьСтатью = ЭтоНовый И Не ЗначениеЗаполнено(Источник.Родитель);
		
		// Заполняем ключи статей бюджета
		ЗначенияКлюча1.РодительскаяСтатья = Источник.Родитель;
		ЗначенияКлюча1.ТипСтатьи = ?(ТипИсточника = Тип("СправочникОбъект.СтатьиДоходов"), "СтатьяДоходов", "СтатьяРасходов");
		ЗначенияКлюча1.РодительскаяСтатьяВБюджете = ?(ЗначениеЗаполнено(ЗначенияКлюча1.РодительскаяСтатья), ЗначенияКлюча1.РодительскаяСтатья, Неопределено);
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.ФинансовыеЦели") Тогда
		
		ДобавлятьСтатью = Ложь;
		
		// Заполняем ключи статей бюджета
		ЗначенияКлюча1.ТипСтатьи = "Финцель";
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.Контакты") Тогда
		
		ДобавлятьСтатью = Ложь;
		УдалятьСтатью   = Ложь;
		
		// Заполняем ключи статей бюджета
		ЗначенияКлюча1.РодительскаяСтатья = Источник.Родитель;
		ЗначенияКлюча1.ТипСтатьи = "Контакт";
		ЗначенияКлюча1.ИсключатьИзБюджета = Истина;
		
	КонецЕсли;
	
	// Обновляем ключи бюджетных статей
	ИзменитьКлючСтатьиБюджетаПоОбъекту(Источник, ЗначенияКлюча1, ЗначенияКлюча2);
	
	// Определим необходимость добавить или удалить раздел бюджета
	Если ТипИсточника = Тип("СправочникОбъект.ФинансовыеЦели") Тогда
		
		Если Источник.Активность И Не ПрежняяАктивность Тогда
			БюджетированиеСервер.ДобавитьРазделВПоказателиБюджета(Источник);
		ИначеЕсли Не Источник.Активность И ПрежняяАктивность Тогда
			БюджетированиеСервер.УдалитьРазделИзПоказателейБюджета(Источник);
		КонецЕсли;
		
	КонецЕсли;
	
	// при необходимости добавим или удалим статьи из показателей бюджетов 
	// текущего и будущих периодов
	Если ДобавлятьСтатью Тогда
		БюджетированиеСервер.ДобавитьСтатьюВПоказателиБюджетов(Источник);
	ИначеЕсли УдалятьСтатью Тогда
		БюджетированиеСервер.УдалитьСтатьюИзПоказателейБюджетов(Источник);
	КонецЕсли;
	
	// при необходимости препроведем документы или изменим 
	// описания операций
	Если ПерепроводитьДокументы Или ПереписыватьОписанияОпераций Тогда
		ПереписатьОперацииПоОбъектуСправочника(Источник, ПерепроводитьДокументы);
	КонецЕсли;
	
КонецПроцедуры

// Изменяет реквизиты и, при необходимости, перепроводит операции, в которых используется указанный в парамтерах кошелек
//	Необходимо выполнять при изменении назначения кошелька и при изменении типа счета с (или на) кредитной карты
//
//Параметры:
//	Кошелек - СправочникСсылка.КошелькиИСчета - кошелек, в котором изменилось назначение или "кредитность"
//	ИзменятьРазделУчета - Булево - признак необходимости изменять раздел учета и финансовую цель
//	НеРегистрироватьВОбмене - Булево - отключает регистрацию изменений в планах обмена
//
Процедура ПереписатьОперацииПоОбъектуСправочника(ОбъектСправочника, Перепроводить) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Элемент", ОбъектСправочника.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыОпераций.Операция,
	|	ТИПЗНАЧЕНИЯ(ОбъектыОпераций.Операция) КАК ТипОперации
	|ИЗ
	|	РегистрСведений.ОбъектыОпераций КАК ОбъектыОпераций
	|ГДЕ
	|	ОбъектыОпераций.ПредметУчета = &Элемент
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыОпераций.Операция
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыОпераций.Операция.Дата,
	|	ОбъектыОпераций.Операция.Ссылка";
	
	ВыборкаОпераций = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОпераций.Следующий() Цикл
		
		ОбъектОперации = ВыборкаОпераций.Операция.ПолучитьОбъект();
		
		// Копируем дополнительные свойства и параметры обмена из объекта-источника
		ОбщегоНазначенияДеньги.СкопироватьДополнительныеПараметрыОбъекта(ОбъектОперации, ОбъектСправочника);
		Если ОбъектОперации.ДополнительныеСвойства.Свойство("УдалятьРегистрацию") И ОбъектОперации.ДополнительныеСвойства.УдалятьРегистрацию Тогда
			УдалятьРегистрацию = Не ПланыОбмена.ИзменениеЗарегистрировано(ОбъектОперации.ДополнительныеСвойства.УзелКорреспондента, ОбъектОперации);
		Иначе
			УдалятьРегистрацию = Ложь;
		КонецЕсли;
		
		// Устанавливаем запрет на обработку последовательности, т.к. перепроводятся все документы в хронологическом порядке
		ОбъектОперации.ДополнительныеСвойства.Вставить("НеВосстанавливатьПоследовательность", Истина);
		
		РежимЗаписи = ?(Перепроводить И ОбъектОперации.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ОбъектОперации.Записать(РежимЗаписи);
		
		Если УдалятьРегистрацию Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(ОбъектОперации.ДополнительныеСвойства.УзелКорреспондента, ОбъектОперации)
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры



// Проверяет и по возможности удаляет ссылку из табличной части справочника ЗначенияСубконтоАналитика.
//	Удаление возможно только для тех наборов аналитики, которые не используются в документах, не помеченных на удаление.
//	Если элемент справочника ЗначенияСубконтоАналитика присутствует в документе, не помеченном на удаление, 
//	параметру Отказ устанавливается значение Истина
Процедура УдалитьСсылкуИзНабораАналитики(Ссылка, Отказ, ОчищатьСсылкиВДокументах) Экспорт 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
#Область ТекстЗапроса	
	"ВЫБРАТЬ
	|	НаборыЗначений.Ссылка
	|ПОМЕСТИТЬ Контейнеры
	|ИЗ
	|	Справочник.ЗначенияСубконтоАналитика.ВидыИЗначенияАналитики КАК НаборыЗначений
	|ГДЕ
	|	НаборыЗначений.ЗначениеАналитики = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьи
	|ПОМЕСТИТЬ ДокументыБезПометки
	|ИЗ
	|	Документ.Доход.Доходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьи В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьи
	|ИЗ
	|	Документ.Расход.Расходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьи В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Шапка.Ссылка,
	|	Шапка.АналитикаСтатьиРасходовПоПроцентам
	|ИЗ
	|	Документ.МыВернулиДолг КАК Шапка
	|ГДЕ
	|	НЕ Шапка.ПометкаУдаления
	|	И Шапка.АналитикаСтатьиРасходовПоПроцентам В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Шапка.Ссылка,
	|	Шапка.АналитикаСтатьиРасходовПоКомиссии
	|ИЗ
	|	Документ.МыВернулиДолг КАК Шапка
	|ГДЕ
	|	НЕ Шапка.ПометкаУдаления
	|	И Шапка.АналитикаСтатьиРасходовПоКомиссии В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Шапка.Ссылка,
	|	Шапка.АналитикаСтатьиСписания
	|ИЗ
	|	Документ.МыВернулиДолг КАК Шапка
	|ГДЕ
	|	НЕ Шапка.ПометкаУдаления
	|	И Шапка.АналитикаСтатьиСписания В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьи
	|ИЗ
	|	Документ.МыВернулиДолг.ДополнительныеРасходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьи В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьи
	|ИЗ
	|	Документ.МыВзялиВДолг.ДополнительныеРасходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьи В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьи
	|ИЗ
	|	Документ.МыДалиВДолг.ДополнительныеРасходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьи В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Шапка.Ссылка,
	|	Шапка.АналитикаСтатьиДоходовПоПроцентам
	|ИЗ
	|	Документ.НамВернулиДолг КАК Шапка
	|ГДЕ
	|	НЕ Шапка.ПометкаУдаления
	|	И Шапка.АналитикаСтатьиДоходовПоПроцентам В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Шапка.Ссылка,
	|	Шапка.АналитикаСтатьиСписания
	|ИЗ
	|	Документ.НамВернулиДолг КАК Шапка
	|ГДЕ
	|	НЕ Шапка.ПометкаУдаления
	|	И Шапка.АналитикаСтатьиСписания В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьи
	|ИЗ
	|	Документ.НамВернулиДолг.ДополнительныеРасходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьи В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьи
	|ИЗ
	|	Документ.ОбменВалюты.ДополнительныеРасходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьи В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьи
	|ИЗ
	|	Документ.Перемещение.ДополнительныеРасходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьи В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьиДохода
	|ИЗ
	|	Документ.УниверсальнаяОперация.Доходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьиДохода В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьиРасхода
	|ИЗ
	|	Документ.УниверсальнаяОперация.Расходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьиРасхода В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контейнеры.Ссылка КАК КонтейнерАналитики,
	|	ВЫБОР
	|		КОГДА ДокументыБезПометки.Ссылка ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Документы
	|ИЗ
	|	Контейнеры КАК Контейнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыБезПометки КАК ДокументыБезПометки
	|		ПО Контейнеры.Ссылка = ДокументыБезПометки.АналитикаСтатьи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операции.Операция
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабЧасть.Ссылка КАК Операция
	|	ИЗ
	|		Документ.Доход.АналитикаДокумента КАК ТабЧасть
	|	ГДЕ
	|		ТабЧасть.ЗначениеАналитикиВШапке = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТабЧасть.Ссылка
	|	ИЗ
	|		Документ.МыВернулиДолг.АналитикаДокумента КАК ТабЧасть
	|	ГДЕ
	|		ТабЧасть.ЗначениеАналитикиВШапке = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТабЧасть.Ссылка
	|	ИЗ
	|		Документ.МыВзялиВДолг.АналитикаДокумента КАК ТабЧасть
	|	ГДЕ
	|		ТабЧасть.ЗначениеАналитикиВШапке = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТабЧасть.Ссылка
	|	ИЗ
	|		Документ.МыДалиВДолг.АналитикаДокумента КАК ТабЧасть
	|	ГДЕ
	|		ТабЧасть.ЗначениеАналитикиВШапке = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТабЧасть.Ссылка
	|	ИЗ
	|		Документ.НамВернулиДолг.АналитикаДокумента КАК ТабЧасть
	|	ГДЕ
	|		ТабЧасть.ЗначениеАналитикиВШапке = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТабЧасть.Ссылка
	|	ИЗ
	|		Документ.ОбменВалюты.АналитикаДокумента КАК ТабЧасть
	|	ГДЕ
	|		ТабЧасть.ЗначениеАналитикиВШапке = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТабЧасть.Ссылка
	|	ИЗ
	|		Документ.Перемещение.АналитикаДокумента КАК ТабЧасть
	|	ГДЕ
	|		ТабЧасть.ЗначениеАналитикиВШапке = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТабЧасть.Ссылка
	|	ИЗ
	|		Документ.Расход.АналитикаДокумента КАК ТабЧасть
	|	ГДЕ
	|		ТабЧасть.ЗначениеАналитикиВШапке = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТабЧасть.Ссылка
	|	ИЗ
	|		Документ.УниверсальнаяОперация.АналитикаДокумента КАК ТабЧасть
	|	ГДЕ
	|		ТабЧасть.ЗначениеАналитикиВШапке = &Ссылка) КАК Операции";
#КонецОбласти

	ПакетРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаКонтейнеров = ПакетРезультатов[2].Выгрузить();
	ЕстьДокументы = ТаблицаКонтейнеров.Итог("Документы");
	
	// Удаляем значение аналитики из контейнеров, чтобы контейнеры не отображались в результатах поиска ссыдок
	Для Каждого СтрокаТаблицы Из ТаблицаКонтейнеров Цикл
		
		СправочникОбъект = СтрокаТаблицы.КонтейнерАналитики.ПолучитьОбъект();
		СтрокиКУдалению = СправочникОбъект.ВидыИЗначенияАналитики.НайтиСтроки(Новый Структура("ЗначениеАналитики", Ссылка));
		Для Каждого СтрокаАналитики Из СтрокиКУдалению Цикл
			СправочникОбъект.ВидыИЗначенияАналитики.Удалить(СтрокаАналитики);
		КонецЦикла; 
		Если СправочникОбъект.ВидыИЗначенияАналитики.Количество() = 0 Тогда
			СправочникОбъект.Прочитать();
			СправочникОбъект.Удалить();
		Иначе
			СправочникОбъект.Записать();
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ЕстьДокументы > 0 И Не ОчищатьСсылкиВДокументах Тогда
		// Если аналитика используется в операциях и нет команды очищать ссылки - прерываем удаление
		Возврат;
	КонецЕсли; 
	
	// Очищаем значения аналитики в шапках операций
	Выборка = ПакетРезультатов[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Операция.ПолучитьОбъект();
		СтрокиКУдалению = ДокументОбъект.АналитикаДокумента.НайтиСтроки(Новый Структура("ЗначениеАналитикиВШапке", Ссылка));
		Для Каждого СтрокаАналитики Из СтрокиКУдалению Цикл
			ДокументОбъект.АналитикаДокумента.Удалить(СтрокаАналитики);
		КонецЦикла; 
		ДокументОбъект.Записать();
		
	КонецЦикла;

КонецПроцедуры

// Проверяет использование указанного наименования в других элементах справочника:
//в пределах подчинения родителю с учетом наименования самого родителя; 
//или во всем справочнике, если Параметр "Родитель" = Неопределено
//
//Параметры:
//	Наименование - Строка - проверяемое наименование
//	СсылкаСправочника - СправочникСсылка - ссылка, которую нужно исключить из проверки
//						(обычно, наименование именно этого элемента и проверяется на уникальность)
//	Родитель- СправочникСсылка - Родитель, в подчинении которого проверяется уникальность. Элементы ниже по иерархии не проверяются
//					Если НЕОПРЕДЕЛЕНО, то поиск наименования осуществляется во всем справочнике
//
//Возвращаемое значение:
//	Булево - Истина, если наименование уже используется в каком-либо элементе справочника, кроме указанного в параметрах
//
Функция НаименованиеИспользуетсяДругимЭлементом(Наименование, СсылкаСправочника, Родитель = Неопределено) Экспорт

	Разделитель = "=-";
	ИскомоеНаименование = Разделитель + НРег(Наименование) + Разделитель;
	ИмяСправочника = СсылкаСправочника.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", ИскомоеНаименование);
	Запрос.УстановитьПараметр("Родитель",     Родитель);
	Запрос.УстановитьПараметр("Ссылка",       СсылкаСправочника);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Спр.Ссылка) КАК ДругихЭлементов
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Спр
	|ГДЕ
	|	Спр.Ссылка <> &Ссылка
	|	И """ + Разделитель + """ + Спр.Наименование + """ + Разделитель + """ = &Наименование
	|	// Условие по родителю
	|";
	
	Если Родитель <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// Условие по родителю", 
					"И Спр.Родитель = &Родитель");
	КонецЕсли;

	Результат = Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Результат = Выборка.ДругихЭлементов > 0;
		
		Если Не Результат И Родитель <> Неопределено Тогда
			
			Результат = Разделитель + НРег(Родитель) + Разделитель = ИскомоеНаименование;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает наименование элемента уникальное в пределах справочника или указанного родителя
//	К укащзанному в параметрах наименованию добавляется в скобках очередной порядковый номер 
//
//Параметры:
//	Наименование - Строка - начальное наименование, которое нужно сделать уникальным
//	ИмяСправочника - Строка - имя объекта метаданных
//	Родитель - СправочникСсылка или Неопределено - родитель, в пределах которого нужно установить уникальное наименование
//
//Возвращаемое значение:
//	Строка - Наименование, увеличенное на очередной счетчик
Функция НовоеУникальноеНаименование(Наименование, ИмяСправочника, Родитель = Неопределено) Экспорт

	ИскомоеИмя = СокрЛП(Наименование);
	Если Прав(ИскомоеИмя, 1) = ")" Тогда
		
		ПозицияСкобки = СтрНайти(ИскомоеИмя, "(", НаправлениеПоиска.СКонца);
		Если ПозицияСкобки > 0 Тогда
			ИскомоеИмя = СокрЛП(Лев(ИскомоеИмя, ПозицияСкобки -1));
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИскомоеИмя", ИскомоеИмя);
	Запрос.УстановитьПараметр("Шаблон1", ИскомоеИмя + " ([0-9])");
	Запрос.УстановитьПараметр("Шаблон2", ИскомоеИмя + " ([0-9][0-9])");
	Запрос.УстановитьПараметр("Шаблон3", ИскомоеИмя + " ([0-9][0-9][0-9])");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(Подзапрос.Наименование) Наименование
	|ИЗ (
	|ВЫБРАТЬ
	|	Элементы.Наименование КАК Наименование
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Элементы
	|ГДЕ
	|	(Элементы.Наименование = &ИскомоеИмя ИЛИ Элементы.Наименование ПОДОБНО &Шаблон1)
	|	//УсловиеРодителя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""яя_"" + Элементы.Наименование КАК Наименование
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Элементы
	|ГДЕ
	|	Элементы.Наименование ПОДОБНО &Шаблон2
	|	//УсловиеРодителя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""яяя_"" + Элементы.Наименование КАК Наименование
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Элементы
	|ГДЕ
	|	Элементы.Наименование ПОДОБНО &Шаблон3
	|	//УсловиеРодителя
	|) КАК Подзапрос";

	Если Родитель <> Неопределено Тогда
		Запрос.УстановитьПараметр("Родитель", Родитель);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеРодителя", 
			"	И (Элементы.Родитель = &Родитель ИЛИ Элементы.Ссылка = &Родитель)");
	КонецЕсли;
	
	НовыйИндекс = 1;
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		НайденоеИмя = Выборка.Наименование;
		Если Прав(НайденоеИмя, 1) = ")" Тогда
			
			ПозицияСкобки = СтрНайти(НайденоеИмя, "(", НаправлениеПоиска.СКонца);
			Если ПозицияСкобки > 0 Тогда
				
				СодержимоеСкобок = Сред(НайденоеИмя, ПозицияСкобки +1, СтрДлина(НайденоеИмя) - ПозицияСкобки - 1);
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СодержимоеСкобок) Тогда
					НовыйИндекс = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СодержимоеСкобок) + 1;
				Иначе
					ИскомоеИмя = НайденоеИмя;
					Если Лев(ИскомоеИмя, 3) = "яя_" Тогда
						ИскомоеИмя = Сред(ИскомоеИмя, 4);
					КонецЕсли;
					Если Лев(ИскомоеИмя, 4) = "яя_" Тогда
						ИскомоеИмя = Сред(ИскомоеИмя, 5);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат ИскомоеИмя + " (" + Формат(НовыйИндекс, "ЧДЦ=; ЧГ=") + ")" ;
	
КонецФункции

// Заполняет перед записью справочника его ДополнительныеСвойства значениями, необходимыми для анализа сделанных изменений
//
//Параметры:
//	СправочникОбъект - СправочникОбъект, в котором заполняем структуру ДополнительныеСвойства
//	СписокРеквизитов - Строка - имена реквизитов, чьи значения необходимо сохранить
//
Процедура ПередЗаписьюСправочникаЗаполнитьДополнительныеСвойства(СправочникОбъект, СписокРеквизитов = "") Экспорт
	
	Если СправочникОбъект.ДополнительныеСвойства.Свойство("ПрежниеЗначения") Тогда
		// Дополнительные свойства уже заполнены прежними значениями
		Возврат;
	КонецЕсли;
	
	Ссылка = СправочникОбъект.Ссылка;
	СправочникОбъект.ДополнительныеСвойства.Вставить("ЭтоНовый",        СправочникОбъект.ЭтоНовый());
	СправочникОбъект.ДополнительныеСвойства.Вставить("ПрежниеЗначения",   Новый Структура);
	СправочникОбъект.ДополнительныеСвойства.ПрежниеЗначения.Вставить("Активность",      Ссылка.Активность);
	СправочникОбъект.ДополнительныеСвойства.ПрежниеЗначения.Вставить("ПометкаУдаления", Ссылка.ПометкаУдаления);
	СправочникОбъект.ДополнительныеСвойства.ПрежниеЗначения.Вставить("Наименование",    Ссылка.Наименование);
	
	Если Не ПустаяСтрока(СписокРеквизитов) Тогда
		ИменаРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокРеквизитов, ",", Истина);
		Для каждого ИмяРеквизита Из ИменаРеквизитов Цикл
			СправочникОбъект.ДополнительныеСвойства.ПрежниеЗначения.Вставить(ИмяРеквизита, Ссылка[ИмяРеквизита]);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции


Функция ОбновитьАктивностьПодчиненныхЭлементов(Родитель, ЗначениеАктивности, АктивностьИзменилась, ЗначениеПометки, ПометкаИзменилась, НеРегистрироватьВОбмене, ЗаполнятьИнфоПоля)

	ИмяСправочника     = Родитель.Метаданные().Имя;
	СинонимСправочника = Родитель.Метаданные().Синоним;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("ЗначениеАктивности", ЗначениеАктивности);
	Запрос.УстановитьПараметр("ЗначениеПометки", ЗначениеПометки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Элементы.Ссылка КАК Ссылка,
	|	Элементы.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Элементы
	|ГДЕ
	|	Элементы.Ссылка В ИЕРАРХИИ(&Родитель)
	|	И Элементы.Ссылка <> &Родитель
	|	И (Элементы.Активность <> &ЗначениеАктивности
	|		ИЛИ Элементы.ПометкаУдаления <> &ЗначениеПометки)
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	Справочник." + ИмяСправочника + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.ДополнительныеСвойства.Вставить("НеПроверятьСостояние", Истина);
			
			Если АктивностьИзменилась Тогда
				Объект.Активность      = ЗначениеАктивности;
			КонецЕсли; 
			
			Если НЕ Объект.Предопределенный Тогда
				Если ПометкаИзменилась Тогда
					Объект.ПометкаУдаления = ЗначениеПометки;
				ИначеЕсли ЗначениеАктивности И Объект.ПометкаУдаления Тогда
					Объект.ПометкаУдаления = Ложь;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НеРегистрироватьВОбмене Тогда
				Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
			КонецЕсли;
			
			Если ЗаполнятьИнфоПоля Тогда
				Объект.ЗаполнитьИнформационныеПоля();
			КонецЕсли;
			
			Объект.Записать();
			
		Исключение
			
			ТекстИнформации = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения  = НСтр("ru = 'Изменение активности в подчиненных элементов справочника <%1>'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СинонимСправочника);
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ТекстИнформации);
			Возврат Ложь;
			
		КонецПопытки;
	
	КонецЦикла; 
	
	Возврат Истина;

КонецФункции

Функция ОбновитьСостояниеРодителейЭлемента(Элемент, ЗначениеАктивности, НеРегистрироватьВОбмене, ЗаполнятьИнфоПоля)

	Родитель = Элемент.Родитель;
	ИзменяемыйОбъект = Элемент;
	
	Пока ЗначениеЗаполнено(Родитель) Цикл
		
		
		Если НЕ Родитель.ПометкаУдаления И Родитель.Активность = ЗначениеАктивности И Не ЗаполнятьИнфоПоля Тогда
			
			Прервать;
			
		Иначе
			
			Попытка
				
				ОбъектРодителя = Родитель.ПолучитьОбъект();
				Если ОбъектРодителя.ПометкаУдаления И Не Элемент.ПометкаУдаления Тогда
					ОбъектРодителя.ПометкаУдаления = Ложь;
				КонецЕсли; 
				Если Не ОбъектРодителя.Активность И ЗначениеАктивности Тогда
					ОбъектРодителя.Активность = Истина;
				КонецЕсли;
				Если ЗаполнятьИнфоПоля Тогда
					ОбъектРодителя.ЗаполнитьИнформационныеПоля(ИзменяемыйОбъект);
				КонецЕсли;
				
				Если ОбъектРодителя.Модифицированность() Тогда
					
					ОбъектРодителя.ДополнительныеСвойства.Вставить("НеПроверятьСостояние", Истина);
					Если НеРегистрироватьВОбмене Тогда
						ОбъектРодителя.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
					КонецЕсли;
					
					ОбъектРодителя.Записать();
					
				КонецЕсли;
				
				ИзменяемыйОбъект = ОбъектРодителя;
				
			Исключение
				
				ТекстИнформации = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстСообщения  = НСтр("ru = 'Изменение активности родительских элементов справочника <%1>'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Родитель.Метаданные().Синоним);
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ТекстИнформации);
				Возврат Ложь;
				
			КонецПопытки; 
			
		КонецЕсли; 
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла; 

	Возврат Истина;
	
КонецФункции

Процедура УдалитьПараметрыПогашенияДолга(Долг, Отказ)

	НаборЗаписей = РегистрыСведений.ПараметрыГрафикаПогашенияДолгов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Долг.Установить(Долг);
	НаборЗаписей.Записать(Истина);

КонецПроцедуры

// Очищает ссылку в записях регистра сведений КлючиСтатей
Процедура УдалитьСсылкуИзКлючейСтатейБюджета(Ссылка, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючиСтатей.СтатьяБюджета,
	|	КлючиСтатей.ТипСтатьи
	|ИЗ
	|	РегистрСведений.КлючиСтатей КАК КлючиСтатей
	|ГДЕ
	|	(КлючиСтатей.СтатьяБюджета = &Ссылка
	|			ИЛИ КлючиСтатей.РодительскаяСтатья = &Ссылка
	|			ИЛИ КлючиСтатей.РодительскаяСтатьяВБюджете = &Ссылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.КлючиСтатей.СоздатьМенеджерЗаписи();
		Запись.СтатьяБюджета = Выборка.СтатьяБюджета;
		Запись.ТипСтатьи     = Выборка.ТипСтатьи;
		Если Запись.СтатьяБюджета = Ссылка Тогда
			Запись.Удалить();
		Иначе
			Запись.Прочитать();
			Если Запись.РодительскаяСтатья = Ссылка Тогда
				Запись.РодительскаяСтатья = Неопределено;
			КонецЕсли;
			Если Запись.РодительскаяСтатьяВБюджете = Ссылка Тогда
				Запись.РодительскаяСтатьяВБюджете = Неопределено;
			КонецЕсли;
			Запись.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьИспользованиеФинансовыхЦелей(Ссылка, Отказ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"
	|//0//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыГрафикаПогашенияДолгов.*
	|ИЗ
	|	РегистрСведений.ПараметрыГрафикаПогашенияДолгов КАК ПараметрыГрафикаПогашенияДолгов
	|ГДЕ
	|	ПараметрыГрафикаПогашенияДолгов.ФинансоваяЦель = &Ссылка
	|;
	|
	|//1//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставСтатейБюджета.*
	|ИЗ
	|	РегистрСведений.СоставСтатейБюджета КАК СоставСтатейБюджета
	|ГДЕ
	|	СоставСтатейБюджета.РодительскаяСтатья = &Ссылка
	|";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	// Очищаем записи в параметрах графика погашения долгов
	Выборка = ПакетРезультатов[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаписьРегистра = РегистрыСведений.ПараметрыГрафикаПогашенияДолгов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
		ЗаписьРегистра.ФинансоваяЦель = Справочники.ФинансовыеЦели.ОбщиеНакопления;
		ЗаписьРегистра.Записать(Истина);
		
	КонецЦикла;
	
	// Очищаем ссылки на финансовую цель в составе статей бюджета
	Выборка = ПакетРезультатов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаписьРегистра = РегистрыСведений.СоставСтатейБюджета.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
		ЗаписьРегистра.РодительскаяСтатья = Неопределено;
		ЗаписьРегистра.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВЗапросТекстПоИсточнику(Запрос, ИДИсточника, Источник, ОтборИсточника, ТекстОбщегоОтбора, ВыборГруппИЭлементов, КоличествоЭлементов, КомандыСоздания, РазрешитьБыстроеСоздание, СтрокаПоиска, МассивСловПоиска)
	
	МетаданныеСправочника = Метаданные.Справочники[Источник]; 
	ИмяВида = МетаданныеСправочника.ПредставлениеОбъекта;
	Если Не ЗначениеЗаполнено(ИмяВида) Тогда
		ИмяВида = МетаданныеСправочника.Синоним;
	КонецЕсли;
	
	ТекстОтбораПоСловам = "";
	Счетчик = 0;
	Для каждого Слово Из МассивСловПоиска Цикл
		Счетчик = Счетчик + 1;
		СчетчикСтрокой = Формат(Счетчик, "ЧДЦ=; ЧГ=");
		ТекстОтбораПоСловам = ТекстОтбораПоСловам + ?(ТекстОтбораПоСловам = "", "		  ", Символы.ПС + "		И ")
					+ "Спр.Наименование ПОДОБНО &СтрокаПоиска" + СчетчикСтрокой;
	КонецЦикла;
	
	ОтборПоГруппам = "";
	ЕстьГруппы = МетаданныеСправочника.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
	Если МетаданныеСправочника.Иерархический 
		И ЕстьГруппы 
		И ВыборГруппИЭлементов <> ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
		ОтборПоГруппам = ?(ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы, "		Спр.ЭтоГруппа", "		НЕ Спр.ЭтоГруппа");
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ " + КоличествоЭлементов + " 
	|	" + ИДИсточника + " КАК Порядок1,
	|	ВЫБОР КОГДА Спр.Наименование ПОДОБНО &СтрокаПоискаСНачала1 ТОГДА 1 ИНАЧЕ 2 КОНЕЦ КАК Порядок2,
	|	""" + ИмяВида + """ КАК Вид,
	|	""" + Источник + """ КАК ИмяИсточника,
	|	Спр.Ссылка КАК Ссылка,
	|	Спр.Наименование КАК Наименование,
	|	Спр.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник." + Источник + " КАК Спр
	|ГДЕ
	|	" + ТекстОтбораПоСловам + "
	|	" + ?(ОтборПоГруппам = "", "", " И " + ОтборПоГруппам) + "
	|	" + ?(Не ЗначениеЗаполнено(ОтборИсточника), "", " И " + ОтборИсточника) + "
	|	" + ?(Не ЗначениеЗаполнено(ТекстОбщегоОтбора), "", " И " + ТекстОбщегоОтбора) + "
	|";
	
	Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	Запрос.Текст = Запрос.Текст + ТекстЗапроса;
	
	ШрифтКоманды    = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , Истина);
	ШрифтПодСтроки  = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина);
	ЦветПодстроки   = Новый Цвет(0, 175, 0);
	
	// Склонение синонима для подстановки в команду создания
	СинонимГруппы = "";
	ДопустимоБыстроеСоздание = Истина;
	Если Источник = "СтатьиДоходов" Тогда
		
		СинонимОбъекта = "статью дохода";
		
	ИначеЕсли Источник = "СтатьиРасходов" Тогда
		
		СинонимОбъекта = "статью расхода";
		
	ИначеЕсли Источник = "ФинансовыеЦели" Тогда
		
		СинонимОбъекта = "финансовую цель";
		ДопустимоБыстроеСоздание = Ложь;
		
	ИначеЕсли Источник = "КошелькиИСчета" Тогда
		
		ДопустимоБыстроеСоздание = ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы;
		Если ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Или ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			СинонимОбъекта = "кошелек";
		КонецЕсли;
		Если ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Или ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			СинонимГруппы = "группу кошельков";
		КонецЕсли;
		
	ИначеЕсли Источник = "Имущество" Тогда
		
		ДопустимоБыстроеСоздание = ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы;
		Если ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Или ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			СинонимОбъекта = "имущество";
		КонецЕсли;
		Если ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Или ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			СинонимГруппы = "группу имущества";
		КонецЕсли;
		
	ИначеЕсли Источник = "Контакты" Тогда
		
		Если ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Или ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			СинонимОбъекта = "контакт";
		КонецЕсли;
		Если ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Или ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			СинонимГруппы = "группу контактов";
		КонецЕсли;
		
	Иначе
		
		ДопустимоБыстроеСоздание = Ложь;
		СинонимОбъекта = ИмяВида;
		СинонимГруппы = "группу " + ИмяВида;
		
	КонецЕсли;
	
	Если ВыборГруппИЭлементов <> ИспользованиеГруппИЭлементов.Группы Тогда
		
		ПредставлениеКоманды = Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(НСтр("ru='Создать'") + " " +СинонимОбъекта + " """, ШрифтКоманды),
					Новый ФорматированнаяСтрока(СтрокаПоиска, ШрифтПодСтроки, ЦветПодстроки),
					Новый ФорматированнаяСтрока("""...", ШрифтКоманды)
					); 
		КомандыСоздания.Добавить("СоздатьОбъект." + Источник, ПредставлениеКоманды, , БиблиотекаКартинок.СоздатьЭлементСписка);
		
		Если РазрешитьБыстроеСоздание И ДопустимоБыстроеСоздание Тогда
			ПредставлениеКоманды = Новый ФорматированнаяСтрока(
						Новый ФорматированнаяСтрока(НСтр("ru='Быстро создать'") + " " +СинонимОбъекта + " """, ШрифтКоманды),
						Новый ФорматированнаяСтрока(СтрокаПоиска, ШрифтПодСтроки, ЦветПодстроки),
						Новый ФорматированнаяСтрока(""" (" + НСтр("ru='без открытия формы'") + ")" , ШрифтКоманды)
						); 
			КомандыСоздания.Добавить("БыстроСоздатьОбъект." + Источник, ПредставлениеКоманды, , БиблиотекаКартинок.БыстроСоздатьЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьГруппы И 
			(ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Или ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы) Тогда
		
		ПредставлениеКоманды = Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(НСтр("ru='Создать'") + " " +СинонимГруппы + " """, ШрифтКоманды),
					Новый ФорматированнаяСтрока(СтрокаПоиска, ШрифтПодСтроки, ЦветПодстроки),
					Новый ФорматированнаяСтрока("""...", ШрифтКоманды)
					); 
		КомандыСоздания.Добавить("СоздатьГруппу." + Источник, ПредставлениеКоманды, , БиблиотекаКартинок.СоздатьЭлементСписка);
		
		Если РазрешитьБыстроеСоздание И ДопустимоБыстроеСоздание Тогда
			ПредставлениеКоманды = Новый ФорматированнаяСтрока(
						Новый ФорматированнаяСтрока(НСтр("ru='Быстро создать'") + " " +СинонимГруппы + " """, ШрифтКоманды),
						Новый ФорматированнаяСтрока(СтрокаПоиска, ШрифтПодСтроки, ЦветПодстроки),
						Новый ФорматированнаяСтрока(""" (" + НСтр("ru='без открытия формы'") + ")" , ШрифтКоманды)
						); 
			КомандыСоздания.Добавить("БыстроСоздатьГруппу." + Источник, ПредставлениеКоманды, , БиблиотекаКартинок.БыстроСоздатьЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ИзменитьКлючиСтатейБюджета(Ссылка, НовыйРодитель, ТипСтатьи, ТекущийКлюч) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НовыйРодитель", НовыйРодитель);
	Запрос.УстановитьПараметр("ТекущийКлюч", ТекущийКлюч);
	МассивТиповСтатей = Новый Массив;
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.КошелькиИСчета") Тогда
		МассивТиповСтатей.Добавить("Кошелек");
		МассивТиповСтатей.Добавить("КредитнаяКарта");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Долги") Тогда
		МассивТиповСтатей.Добавить("Долг");
		МассивТиповСтатей.Добавить("ДолгНам");
		МассивТиповСтатей.Добавить("НашДолг");
	Иначе
		МассивТиповСтатей.Добавить(ТипСтатьи);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТипыСтатей", МассивТиповСтатей);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""Код"" КАК Показатель,
	|	МАКСИМУМ(ЕСТЬNULL(КлючиСтатей.Код, 0)) КАК Код,
	|	"""" КАК КлючРодителя
	|ИЗ
	|	РегистрСведений.КлючиСтатей КАК КлючиСтатей
	|ГДЕ
	|	КлючиСтатей.ТипСтатьи В(&ТипыСтатей)
	|	И КлючиСтатей.РодительскаяСтатья = &НовыйРодитель
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	""Ключ"",
	|	0,
	|	КлючиСтатей.Ключ
	|ИЗ
	|	РегистрСведений.КлючиСтатей КАК КлючиСтатей
	|ГДЕ
	|	КлючиСтатей.ТипСтатьи В(&ТипыСтатей)
	|	И КлючиСтатей.СтатьяБюджета = &НовыйРодитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиСтатей.СтатьяБюджета,
	|	КлючиСтатей.РодительскаяСтатья,
	|	КлючиСтатей.ТипСтатьи,
	|	КлючиСтатей.Код,
	|	КлючиСтатей.Ключ КАК Ключ,
	|	КлючиСтатей.РодительскаяСтатьяВБюджете,
	|	КлючиСтатей.ИсключатьИзБюджета
	|ИЗ
	|	РегистрСведений.КлючиСтатей КАК КлючиСтатей
	|ГДЕ
	|	КлючиСтатей.ТипСтатьи В(&ТипыСтатей)
	|	И КлючиСтатей.Ключ МЕЖДУ &ТекущийКлюч И &ТекущийКлюч + ""яяя""
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ключ";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	//Получаем реквизиты нового родителя статьи
	КлючРодителя    = "";
	НовыйКод        = 1;
	ВыборкаРодителя = ПакетРезультатов[0].Выбрать();
	Пока ВыборкаРодителя.Следующий() Цикл
		Если ВыборкаРодителя.Показатель = "Код" Тогда
			НовыйКод = ?(ЗначениеЗаполнено(ВыборкаРодителя.Код), ВыборкаРодителя.Код + 1, 1);
		Иначе
			КлючРодителя = ?(ЗначениеЗаполнено(ВыборкаРодителя.КлючРодителя), ВыборкаРодителя.КлючРодителя, "");
		КонецЕсли;
	КонецЦикла;
	
	НовыйКлюч          = КлючРодителя + Формат(НовыйКод, "ЧДЦ=; ЧГ=") + ".";
	ДлинаТекущегоКлюча = СтрДлина(ТекущийКлюч);

	// Изменяем ключи статей
	Выборка = ПакетРезультатов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Запись = РегистрыСведений.КлючиСтатей.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Ключ = НовыйКлюч + Сред(Запись.Ключ, ДлинаТекущегоКлюча + 1);
		Если Запись.СтатьяБюджета = Ссылка Тогда
			Запись.РодительскаяСтатья = НовыйРодитель;
			Запись.Код                = НовыйКод;
		КонецЕсли;
		
		Запись.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыеКодИКлючСтатьиВТаблицеКлючей(ТипСтатьи, РодительскаяСтатья) 

	Результат = Новый Структура("Код, Ключ", 1, "");
	
	Запрос      = Новый Запрос;
	ТипыСтатей  = Новый Массив;
	Если ТипСтатьи = "Кошелек" Или ТипСтатьи = "КредитнаяКарта" Тогда
		ТипыСтатей.Добавить("Кошелек");
		ТипыСтатей.Добавить("КредитнаяКарта");
	ИначеЕсли ТипСтатьи = "ДолгНам" Или ТипСтатьи = "НашДолг" Тогда
		ТипыСтатей.Добавить("ДолгНам");
		ТипыСтатей.Добавить("НашДолг");
	Иначе
		ТипыСтатей.Добавить(ТипСтатьи);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТипыСтатей", ТипыСтатей);
	Запрос.УстановитьПараметр("РодительскаяСтатья", РодительскаяСтатья);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""Код"" КАК Показатель,
	|	МАКСИМУМ(ЕСТЬNULL(КлючиСтатей.Код, 0)) КАК Код,
	|	"""" КАК КлючРодителя,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КлючиСтатей.СтатьяБюджета) КАК КоличествоСтатей
	|ИЗ
	|	РегистрСведений.КлючиСтатей КАК КлючиСтатей
	|ГДЕ
	|	КлючиСтатей.ТипСтатьи В(&ТипыСтатей)
	|	И КлючиСтатей.РодительскаяСтатья = &РодительскаяСтатья
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	""Ключ"",
	|	0,
	|	КлючиСтатей.Ключ,
	|	0
	|ИЗ
	|	РегистрСведений.КлючиСтатей КАК КлючиСтатей
	|ГДЕ
	|	КлючиСтатей.ТипСтатьи В(&ТипыСтатей)
	|	И КлючиСтатей.СтатьяБюджета = &РодительскаяСтатья";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Показатель = "Код" Тогда
			Результат.Код = ?(ЗначениеЗаполнено(Выборка.Код), Выборка.Код + 1, ?(ЗначениеЗаполнено(Выборка.КоличествоСтатей), Выборка.КоличествоСтатей + 1, 1));
		Иначе
			Результат.Ключ = ?(ЗначениеЗаполнено(Выборка.КлючРодителя), Выборка.КлючРодителя, "");
		КонецЕсли;
	КонецЦикла;
	
	Результат.Ключ =  Результат.Ключ + Формат(Результат.Код, "ЧДЦ=; ЧГ=") + ".";
	
	Возврат Результат;

КонецФункции

Функция ЗаписьКлючаСтатьиИзменена(Запись, ЗначенияКлюча) 

	Если Запись.РодительскаяСтатья <> ЗначенияКлюча.РодительскаяСтатья
		ИЛИ Запись.ТипСтатьи <> ЗначенияКлюча.ТипСтатьи
		ИЛИ Запись.РодительскаяСтатьяВБюджете <> ЗначенияКлюча.РодительскаяСтатьяВБюджете
		ИЛИ Запись.ИсключатьИзБюджета <> ЗначенияКлюча.ИсключатьИзБюджета
		Тогда
		
		ЗаполнитьЗначенияСвойств(Запись, ЗначенияКлюча);
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Проверяет и удаляет ссылку справочника из: 
//	справочника ВариантыБюджета - только если ВариантБюджета помечен на удаление;
//	регистра накопления "ПлановыеПоказателиБюджета" - только если ВариантыБюджета, по которым рассчинаты плановые показатели, помечены на удаление
Процедура УдалитьСсылкуИзЗначенийСубконто(Ссылка, Отказ)

	// Устарела, будет заменена в следующих версиях
	Возврат;
	
КонецПроцедуры

Процедура ИзменитьКлючСтатьиБюджетаПоОбъекту(Источник, ЗначенияКлюча1, ЗначенияКлюча2) 
	
	ТипИсточника       = ТипЗнч(Источник);
	
	// Получаем текущий набор ключей
	НаборЗаписей = РегистрыСведений.КлючиСтатей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СтатьяБюджета.Установить(Источник.Ссылка);
	НаборЗаписей.Прочитать();
	
	ОбщегоНазначенияДеньги.СкопироватьДополнительныеПараметрыОбъекта(НаборЗаписей, Источник);
	
	ПроверятьИерархию  = Источник.Метаданные().Иерархический;
	КодОбъекта         = 0;
	Если НаборЗаписей.Количество() > 0 Тогда
		
		Если ПроверятьИерархию Тогда
			ТекущийРодитель = НаборЗаписей[0].РодительскаяСтатья;
			Если ТекущийРодитель <> Источник.Родитель Тогда
				// нужно изменить ключи сохраняемого элемента справочника и подчиненных элементов
				ИзменитьКлючиСтатейБюджета(Источник.Ссылка, Источник.Родитель, ЗначенияКлюча1.ТипСтатьи, НаборЗаписей[0].Ключ);
				НаборЗаписей.Прочитать();
			КонецЕсли;
		КонецЕсли;
		
		//Проверяем необходимость обновления записи о бюджетной статье
		Если ТипИсточника = Тип("СправочникОбъект.Долги") Тогда
			
			// Для каждого долга в таблице ключей может быть до двух записей, в зависимости от типа долга
			Код  = НаборЗаписей[0].Код;
			Ключ = НаборЗаписей[0].Ключ;
			
			НаборЗаписей.Очистить();
			
			Запись1 = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись1, ЗначенияКлюча1);
			Запись1.СтатьяБюджета = Источник.Ссылка;
			Запись1.Код           = Код;
			Запись1.Ключ          = Ключ;
			
			Если ЗначенияКлюча2 <> Неопределено Тогда
				Запись2 = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись2, ЗначенияКлюча2);
				Запись2.СтатьяБюджета = Источник.Ссылка;
				Запись2.Код           = Код;
				Запись2.Ключ          = Ключ;
			КонецЕсли;
			
			НаборЗаписей.Записать(Истина);
			
		Иначе
			
			Если ЗаписьКлючаСтатьиИзменена(НаборЗаписей[0], ЗначенияКлюча1) Тогда
				НаборЗаписей.Записать(Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		КодИКлюч = НовыеКодИКлючСтатьиВТаблицеКлючей(ЗначенияКлюча1.ТипСтатьи, ЗначенияКлюча1.РодительскаяСтатья);
		Запись1 = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись1, ЗначенияКлюча1);
		Запись1.СтатьяБюджета = Источник.Ссылка;
		Запись1.Код           = КодИКлюч.Код;
		Запись1.Ключ          = КодИКлюч.Ключ;
		
		Если ЗначенияКлюча2 <> Неопределено Тогда
			Запись2 = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись2, ЗначенияКлюча2);
			Запись2.СтатьяБюджета = Источник.Ссылка;
			Запись2.Код           = КодИКлюч.Код;
			Запись2.Ключ          = КодИКлюч.Ключ;
		КонецЕсли;
		
		НаборЗаписей.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


