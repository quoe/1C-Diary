//////////////////////////////////////////////////////////////////////////////////////////
// Интерфейс работы с прикрепленными файлами на мобильном устройстве (сервер)
// 
//////////////////////////////////////////////////////////////////////////////////////////


#Область ПрограммныйИнтерфейс

// Создает или изменяет элемент справочника ПрикрепленныеФайлы и возвращает статус исполнения операции.
//	Двоичные даные в реквизите "ДанныеФайла" перезапиываются только если в качестве "НавигационнойСсылки" используется адрес вреиенного хранилища
//
// Параметры:
//  ПакетМультимедиа		 - Структура - упакованные данные мультимедиа (см. ПрикрепленныеФайлыКлиент.УпаковатьДанныеМультимедиа)
// 
// Возвращаемое значение:
//   Булево - ИСТИНА, если элемент справочника записан 
//
Функция ЗаписатьДанныеМультимедиа(ПакетМультимедиа) Экспорт
	
	Если ТипЗнч(ПакетМультимедиа) = Тип("СписокЗначений") Тогда
		Возврат ЗаписатьДанныеМультимедиаИзСписка(ПакетМультимедиа);
	КонецЕсли;
	
	Если ТипЗнч(ПакетМультимедиа) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ПакетМультимедиа.НавигационнаяСсылка) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПакетМультимедиа.НавигационнаяСсылка);
	КонецЕсли;
	
	Если (ДвоичныеДанные = Неопределено Или ДвоичныеДанные.Размер() = 0) И Не ЗначениеЗаполнено(ПакетМультимедиа.ПрикрепленныйФайл) Тогда
		// Нечего записывать
		Возврат Ложь;
	КонецЕсли;
	
	// Объект справочника получаем из ссылки или создаем новый
	ПрикрепленныйФайл = Неопределено;
	Если ЗначениеЗаполнено(ПакетМультимедиа.ПрикрепленныйФайл) Тогда
		ПрикрепленныйФайл = ПакетМультимедиа.ПрикрепленныйФайл.ПолучитьОбъект();
	Иначе
		ПрикрепленныйФайл = Справочники.ПрикрепленныеФайлы.СоздатьЭлемент();
	КонецЕсли;
	
	Если ПрикрепленныйФайл.ДатаСоздания <> ПакетМультимедиа.ДатаСоздания Тогда
		// Двоичные данные былии изменены
		ПрикрепленныйФайл.ДатаСоздания = ПакетМультимедиа.ДатаСоздания;
	КонецЕсли;
	ПрикрепленныйФайл.Наименование       = ПакетМультимедиа.Наименование;
	ПрикрепленныйФайл.НеСинхронизировать = ПакетМультимедиа.НеСинхронизировать;
	
	Если ДвоичныеДанные <> Неопределено Тогда
		ПрикрепленныйФайл.ДанныеФайла = Новый ХранилищеЗначения(ДвоичныеДанные, ПолучитьСжатиеДанных());		
		ПрикрепленныйФайл.РазмерФайла = ДвоичныеДанные.Размер();
	КонецЕсли;

	ПрикрепленныйФайл.СпособОткрытияФайла = ПакетМультимедиа.СпособОткрытия;
	ПрикрепленныйФайл.РасширениеФайла     = ПакетМультимедиа.Расширение;
	
	ПрикрепленныйФайл.Записать();
	
	// Обновляем ссылку на прикрепленный файл в структуре его описания
	ПакетМультимедиа.ПрикрепленныйФайл = ПрикрепленныйФайл.Ссылка;
	
	Возврат Истина;
	
КонецФункции

// Создает или изменяет элементы справочника ПрикрепленныеФайлы и возвращает статус операции.
//Двоичные даные в реквизите "ДанныеФайла" перезапиываются только если в качестве "НавигационнойСсылки" 
//используется адрес вреиенного хранилища
//
// Параметры:
//  ПакетМультимедиа	 - СписокЗначений - список упакованных данных мультимедиа 
//						(см. ПрикрепленныеФайлыКлиент.УпаковатьДанныеМультимедиа)
// 
// Возвращаемое значение:
//   Булево - ИСТИНА, если элемент справочника записан 
//
Функция ЗаписатьДанныеМультимедиаИзСписка(СписокМультимедиа) Экспорт
	
	Если ТипЗнч(СписокМультимедиа) <> Тип("СписокЗначений") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Данные Из СписокМультимедиа Цикл
		ЗаписатьДанныеМультимедиа(Данные.Значение);	
	КонецЦикла;
		
	Возврат Истина;
	
КонецФункции

// Записывает двоичные данные в базу с учетом владельца. 
//
// Параметры:
//  СписокОписанийФайлов		 - СписокЗначений - упакованные данные мультимедиа (см. ПрикрепленныеФайлыКлиент.УпаковатьДанныеМультимедиа)
//  ВладелецСсылка			 - ОбъектСсылка - Владелец прикрепленного файла или Неопределено (если нет владельца)
//
Процедура ОбработатьИЗаписатьДанныеМультимедиа(СписокОписанийФайлов, ВладелецСсылка) Экспорт
	
	Если (СписокОписанийФайлов = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗаписанныхФайлов = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Данные Из СписокОписанийФайлов Цикл
			
			Если ЗаписатьДанныеМультимедиа(Данные.Значение) И ВладелецСсылка <> Неопределено Тогда
				МассивЗаписанныхФайлов.Добавить(Данные.Значение.ПрикрепленныйФайл);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВладелецСсылка <> Неопределено Тогда
			ОбновитьНаборФайловПоВладельцу(ВладелецСсылка, МассивЗаписанныхФайлов);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение НСтр("ru='Запись данных прикрепленного файла не состоялась! По причине: '" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

// Удаляет прикрепленный файл и его связи с владельцами
//
// Параметры:
//  ПакетМультимедиа - СправочникСсылка.ПрикрепленныеФайлы - Ссылка на прикрепленный файл
//  Владелец		 - ОбъектСсылка или Неопределено - Ссылка на владельца. Если не задан, то прикрепелнный файл удаляется полностью из всех владельцев
//
Процедура УдалитьПрикрепленныйФайл(ПрикрепленныйФайл, Владелец = Неопределено) Экспорт
	
	Если (ПрикрепленныйФайл = Неопределено) Тогда
		Возврат;
	КонецЕсли;
		
	НачатьТранзакцию();
	Попытка
		
		//Чистим регистр сведений
 		НаборЗаписейРегистра = РегистрыСведений.ПринадлежностьФайлов.СоздатьНаборЗаписей(); 
		НаборЗаписейРегистра.Отбор.ПрикрепленныйФайл.Установить(ПрикрепленныйФайл); 
		
		Если Владелец <> Неопределено Тогда
			НаборЗаписейРегистра.Отбор.ВладелецФайла.Установить(Владелец); 	
		КонецЕсли;
		
 		НаборЗаписейРегистра.Прочитать(); 
 		НаборЗаписейРегистра.Очистить(); 
 		НаборЗаписейРегистра.Записать(Истина); 
		
		//Удалем сам прикрепленный файл из БД
		КакОбъект = ПрикрепленныйФайл.ПолучитьОбъект();
		КакОбъект.Удалить();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение НСтр("ru='Ошибка удаления прикрепленного файла `"+ПрикрепленныйФайл.Наименование+"`! По причине: '" + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Возвращает алгоритм сжатия данных для записи прикрепленного файла
// 
// Возвращаемое значение:
//  СжатиеДанных - объект, описывающий сзатие данных
//
Функция ПолучитьСжатиеДанных() Экспорт
	
	Возврат Новый СжатиеДанных(7);
	
КонецФункции

// Обновляет записи регистра сведений "ПринадлежностьФайлов" по указаному владельцу
//
//Параметры:
//	ВладелецФайлов - ссылка на владельца файлов
//	СписокФайлов - список значений или массив ссылок справочника ПрикрепленныеФайлы
//
Процедура ОбновитьНаборФайловПоВладельцу(ВладелецФайлов, СписокФайлов) Экспорт
	
	МассивНовыхФайлов = ?(ТипЗнч(СписокФайлов) = Тип("Массив"), СписокФайлов, СписокФайлов.ВыгрузитьЗначения());
	
	// Создаем набор записей
	Набор = РегистрыСведений.ПринадлежностьФайлов.СоздатьНаборЗаписей();
	Набор.Отбор.ВладелецФайла.Установить(ВладелецФайлов);
	
	// Получаем текущий набор файлов указанного владельца для проверки их исключения из списка
	Набор.Прочитать();
	МассивИсключенныхФайлов = Набор.ВыгрузитьКолонку("ПрикрепленныйФайл");
	
	// Записываем новые файлы
	Набор.Очистить();
	Для каждого НовыйФайл Из МассивНовыхФайлов Цикл
		
		ЗаписьНабора = Набор.Добавить();
		ЗаписьНабора.ВладелецФайла = ВладелецФайлов;
		ЗаписьНабора.ПрикрепленныйФайл = НовыйФайл;
		
		// Удаляем файл из списка исключенных
		ПрежнийФайл = МассивИсключенныхФайлов.Найти(НовыйФайл);
		Если ПрежнийФайл <> Неопределено Тогда
			// В массиве должны остаться только те файлы, которые больше не связаны с данным владельцем
			МассивИсключенныхФайлов.Удалить(ПрежнийФайл);
		КонецЕсли;
		
	КонецЦикла;
	Набор.Записать(Истина);
	
	Если МассивИсключенныхФайлов.Количество() > 0 Тогда
		ПроверитьПринадлежностьФайловОбъектам(МассивИсключенныхФайлов);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список данных прикрепленных файлов, подчиненных указанному владельцу
//
// Параметры:
//  ВладелецФайлов	 - Ссылка - Ссылка на объект-родитель
// 
// Возвращаемое значение:
//  СписокЗначений - список данных прикрепленных файлов
//
Функция ПрочитатьСписокФайлов(ВладелецФайла) Экспорт

	Результат = Новый СписокЗначений;
	Если ВладелецФайла = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПринадлежностьФайлов.ПрикрепленныйФайл.Ссылка КАК ПрикрепленныйФайл,
	|	ПринадлежностьФайлов.ПрикрепленныйФайл.Наименование КАК Наименование,
	|	ПринадлежностьФайлов.ПрикрепленныйФайл.Комментарий КАК Комментарий,
	|	ПринадлежностьФайлов.ПрикрепленныйФайл.СпособОткрытияФайла КАК СпособОткрытия,
	|	ПринадлежностьФайлов.ПрикрепленныйФайл.РасширениеФайла КАК Расширение,
	|	ПринадлежностьФайлов.ПрикрепленныйФайл.ДатаСоздания КАК ДатаСоздания,
	|	ПринадлежностьФайлов.ПрикрепленныйФайл.РазмерФайла КАК Размер,
	|	ПринадлежностьФайлов.ПрикрепленныйФайл.НеСинхронизировать КАК НеСинхронизировать
	|ИЗ
	|	РегистрСведений.ПринадлежностьФайлов КАК ПринадлежностьФайлов
	|ГДЕ
	|	ПринадлежностьФайлов.ВладелецФайла = &ВладелецФайла
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПринадлежностьФайлов.ПрикрепленныйФайл.Наименование";
		
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Пакет = ПрикрепленныеФайлыКлиентСервер.НоваяСтруктураПрикрепляемогоФайла();	
		ЗаполнитьЗначенияСвойств(Пакет, Выборка);
		
		Если ЗначениеЗаполнено(Выборка.ПрикрепленныйФайл) Тогда
			Пакет.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Выборка.ПрикрепленныйФайл, "ДанныеФайла");
			Пакет.Предпросмотр        = ПрикрепленныеФайлыКлиентСервер.ПредставлениеФайлаНаФорме(Пакет.СпособОткрытия, Пакет.НавигационнаяСсылка);
			Пакет.Иконка              = ПрикрепленныеФайлыКлиентСервер.ИконкаПрикрепленногоФайла(Пакет.СпособОткрытия);
		Иначе
			Пакет.НавигационнаяСсылка = "";
			Пакет.Предпросмотр        = ПараметрыСеанса.ПредставленияФайлов.Пусто;
			Пакет.Иконка              = БиблиотекаКартинок.Пустая16;
		КонецЕсли;
		
		Результат.Добавить(Пакет, Выборка.Наименование);
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// Заполняет параметр сеанса ПредставленияФайлов адресами картинок, представляющими аудиоданные и прочие файлы-не изображения
//
//Параметры:
//	нет
//
Процедура ОбновитьСтруктуруПредставленияФайлов() Экспорт
	
	// Все изображения будут храниться до завершения сеанса пользователя
	ИД = Новый УникальныйИдентификатор;
	
	ОбщиеИзображения = Новый Структура;
	ОбщиеИзображения.Вставить("Пусто",          ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПредставлениеФайлаПусто.ПолучитьДвоичныеДанные(), ИД));
	ОбщиеИзображения.Вставить("HTML",           ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПредставлениеФайлаHTML.ПолучитьДвоичныеДанные(), ИД));
	ОбщиеИзображения.Вставить("Архив",          ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПредставлениеФайлаАрхив.ПолучитьДвоичныеДанные(), ИД));
	ОбщиеИзображения.Вставить("Аудио",          ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПредставлениеФайлаАудио.ПолучитьДвоичныеДанные(), ИД));
	ОбщиеИзображения.Вставить("Видео",          ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПредставлениеФайлаВидео.ПолучитьДвоичныеДанные(), ИД));
	ОбщиеИзображения.Вставить("ДокументОфиса",  ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПредставлениеФайлаДокументОфиса.ПолучитьДвоичныеДанные(), ИД));
	ОбщиеИзображения.Вставить("ФайлПлатформы",  ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПредставлениеФайлаПлатформы.ПолучитьДвоичныеДанные(), ИД));
	ОбщиеИзображения.Вставить("Текст",          ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПредставлениеФайлаТекст.ПолучитьДвоичныеДанные(), ИД));
	ОбщиеИзображения.Вставить("Прочее",       ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПредставлениеФайлаПрочее.ПолучитьДвоичныеДанные(), ИД));
	
	ОбщиеИзображения.Вставить("Добавить",     ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ДобавитьЭлементВЯчейку.ПолучитьДвоичныеДанные(), ИД));
	ОбщиеИзображения.Вставить("ВесьСписок",   ПоместитьВоВременноеХранилище(БиблиотекаКартинок.СинхронизацияДанныхАнализДанных48.ПолучитьДвоичныеДанные(), ИД));
	
	ПараметрыСеанса.ПредставленияФайлов = Новый ФиксированнаяСтруктура(ОбщиеИзображения);
	
КонецПроцедуры

// Возвращает структуру с адресами хранилищ значений картинок, отображающих 
//неграфические файлы на формах
//
//Параметры:
//	нет
//
//Возвращаемое значение:
//	Структура - значение параметра сеанса "ПредставленияФайлов"
//
Функция ПредставленияПрикрепленныхФайлов() Экспорт

	Возврат ПараметрыСеанса.ПредставленияФайлов;

КонецФункции

// Обновляет ссылку на графическое отображение в списке файлов
//
//Параметры:
//	СписокФайлов	- СписокЗначений, значениями которого являются структуры описания прикрепленных файлов
//						(см. ПрикрепленныеФайлыКлиентСервер.НоваяСтруктураПрикрепляемогоФайла())
//
Процедура ОбновитьПредставленияФайловВСписке(СписокФайлов) Экспорт
	
	СтруктураПредставлений = ПредставленияПрикрепленныхФайлов();
	Для каждого ЭлементСписка Из СписокФайлов Цикл
		
		ЭлементСписка.Значение.Предпросмотр = ПрикрепленныеФайлыКлиентСервер.ПредставлениеФайлаНаФорме(ЭлементСписка.Значение.СпособОткрытия,
					ЭлементСписка.Значение.НавигационнаяСсылка, СтруктураПредставлений);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру с описанием файла по ссылке на справочник "ПрикрепленныеФайлы"
//
//Параметры:
//	СсылкаНаФайл - СправочникСсылка.ПрикрепленныеФайлы
//
//Возвращаемое значение:
//	Структура - полученная из ПрикрепленныеФайлыКлиентСервер.НоваяСтруктураПрикрепляемогоФайла() и заполненная данными из ссылки
//
Функция СтруктураОписанияФайлаИзСсылки(СсылкаНаФайл) Экспорт

	Результат = ПрикрепленныеФайлыКлиентСервер.НоваяСтруктураПрикрепляемогоФайла();
	ДанныеФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайл, "Наименование,ДатаСоздания,РазмерФайла,Комментарий,СпособОткрытияФайла,РасширениеФайла,НеСинхронизировать");
	ЗаполнитьЗначенияСвойств(Результат, ДанныеФайла);
	
	Результат.СпособОткрытия      = ДанныеФайла.СпособОткрытияФайла;
	Результат.Расширение          = ДанныеФайла.РасширениеФайла;
	Результат.Размер              = ДанныеФайла.РазмерФайла;
	Результат.ПрикрепленныйФайл   = СсылкаНаФайл;
	
	Результат.НавигационнаяСсылка   = ПолучитьНавигационнуюСсылку(СсылкаНаФайл, "ДанныеФайла");
	Результат.Иконка        = ПрикрепленныеФайлыКлиентСервер.ИконкаПрикрепленногоФайла(Результат.СпособОткрытия);
	Результат.Предпросмотр  = ПрикрепленныеФайлыКлиентСервер.ПредставлениеФайлаНаФорме(Результат.СпособОткрытия, Результат.НавигационнаяСсылка);
	
	Возврат Результат;

КонецФункции
 

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Находит и удаляет записи справочника ПрикрепленныеФайлы, для которых в регистре сведений "ПринадлежностьФайлов"
//	не осталось ни одного владельца
//
//Параметры:
//	МассивФайлов - Массив, элементами которого являются ссылки справочника ПрикрепленныеФайлы
//
Процедура ПроверитьПринадлежностьФайловОбъектам(МассивФайлов) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивФайлов", МассивФайлов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрикрепленныеФайлы.Ссылка КАК ЛишнийФайл
	|ИЗ
	|	Справочник.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПринадлежностьФайлов КАК ПринадлежностьФайлов
	|		ПО ПринадлежностьФайлов.ПрикрепленныйФайл = ПрикрепленныеФайлы.Ссылка
	|ГДЕ
	|	ПрикрепленныеФайлы.Ссылка В (&МассивФайлов)
	|	И ПринадлежностьФайлов.ВладелецФайла ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Выборка.ЛишнийФайл.ПолучитьОбъект().Удалить();
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти
