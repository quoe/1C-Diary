////////////////////////////////////////////////////////////////////////////////
// ПлановыеОперации: процедуры и функции для управления шаблонами, расписаниями, 
//	плановыми операциями и плановыми движениями
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обслуживание расписаний

// Заполняет структуру, описывающую настройки расписания, значениями по умолчанию
Процедура ЗаполнитьСтруктуруРасписанияЗначениямиПоУмолчанию(СтруктураРасписания, ПлановаяДата) Экспорт
	
	Если ЗначениеЗаполнено(ПлановаяДата) Тогда
		
		СтруктураРасписания.ДатаНачалаРасписания  = ПлановаяДата;
		СтруктураРасписания.Периодичность         = Перечисления.СпособыПовторовСобытий.ЕжемесячноПоЧислам;
		СтруктураРасписания.ШаблонДнейНедели      = "";
		СтруктураРасписания.ПорядокПериодов       = 1;
		СтруктураРасписания.ПорядокДнейНедели     = 0;
		СтруктураРасписания.ШаблонЧиселМесяца     = "" + День(ПлановаяДата) + ",";
		СтруктураРасписания.ШаблонНомеровМесяцев  = ""; 
		
	Иначе
		
		СтруктураРасписания.ДатаНачалаРасписания  = ТекущаяДатаСеанса();
		СтруктураРасписания.Периодичность         = Перечисления.СпособыПовторовСобытий.НеИспользовать;
		СтруктураРасписания.ШаблонДнейНедели      = "";
		СтруктураРасписания.ПорядокПериодов       = 0;
		СтруктураРасписания.ПорядокДнейНедели     = 0;
		СтруктураРасписания.ШаблонЧиселМесяца     = "";
		СтруктураРасписания.ШаблонНомеровМесяцев  = ""; 
		
	КонецЕсли;
	
	СтруктураРасписания.ОписаниеРасписания = ПлановыеОперацииКлиентСервер.ПредставлениеРасписания(СтруктураРасписания);
	
КонецПроцедуры

// Возвращает Таблицу значений, заполненную произвольными датами расписания для указанного шаблона
Функция ПолучитьТаблицуПроизвольныхДатДляРедактирования(ВладелецРасписания, ДатаНачала, ДатаОкончания) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыРасписаний.ВладелецРасписания,
	|	ДатыРасписаний.ПлановаяДата КАК ПлановаяДата,
	|	ДатыРасписаний.СуммаДолга,
	|	ДатыРасписаний.СуммаПроцентов,
	|	ДатыРасписаний.СуммаКомиссии,
	|	ДатыРасписаний.Пропустить,
	|	ДатыРасписаний.ПлановаяОперация,
	|	ДатыРасписаний.АктуальнаяДата
	|ИЗ
	|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|ГДЕ
	|	ДатыРасписаний.ВладелецРасписания = &ВладелецРасписания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлановаяДата";
	Запрос.УстановитьПараметр("ВладелецРасписания", ВладелецРасписания);
	Запрос.УстановитьПараметр("Дата1", ?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Дата2", ?(ЗначениеЗаполнено(ДатаОкончания), ДатаОкончания, ДобавитьМесяц(Запрос.Параметры.Дата1, 1200)));
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Заполняет таблицу произвольных дат отредактированными в диалоге значениями
Процедура ОбновитьТаблицуПроизвольныхДатПослеРедактирования(ТаблицаДатВладельца, АдресОтредактированныхДат) Экспорт

	ТаблицаДатВладельца.Очистить();
	ОтредактированныеДаты = ПолучитьИзВременногоХранилища(АдресОтредактированныхДат);
	ТаблицаДатВладельца.Загрузить(ОтредактированныеДаты.Выгрузить());

КонецПроцедуры

// Возвращает максимальную дату расписания, на которую была выполнена запланированная операция
Функция ПолучитьДатуПоследнейВыполненнойОперации(ВладелецРасписания) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецРасписания", ВладелецРасписания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ДатыРасписаний.ПлановаяОперация.Дата) КАК ПлановаяОперацияДата
	|ИЗ
	|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|ГДЕ
	|	ДатыРасписаний.ВладелецРасписания = &ВладелецРасписания
	|	И ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Проведен, ЛОЖЬ) = ИСТИНА
	|	И ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.ПометкаУдаления, ИСТИНА) = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПлановаяОперацияДата;
	Иначе
		Возврат '00010101';
	КонецЕсли; 

КонецФункции

// Возвращает минимальную дату расписания, на которую нужно создавать плановую операцию
Функция ПолучитьСледующуюДатуПлановойОперации(ВладелецРасписания) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецРасписания", ВладелецРасписания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ДатыРасписаний.АктуальнаяДата) КАК АктуальнаяДата
	|ИЗ
	|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|ГДЕ
	|	ДатыРасписаний.ВладелецРасписания = &ВладелецРасписания
	|	И (ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Проведен, ЛОЖЬ) = ЛОЖЬ
	|			ИЛИ ДатыРасписаний.ПлановаяОперация = НЕОПРЕДЕЛЕНО)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПлановаяОперацияДата;
	Иначе
		Возврат '00010101';
	КонецЕсли; 

КонецФункции



// Обслуживание документов

// Вызывается из события объекта ПриКопировании для проверки и настройки использования шаблонов
//
// Параметры
//  НовыйОбъект        - ДокументОбъект - Документ, создаваемый путем копирования
//  ОбъектКопирования  - ДокументОбъект или структура - копируемый документ
//
Процедура ОбработкаСобытияПриКопировании(НовыйОбъект, ОбъектКопирования) Экспорт
	
	// Определяем использование шаблона
	//Если ТипЗнч(ОбъектКопирования) = Тип("ДокументОбъект.Доход") Тогда 
	//	Если ОбъектКопирования.ДополнительныеСвойства.Свойство("ЭтоШаблон") Тогда
	//		НовыйОбъект.ЭтоШаблон = ОбъектКопирования.ДополнительныеСвойства.ЭтоШаблон;
	//	КонецЕсли;
	//	Если ОбъектКопирования.ДополнительныеСвойства.Свойство("АктуальнаяДатаРасписания") И ЗначениеЗаполнено(ОбъектКопирования.ДополнительныеСвойства.АктуальнаяДатаРасписания) Тогда
	//		НовыйОбъект.Дата = ОбъектКопирования.ДополнительныеСвойства.АктуальнаяДатаРасписания;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаПлановПередЗаписьюДокумента(Объект, ПараметрыЗаписи, Форма) Экспорт
	
	Если Объект.Ссылка.Пустая() Тогда
		СсылкаНаОперацию = Документы[Объект.Метаданные().Имя].ПолучитьСсылку();
		Объект.УстановитьСсылкуНового(СсылкаНаОперацию);
	Иначе
		СсылкаНаОперацию = Объект.Ссылка;
	КонецЕсли;
	
	Если Объект.ЭтоШаблон Тогда
		Форма.ПараметрыРасписания.ВладелецРасписания = СсылкаНаОперацию;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "АктивностьШаблона") 
			И Форма.ПараметрыРасписания.НеИспользовать = Форма.АктивностьШаблона Тогда
			Форма.ПараметрыРасписания.НеИспользовать = Не Форма.АктивностьШаблона;
			Если Форма.ПараметрыРасписания.НеИспользовать И 
					(Не ЗначениеЗаполнено(Форма.ПараметрыРасписания.ДатаОкончанияРасписания) ИЛИ Форма.ПараметрыРасписания.ДатаОкончанияРасписания > ТекущаяДата()) Тогда
				Форма.ПараметрыРасписания.ДатаОкончанияРасписания = ТекущаяДата();
			ИначеЕсли Не Форма.ПараметрыРасписания.НеИспользовать И Форма.ПараметрыРасписания.ДатаОкончанияРасписания < ТекущаяДата() Тогда
				Форма.ПараметрыРасписания.ДатаОкончанияРасписания = Неопределено;
			КонецЕсли;
			Форма.ПараметрыРасписания.ОписаниеРасписания = ПлановыеОперацииКлиентСервер.ПредставлениеРасписания(Форма.ПараметрыРасписания);
			Форма.СохранитьРасписание = Истина;
		КонецЕсли;
	Иначе
		Форма.ЗаписьОперацииШаблона.Операция  = СсылкаНаОперацию;
		Форма.ЗаписьПлановойОперации.ПлановаяОперация = СсылкаНаОперацию;
	КонецЕсли;
	
	ЗаписьПлановойОперации = Форма.ЗаписьПлановойОперации;
	ЭтоПлановаяОперация =  Не Объект.ЭтоШаблон И ЗначениеЗаполнено(ЗаписьПлановойОперации.ВладелецРасписания) 
					И ЗначениеЗаполнено(ЗаписьПлановойОперации.ПлановаяДата);
					
	Если Не Объект.ЭтоШаблон  И Не ЭтоПлановаяОперация И НачалоДня(Объект.Дата) > НачалоДня(ТекущаяДатаСеанса()) И ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		
		// Это планирование одиночной операции (без шаблона и повторения)
		Форма.ЗаписьПлановойОперации.ВладелецРасписания = СсылкаНаОперацию;
		Форма.ЗаписьПлановойОперации.ПлановаяОперация   = СсылкаНаОперацию;
		Форма.ЗаписьПлановойОперации.ПлановаяДата       = Объект.Дата;
		Форма.ЗаписьПлановойОперации.АктуальнаяДата     = Объект.Дата;
		Форма.ЗаписьПлановойОперации.Пропустить         = Объект.ПометкаУдаления;
		Форма.ЗаписьПлановойОперации.Выполнено          = Ложь;
		ОбновитьСуммыПлановойОперации(Форма.ЗаписьПлановойОперации, Объект);
		
	ИначеЕсли ЭтоПлановаяОперация Тогда
		
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Форма.ЗаписьПлановойОперации.Выполнено       = Истина;
			Форма.ЗаписьПлановойОперации.Пропустить      = Ложь;
		ИначеЕсли ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			Форма.ЗаписьПлановойОперации.Выполнено       = Ложь;
		Иначе
			Форма.ЗаписьПлановойОперации.Выполнено       = Объект.Проведен И Не Объект.ПометкаУдаления;
		КонецЕсли;
		
		Если Объект.ПометкаУдаления Тогда
			Форма.ЗаписьПлановойОперации.Пропустить = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("ДокументОбъект.МыВернулиДолг") Или ТипОбъекта = Тип("ДокументОбъект.НамВернулиДолг") Тогда
		ПараметрыГрафика = Форма.ПараметрыГрафика;
	Иначе
		ПараметрыГрафика = Неопределено;
	КонецЕсли;
	
	ПередЗаписьюОперации(Объект, Форма.ПараметрыРасписания, Форма.АдресПроизвольныхДатРасписания, Форма.СохранитьРасписание, 
				Объект.ЭтоШаблон, Форма.ЗаписьОперацииШаблона, Форма.ЗаписьПлановойОперации, ПараметрыГрафика, , СсылкаНаОперацию);
	
КонецПроцедуры


// Обслуживает запись шаблона и плановых операций, созданных по шаблонам
//
//Параметры:
//	Объект - ДокументОбъект - сохраняемый документ, шаблон или операция
//	ПараметрыРасписания - РегистрСведенийМенеджерЗаписи.Расписания - настройки расписания 
//																	(заполняется только для шаблонов, для операций остается пустым)
//	АдресПроизвольныхДатРасписания - Строка - Адрес временного хранилища, в котором записаны даты расписания для повторения "ПоУказаннымДатам"
//																	(заполняется только для шаблонов, для операций остается пустым)
//	СохранитьРасписание - Булево - флаг того, что расписание изменялось. Заполняется только для шаблонов.
//	ЭтоШаблон - Булево - Истина, если сохраняется и анализируется шаблон.
//	ЗаписьОперацииШаблона - РегистрСведенийМенеджерЗаписи.ОперацииШаблонов - в случае ввода операции на основании шаблона измерение "Шаблон" в этой записи будет заполнено.
//	ЗаписьПлановойОперации - РегистрСведенийМенеджерЗаписи.ДатыРасписаний - в случае ввода операции по расписанию шаблона измерение "ВладелецРасписания" в этой записи будет заполнено.
//	ПараметрыГрафика - РегистрСведенийМенеджерЗаписи.ПараметрыГрафикаПогашенияДолгов - используется для записи условий погашения долга 
//																					(только в шаблонах для операций МыВернулиДолг и НамВернулиДолг)
//	ИзменилсяПределПланирования - Булево - устанавливается в Истину в случае, если изменилось значение константы ПределПланирования
//																					
//	
//
Процедура ПередЗаписьюОперации(Объект, ПараметрыРасписания, АдресПроизвольныхДатРасписания, СохранитьРасписание, 
							ЭтоШаблон, ЗаписьОперацииШаблона, ЗаписьПлановойОперации, 
							ПараметрыГрафика = Неопределено, ИзменилсяПределПланирования = Ложь, 
							СсылкаНаОперацию = Неопределено) Экспорт

	Если СсылкаНаОперацию = Неопределено Тогда
		Если Объект.Ссылка.Пустая() Тогда
			СсылкаНаОперацию = Документы[Объект.Метаданные().Имя].ПолучитьСсылку();
			Объект.УстановитьСсылкуНового(СсылкаНаОперацию);
		Иначе
			СсылкаНаОперацию = Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоШаблон Тогда
		
		
#Область СохранениеШаблона
		НачатьТранзакцию();
		
		// Определим, что именно изменилось в расписании
		ОбновитьСуммыПлановойОперации(ПараметрыРасписания, Объект);
		ОригинальноеРасписание = РегистрыСведений.Расписания.СоздатьМенеджерЗаписи();
		ОригинальноеРасписание.ВладелецРасписания = СсылкаНаОперацию;
		ОригинальноеРасписание.Прочитать();
		Если ОригинальноеРасписание.Выбран() Тогда
			ИзмениласьДатаНачала      = ОригинальноеРасписание.ДатаНачалаРасписания <> ПараметрыРасписания.ДатаНачалаРасписания;
			ИзмениласьДатаОкончания   = ОригинальноеРасписание.ДатаОкончанияРасписания <> ПараметрыРасписания.ДатаОкончанияРасписания
					ИЛИ ОригинальноеРасписание.КоличествоПовторов <> ПараметрыРасписания.КоличествоПовторов
					ИЛИ ИзменилсяПределПланирования = Истина;
			ИзменилисьСуммыОперации = ОригинальноеРасписание.СуммаДохода <> ПараметрыРасписания.СуммаДохода
					ИЛИ ОригинальноеРасписание.ВалютаДохода <> ПараметрыРасписания.ВалютаДохода
					ИЛИ ОригинальноеРасписание.СуммаРасхода <> ПараметрыРасписания.СуммаРасхода
					ИЛИ ОригинальноеРасписание.ВалютаРасхода <> ПараметрыРасписания.ВалютаРасхода;
			ИзменилсяШаблонПовторения = ОригинальноеРасписание.Периодичность <> ПараметрыРасписания.Периодичность
					ИЛИ ОригинальноеРасписание.ПорядокПериодов <> ПараметрыРасписания.ПорядокПериодов
					ИЛИ ОригинальноеРасписание.ПорядокДнейНедели <> ПараметрыРасписания.ПорядокДнейНедели
					ИЛИ ОригинальноеРасписание.ШаблонДнейНедели <> ПараметрыРасписания.ШаблонДнейНедели
					ИЛИ ОригинальноеРасписание.ШаблонЧиселМесяца <> ПараметрыРасписания.ШаблонЧиселМесяца
					ИЛИ ОригинальноеРасписание.ШаблонНомеровМесяцев <> ПараметрыРасписания.ШаблонНомеровМесяцев;
			СоздаватьРасписание       = Ложь;
		Иначе
			ИзмениласьДатаНачала      = Ложь;
			ИзмениласьДатаОкончания   = Ложь;
			ИзменилисьСуммыОперации   = Ложь;
			ИзменилсяШаблонПовторения = Истина;
			СоздаватьРасписание       = Истина;
		КонецЕсли; 
		
		Если СохранитьРасписание Или ИзменилисьСуммыОперации Или СоздаватьРасписание Тогда
			
			// Сохраняем настройку расписания
			ЗаписьРасписания = РегистрыСведений.Расписания.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьРасписания, ПараметрыРасписания);
			ЗаписьРасписания.ВладелецРасписания = СсылкаНаОперацию;
			ЗаписьРасписания.Записать(Истина);
			
		КонецЕсли;
		
		Если СохранитьРасписание Тогда
			// Изменились условия повторения
			
			// 1. Анализируем изменения, сделанные в настройках расписания:
			НужноОбновлятьДатыРасписания = ИзмениласьДатаНачала ИЛИ ИзмениласьДатаОкончания ИЛИ ИзменилсяШаблонПовторения;
			Если НЕ НужноОбновлятьДатыРасписания 
				И ОригинальноеРасписание.Периодичность = Перечисления.СпособыПовторовСобытий.ВУказанныеДаты 
				И ЗначениеЗаполнено(АдресПроизвольныхДатРасписания) Тогда
				// Могли измениться пометки пропуска в датах с произвольным расписанием:
				НужноОбновлятьДатыРасписания = ИзменилисьПропускиДатРасписания(СсылкаНаОперацию, АдресПроизвольныхДатРасписания);
			КонецЕсли; 
			
			МинимальнаяДатаИзменений = ПараметрыРасписания.ДатаНачалаРасписания - 1;
			
			// 2. Удаляем лишние строки:
			Если НужноОбновлятьДатыРасписания Тогда
				
				СписокДатРасписания = ПолучитьСписокДатРасписания(СсылкаНаОперацию);
				
				// Удаляем операции, которые не попадают в пределы повторения:
				ВсегоПовторов = 0;
				МассивСтрокДляУдаления = Новый Массив;
				Для Каждого СтрокаСпискаДат Из СписокДатРасписания Цикл
					
					Если СтрокаСпискаДат.ПлановаяДата < ПараметрыРасписания.ДатаНачалаРасписания Тогда
						Если НЕ СтрокаСпискаДат.ПлановаяОперацияПроведен И НЕ СтрокаСпискаДат.Пропустить Тогда
							ЗаписьДаты = РегистрыСведений.ДатыРасписаний.СоздатьМенеджерЗаписи();
							ЗаписьДаты.ВладелецРасписания = СсылкаНаОперацию;
							ЗаписьДаты.ПлановаяДата = СтрокаСпискаДат.ПлановаяДата;
							ЗаписьДаты.Удалить();
							МассивСтрокДляУдаления.Добавить(СтрокаСпискаДат);
							Продолжить;
						Иначе
							МинимальнаяДатаИзменений = Макс(СтрокаСпискаДат.ПлановаяДата, МинимальнаяДатаИзменений);
						КонецЕсли; 
					ИначеЕсли ЗначениеЗаполнено(ПараметрыРасписания.КоличествоПовторов) И ВсегоПовторов > ПараметрыРасписания.КоличествоПовторов
							ИЛИ ЗначениеЗаполнено(ПараметрыРасписания.ДатаОкончанияРасписания) И СтрокаСпискаДат.ПлановаяДата > ПараметрыРасписания.ДатаОкончанияРасписания Тогда
							ЗаписьДаты = РегистрыСведений.ДатыРасписаний.СоздатьМенеджерЗаписи();
							ЗаписьДаты.ВладелецРасписания = СсылкаНаОперацию;
							ЗаписьДаты.ПлановаяДата = СтрокаСпискаДат.ПлановаяДата;
							ЗаписьДаты.Удалить();
							МассивСтрокДляУдаления.Добавить(СтрокаСпискаДат);
							Продолжить;
					ИначеЕсли ИзменилсяШаблонПовторения Тогда
						Если НЕ СтрокаСпискаДат.ПлановаяОперацияПроведен Тогда 
							ЗаписьДаты = РегистрыСведений.ДатыРасписаний.СоздатьМенеджерЗаписи();
							ЗаписьДаты.ВладелецРасписания = СсылкаНаОперацию;
							ЗаписьДаты.ПлановаяДата = СтрокаСпискаДат.ПлановаяДата;
							ЗаписьДаты.Удалить();
							МассивСтрокДляУдаления.Добавить(СтрокаСпискаДат);
						Иначе
							МинимальнаяДатаИзменений = Макс(СтрокаСпискаДат.ПлановаяДата, МинимальнаяДатаИзменений);
						КонецЕсли;
					ИначеЕсли СтрокаСпискаДат.ПлановаяОперацияПроведен Тогда 
						МинимальнаяДатаИзменений = Макс(СтрокаСпискаДат.ПлановаяДата, МинимальнаяДатаИзменений);
					КонецЕсли; 
					
					Если СтрокаСпискаДат.ПлановаяДата >= ПараметрыРасписания.ДатаНачалаРасписания Тогда
						// Ведем подсчет повторов в пределах новых дат расписания
						ВсегоПовторов = ВсегоПовторов + 1;
					КонецЕсли;
					
				КонецЦикла; 
				Для Каждого ЭлементМассива Из МассивСтрокДляУдаления Цикл
					СписокДатРасписания.Удалить(ЭлементМассива);
				КонецЦикла; 
				СписокДатрасписания.Индексы.Добавить("ПлановаяДата");
				
			КонецЕсли; 
			
			
			// 3. Заполняем даты расписания
			Если ПараметрыРасписания.Периодичность = Перечисления.СпособыПовторовСобытий.ВУказанныеДаты И ЗначениеЗаполнено(АдресПроизвольныхДатРасписания) Тогда
				
				// Удаляем все существующие записи по ключу "ВладелецРасписания"
				НаборЗаписей = РегистрыСведений.ДатыРасписаний.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ВладелецРасписания.Установить(СсылкаНаОперацию);
				НаборЗаписей.Записать(Истина);
				
				// Считываем набор дат из временного хранилища:
				ТаблицаДат = ПолучитьИзВременногоХранилища(АдресПроизвольныхДатРасписания);
				
				// Заполняем набор:
				Если ТаблицаДат <> Неопределено Тогда
					Для Каждого СтрокаДаты Из ТаблицаДат Цикл
						
						Если НЕ ЗначениеЗаполнено(СтрокаДаты.ПлановаяДата) Тогда
							Продолжить;
						КонецЕсли; 
						
						ЗаписьДаты = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьДаты, СтрокаДаты);
						ЗаписьДаты.АктуальнаяДата = ЗаписьДаты.ПлановаяДата;
						ЗаписьДаты.ВладелецРасписания = СсылкаНаОперацию;
						
						Если ЗначениеЗаполнено(СтрокаДаты.ПлановаяОперация) Тогда
							Если ТипЗнч(СтрокаДаты.ПлановаяОперация) <> ТипЗнч(СсылкаНаОперацию) Тогда
								СтрокаДаты.ПлановаяОперация = Неопределено;
							ИначеЕсли СтрокаДаты.Пропустить <> СтрокаДаты.ПлановаяОперация.ПометкаУдаления Тогда
								ОбъектОперации = СтрокаДаты.ПлановаяОперация.ПолучитьОбъект();
								ОбъектОперации.УстановитьПометкуУдаления(СтрокаДаты.Пропустить);
							КонецЕсли; 
						КонецЕсли; 
						
						ОбновитьСуммыПлановойОперации(ЗаписьДаты, СтрокаДаты.ПлановаяОперация, ЗаписьРасписания);
						
						Если ЗначениеЗаполнено(СтрокаДаты.ПлановаяОперация) Тогда
							ЗаписьДаты.Выполнено = СтрокаДаты.ПлановаяОперация.Проведен;
						Иначе
							ЗаписьДаты.Выполнено = Ложь;
						КонецЕсли;
						
					КонецЦикла; 
					НаборЗаписей.Записать(Истина);
				КонецЕсли; 
				
			ИначеЕсли ПараметрыРасписания.Периодичность <> Перечисления.СпособыПовторовСобытий.НеИспользовать И НужноОбновлятьДатыРасписания Тогда
				
				ВычислитьИЗаписатьДатыРасписания(СсылкаНаОперацию, ПараметрыРасписания, СписокДатРасписания, Неопределено, МинимальнаяДатаИзменений);
				
			КонецЕсли; 
			
		ИначеЕсли ИзменилисьСуммыОперации Тогда
			// изменилась только сумма шаблона
			
			ОбновитьСуммыВДатахРасписания(ПараметрыРасписания);
			
		КонецЕсли; 
		
		// Для оперций погашения долгов и накоплений на цель сохраним параметры графика
		Если ПараметрыГрафика <> Неопределено Тогда
			ЗаписьпараметровГрафика = РегистрыСведений.ПараметрыГрафикаПогашенияДолгов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьпараметровГрафика, ПараметрыГрафика);
			//ЗаписьпараметровГрафика.Долг           = СсылкаНаОперацию.Кредит;
			ЗаписьпараметровГрафика.ШаблонОперации = СсылкаНаОперацию;
			Если НЕ ЗначениеЗаполнено(ЗаписьпараметровГрафика.СпособПогашения) Тогда
				ЗаписьпараметровГрафика.СпособПогашения = Перечисления.СпособыПогашенияКредита.Вручную;
			КонецЕсли; 
			ЗаписьпараметровГрафика.Записать(Истина);
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
		СохранитьРасписание = Ложь;
		
#КонецОбласти

	Иначе
		// Сохраняется операция-не-шаблон
		
		// Возможно, плановую операцию создали по расписанию:
		Если ЗначениеЗаполнено(ЗаписьПлановойОперации.ВладелецРасписания) 
				И ЗначениеЗаполнено(ЗаписьПлановойОперации.ПлановаяДата) 
				И ТипЗнч(ЗаписьПлановойОперации.ВладелецРасписания) = ТипЗнч(СсылкаНаОперацию) Тогда
				
			// Это - плановая операция. 
			// Но в момент редактирования самой операции могли изменить расписание шаблона.
			// Нужно проверить и удалить дубли:
			ЗапросДублей = Новый Запрос;
			ЗапросДублей.УстановитьПараметр("ПлановаяОперация", СсылкаНаОперацию);
			ЗапросДублей.УстановитьПараметр("ПлановаяДата", НачалоДня(ЗаписьПлановойОперации.ПлановаяДата));
			ЗапросДублей.Текст = 
			"ВЫБРАТЬ
			|	ДатыРасписаний.ВладелецРасписания,
			|	ДатыРасписаний.ПлановаяДата
			|ИЗ
			|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
			|ГДЕ
			|	ДатыРасписаний.ПлановаяОперация = &ПлановаяОперация
			|	И ДатыРасписаний.ПлановаяДата <> &ПлановаяДата";
			Выборка = ЗапросДублей.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаписьДубля = РегистрыСведений.ДатыРасписаний.СоздатьМенеджерЗаписи();
				ЗаписьДубля.ВладелецРасписания = Выборка.ВладелецРасписания;
				ЗаписьДубля.ПлановаяДата = Выборка.ПлановаяДата;
				ЗаписьДубля.Удалить();
			КонецЦикла; 
			
			// Делаем запись в регистр сведений ДатыРасписаний
			ЗаписьРегистра = РегистрыСведений.ДатыРасписаний.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ЗаписьПлановойОперации);
			ЗаписьРегистра.Прочитать();
			ЗаписьРегистра.ПлановаяДата       = ЗаписьПлановойОперации.ПлановаяДата;
			ЗаписьРегистра.ВладелецРасписания = ЗаписьПлановойОперации.ВладелецРасписания;
			ЗаписьРегистра.ПлановаяОперация   = СсылкаНаОперацию;
			ЗаписьРегистра.АктуальнаяДата     = Объект.Дата;
			ЗаписьРегистра.Пропустить         = ЗаписьПлановойОперации.Пропустить;
			ЗаписьРегистра.Выполнено          = ЗаписьПлановойОперации.Выполнено;
			ОбновитьСуммыПлановойОперации(ЗаписьРегистра, Объект);
			ЗаписьРегистра.Записать(Истина);
			
			Объект.ДополнительныеСвойства.Вставить("ЭтоПлановаяОперация", Истина);
			Объект.ДополнительныеСвойства.Вставить("ШаблонОперации", ЗаписьПлановойОперации.ВладелецРасписания);
			Объект.ДополнительныеСвойства.Вставить("ПлановаяДата",   ЗаписьПлановойОперации.ПлановаяДата);
			
		ИначеЕсли ЗначениеЗаполнено(ЗаписьОперацииШаблона.Шаблон) Тогда
			
			// Операция введена без расписания но по шаблону
			ЗаписьРегистра = РегистрыСведений.ОперацииШаблонов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ЗаписьОперацииШаблона);
			ЗаписьРегистра.Записать(Истина);
			
		КонецЕсли;
		
		
	КонецЕсли;

КонецПроцедуры

Процедура ПослеЗаписиСправочникДолги(СсылкаНаДолг, ПараметрыРасписания, АдресПроизвольныхДатРасписания, СохранитьРасписание, ПараметрыГрафика) Экспорт

	// Сохраняется операция-шаблон
	Если СохранитьРасписание Тогда
		
		ШаблонОперации    = ПараметрыГрафика.ШаблонОперации;
		АктуальностьДолга = СсылкаНаДолг.Активность;
		
		// 1. Сохраняем изменения в настройках графика платежей
		ЗаписьГрафика = РегистрыСведений.ПараметрыГрафикаПогашенияДолгов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьГрафика, ПараметрыГрафика);
		ЗаписьГрафика.Долг = СсылкаНадолг;
		ЗаписьГрафика.Записать(Истина);
		
		// 2. Сохраняем настройку расписания
		МенеджерЗаписи = РегистрыСведений.Расписания.СоздатьМенеджерЗаписи();
		ОбновитьСуммыПлановойОперации(ПараметрыРасписания, ПараметрыРасписания.ВладелецРасписания);
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыРасписания);
		МенеджерЗаписи.ВладелецРасписания = ШаблонОперации;
		МенеджерЗаписи.Записать(Истина);
		
		// 3. Заполняем даты расписания
		Если ПараметрыРасписания.Периодичность = Перечисления.СпособыПовторовСобытий.ВУказанныеДаты И ЗначениеЗаполнено(АдресПроизвольныхДатРасписания) Тогда
			
			// Удаляем все существующие записи по ключу "ВладелецРасписания"
			НаборЗаписей = РегистрыСведений.ДатыРасписаний.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВладелецРасписания.Установить(ШаблонОперации);
			НаборЗаписей.Записать(Истина);
			
			// Считываем набор дат из временного хранилища:
			ТаблицаДат = ПолучитьИзВременногоХранилища(АдресПроизвольныхДатРасписания);
			
			// Заполняем набор:
			Если ТаблицаДат <> Неопределено Тогда
				Для Каждого СтрокаДаты Из ТаблицаДат Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаДаты.ПлановаяДата) Тогда
						Продолжить;
					КонецЕсли; 
					ЗаписьДаты = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьДаты, СтрокаДаты);
					ЗаписьДаты.АктуальнаяДата = ЗаписьДаты.ПлановаяДата;
					ЗаписьДаты.ВладелецРасписания = ШаблонОперации;
					Если ЗначениеЗаполнено(СтрокаДаты.ПлановаяОперация) Тогда
						
						Если ТипЗнч(СтрокаДаты.ПлановаяОперация) <> ТипЗнч(ШаблонОперации) Тогда
							СтрокаДаты.ПлановаяОперация = Неопределено;
						ИначеЕсли СтрокаДаты.Пропустить <> СтрокаДаты.ПлановаяОперация.ПометкаУдаления Тогда
							ОбъектОперации = СтрокаДаты.ПлановаяОперация.ПолучитьОбъект();
							ОбъектОперации.УстановитьПометкуУдаления(СтрокаДаты.Пропустить);
						КонецЕсли;
						
						Если СтрокаДаты.Пропустить Тогда
							ЗаписьДаты.Выполнено = Ложь;
						ИначеЕсли ЗначениеЗаполнено(СтрокаДаты.ПлановаяОперация) И СтрокаДаты.ПлановаяОперация.Проведен Тогда
							ЗаписьДаты.Выполнено  = Истина;
							ЗаписьДаты.Пропустить = Ложь;
						Иначе
							ЗаписьДаты.Выполнено = Ложь;
						КонецЕсли;
						 
					ИначеЕсли НЕ АктуальностьДолга Тогда
						ЗаписьДаты.Пропустить = Истина;
						ЗаписьДаты.Выполнено = Ложь;
					КонецЕсли; 
					
					ОбновитьСуммыПлановойОперации(ЗаписьДаты, СтрокаДаты.ПлановаяОперация, ПараметрыРасписания);
					
				КонецЦикла; 
				
				НаборЗаписей.Записать(Истина);
			КонецЕсли; 
			
		ИначеЕсли ПараметрыРасписания.Периодичность = Перечисления.СпособыПовторовСобытий.НеИспользовать И ЗначениеЗаполнено(АдресПроизвольныхДатРасписания) Тогда
			
			// Удаляем все существующие записи по ключу "ВладелецРасписания"
			НаборЗаписей = РегистрыСведений.ДатыРасписаний.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВладелецРасписания.Установить(ШаблонОперации);
			НаборЗаписей.Записать(Истина);
			
		КонецЕсли;
		
		// 4. Формируем движения плановых операций
		ШаблонОперации.ПолучитьОбъект().Записать();
		
		СохранитьРасписание = Ложь;
		
	КонецЕсли; 
	

КонецПроцедуры

Процедура ПослеЗаписиСправочникФинансовыеЦели(СсылкаНаЦель, ШаблонОперации, ПараметрыРасписания, АдресПроизвольныхДатРасписания, СохранитьРасписание) Экспорт

	// Сохраняется операция-шаблон
	Если СохранитьРасписание Тогда
		
		// Выполняем все как для обычного шаблона с расписанием
		Если ЗначениеЗаполнено(ШаблонОперации) Тогда
			ПередЗаписьюОперации(ШаблонОперации, ПараметрыРасписания, АдресПроизвольныхДатРасписания, СохранитьРасписание, Истина, Неопределено, Неопределено);
		КонецЕсли; 
		
		СохранитьРасписание = Ложь;
		
	КонецЕсли; 
	

КонецПроцедуры

// Обработка подписки на событие ПлановаяОперацияУдаление
//	Выполняет поиск записей регистра сведений "ДатыРасписаний" с удаляемым документом
//	и очистку ресурса "ПлановаяОперация"
Процедура ПлановаяОперацияУдалениеПередУдалением(Источник, Отказ) Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИзменятьРежим = НЕ ПривилегированныйРежим();
	Если ИзменятьРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	ТипСсылки = ТипЗнч(Источник.Ссылка);
	
	Если Источник.ЭтоШаблон И (ТипСсылки = Тип("ДокументСсылка.МыВернулиДолг") ИЛИ ТипСсылки = Тип("ДокументСсылка.НамВернулиДолг")) Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПараметрыГрафикаПогашенияДолгов.Долг
		|ИЗ
		|	РегистрСведений.ПараметрыГрафикаПогашенияДолгов КАК ПараметрыГрафикаПогашенияДолгов
		|ГДЕ
		|	ПараметрыГрафикаПогашенияДолгов.ШаблонОперации = &Ссылка
		|";
			
		ПакетРезультатов = Запрос.ВыполнитьПакет();
			
		Выборка = ПакетРезультатов[0].Выбрать();
		Пока Выборка.Следующий() Цикл
		
			МенеджерЗаписи = РегистрыСведений.ПараметрыГрафикаПогашенияДолгов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Долг = Выборка.Долг;
			МенеджерЗаписи.Удалить();
			
		КонецЦикла; 

			
	ИначеЕсли Не Источник.ЭтоШаблон Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДатыРасписаний.ВладелецРасписания,
		|	ДатыРасписаний.ПлановаяДата,
		|	ДатыРасписаний.АктуальнаяДата,
		|	ДатыРасписаний.Пропустить,
		|	ДатыРасписаний.СуммаДолга,
		|	ДатыРасписаний.СуммаПроцентов,
		|	ДатыРасписаний.СуммаКомиссии,
		|	ДатыРасписаний.ПлановаяОперация
		|ИЗ
		|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
		|ГДЕ
		|	ДатыРасписаний.ПлановаяОперация = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
		
			МенеджерЗаписи = РегистрыСведений.ДатыРасписаний.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.ПлановаяОперация = Неопределено;
			МенеджерЗаписи.Пропустить = Истина;
			МенеджерЗаписи.Записать(Истина);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	Если ИзменятьРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает структуру, описывающую отношение операции к шаблону
Функция СвойстваПлановойОперации(Операция) Экспорт

	Результат = Новый Структура("ЭтоПлановаяОперация, ШаблонОперации, ПлановаяДата", Ложь, Неопределено, Неопределено);
	
	Если Не ЗначениеЗаполнено(Операция) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПлановаяОперация", Операция);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОперацииШаблонов.Шаблон,
	|	ОперацииШаблонов.Операция КАК Операция,
	|	ДатыРасписаний.ВладелецРасписания,
	|	ЕСТЬNULL(ДатыРасписаний.ПлановаяДата, ДАТАВРЕМЯ(1, 1, 1)) КАК ПлановаяДата,
	|	ЕСТЬNULL(ДатыРасписаний.АктуальнаяДата, ДАТАВРЕМЯ(1, 1, 1)) КАК АктуальнаяДата
	|ИЗ
	|	РегистрСведений.ОперацииШаблонов КАК ОперацииШаблонов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|		ПО ОперацииШаблонов.Шаблон = ДатыРасписаний.ВладелецРасписания
	|			И ОперацииШаблонов.Операция = ДатыРасписаний.ПлановаяОперация
	|			И ОперацииШаблонов.ПлановаяДата = ДатыРасписаний.ПлановаяДата
	|ГДЕ
	|	ОперацииШаблонов.Операция = &ПлановаяОперация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Операция,
	|	ПлановаяДата,
	|	АктуальнаяДата";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.ЭтоПлановаяОперация = ЗначениеЗаполнено(Выборка.Шаблон);
		Результат.ШаблонОперации      = Выборка.Шаблон;
		Результат.ПлановаяДата        = Выборка.ПлановаяДата;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Вычисляет и обновляет в ПараметрахРасписания суммы и валюты поступления и списания
//
//Параметры:
//	ПараметрыПлана - Структура или запись регистра сведений Расписания или ДатыРасписания
//					-  в зависимости от того, для шаблона или для плановой операции вызвана порцедура
//	Операция - ДокументОбъект или ДокументСсылка - документ, из которого нужно получить суммы и валюту оборотов
//  ПараметрыРасписания - Структура или запись регистра сведений "Расписания". Используется при остутствии операции
//
Процедура ОбновитьСуммыПлановойОперации(ПараметрыПлана, Операция, ПараметрыРасписания = Неопределено) Экспорт
	
	Если Операция = Неопределено И ПараметрыРасписания = Неопределено Тогда
		// ничего не изменяем
		Возврат;
	КонецЕсли;
	
	ПараметрыПлана.СуммаДохода   = 0;
	ПараметрыПлана.СуммаРасхода  = 0;
	ПараметрыПлана.ВалютаДохода  = ПараметрыСеанса.ВалютаУчета;
	ПараметрыПлана.ВалютаРасхода = ПараметрыПлана.ВалютаДохода;
	
	Если Операция <> Неопределено Тогда
		
		ТипОперации = ТипЗнч(Операция);
		Если ТипОперации = Тип("ДокументСсылка.Доход") Или ТипОперации = Тип("ДокументОбъект.Доход") Тогда
			
			ПараметрыПлана.ВалютаДохода = Операция.ВалютаОперации;
			ПараметрыПлана.СуммаДохода  = Операция.СуммаОперации;
			
		ИначеЕсли ТипОперации = Тип("ДокументСсылка.Расход") Или ТипОперации = Тип("ДокументОбъект.Расход") Тогда
			
			ПараметрыПлана.ВалютаРасхода = Операция.ВалютаОперации;
			ПараметрыПлана.СуммаРасхода  = Операция.СуммаОплаты;
			
		ИначеЕсли ТипОперации = Тип("ДокументСсылка.МыВернулиДолг") Или ТипОперации = Тип("ДокументОбъект.МыВернулиДолг") Тогда
			
			ПараметрыПлана.ВалютаРасхода = Операция.ВалютаКошелька;
			ПараметрыПлана.СуммаРасхода  = Операция.СуммаОперации;
			ПараметрыПлана.ВалютаДохода  = Операция.ВалютаКредита;
			ПараметрыПлана.СуммаДохода   = Операция.СписаноКредита;
			
		ИначеЕсли ТипОперации = Тип("ДокументСсылка.МыВзялиВДолг") Или ТипОперации = Тип("ДокументОбъект.МыВзялиВДолг") Тогда
			
			ПараметрыПлана.ВалютаДохода  = Операция.ВалютаПолучено;
			ПараметрыПлана.СуммаДохода   = Операция.СуммаПолучено - Операция.СуммаДополнительныхРасходов;
			
		ИначеЕсли ТипОперации = Тип("ДокументСсылка.МыДалиВДолг") Или ТипОперации = Тип("ДокументОбъект.МыДалиВДолг") Тогда
			
			ПараметрыПлана.ВалютаРасхода = Операция.ВалютаВыдано;
			ПараметрыПлана.СуммаРасхода  = Операция.ВсегоРасход;
			
		ИначеЕсли ТипОперации = Тип("ДокументСсылка.НамВернулиДолг") Или ТипОперации = Тип("ДокументОбъект.НамВернулиДолг") Тогда
			
			ПараметрыПлана.ВалютаРасхода = Операция.ВалютаДолга;
			ПараметрыПлана.СуммаРасхода  = Операция.СуммаСписания;
			ПараметрыПлана.ВалютаДохода  = Операция.ВалютаПолучено;
			ПараметрыПлана.СуммаДохода   = Операция.ВсегоСуммаПоступления;
			
		ИначеЕсли ТипОперации = Тип("ДокументСсылка.ОбменВалюты") Или ТипОперации = Тип("ДокументОбъект.ОбменВалюты") Тогда
			
			ПараметрыПлана.ВалютаРасхода = Операция.ВалютаСписания;
			ПараметрыПлана.СуммаРасхода  = Операция.СписаноСУчетомКомиссии;
			ПараметрыПлана.ВалютаДохода  = Операция.ВалютаПоступления;
			ПараметрыПлана.СуммаДохода   = Операция.ПолученоСУчетомКомиссии;
			
		ИначеЕсли ТипОперации = Тип("ДокументСсылка.Перемещение") Или ТипОперации = Тип("ДокументОбъект.Перемещение") Тогда
			
			ПараметрыПлана.ВалютаРасхода = Операция.ВалютаОперации;
			ПараметрыПлана.СуммаРасхода  = Операция.СписаноСУчетомРасходов;
			ПараметрыПлана.ВалютаДохода  = Операция.ВалютаОперации;
			ПараметрыПлана.СуммаДохода   = Операция.ПолученоСУчетомРасходов;
			
		ИначеЕсли ТипОперации = Тип("ДокументСсылка.УниверсальнаяОперация") Или ТипОперации = Тип("ДокументОбъект.УниверсальнаяОперация") Тогда
			
			ПараметрыПлана.ВалютаРасхода = Операция.ВалютаРасходовОперации;
			ПараметрыПлана.СуммаРасхода  = Операция.СуммаРасходовОперации;
			ПараметрыПлана.ВалютаДохода  = Операция.ВалютаДоходовОперации;
			ПараметрыПлана.СуммаДохода   = Операция.СуммаДоходовОперации;
			
		КонецЕсли;
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(ПараметрыПлана, ПараметрыРасписания, "СуммаДохода,ВалютаДохода,СуммаРасхода,ВалютаРасхода");
		
		МыВозвращаемДолг  = ТипЗнч(ПараметрыПлана.ВладелецРасписания) = Тип("ДокументСсылка.МыВернулиДолг");
		НамВозвращаютДолг = ТипЗнч(ПараметрыПлана.ВладелецРасписания) = Тип("ДокументСсылка.НамВернулиДолг");
		
		Если МыВозвращаемДолг Тогда
			
			ПараметрыПлана.СуммаДохода   = 0;
			ПараметрыПлана.СуммаРасхода  = ПараметрыПлана.СуммаДолга + ПараметрыПлана.СуммаПроцентов + ПараметрыПлана.СуммаКомиссии 
					+ ?(ЗначениеЗаполнено(ПараметрыПлана.ВладелецРасписания), ПараметрыПлана.ВладелецРасписания.СуммаДополнительныхРасходов, 0);
			
		ИначеЕсли НамВозвращаютДолг Тогда
			
			ПараметрыПлана.СуммаДохода   = ПараметрыПлана.СуммаДолга + ПараметрыПлана.СуммаПроцентов;
			ПараметрыПлана.СуммаРасхода  = ПараметрыПлана.СуммаКомиссии 
					+ ?(ЗначениеЗаполнено(ПараметрыПлана.ВладелецРасписания), ПараметрыПлана.ВладелецРасписания.СуммаДополнительныхРасходов, 0);
			
		ИначеЕсли ПараметрыРасписания <> Неопределено Тогда
			
			ПараметрыПлана.СуммаДохода   = ПараметрыРасписания.СуммаДохода;
			ПараметрыПлана.СуммаРасхода  = ПараметрыРасписания.СуммаРасхода;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

// При изменении сумм шаблона изменяет суммы дат расписания
//	Изменяются только те записи, у которых нет плановых операций.
//
//Параметры:
//  ПараметрыРасписания - Структура или запись регистра сведений "Расписания". Используется при остутствии операции
//
Процедура ОбновитьСуммыВДатахРасписания(ПараметрыРасписания) Экспорт
	
	НаборДат = РегистрыСведений.ДатыРасписаний.СоздатьНаборЗаписей();
	НаборДат.Отбор.ВладелецРасписания.Установить(ПараметрыРасписания.ВладелецРасписания);
	НаборДат.Прочитать();
	
	МыВозвращаемДолг = ТипЗнч(ПараметрыРасписания.ВладелецРасписания) = Тип("ДокументСсылка.МыВернулиДолг");
	НамВозвращаютДолг = ТипЗнч(ПараметрыРасписания.ВладелецРасписания) = Тип("ДокументСсылка.НамВернулиДолг");
	
	Если НаборДат.Выбран() Тогда
		
		Для каждого ЗаписьДаты Из НаборДат Цикл
			
			Если Не ЗначениеЗаполнено(ЗаписьДаты.ПлановаяОперация) Или ЗаписьДаты.ПлановаяОперация = ПараметрыРасписания.ВладелецРасписания Тогда
				
				ЗаписьДаты.ВалютаДохода = ПараметрыРасписания.ВалютаДохода;
				ЗаписьДаты.ВалютаРасхода = ПараметрыРасписания.ВалютаРасхода;
				
				Если МыВозвращаемДолг Тогда
					
					ЗаписьДаты.СуммаДохода   = 0;
					ЗаписьДаты.СуммаРасхода  = ЗаписьДаты.СуммаДолга + ЗаписьДаты.СуммаПроцентов + ЗаписьДаты.СуммаКомиссии;
					
				ИначеЕсли НамВозвращаютДолг Тогда
					
					ЗаписьДаты.СуммаДохода   = ЗаписьДаты.СуммаДолга + ЗаписьДаты.СуммаПроцентов;
					ЗаписьДаты.СуммаРасхода  = ЗаписьДаты.СуммаКомиссии;
					
				Иначе
					
					ЗаписьДаты.СуммаДохода   = ПараметрыРасписания.СуммаДохода;
					ЗаписьДаты.СуммаРасхода  = ПараметрыРасписания.СуммаРасхода;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборДат.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры


// Формирование движений плановых операций

// Формирует движения РН "ОборотыПлановыхОпераций" для учета в бюджетах
//
//Параметры
//	СсылкаНаШаблон - ДокументСсылка.* - шаблон, по которому формируются движения
//	ДополнительныеСвойства - Стркутра - заполняется при записи документа-объекта и содержит все необходимое 
//									для формирования движений:
//
//
Процедура СформироватьОборотыШаблонаДокументов(СсылкаНаШаблон, ДополнительныеСвойства = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(СсылкаНаШаблон) Тогда
		Возврат;
	КонецЕсли; 
	
	НаборОборотовШаблона = РегистрыНакопления.ОборотыПлановыхОпераций.СоздатьНаборЗаписей();
	НаборОборотовШаблона.Отбор.Регистратор.Установить(СсылкаНаШаблон);
	АктивностьОборотов = НЕ СсылкаНаШаблон.ПометкаУдаления;
	
	// Получили даты расписания для плановой операции и параметры погашения для долгов
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаШаблон", СсылкаНаШаблон);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДатыРасписаний.ПлановаяДата КАК ПлановаяДата
	|ИЗ
	|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|ГДЕ
	|	ДатыРасписаний.ВладелецРасписания = &СсылкаНаШаблон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРасписаний.ПлановаяДата КАК ПлановаяДата,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Дата, ДатыРасписаний.АктуальнаяДата) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДатыРасписаний.ПлановаяДата
	|		ИНАЧЕ ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Дата, ДатыРасписаний.АктуальнаяДата)
	|	КОНЕЦ КАК АктуальнаяДата,
	|	ДатыРасписаний.ПлановаяОперация КАК ПлановаяОперация,
	|	ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Проведен, Неопределено) КАК ПлановаяОперацияУчтена,
	|	ОборотыПлановыхОпераций.Период КАК Период,
	|	ОборотыПлановыхОпераций.ПлановаяДата КАК ПлановаяДатаОборотов,
	|	ДатыРасписаний.Пропустить КАК Пропустить,
	|	ОборотыПлановыхОпераций.Регистратор,
	|	ОборотыПлановыхОпераций.НомерСтроки,
	|	ОборотыПлановыхОпераций.Кошелек,
	|	ОборотыПлановыхОпераций.РазделБюджета,
	|	ВЫБОР
	|		КОГДА ОборотыПлановыхОпераций.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.пустаяСсылка)
	|			ТОГДА ОборотыПлановыхОпераций.УдалитьГрафаБюджета.ТипПоказателя
	|		ИНАЧЕ ОборотыПлановыхОпераций.ТипПоказателя
	|	КОНЕЦ КАК ТипПоказателя,
	|	ОборотыПлановыхОпераций.СтатьяБюджета,
	|	ОборотыПлановыхОпераций.Валюта,
	|	ОборотыПлановыхОпераций.Сумма КАК Сумма,
	|	ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Проведен, ЛОЖЬ) КАК ПлановаяОперацияПроведен,
	|	ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.ПометкаУдаления, ЛОЖЬ) КАК ПлановаяОперацияПометкаУдаления,
	|	ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Дата, НЕОПРЕДЕЛЕНО) КАК ПлановаяОперацияДата,
	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(ОборотыПлановыхОпераций.Период, ДЕНЬ), НАЧАЛОПЕРИОДА(ДатыРасписаний.ПлановаяДата, ДЕНЬ)) КАК ДатаЗаписи,
	|	ДатыРасписаний.СуммаДолга КАК СуммаДолга,
	|	ДатыРасписаний.СуммаПроцентов КАК СуммаПроцентов,
	|	ДатыРасписаний.СуммаКомиссии КАК СуммаКомиссии
	|ИЗ
	|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОборотыПлановыхОпераций КАК ОборотыПлановыхОпераций
	|		ПО (ОборотыПлановыхОпераций.Регистратор = ДатыРасписаний.ВладелецРасписания)
	|			И (ОборотыПлановыхОпераций.ПлановаяДата = ДатыРасписаний.ПлановаяДата)
	|			И (ОборотыПлановыхОпераций.Регистратор = &СсылкаНаШаблон)
	|			И (ДатыРасписаний.ВладелецРасписания = &СсылкаНаШаблон)
	|ГДЕ
	|	ДатыРасписаний.ВладелецРасписания = &СсылкаНаШаблон
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗаписи
	|ИТОГИ
	|	МАКСИМУМ(ПлановаяДата),
	|	МАКСИМУМ(АктуальнаяДата),
	|	МАКСИМУМ(ПлановаяОперация),
	|	МАКСИМУМ(ПлановаяОперацияУчтена),
	|	МАКСИМУМ(Период),
	|	МАКСИМУМ(Пропустить),
	|	КОЛИЧЕСТВО(ТипПоказателя),
	|	СУММА(Сумма),
	|	МАКСИМУМ(ПлановаяОперацияПроведен),
	|	МАКСИМУМ(ПлановаяОперацияПометкаУдаления),
	|	МАКСИМУМ(СуммаДолга),
	|	МАКСИМУМ(СуммаПроцентов),
	|	МАКСИМУМ(СуммаКомиссии)
	|ПО
	|	ДатаЗаписи";
	
	// Для операций погашения долгов дополним запрос параметрами погашения долга:
	Если ТипЗнч(СсылкаНаШаблон) = Тип("ДокументСсылка.МыВернулиДолг") Тогда 
		Запрос.УстановитьПараметр("Долг", СсылкаНаШаблон.Кредит);
	ИначеЕсли ТипЗнч(СсылкаНаШаблон) = Тип("ДокументСсылка.НамВернулиДолг") Тогда
		Запрос.УстановитьПараметр("Долг", СсылкаНаШаблон.Долг);
	Иначе
		Запрос.УстановитьПараметр("Долг", Неопределено);
	КонецЕсли; 
	Если ЗначениеЗаполнено(Запрос.Параметры.Долг) Тогда
		Запрос.Текст = Запрос.Текст +
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыГрафикаПогашенияДолгов.Долг,
		|	ПараметрыГрафикаПогашенияДолгов.ШаблонОперации,
		|	ПараметрыГрафикаПогашенияДолгов.КошелекДляПогашения,
		|	ПараметрыГрафикаПогашенияДолгов.СтатьяДляУчетаПроцентов,
		|	ПараметрыГрафикаПогашенияДолгов.СтатьяЕжемесячнойКомиссии,
		|	ПараметрыГрафикаПогашенияДолгов.ФинансоваяЦель КАК ФинансоваяЦель,
		|	ПараметрыГрафикаПогашенияДолгов.КошелекДляПогашения.ТипСчета КАК ТипСчетаКошелькаПогашения,
		|	ПараметрыГрафикаПогашенияДолгов.КошелекДляПогашения.Валюта КАК ВалютаКошелькаПогашения
		|ИЗ
		|	РегистрСведений.ПараметрыГрафикаПогашенияДолгов КАК ПараметрыГрафикаПогашенияДолгов
		|ГДЕ
		|	ПараметрыГрафикаПогашенияДолгов.ШаблонОперации = &СсылкаНаШаблон
		|	И ПараметрыГрафикаПогашенияДолгов.Долг = &Долг";
		
	КонецЕсли; 
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаКоличестваДат = ПакетРезультатовЗапроса[0].Выбрать();
	Если НЕ ВыборкаКоличестваДат.Следующий() ИЛИ НЕ ЗначениеЗаполнено(ВыборкаКоличестваДат.ПлановаяДата) Тогда
		// Очищаем весь набор и возращаемся
		НаборОборотовШаблона.Очистить();
		НаборОборотовШаблона.Записать(Истина);
		Возврат;
	КонецЕсли;
	
	// В регистр накопления нужно записать обороты по кошелькам из шаблона операции. 
	//	При этом нужно учесть:
	//  а) операции-исключения (непроведенные и не помеченные на удаление операции)
	//	б) суммы погашения долгов должны быть подставлены из графика погашения
	//  в) плановые обороты по проведенным операциям не изменяем - для возможности сравнивать план с фактом
	
	ИмяВидаОперации = СсылкаНаШаблон.Метаданные().Имя;
	ПараметрыПогашенияДолга = ?(ЗначениеЗаполнено(Запрос.Параметры.Долг), ПакетРезультатовЗапроса[2].Выгрузить(), Неопределено);
	
	// Получаем таблицу бюджетных движений шаблона:
	ТаблицаОборотов = ПолучитьТаблицуДвиженийПлановойОперации(СсылкаНаШаблон, СсылкаНаШаблон, ДополнительныеСвойства, ПараметрыПогашенияДолга);
	
	// Сопоставляем плановые показатели с распианием
	ВыборкаДат = ПакетРезультатовЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДатаЗаписи");
	Пока ВыборкаДат.Следующий() Цикл
	
		Если ЗначениеЗаполнено(ВыборкаДат.ПлановаяДата) И ЗначениеЗаполнено(ВыборкаДат.Период) Тогда
			// Дата в расписании соответствует дате оборота плановой операции.
			
			Если ЗначениеЗаполнено(ВыборкаДат.ПлановаяОперация) И ВыборкаДат.ПлановаяОперацияУчтена <> Неопределено Тогда 
				// Плановая операция существует
								
				Если ВыборкаДат.ПлановаяОперацияПроведен И ВыборкаДат.Сумма <> 0 Тогда
					// Плановая операция проведена; 
					//	плановые движения не меняем (оставляем такими, какие они были до проведения):
					
					ВыборкаЗаписей = ВыборкаДат.Выбрать();
					Пока ВыборкаЗаписей.Следующий() Цикл
						
						Если НЕ ЗначениеЗаполнено(ВыборкаЗаписей.Регистратор) Тогда
							Продолжить;
						КонецЕсли; 
						
						ЗаписьОборота = НаборОборотовШаблона.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьОборота, ВыборкаЗаписей);
						ЗаписьОборота.Активность = АктивностьОборотов;
						
					КонецЦикла;
					
				Иначе
					
					Если ЗначениеЗаполнено(ВыборкаДат.ПлановаяОперация) И ВыборкаДат.ПлановаяОперация = СсылкаНаШаблон Тогда
						// Операция запланирована без шаблона
						ДопСвойстваОперации = ДополнительныеСвойства;
						ОборотыОперации     = ТаблицаОборотов;
						
					Иначе
						// Если плановая операция не проведена, плановые обороты создадим по ее "запланированным" движениям
						//	независимо от того, помечена она на удаление, или нет:
						ДопСвойстваОперации = Неопределено;
						ОборотыОперации     = ПолучитьТаблицуДвиженийПлановойОперации(СсылкаНаШаблон, ВыборкаДат.ПлановаяОперация, ДопСвойстваОперации, ПараметрыПогашенияДолга);
						
					КонецЕсли;
					
					ДобавитьПлановыеОборотыВНаборЗаписейШаблона(СсылкаНаШаблон, НаборОборотовШаблона, ВыборкаДат, ОборотыОперации, ВыборкаДат.ПлановаяОперация, АктивностьОборотов);
					
				КонецЕсли;
			Иначе
				
				// заполняем новыми сведениями об оборотах:
				ДобавитьПлановыеОборотыВНаборЗаписейШаблона(СсылкаНаШаблон, НаборОборотовШаблона, ВыборкаДат, ТаблицаОборотов, Неопределено, АктивностьОборотов);
				
			КонецЕсли; 
			
		ИначеЕсли ЗначениеЗаполнено(ВыборкаДат.ПлановаяДата) И НЕ ЗначениеЗаполнено(ВыборкаДат.Период) Тогда
			// Есть дата расписания, но нет оборотов на эту дату:
			
			// заполняем новыми сведениями об оборотах:
			ДобавитьПлановыеОборотыВНаборЗаписейШаблона(СсылкаНаШаблон, НаборОборотовШаблона, ВыборкаДат, ТаблицаОборотов, ВыборкаДат.ПлановаяОперация, АктивностьОборотов);
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаДат.ПлановаяДата) И ЗначениеЗаполнено(ВыборкаДат.Период) Тогда
			// Есть дата оборотов, но нет даты расписания (удалили, или пересчитали)
			
			// Пропускаем такие записи.
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	// Сохраняем движения РН "ОборотыПлановыхОпераций"
	НаборОборотовШаблона.Записать(Истина);
	
	Если Не АктивностьОборотов Тогда
		
		ЗаписьРасписания = РегистрыСведений.Расписания.СоздатьМенеджерЗаписи();
		ЗаписьРасписания.ВладелецРасписания = СсылкаНаШаблон;
		ЗаписьРасписания.Прочитать();
		Если ЗаписьРасписания.Выбран() И Не ЗаписьРасписания.НеИспользовать Тогда
			ЗаписьРасписания.НеИспользовать = Истина;
			ЗаписьРасписания.Записать(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет палновые обороты операции, запланированной без шаблона, при ее проведении
//
//Параметры:
//	ДокументОбъект - проводимый документ
//
Процедура ПроверитьОборотыПлановойОоперацииПриПроведении(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("ЭтоПлановаяОперация") И ДокументОбъект.ДополнительныеСвойства.ЭтоПлановаяОперация 
			И ДокументОбъект.ДополнительныеСвойства.Свойство("ШаблонОперации") И ДокументОбъект.ДополнительныеСвойства.ШаблонОперации = ДокументОбъект.Ссылка
			И ДокументОбъект.Проведен И ДокументОбъект.ДополнительныеСвойства.Свойство("ПлановыеДвиженияОперации") Тогда
			
			ДокументОбъект.Движения.ОборотыПлановыхОпераций.Загрузить(ДокументОбъект.ДополнительныеСвойства.ПлановыеДвиженияОперации);
			ДокументОбъект.Движения.ОборотыПлановыхОпераций.Записывать  = Истина;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ПересчитатьПланыПриИзмененииПределаПланирования() Экспорт

	ПределПланирования = Константы.ПределПланирования.Получить();
	Если НЕ ЗначениеЗаполнено(ПределПланирования) Тогда
		ПределПланирования = НачалоДня(КонецГода(ДобавитьМесяц(ТекущаяДата(), 24)));
		Константы.ПределПланирования.Установить(ПределПланирования);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПределПланирования", ПределПланирования);
	Запрос.УстановитьПараметр("ВУказанныеДаты", Перечисления.СпособыПовторовСобытий.ВУказанныеДаты);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиБюджета.НачалоПериода,
	|	ПоказателиБюджета.ВариантБюджета,
	|	ПоказателиБюджета.РазделБюджета,
	|	ПоказателиБюджета.ГрафаБюджета,
	|	ПоказателиБюджета.ТипПоказателя,
	|	ПоказателиБюджета.СтатьяБюджета
	|ИЗ
	|	РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|ГДЕ
	|	ПоказателиБюджета.НачалоПериода > &ПределПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРасписаний.ВладелецРасписания КАК ВладелецРасписания,
	|	ДатыРасписаний.ПлановаяДата КАК ПлановаяДата
	|ИЗ
	|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Расписания КАК Расписания
	|		ПО ДатыРасписаний.ВладелецРасписания = Расписания.ВладелецРасписания
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ДатыРасписаний.ПлановаяДата, ДЕНЬ) > &ПределПланирования
	|	И Расписания.Периодичность <> &ВУказанныеДаты
	|	И Расписания.ДатаОкончанияРасписания = &ПустаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВладелецРасписания,
	|	ПлановаяДата
	|ИТОГИ ПО
	|	ВладелецРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подзапрос.ВладелецРасписания,
	|	Подзапрос.ПлановаяДата,
	|	Расписания.ДатаНачалаРасписания,
	|	Расписания.ДатаОкончанияРасписания
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатыРасписаний.ВладелецРасписания КАК ВладелецРасписания,
	|		МАКСИМУМ(ДатыРасписаний.ПлановаяДата) КАК ПлановаяДата
	|	ИЗ
	|		РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДатыРасписаний.ВладелецРасписания
	|	
	|	ИМЕЮЩИЕ
	|		МАКСИМУМ(ДатыРасписаний.ПлановаяДата) < &ПределПланирования) КАК Подзапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Расписания КАК Расписания
	|		ПО Подзапрос.ВладелецРасписания = Расписания.ВладелецРасписания
	|ГДЕ
	|	Расписания.ДатаНачалаРасписания <= &ПределПланирования
	|	И (Расписания.ДатаОкончанияРасписания = &ПустаяДата
	|			ИЛИ Расписания.ДатаОкончанияРасписания >= &ПределПланирования)
	|	И Расписания.Периодичность <> &ВУказанныеДаты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подзапрос.ВладелецРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыБюджетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыБюджетов КАК ВариантыБюджетов
	|ГДЕ
	|	ВариантыБюджетов.НачалоПланирования >= &ПределПланирования";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	// Удаляем лишние бюджеты:
	ВыборкаЛишнихДат = ПакетРезультатов[0].Выбрать();
	Пока ВыборкаЛишнихДат.Следующий() Цикл
		ЗаписьРегистра = РегистрыСведений.ПоказателиБюджета.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаЛишнихДат);
		ЗаписьРегистра.Удалить();
	КонецЦикла; 	

	// Удаляем лишние плановые операции:
	ВыборкаШаблонов = ПакетРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВладелецРасписания");
	Пока ВыборкаШаблонов.Следующий() Цикл
		
		ВыборкаЛишнихДат = ВыборкаШаблонов.Выбрать();
		Пока ВыборкаЛишнихДат.Следующий() Цикл
			Запись = РегистрыСведений.ДатыРасписаний.СоздатьМенеджерЗаписи();
			Запись.ВладелецРасписания = ВыборкаЛишнихДат.ВладелецРасписания;
			Запись.ПлановаяДата = ВыборкаЛишнихДат.ПлановаяДата;
			Запись.Удалить();
		КонецЦикла; 
		
		ЗапросОборотов = Новый Запрос;
		ЗапросОборотов.УстановитьПараметр("Регистратор", ВыборкаШаблонов.ВладелецРасписания);
		ЗапросОборотов.УстановитьПараметр("ПределПланирования", ПределПланирования);
		ЗапросОборотов.Текст = 
		"ВЫБРАТЬ
		|	ОборотыПлановыхОпераций.*
		|ИЗ
		|	РегистрНакопления.ОборотыПлановыхОпераций КАК ОборотыПлановыхОпераций
		|ГДЕ
		|	ОборотыПлановыхОпераций.Регистратор = &Регистратор
		|	И ОборотыПлановыхОпераций.Период <= &ПределПланирования
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОборотыПлановыхОпераций.Регистратор,
		|	ОборотыПлановыхОпераций.Период,
		|	ОборотыПлановыхОпераций.РазделБюджета,
		|	ОборотыПлановыхОпераций.СтатьяБюджета";
		ТаблицаОборотов = ЗапросОборотов.Выполнить().Выгрузить();
		НаборЗаписей = РегистрыНакопления.ОборотыПлановыхОпераций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаШаблонов.ВладелецРасписания);
		НаборЗаписей.Загрузить(ТаблицаОборотов);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла; 
	
	// Создаем недостающие плановые операции:
	ВыборкаШаблонов = ПакетРезультатов[2].Выбрать();
	Пока ВыборкаШаблонов.Следующий() Цикл
	
		ПараметрыРасписания = РегистрыСведений.Расписания.СоздатьМенеджерЗаписи();
		ПараметрыРасписания.ВладелецРасписания = ВыборкаШаблонов.ВладелецРасписания;
		ПараметрыРасписания.Прочитать();
		Если НЕ ПараметрыРасписания.Выбран() ИЛИ ПараметрыРасписания.Периодичность = Перечисления.СпособыПовторовСобытий.ВУказанныеДаты Тогда
			Продолжить;
		КонецЕсли; 
		
		// Добавляем недостающие даты расписания:
		ПередЗаписьюОперации(ВыборкаШаблонов.ВладелецРасписания, ПараметрыРасписания, 
				Неопределено, Истина, Истина, Неопределено, Неопределено, Неопределено, Истина);
		// Формируем обороты по датам расписания:
		СформироватьОборотыШаблонаДокументов(ВыборкаШаблонов.ВладелецРасписания);
	
	КонецЦикла;

	// Корректируем даты начала планирования в варинатах бюджета
	НачалоГодаПланирования = НачалоГода(ПределПланирования);
	ВыборкаВариантов = ПакетРезультатов[3].Выбрать();
	Пока ВыборкаВариантов.Следующий() Цикл
		
		ВариантОбъект = ВыборкаВариантов.Ссылка.ПолучитьОбъект();
		ВариантОбъект.НачалоПланирования = НачалоГодаПланирования;
		ВариантОбъект.Записать();
		
	КонецЦикла;

КонецПроцедуры



#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСписокДатРасписания(ВладелецРасписания)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецРасписания", ВладелецРасписания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыРасписаний.ВладелецРасписания КАК ВладелецРасписания,
	|	ДатыРасписаний.ПлановаяДата КАК ПлановаяДата,
	|	ДатыРасписаний.ПлановаяОперация КАК ПлановаяОперация,
	|	ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Проведен, ЛОЖЬ) КАК ПлановаяОперацияПроведен,
	|	ДатыРасписаний.Пропустить
	|ИЗ
	|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|ГДЕ
	|	ДатыРасписаний.ВладелецРасписания = &ВладелецРасписания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлановаяДата";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ДобавитьЗаписьДатыРасписания(ПараметрыРасписания, ПлановаяДата, СписокДатРасписания, СуммаДолга = 0, СуммаПроцентов = 0, СуммаКомиссии = 0)

	ВладелецРасписания = ПараметрыРасписания.ВладелецРасписания;
	
	// Могут быть даты с уже созданными операциями - их нужно оставить.
	СуществующаяДата = СписокДатРасписания.Найти(ПлановаяДата, "ПлановаяДата");
	
	МенеджерЗаписи = РегистрыСведений.ДатыРасписаний.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВладелецРасписания = ВладелецРасписания;
	МенеджерЗаписи.ПлановаяДата       = ПлановаяДата;
	Если СуществующаяДата <> Неопределено Тогда
		МенеджерЗаписи.Прочитать();
	КонецЕсли; 
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.ВладелецРасписания = ВладелецРасписания;
		МенеджерЗаписи.ПлановаяДата       = ПлановаяДата;
		МенеджерЗаписи.АктуальнаяДата     = ПлановаяДата;
	КонецЕсли; 
	МенеджерЗаписи.СуммаДолга         = СуммаДолга;
	МенеджерЗаписи.СуммаПроцентов     = СуммаПроцентов;
	МенеджерЗаписи.СуммаКомиссии      = СуммаКомиссии;
	ОбновитьСуммыПлановойОперации(МенеджерЗаписи, МенеджерЗаписи.ПлановаяОперация, ПараметрыРасписания);
	МенеджерЗаписи.Записать(Истина);

КонецПроцедуры

Процедура ВычислитьИЗаписатьДатыРасписания(ВладелецРасписания, ПараметрыРасписания, СписокДатРасписания, ДатаПределаПланирования = Неопределено, МинимальнаяДатаИзменений = Неопределено)

	Если ДатаПределаПланирования = Неопределено Тогда
		ПределПланирования = Константы.ПределПланирования.Получить();
		Если НЕ ЗначениеЗаполнено(ПределПланирования) Тогда
			ПределПланирования = НачалоДня(КонецГода(ДобавитьМесяц(ТекущаяДата(), 24)));
		КонецЕсли; 
		ДатаПределаПланирования = ПределПланирования;
	КонецЕсли; 
	
	КоличествоПовторов = ПараметрыРасписания.КоличествоПовторов;
	Если ЗначениеЗаполнено(ПараметрыРасписания.ДатаОкончанияРасписания) Тогда
		КонечнаяДата = ПараметрыРасписания.ДатаОкончанияРасписания;
	ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыРасписания.КоличествоПовторов) Тогда
		КонечнаяДата = ДатаПределаПланирования;
	Иначе
		КонечнаяДата = Неопределено;
	КонецЕсли; 
	
	Если ПараметрыРасписания.НеИспользовать Тогда
		ДатаПрекращения = ?(ЗначениеЗаполнено(КонечнаяДата), КонечнаяДата, НачалоДня(ТекущаяДата()));
	Иначе
		ДатаПрекращения = Дата(3000,1,1);
	КонецЕсли;
	
	Если МинимальнаяДатаИзменений = Неопределено Тогда
		МинимальнаяДатаИзменений = ПараметрыРасписания.ДатаНачалаРасписания - 1;
	КонецЕсли; 
	
	СмещениеСуток = 60*60*24;
	
	Если ПараметрыРасписания.Периодичность = Перечисления.СпособыПовторовСобытий.Ежедневно Тогда
		
		ДатаОперации = ПараметрыРасписания.ДатаНачалаРасписания;
		Смещение = ПараметрыРасписания.ПорядокПериодов * СмещениеСуток;
		Повторов = 0;
		Пока Истина Цикл
		
			Если ДатаОперации > ДатаПрекращения Тогда
				Прервать;
			ИначеЕсли КоличествоПовторов > 0 И Повторов+1 > КоличествоПовторов Тогда
				Прервать;
			ИначеЕсли КоличествоПовторов = 0 И ДатаОперации > КонечнаяДата Тогда
				Прервать;
			КонецЕсли; 
			
			Если ДатаОперации > МинимальнаяДатаИзменений Тогда
				ДобавитьЗаписьДатыРасписания(ПараметрыРасписания, ДатаОперации, СписокДатРасписания);
			КонецЕсли; 
			
			Повторов = Повторов + 1;
			ДатаОперации = НачалоДня(ДатаОперации + Смещение);
		
		КонецЦикла; 
		
	ИначеЕсли ПараметрыРасписания.Периодичность = Перечисления.СпособыПовторовСобытий.Еженедельно Тогда
		
		МассивДнейНедели = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(
					Сред(ПараметрыРасписания.ШаблонДнейНедели, 1, СтрДлина(ПараметрыРасписания.ШаблонДнейНедели) - 1), ",");
		НачалоНедели = НачалоНедели(ПараметрыРасписания.ДатаНачалаРасписания);
		ДатаОперации = ПараметрыРасписания.ДатаНачалаРасписания;
		СмещениеНедели = ПараметрыРасписания.ПорядокПериодов * СмещениеСуток * 7;
		Повторов = 0;
		Пока Истина Цикл
			
			Если ДатаОперации > ДатаПрекращения Тогда
				Прервать;
			ИначеЕсли КоличествоПовторов > 0 И Повторов + 1 > КоличествоПовторов Тогда
				Прервать;
			ИначеЕсли КоличествоПовторов = 0 И ДатаОперации > КонечнаяДата Тогда
				Прервать;
			КонецЕсли; 
			
			Для Счетчик = ДеньНедели(ДатаОперации) По 7  Цикл
				
				Если КоличествоПовторов > 0 И Повторов + 1 > КоличествоПовторов Тогда
					Прервать;
				ИначеЕсли КоличествоПовторов = 0 И ДатаОперации > КонечнаяДата Тогда
					Прервать;
				КонецЕсли; 
				
				Если МассивДнейНедели.Найти(СокрЛП(Счетчик)) <> Неопределено Тогда
					Если ДатаОперации > МинимальнаяДатаИзменений Тогда
						ДобавитьЗаписьДатыРасписания(ПараметрыРасписания, ДатаОперации, СписокДатРасписания);
					КонецЕсли; 
					Повторов = Повторов + 1;
				КонецЕсли;  
				
				ДатаОперации = НачалоДня(ДатаОперации + СмещениеСуток);
					
			КонецЦикла; 
			
			НачалоНедели = НачалоНедели(НачалоНедели + СмещениеНедели);
			ДатаОперации = НачалоНедели;
		
		КонецЦикла; 
		
	ИначеЕсли ПараметрыРасписания.Периодичность = Перечисления.СпособыПовторовСобытий.ЕжемесячноПоЧислам Тогда
		
		НачалоМесяца = НачалоМесяца(ПараметрыРасписания.ДатаНачалаРасписания);
		ДатаОперации = ПараметрыРасписания.ДатаНачалаРасписания;
		Повторов = 0;
		
		Пока Истина Цикл
		
			Если ДатаОперации > ДатаПрекращения Тогда
				Прервать;
			ИначеЕсли КоличествоПовторов > 0 И Повторов + 1 > КоличествоПовторов Тогда
				Прервать;
			ИначеЕсли КоличествоПовторов = 0 И ДатаОперации > КонечнаяДата Тогда
				Прервать;
			КонецЕсли; 
			
			ПроверятьКонецМесяца = СтрНайти("," + ПараметрыРасписания.ШаблонЧиселМесяца, ",29,") > 0 
				ИЛИ СтрНайти("," + ПараметрыРасписания.ШаблонЧиселМесяца, ",30,") > 0
				ИЛИ СтрНайти("," + ПараметрыРасписания.ШаблонЧиселМесяца, ",31,") > 0;
				
			Пока КонецДня(ДатаОперации) <= КонецМесяца(НачалоМесяца) Цикл
			
				Если ДатаОперации > ДатаПрекращения Тогда
					Прервать;
				ИначеЕсли КоличествоПовторов > 0 И Повторов + 1 > КоличествоПовторов Тогда
					Прервать;
				ИначеЕсли КоличествоПовторов = 0 И ДатаОперации > КонечнаяДата Тогда
					Прервать;
				КонецЕсли; 
				
				ЧислоМесяца = День(ДатаОперации);
				Если СтрНайти("," + ПараметрыРасписания.ШаблонЧиселМесяца, "," + СокрЛП(ЧислоМесяца) + ",") > 0 Тогда
					Если ДатаОперации > МинимальнаяДатаИзменений Тогда
						ДобавитьЗаписьДатыРасписания(ПараметрыРасписания, ДатаОперации, СписокДатРасписания);
					КонецЕсли; 
					Повторов = Повторов + 1;
					ПроверятьКонецМесяца = Ложь;
					Если СтрДлина(ПараметрыРасписания.ШаблонЧиселМесяца) <4 Тогда
						Прервать;
					КонецЕсли; 
				КонецЕсли; 
				
				ДатаОперации = НачалоДня(ДатаОперации + СмещениеСуток);
				
			КонецЦикла; 
			
			// проверяем на "конец месяца":
			Если ПроверятьКонецМесяца Тогда
				ДатаВМесяце = НачалоДня(КонецМесяца(Дата(Год(НачалоМесяца), Месяц(НачалоМесяца), 1)));
				Если ДатаВМесяце > МинимальнаяДатаИзменений Тогда
					ДобавитьЗаписьДатыРасписания(ПараметрыРасписания, ДатаВМесяце, СписокДатРасписания);
				КонецЕсли; 
				Повторов = Повторов + 1;
			КонецЕсли; 
			
			НачалоМесяца = НачалоМесяца(ДобавитьМесяц(НачалоМесяца, ПараметрыРасписания.ПорядокПериодов));
			ДатаОперации = НачалоМесяца;
		
		КонецЦикла; 
		
	ИначеЕсли ПараметрыРасписания.Периодичность = Перечисления.СпособыПовторовСобытий.ЕжемесячноПоДнямНедели Тогда
		
		НачалоМесяца = НачалоМесяца(ПараметрыРасписания.ДатаНачалаРасписания);
		ДатаОперации = ПараметрыРасписания.ДатаНачалаРасписания;
		ПорядокДняНедели  = ПараметрыРасписания.ПорядокДнейНедели;
		ИскомыйДеньНедели = Число(СтрЗаменить(ПараметрыРасписания.ШаблонДнейНедели, ",", ""));
		Повторов = 0;
		
		Пока Истина Цикл
		
			Если ДатаОперации > ДатаПрекращения Тогда
				Прервать;
			ИначеЕсли КоличествоПовторов > 0 И Повторов + 1 > КоличествоПовторов Тогда
				Прервать;
			ИначеЕсли КоличествоПовторов = 0 И ДатаОперации > КонечнаяДата Тогда
				Прервать;
			КонецЕсли; 
		
			ПервыйДеньНеделиМесяца = ДеньНедели(НачалоМесяца);
			Если ИскомыйДеньНедели = ПервыйДеньНеделиМесяца Тогда
				ДатаОперации = НачалоМесяца;
			ИначеЕсли ИскомыйДеньНедели > ПервыйДеньНеделиМесяца Тогда
				ДатаОперации = НачалоМесяца + (ИскомыйДеньНедели - ПервыйДеньНеделиМесяца) * СмещениеСуток;
			Иначе
				ДатаОперации = НачалоМесяца + (7 - ПервыйДеньНеделиМесяца) * СмещениеСуток + ИскомыйДеньНедели * СмещениеСуток;
			КонецЕсли; 
			
			ДатаОперации = ДатаОперации + (ПорядокДняНедели - 1) * СмещениеСуток * 7;
			Если КонецДня(ДатаОперации) <= КонецМесяца(НачалоМесяца) И ДатаОперации >= ПараметрыРасписания.ДатаНачалаРасписания Тогда
				Если ДатаОперации > МинимальнаяДатаИзменений Тогда
					ДобавитьЗаписьДатыРасписания(ПараметрыРасписания, ДатаОперации, СписокДатРасписания);
				КонецЕсли; 
				Повторов = Повторов + 1;
			КонецЕсли; 
			
			НачалоМесяца = НачалоМесяца(ДобавитьМесяц(НачалоМесяца, ПараметрыРасписания.ПорядокПериодов));
			ДатаОперации = НачалоМесяца;
		
		КонецЦикла; 
		
	ИначеЕсли ПараметрыРасписания.Периодичность = Перечисления.СпособыПовторовСобытий.ЕжегодноПоЧислам Тогда
		
		НачалоГода   = НачалоГода(ПараметрыРасписания.ДатаНачалаРасписания);
		ДатаОперации = ПараметрыРасписания.ДатаНачалаРасписания;
		ЧислаМесяца  = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ПараметрыРасписания.ШаблонЧиселМесяца, ",");
		Месяцы       = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ПараметрыРасписания.ШаблонНомеровМесяцев, ",");
		Повторов = 0;
		
		Пока Истина Цикл
		
			Если ДатаОперации > ДатаПрекращения Тогда
				Прервать;
			ИначеЕсли КоличествоПовторов > 0 И Повторов + 1 > КоличествоПовторов Тогда
				Прервать;
			ИначеЕсли КоличествоПовторов = 0 И ДатаОперации > КонечнаяДата Тогда
				Прервать;
			КонецЕсли; 
			
			Для Каждого Месяц Из Месяцы Цикл
				Если НЕ ЗначениеЗаполнено(Месяц) Тогда
					Продолжить;
				КонецЕсли; 
				НомерМесяца = Число(Месяц);
				Для Каждого Число Из ЧислаМесяца Цикл
					Если НЕ ЗначениеЗаполнено(Число) Тогда
						Продолжить;
					КонецЕсли; 
					
					Если КоличествоПовторов > 0 И Повторов + 1 > КоличествоПовторов Тогда
						Прервать;
					ИначеЕсли КоличествоПовторов = 0 И ДатаОперации > КонечнаяДата Тогда
						Прервать;
					КонецЕсли; 
					
					НомерЧисла = Число(Число);
					ДатаОперации = Дата(Год(НачалоГода), НомерМесяца, НомерЧисла);
					Если ДатаОперации > МинимальнаяДатаИзменений Тогда
						ДобавитьЗаписьДатыРасписания(ПараметрыРасписания, ДатаОперации, СписокДатРасписания);
					КонецЕсли; 
					Повторов = Повторов + 1;
					
				КонецЦикла; 
			КонецЦикла; 
			
			
			НачалоГода = НачалоГода(ДобавитьМесяц(НачалоГода, ПараметрыРасписания.ПорядокПериодов * 12));
			ДатаОперации = НачалоГода;
		
		КонецЦикла; 
		
	ИначеЕсли ПараметрыРасписания.Периодичность = Перечисления.СпособыПовторовСобытий.ЕжегодноПоДнямНедели Тогда
		
		НачалоГода   = НачалоГода(ПараметрыРасписания.ДатаНачалаРасписания);
		ДатаОперации = ПараметрыРасписания.ДатаНачалаРасписания;
		Месяцы       = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ПараметрыРасписания.ШаблонНомеровМесяцев, ",");
		ПорядокДняНедели  = ПараметрыРасписания.ПорядокДнейНедели;
		ИскомыйДеньНедели = Число(СтрЗаменить(ПараметрыРасписания.ШаблонДнейНедели, ",", ""));
		Повторов = 0;
		
		Пока Истина Цикл
		
			Если ДатаОперации > ДатаПрекращения Тогда
				Прервать;
			ИначеЕсли КоличествоПовторов > 0 И Повторов + 1 > КоличествоПовторов Тогда
				Прервать;
			ИначеЕсли КоличествоПовторов = 0 И ДатаОперации > КонечнаяДата Тогда
				Прервать;
			КонецЕсли; 
			
			Для Каждого Месяц Из Месяцы Цикл
				Если НЕ ЗначениеЗаполнено(Месяц) Тогда
					Продолжить;
				КонецЕсли; 
				
				Если ДатаОперации > ДатаПрекращения Тогда
					Прервать;
				ИначеЕсли КоличествоПовторов > 0 И Повторов + 1 > КоличествоПовторов Тогда
					Прервать;
				ИначеЕсли КоличествоПовторов = 0 И ДатаОперации > КонечнаяДата Тогда
					Прервать;
				КонецЕсли; 
				
				НомерМесяца = Число(Месяц);
				НачалоМесяца = Дата(Год(Началогода), НомерМесяца, 1);
				
				ПервыйДеньНеделиМесяца = ДеньНедели(НачалоМесяца);
				Если ИскомыйДеньНедели = ПервыйДеньНеделиМесяца Тогда
					ДатаОперации = НачалоМесяца;
				ИначеЕсли ИскомыйДеньНедели > ПервыйДеньНеделиМесяца Тогда
					ДатаОперации = НачалоМесяца + (ИскомыйДеньНедели - ПервыйДеньНеделиМесяца) * СмещениеСуток;
				Иначе
					ДатаОперации = НачалоМесяца + (7 - ПервыйДеньНеделиМесяца) * СмещениеСуток + ИскомыйДеньНедели * СмещениеСуток;
				КонецЕсли; 
				
				ДатаОперации = ДатаОперации + (ПорядокДняНедели - 1) * СмещениеСуток * 7;
				Если КонецДня(ДатаОперации) <= КонецМесяца(НачалоМесяца) Тогда
					Если ДатаОперации > МинимальнаяДатаИзменений Тогда
						ДобавитьЗаписьДатыРасписания(ПараметрыРасписания, ДатаОперации, СписокДатРасписания);
					КонецЕсли; 
					Повторов = Повторов + 1;
				КонецЕсли; 
				
			КонецЦикла; 
			
			
			НачалоГода = НачалоГода(ДобавитьМесяц(НачалоГода, ПараметрыРасписания.ПорядокПериодов * 12));
			ДатаОперации = НачалоГода;
		
		КонецЦикла; 
		
	КонецЕсли;

КонецПроцедуры

Функция ИзменилисьПропускиДатРасписания(ВладелецРасписания, АдресПроизвольныхДатРасписания)

	ТаблицаДат = ПолучитьИзВременногоХранилища(АдресПроизвольныхДатРасписания);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДат", ТаблицаДат);
	Запрос.УстановитьПараметр("ВладелецРасписания", ВладелецРасписания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДат.ПлановаяДата,
	|	ТаблицаДат.СуммаДолга,
	|	ТаблицаДат.СуммаКомиссии,
	|	ТаблицаДат.СуммаПроцентов,
	|	ТаблицаДат.Пропустить
	|ПОМЕСТИТЬ НовыеДаты
	|ИЗ
	|	&ТаблицаДат КАК ТаблицаДат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ДатыРасписаний.Пропустить <> ДатыРасписаний.Пропустить
	|					ИЛИ ДатыРасписаний.СуммаДолга <> ДатыРасписаний.СуммаДолга
	|					ИЛИ ДатыРасписаний.СуммаПроцентов <> ДатыРасписаний.СуммаПроцентов
	|					ИЛИ ДатыРасписаний.СуммаКомиссии <> ДатыРасписаний.СуммаКомиссии
	|					ИЛИ ДатыРасписаний.СуммаДохода + ДатыРасписаний.СуммаРасхода = 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоРасхождений
	|ИЗ
	|	НовыеДаты КАК НовыеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|		ПО НовыеДаты.ПлановаяДата = ДатыРасписаний.ПлановаяДата
	|			И (ДатыРасписаний.ВладелецРасписания = &ВладелецРасписания)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоРасхождений > 0;
	Иначе
		Возврат Ложь;
	КонецЕсли; 

КонецФункции

Процедура ДобавитьПлановыеОборотыВНаборЗаписейШаблона(СсылкаНаШаблон, НаборОборотовШаблона, ВыборкаДат, ТаблицаОпераций, СсылкаНаОперацию, АктивностьОборотов)

	// не создаем движений по пропущенным операциям
	Если ВыборкаДат.Пропустить Или ВыборкаДат.ПлановаяОперацияПометкаУдаления Или ТаблицаОпераций = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОборота Из ТаблицаОпераций Цикл
		
		//// в плановые обороты записываем только обороты по конкретным кошелькам
		//Если Не ЗначениеЗаполнено(СтрокаОборота.Кошелек) Тогда
		//	Продолжить;
		//КонецЕсли;
		
		ЗаписьОборота    = Неопределено;
		
		Если СтрокаОборота.Примечание = "Основной долг" ИЛИ СтрокаОборота.Примечание = "Основной долг (кредитная карта)" Тогда
			
			Сумма = ?(ЗначениеЗаполнено(СсылкаНаОперацию) И ЗначениеЗаполнено(СтрокаОборота.Сумма), СтрокаОборота.Сумма, ВыборкаДат.СуммаДолга);
			Если ЗначениеЗаполнено(Сумма) Тогда
				ЗаписьОборота = НаборОборотовШаблона.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьОборота, СтрокаОборота);
				ЗаписьОборота.Сумма = Сумма;
			КонецЕсли; 
			
		ИначеЕсли СтрокаОборота.Примечание = "Проценты" Или СтрокаОборота.Примечание = "Проценты (кредитная карта)" Тогда
			
			Сумма = ?(ЗначениеЗаполнено(СсылкаНаОперацию) И ЗначениеЗаполнено(СтрокаОборота.Сумма), СтрокаОборота.Сумма, ВыборкаДат.СуммаПроцентов);
			Если ЗначениеЗаполнено(Сумма) Тогда
				ЗаписьОборота = НаборОборотовШаблона.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьОборота, СтрокаОборота);
				ЗаписьОборота.Сумма = Сумма;
			КонецЕсли; 
			
		ИначеЕсли СтрокаОборота.Примечание = "Комиссия" Или СтрокаОборота.Примечание = "Комиссия (кредитная карта)" Тогда
			
			Сумма = ?(ЗначениеЗаполнено(СсылкаНаОперацию) И ЗначениеЗаполнено(СтрокаОборота.Сумма), СтрокаОборота.Сумма, ВыборкаДат.СуммаКомиссии);
			Если ЗначениеЗаполнено(Сумма) Тогда
				ЗаписьОборота = НаборОборотовШаблона.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьОборота, СтрокаОборота);
				ЗаписьОборота.Сумма = Сумма;
			КонецЕсли; 
			
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаОборота.Примечание) Или СтрокаОборота.Примечание = "Доп.расходы" Или СтрокаОборота.Примечание = "Прочие расходы" Тогда
			
			ЗаписьОборота = НаборОборотовШаблона.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьОборота, СтрокаОборота);
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗаписьОборота <> Неопределено Тогда
			
			ЗаписьОборота.Период         = ВыборкаДат.АктуальнаяДата;
			ЗаписьОборота.ПлановаяДата   = ВыборкаДат.ПлановаяДата;
			ЗаписьОборота.Регистратор    = СсылкаНаШаблон;
			ЗаписьОборота.Активность     = АктивностьОборотов;
			
			Если Не ЗначениеЗаполнено(ЗаписьОборота.Валюта) И ЗначениеЗаполнено(ЗаписьОборота.СтатьяБюджета) Тогда
				ТипСтатьи = ТипЗнч(ЗаписьОборота.СтатьяБюджета);
				Если ТипСтатьи = Тип("СправочникСсылка.КошелькиИСчета") Или ТипСтатьи = Тип("СправочникСсылка.Долги") Или ТипСтатьи = Тип("СправочникСсылка.Имущество") Тогда
					ЗаписьОборота.Валюта = ЗаписьОборота.СтатьяБюджета.Валюта;
				Иначе
					ЗаписьОборота.Валюта = ПараметрыСеанса.ВалютаУчета;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

Функция ПолучитьТаблицуДвиженийПлановойОперации(СсылкаНаШаблон, СсылкаНаОперацию, ДополнительныеСвойства, ПараметрыПогашенияДолга)

	Перем Результат;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОперацию) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИмяВидаОперации = СсылкаНаОперацию.Метаданные().Имя;
	Если ТипЗнч(ДополнительныеСвойства) <> Тип("Структура") Или Не ДополнительныеСвойства.Свойство("ТаблицыДокумента") Тогда
		Документы[ИмяВидаОперации].ПроверитьДополнительныеСвойстваОперации(СсылкаНаОперацию, ДополнительныеСвойства, Истина);
	КонецЕсли;
	
	Если (ИмяВидаОперации = "НамВернулиДолг" Или ИмяВидаОперации = "МыВернулиДолг")
			И ТипЗнч(ПараметрыПогашенияДолга) = Тип("ТаблицаЗначений") И ПараметрыПогашенияДолга.Количество() > 0 Тогда
		
		// В параметрах погашения долга могут присутствовать обновленные данные
		Результат = ПолучитьТаблицуДвиженийПогашенияДолгов(ИмяВидаОперации, ДополнительныеСвойства, ПараметрыПогашенияДолга);
		
	ИначеЕсли (ИмяВидаОперации = "Перемещение" Или ИмяВидаОперации = "ОбменВалюты")
			И ДополнительныеСвойства.ТаблицыДокумента.Свойство("ОборотыПлановыхОпераций") Тогда
			
		Результат = ДополнительныеСвойства.ТаблицыДокумента.ОборотыПлановыхОпераций;
		Результат.Колонки.Добавить("Примечание");
		
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		
		// В прочих случаях таблицей плановых оборотов будет являться таблица "оборотов бюджета", 
		//	если она присутствует в ТаблицахДокумента
		Если ДополнительныеСвойства.ТаблицыДокумента.Свойство("ОборотыБюджета") Тогда
			
			// ОборотыБюджета остутствуют, если документ не содержит табличной части или 
			//	по другим причинам не имеет смысла для учета в регистре накоплений "ФактОборотыБюджета"
			Результат = ДополнительныеСвойства.ТаблицыДокумента.ОборотыБюджета.Скопировать();
			Если Результат.Колонки.Найти("Примечание") = Неопределено Тогда
				Результат.Колонки.Добавить("Примечание");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заменяем ссылку на регистратор ссылкой на шаблон
	Если Результат <> Неопределено Тогда
		Результат.ЗаполнитьЗначения(СсылкаНаШаблон,     "Регистратор");
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПолучитьТаблицуДвиженийПогашенияДолгов(ИмяВидаОперации, ДополнительныеСвойства, ТаблицаПараметровПогашения)

	// Поучаем таблицы формирования движений
	ВыборкиОперации       = ДополнительныеСвойства.ТаблицыДокумента;
	РеквизитыДокумента    = ВыборкиОперации.Основное;
	ДопРасходы            = ВыборкиОперации.ДополнительныеРасходы;
	ТаблицаОборотов       = ВыборкиОперации.ОборотыБюджета.Скопировать();
	
	Если ДополнительныеСвойства.Свойство("ЭтоПлановаяОперация") И ДополнительныеСвойства.ЭтоПлановаяОперация Тогда
		
		// В операции, созданной по шаблону, уже заполнены все показатели.
		Возврат ТаблицаОборотов;
		
	КонецЕсли;
	
	// Получаем параметры графика погашения долга
	СтрокаПараметров           = ТаблицаПараметровПогашения[0];
	РазделБюджета              =  СтрокаПараметров.ФинансоваяЦель;
	РазделБюджета              =  СтрокаПараметров.ФинансоваяЦель;
	СтатьяДолг                 = ?(ЗначениеЗаполнено(СтрокаПараметров.Долг), СтрокаПараметров.Долг, 
					?(ИмяВидаОперации = "НамВернулиДолг", Справочники.ГрафыБюджета.ВозвратВыданногоЗайма, Справочники.ГрафыБюджета.ПогашениеКредита));
	КошелекДляПогашения        = СтрокаПараметров.КошелекДляПогашения;
	ВалютаКошелькаПогашения    = СтрокаПараметров.ВалютаКошелькаПогашения;
	СтатьяДляУчетаПроцентов    = ?(ЗначениеЗаполнено(СтрокаПараметров.СтатьяДляУчетаПроцентов), СтрокаПараметров.СтатьяДляУчетаПроцентов, Справочники.СтатьиРасходов.ПрочиеРасходы);
	СтатьяЕжемесячнойКомиссии  = ?(ЗначениеЗаполнено(ТаблицаПараметровПогашения[0].СтатьяЕжемесячнойКомиссии), ТаблицаПараметровПогашения[0].СтатьяЕжемесячнойКомиссии, Справочники.СтатьиРасходов.ПрочиеРасходы);
	КошелекКредитка            = СтрокаПараметров.ТипСчетаКошелькаПогашения = Перечисления.ТипыСчетов.БанковскаяКартаКредитная;
	
	// Создадим строки в таблице оборотов для всех сумм (основной суммы, процентов и комиссии)
	// Суммы будут подставлены из графика погашения или из документов
	ТаблицаОборотов.Очистить();
	
	// Сумма основного долга
	СтрокаДвижения  = ТаблицаОборотов.Добавить();
	СтрокаДвижения.РазделБюджета  = РазделБюджета;
	СтрокаДвижения.Кошелек        = КошелекДляПогашения;
	СтрокаДвижения.ТипПоказателя  = ?(ИмяВидаОперации = "НамВернулиДолг", Перечисления.ТипыБюджетныхПоказателей.Поступление, Перечисления.ТипыБюджетныхПоказателей.Списание);
	СтрокаДвижения.СтатьяБюджета  = СтатьяДолг;
	СтрокаДвижения.Валюта         = ВалютаКошелькаПогашения;
	СтрокаДвижения.Примечание     = "Основной долг";
	
	Если КошелекКредитка Тогда
		
		СтрокаКредитки = ТаблицаОборотов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКредитки, СтрокаДвижения, , "СтатьяБюджета,ТипПоказателя,Кошелек");
		СтрокаКредитки.СтатьяБюджета = КошелекДляПогашения;
		СтрокаКредитки.ТипПоказателя = ?(СтрокаДвижения.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание, Перечисления.ТипыБюджетныхПоказателей.Поступление, Перечисления.ТипыБюджетныхПоказателей.Списание);
		СтрокаКредитки.Примечание = СокрЛП(СтрокаКредитки.Примечание + " (кредитная карта)");
		
	КонецЕсли;
	
	// Сумма Процентов
	СтрокаДвижения  = ТаблицаОборотов.Добавить();
	СтрокаДвижения.РазделБюджета  = РазделБюджета;
	СтрокаДвижения.Кошелек        = КошелекДляПогашения;
	СтрокаДвижения.ТипПоказателя  = ?(ИмяВидаОперации = "НамВернулиДолг", Перечисления.ТипыБюджетныхПоказателей.Поступление, Перечисления.ТипыБюджетныхПоказателей.Списание);
	СтрокаДвижения.СтатьяБюджета  = СтатьяДолг;
	СтрокаДвижения.Валюта         = ВалютаКошелькаПогашения;
	СтрокаДвижения.Примечание     = "Проценты";
	
	Если КошелекКредитка Тогда
		
		СтрокаКредитки = ТаблицаОборотов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКредитки, СтрокаДвижения, , "СтатьяБюджета,ТипПоказателя,Кошелек");
		СтрокаКредитки.СтатьяБюджета = КошелекДляПогашения;
		СтрокаКредитки.ТипПоказателя = ?(СтрокаДвижения.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание, Перечисления.ТипыБюджетныхПоказателей.Поступление, Перечисления.ТипыБюджетныхПоказателей.Списание);
		СтрокаКредитки.Примечание = СокрЛП(СтрокаКредитки.Примечание + " (кредитная карта)");
		
	КонецЕсли;
	
	// Сумма Комиссии
	СтрокаДвижения  = ТаблицаОборотов.Добавить();
	СтрокаДвижения.РазделБюджета  = РазделБюджета;
	СтрокаДвижения.Кошелек        = КошелекДляПогашения;
	СтрокаДвижения.ТипПоказателя  = Перечисления.ТипыБюджетныхПоказателей.Списание;
	СтрокаДвижения.СтатьяБюджета  = СтатьяЕжемесячнойКомиссии;
	СтрокаДвижения.Валюта         = ВалютаКошелькаПогашения;
	СтрокаДвижения.Примечание     = "Комиссия";
	
	Если КошелекКредитка Тогда
		
		СтрокаКредитки = ТаблицаОборотов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКредитки, СтрокаДвижения, , "СтатьяБюджета,ТипПоказателя,Кошелек");
		СтрокаКредитки.СтатьяБюджета = КошелекДляПогашения;
		СтрокаКредитки.ТипПоказателя = ?(СтрокаДвижения.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание, Перечисления.ТипыБюджетныхПоказателей.Поступление, Перечисления.ТипыБюджетныхПоказателей.Списание);
		СтрокаКредитки.Примечание = СокрЛП(СтрокаКредитки.Примечание + " (кредитная карта)");
		
	КонецЕсли;
	
	// Дополнительные расходы
	Для каждого СтрокаРасхода Из ДопРасходы Цикл
		
		СтрокаДвижения  = ТаблицаОборотов.Добавить();
		СтрокаДвижения.РазделБюджета  = РазделБюджета;
		СтрокаДвижения.Кошелек        = КошелекДляПогашения;
		СтрокаДвижения.ТипПоказателя  = Перечисления.ТипыБюджетныхПоказателей.Списание;
		СтрокаДвижения.СтатьяБюджета  = ?(ЗначениеЗаполнено(СтрокаРасхода.СтатьяРасхода), СтрокаРасхода.СтатьяРасхода, Справочники.СтатьиРасходов.ПрочиеРасходы);
		СтрокаДвижения.Валюта         = ВалютаКошелькаПогашения;
		СтрокаДвижения.Сумма          = СтрокаРасхода.СуммаРасхода;
		СтрокаДвижения.Примечание     = "Прочие расходы";
		
		Если КошелекКредитка Тогда
			
			СтрокаКредитки = ТаблицаОборотов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКредитки, СтрокаДвижения, , "СтатьяБюджета,ТипПоказателя,Кошелек");
			СтрокаКредитки.СтатьяБюджета = КошелекДляПогашения;
			СтрокаКредитки.ТипПоказателя = ?(СтрокаДвижения.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание, Перечисления.ТипыБюджетныхПоказателей.Поступление, Перечисления.ТипыБюджетныхПоказателей.Списание);
			СтрокаКредитки.Примечание = СокрЛП(СтрокаКредитки.Примечание + " (кредитная карта)");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОборотов;

КонецФункции


#КонецОбласти


