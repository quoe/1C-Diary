////////////////////////////////////////////////////////////////////////////////
// ОбслуживаниеДокументов: 
//	* Обработка событий объектов документов
//	* Общий функционал, используемый в модулях объектов и менеджеров документов
//	* Функции подготовки движений документов
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
//	* обработка событий объектов документов

// Обработка подписки на событие ЗаписьОбъектовОпераций
Процедура ЗаписьОбъектовОпераций(Источник, Отказ) Экспорт
	
	Если Отказ Или Источник.ОбменДанными.Загрузка 
		Или Не Источник.ДополнительныеСвойства.Свойство("ТаблицыДокумента")
		Или Не Источник.ДополнительныеСвойства.ТаблицыДокумента.Свойство("ОбъектыОперации") Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОбъектыОпераций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Операция.Установить(Источник.Ссылка);
	НаборЗаписей.Загрузить(Источник.ДополнительныеСвойства.ТаблицыДокумента.ОбъектыОперации);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Обработка подписки на событие ПередУдалениемДокумента
Процедура ПередУдалениемДокумента(Источник, Отказ) Экспорт

	// Для шаблонов удаляем служебные ссылки и обороты в бюджете
	Если Источник.Метаданные().Реквизиты.Найти("ЭтоШаблон") <> Неопределено И Источник.ЭтоШаблон Тогда
		УдалитьСсылкиНаШаблон(Источник.Ссылка, Отказ);
	КонецЕсли; 
	
	
КонецПроцедуры

// Обработка подписки на событие ЗаписьШаблоновИПлановыхОперацийПриЗаписи
Процедура ЗаписьШаблоновИПлановыхОперацийПриЗаписи(Источник, Отказ) Экспорт
	
	
	Если Отказ Или Источник.ОбменДанными.Загрузка 
		Или Не Источник.ДополнительныеСвойства.Свойство("ТаблицыДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Источник.ЭтоШаблон Тогда
		
		// формируем плановые движения по шаблону операций
		ПлановыеОперации.СформироватьОборотыШаблонаДокументов(Источник.Ссылка, Источник.ДополнительныеСвойства);
		
	ИначеЕсли Источник.ДополнительныеСвойства.Свойство("ЭтоПлановаяОперация") И Источник.ДополнительныеСвойства.ЭтоПлановаяОперация 
			И Источник.ДополнительныеСвойства.Свойство("ШаблонОперации") И ЗначениеЗаполнено(Источник.ДополнительныеСвойства.ШаблонОперации)
			Тогда
			
		// Непроведенная плановая операция является исключением (содержит суммы, отличные от сумм шаблона)
		// для учета ее сумм нужно переформировать обороты по шаблону
		Если Источник.Проведен Тогда 
			
			Если Источник.ДополнительныеСвойства.ШаблонОперации = Источник.Ссылка Тогда
				// Операция запланирована без шаблона. Считываем плановые обороты, записанные до проведения
				Источник.Движения.ОборотыПлановыхОпераций.Прочитать();
				Источник.ДополнительныеСвойства.Вставить("ПлановыеДвиженияОперации", Источник.Движения.ОборотыПлановыхОпераций.Выгрузить());
			КонецЕсли;
			
		Иначе
			
			// формируем новые движения по плановой операции
			ПлановыеОперации.СформироватьОборотыШаблонаДокументов(Источник.ДополнительныеСвойства.ШаблонОперации,  Неопределено);
			
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
//	* Общий функционал, используемый в модулях объектов и менеджеров документов

// Возвращает дату с учетом настроек пользователя: либо текущую дату/время, либо дату последней записанной операции
//
//Параметры:
//	<нет>
//
Функция ДатаНовогоДокумента() Экспорт

	Результат = ТекущаяДатаСеанса();
	
	ТипДатыНовойОперации   = ПользовательскиеНастройкиДеньгиСервер.ТипДатыНовойОперации();
	Если ТипДатыНовойОперации = "ИзПоследнейОперации" И ЗначениеЗаполнено(ПараметрыСеанса.ДатаПоследнейОперации) Тогда
		
		Результат = НачалоДня(ПараметрыСеанса.ДатаПоследнейОперации) + (Результат - НачалоДня(Результат))
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Проверяет основные реквизиты документа, при необходимости заполняет их в соответствии с настройками пользователя
// Вызывается из обработчика ОбработкаЗаполнения модулей объекта документов
//
//Параметры
//	ДокументОбъект - заполняемый документ
//	ЭтоКопия - Булево - признак того, что документ заполнен копированием
//
Процедура ПроверитьЗаполнениеНовогоДокумента(ДокументОбъект, ЭтоКопия = Ложь) Экспорт
	
	Если (ЭтоКопия Или Не ЗначениеЗаполнено(ДокументОбъект.Дата)) И Не ДокументОбъект.ЭтоШаблон Тогда
		ДокументОбъект.Дата = ОбслуживаниеДокументов.ДатаНовогоДокумента();
	КонецЕсли;
	
	Если ЭтоКопия Или Не ЗначениеЗаполнено(ДокументОбъект.Пользователь) Тогда
		ДокументОбъект.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
//	* Функции подготовки движений документов

Процедура ОбщаяПроверкаДополнительныхСвойствДокумента(Операция, ДополнительныеСвойства) Экспорт
	
	Если ТипЗнч(ДополнительныеСвойства) <> Тип("Структура") Тогда
		ДополнительныеСвойства = Новый Структура;
	КонецЕсли; 
	
	Если НЕ ДополнительныеСвойства.Свойство("ВалютаУчета") ИЛИ НЕ ЗначениеЗаполнено(ДополнительныеСвойства.ВалютаУчета) Тогда
		ДополнительныеСвойства.Вставить("ВалютаУчета", Константы.ВалютаУчета.Получить())
	КонецЕсли;
	
	Если НЕ ДополнительныеСвойства.Свойство("Период") ИЛИ НЕ ЗначениеЗаполнено(ДополнительныеСвойства.Период) Тогда
		ДополнительныеСвойства.Вставить("Период", Операция.Дата)
	КонецЕсли;

	Если Не ДополнительныеСвойства.Свойство("ЭтоПлановаяОперация") И Не Операция.ЭтоШаблон Тогда
		
		// Проверяем, является ли операция шаблоном или плановой операцией
		СвойстваПлановойОперации = ПлановыеОперации.СвойстваПлановойОперации(Операция.Ссылка);
		Для каждого КлючИЗначение Из СвойстваПлановойОперации Цикл
			ДополнительныеСвойства.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("НеВосстанавливатьПоследовательность") И Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Операция)) Тогда
		
		Если Операция.ПринадлежностьПоследовательностям.Найти("ВводИзменениеОстатков") <> Неопределено Тогда
			Операция.ПринадлежностьПоследовательностям.ВводИзменениеОстатков.ДополнительныеСвойства.Вставить(
					"НеВосстанавливатьПоследовательность", ДополнительныеСвойства.НеВосстанавливатьПоследовательность)
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НоваяТаблицаРегистровОборотовБюджета() Экспорт

	Результат = РегистрыНакопления.ФактическиеОборотыБюджета.СоздатьНаборЗаписей();
	Возврат Результат.ВыгрузитьКолонки();

КонецФункции

Функция НоваяТаблицаРегистраОбъектыОпераций() Экспорт

	Результат = РегистрыСведений.ОбъектыОпераций.СоздатьНаборЗаписей();
	Возврат Результат.ВыгрузитьКолонки();

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


Процедура УдалитьСсылкиНаШаблон(Ссылка, Отказ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФинансовыеЦели.Ссылка КАК ФинансоваяЦель
	|ИЗ
	|	Справочник.ФинансовыеЦели КАК ФинансовыеЦели
	|ГДЕ
	|	ФинансовыеЦели.ШаблонНакопления = &Ссылка
	|";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	// Очищаем ссылки на шаблон в финансовых целях
	Выборка = ПакетРезультатов[0].Выбрать();
	Пока Выборка.Следующий() Цикл
	
		ФинансоваяЦельОбъект = Выборка.ФинансоваяЦель.ПолучитьОбъект();
		ФинансоваяЦельОбъект.ШаблонНакопления = Неопределено;
		ФинансоваяЦельОбъект.Записать();
	
	КонецЦикла; 
	
	
КонецПроцедуры


#КонецОбласти


