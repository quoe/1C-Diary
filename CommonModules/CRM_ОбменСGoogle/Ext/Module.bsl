////////////////////////////////////////////////////////////////////////////////
//	Общие серверные процедуры для работы со службами Google
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Синхронизация

// Возвращает описания календарей.
//
// Параметры:
//  СеансовыеДанные - Структура - Сеансовые данные.
// 
// Возвращаемое значение:
//  Соответствие - Описания календарей.
//
Функция ОписанияКалендарей(СеансовыеДанные) Экспорт
	
	ОписанияКалендарей = Новый Соответствие;
	ОписанияВсехКалендарей = ОписанияВсехКалендарей(СеансовыеДанные);
	
	Если ЗначениеЗаполнено(ОписанияВсехКалендарей["error"]) Тогда
		ОбработатьОшибкиАвторизации(СеансовыеДанные, ОписанияВсехКалендарей["error"]);
		Возврат ОписанияКалендарей;
	КонецЕсли;
	
	Для Каждого ТекОписаниеКалендаря Из ОписанияВсехКалендарей["items"] Цикл
		Если ТекОписаниеКалендаря["accessRole"] <> "owner" Тогда
			Продолжить;
		КонецЕсли;
		ОписанияКалендарей.Вставить(ТекОписаниеКалендаря["id"], ТекОписаниеКалендаря["summary"]);
	КонецЦикла;
	
	Возврат ОписанияКалендарей;
	
КонецФункции

// Загружает данные календаря.
//
// Параметры:
//  Календарь		 - СправочникСсылка.CRM_КалендариСотрудников - Календарь.
//  СеансовыеДанные	 - Структура - Сеансовые данные.
//
Процедура ЗагрузитьДанныеКалендаря(Календарь, СеансовыеДанные) Экспорт
	
	ОписанияВсехКалендарей = ОписанияВсехКалендарей(СеансовыеДанные);
	Если ЗначениеЗаполнено(ОписанияВсехКалендарей["error"]) Тогда
		ОбработатьОшибкиАвторизации(СеансовыеДанные, ОписанияВсехКалендарей["error"]);
		Возврат;
	КонецЕсли;
	
	КалендарьОбъект			= Календарь.ПолучитьОбъект();
	ИдентификаторКалендаря	= КалендарьОбъект.Идентификатор;
	ИндексЦветаКалендаря	= КалендарьОбъект.ИндексЦвета;
	
	Для Каждого ТекОписаниеКалендаря Из ОписанияВсехКалендарей["items"] Цикл
		Если ТекОписаниеКалендаря["accessRole"] <> "owner" Тогда
			Продолжить;
		КонецЕсли;
		Если ИдентификаторКалендаря = ТекОписаниеКалендаря["id"] Тогда
			ИндексЦвета = ТекОписаниеКалендаря["colorId"];
			Если ИндексЦвета <> ИндексЦветаКалендаря Тогда
				КалендарьОбъект.ИндексЦвета = ИндексЦвета;
				КалендарьОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтраничныйТокен = "";
	
	// Цикл выполняется пока страничный токен не станет равным Неопределено
	Пока ЗначениеЗаполнено(СтраничныйТокен) Или СтраничныйТокен= "" Цикл
		
		СинхроТокен = РегистрыСведений.CRM_ИнкрементнаяСинхронизацияGoogle.СинхроТокен(Календарь);
		
		СобытияКалендаря = СобытияКалендаря(
			ИдентификаторКалендаря,
			СинхроТокен,
			СтраничныйТокен,
			СеансовыеДанные);
		
		Если СобытияКалендаря["error"] <> Неопределено 
			И СобытияКалендаря["error"]["code"] = 410 Тогда
			// Выполняется полная синхронизация, без указания синхротокена
			СобытияКалендаря = СобытияКалендаря(
				ИдентификаторКалендаря,,
				СтраничныйТокен,
				СеансовыеДанные);
		КонецЕсли;
		
		Если СобытияКалендаря["error"] <> Неопределено Тогда
			ВызватьИсключение 
				СтрШаблон(НСтр("ru = 'Произошла ошибка синхронизации с Google Calendar: %1'"),
				СобытияКалендаря["error"]["message"]);
		КонецЕсли;
		
		Для Каждого ЗаписьКалендаря Из СобытияКалендаря["items"] Цикл
			Если ЗаписьКалендаря["status"] = "cancelled" Или
				ЗаписьКалендаря["organizer"]["self"] = Истина Тогда //Может быть Неопределено, если свойство отсутствует.
				ДанныеЗаполнения = ДанныеДляЗаполненияВзаимодействия(ЗаписьКалендаря);
				CRM_СинхронизацияКалендарей.ЗаполнитьВзаимодействие(Календарь, ДанныеЗаполнения);
			КонецЕсли;
		КонецЦикла;
		
		СтраничныйТокен = СобытияКалендаря["nextPageToken"];
		
		Если ЗначениеЗаполнено(СобытияКалендаря["nextSyncToken"]) Тогда
			РегистрыСведений.CRM_ИнкрементнаяСинхронизацияGoogle.ЗаписатьСинхроТокен(Календарь, СобытияКалендаря["nextSyncToken"]);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Выгружает данные календаря.
//
// Параметры:
//  Календарь		 - СправочникСсылка.CRM_КалендариСотрудников - Календарь.
//  СеансовыеДанные	 - Структура - Сеансовые данные.
//
Процедура ВыгрузитьДанныеКалендаря(Календарь, СеансовыеДанные) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВзаимодействияИзменения.Узел КАК Узел,
	|	ВзаимодействияИзменения.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Взаимодействие.Изменения КАК ВзаимодействияИзменения
	|ГДЕ
	|	ВзаимодействияИзменения.Узел.Календарь = &Календарь
	|ИТОГИ ПО
	|	Узел");
	Запрос.УстановитьПараметр("Календарь", Календарь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляВыгрузки = Новый Массив;
	
	// Выгружаем данные порциями по 50 записей, 
	// это максимально допустимый размер для пакетного запроса
	ВыборкаКалендари = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКалендари.Следующий() Цикл
		
		ДанныеДляВыгрузки.Очистить();
		
		ВыборкаСсылки = ВыборкаКалендари.Выбрать();
		Пока ВыборкаСсылки.Следующий() Цикл
			ДанныеДляВыгрузки.Добавить(ВыборкаСсылки.Ссылка);
			Если ДанныеДляВыгрузки.Количество() < 50 Тогда
				Продолжить;
			КонецЕсли;
			ВыгрузитьДанныеВУзел(Календарь, ВыборкаКалендари.Узел, ДанныеДляВыгрузки, СеансовыеДанные);
			ДанныеДляВыгрузки.Очистить();
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДанныеДляВыгрузки) Тогда
			ВыгрузитьДанныеВУзел(Календарь, ВыборкаКалендари.Узел, ДанныеДляВыгрузки, СеансовыеДанные);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет взаимодействие из календаря.
//
// Параметры:
//  Календарь		 - СправочникСсылка.CRM_КалендариСотрудников - Календарь.
//  Взаимодействие	 - ДокументСсылка.CRM_Взаимодействие - Взаимодействие.
//
Процедура УдалитьВзаимодействиеИзКалендаря(Календарь, Взаимодействие) Экспорт
	
	Если Не ЗначениеЗаполнено(Взаимодействие) Тогда
		Возврат;
	КонецЕсли;
	
	Ответственный = Взаимодействие.Ответственный;
	
	СеансовыеДанные = Новый Структура;
	ПрочитатьДанныеАвторизации(СеансовыеДанные, Ответственный);
	Если CRM_ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	ГраницаСекций = НоваяГраницаСекций();
	
	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI("https://www.googleapis.com/batch");
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(АдресAPI.Схема);
	
	HTTPСоединение = Новый HTTPСоединение(
		АдресAPI.Хост,
		АдресAPI.Порт,,,
		ИнтернетПрокси,
		20,
		Новый ЗащищенноеСоединениеOpenSSL);
	
	ПакетныйЗапросHTTP = Новый HTTPЗапрос;
	ПакетныйЗапросHTTP.АдресРесурса = АдресAPI.ПутьНаСервере;
	ПакетныйЗапросHTTP.Заголовки["Authorization"] = СтрШаблон("%1 %2", СеансовыеДанные["token_type"], СеансовыеДанные["access_token"]);
	ПакетныйЗапросHTTP.Заголовки["Content-Type"] = СтрШаблон("multipart/mixed; boundary=%1", ГраницаСекций);
	
	ДанныеВзаимодействия = CRM_СинхронизацияКалендарей.ПрочитатьВзаимодействие(Календарь, Взаимодействие);
	ДанныеДляИзменения = ДанныеДляИзмененияЗаписиКалендаря(ДанныеВзаимодействия);
	ОтправлятьУведомление = ДанныеВзаимодействия.ОтправлятьУведомление;
	
	ТелоПакетногоЗапроса = СтрШаблон(
	"%1--%2
	|Content-Type: application/http
	|Content-ID: %3
	|
	|DELETE /calendar/v3/calendars/%4/events/%5" + ?(ОтправлятьУведомление, "?sendNotifications=true", ""),
	"",														// 1
	ГраницаСекций,											// 2
	ДанныеВзаимодействия.Ссылка.УникальныйИдентификатор(),	// 3
	Календарь.Идентификатор,								// 4
	ДанныеВзаимодействия.Идентификатор);					// 5
	
	ТелоПакетногоЗапроса = СтрШаблон(
	"%1
	|
	|--%2--",
	ТелоПакетногоЗапроса,
	ГраницаСекций);
	
	ПакетныйЗапросHTTP.УстановитьТелоИзСтроки(
		ТелоПакетногоЗапроса,,
		ИспользованиеByteOrderMark.НеИспользовать);
	ПакетныйОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(ПакетныйЗапросHTTP);
	
КонецПроцедуры

#КонецОбласти

#Область Авторизация

// Читает данные авторизации.
//
// Параметры:
//  СеансовыеДанные	 - Структура - Сеансовые данные.
//  Пользователь	 - СправочникСсылка.Пользователи - Пользователь. 
//
Процедура ПрочитатьДанныеАвторизации(СеансовыеДанные, Пользователь) Экспорт
	
	РегистрыСведений.CRM_СеансовыеДанныеGoogle.ПрочитатьИОбновитьСеансовыеДанные(
		СеансовыеДанные,
		Пользователь,
		Перечисления.CRM_ОбластиДоступаGoogle.Календарь);
	
КонецПроцедуры

// Обновляет данные авторизации.
//
// Параметры:
//  СеансовыеДанные	 - Структура - Сеансовые данные.
//  Пользователь	 - СправочникСсылка.Пользователи - Пользователь. 
//  
Процедура ОбновитьДанныеАвторизации(СеансовыеДанные, Пользователь) Экспорт
	
	РегистрыСведений.CRM_СеансовыеДанныеGoogle.ОбновитьСеансовыеДанные(
		СеансовыеДанные,
		Пользователь,
		Перечисления.CRM_ОбластиДоступаGoogle.Календарь);
	
КонецПроцедуры

// Записывает данные авторизации.
//
// Параметры:
//  СеансовыеДанные	 - Структура - Сеансовые данные.
//  Пользователь	 - СправочникСсылка.Пользователи - Пользователь. 
//
Процедура ЗаписатьДанныеАвторизации(СеансовыеДанные, Пользователь) Экспорт
	
	РегистрыСведений.CRM_СеансовыеДанныеGoogle.ПроверитьИЗаписатьСеансовыеДанные(
		СеансовыеДанные,
		Пользователь,
		Перечисления.CRM_ОбластиДоступаGoogle.Календарь);
	
КонецПроцедуры

// Удаляет данные авторизации.
//
// Параметры:
//  Пользователь	 - СправочникСсылка.Пользователи - Пользователь. 
// 
Процедура УдалитьДанныеАвторизации(Пользователь) Экспорт
	
	РегистрыСведений.CRM_СеансовыеДанныеGoogle.УдалитьСеансовыеДанные(
		Пользователь,
		Перечисления.CRM_ОбластиДоступаGoogle.Календарь);
	
КонецПроцедуры

// Проверяет, действительны ли данные авторизации.
//
// Параметры:
//  ДанныеАвторизации - Структура - Данные авторизации.
// 
// Возвращаемое значение:
// 	Булево - Истина, если данные авторизации действительны.
//
Функция ДанныеАвторизацииДействительны(ДанныеАвторизации) Экспорт
	
	Возврат РегистрыСведений.CRM_СеансовыеДанныеGoogle.ТокенДоступаДействителен(ДанныеАвторизации.access_token);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция возвращает текст ошибки, если указанная идентификация некорректна
//
// Параметры:
//  ИдентификацияПриложенияGoogle	 - строка	 - Идентификация приложения Google в формате JSON
// 
// Возвращаемое значение:
//  строка - пустая строка, если идентификация корректна
//
Функция ИдентификацияПриложенияGoogleКорректна(ИдентификацияПриложенияGoogle) Экспорт
	
	Результат = "";
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ИдентификацияПриложенияGoogle);
	Попытка 
		РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		Результат = НСтр("ru = 'Требуется указать данные в формате JSON'");
		Возврат Результат;
	КонецПопытки;
	
	ВидыИдентификацииПриложения = CRM_ОбменСGoogleКлиентСервер.ВидыИдентификацииПриложения();
	
	Для Каждого ВидИдентификации Из ВидыИдентификацииПриложения Цикл
		Попытка
			Если РезультатЧтенияJSON.Свойство(ВидИдентификации) Тогда
				Возврат Результат;
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Результат = СтрШаблон(
		НСтр("ru = 'Некорректный формат идентификации клиента Google: ожидается один из ключей: %1'"),
		СтрСоединить(ВидыИдентификацииПриложения, ", ")
	);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДляЗаполненияВзаимодействия(ЗаписьКалендаря)
	
	ДанныеЗаполнения = CRM_СинхронизацияКалендарей.СтруктураДанныхВзаимодействия();
	
	ЗаполнитьПолеДатаВремя(ДанныеЗаполнения, "ДатаНачала",		ЗаписьКалендаря, "start");
	ЗаполнитьПолеДатаВремя(ДанныеЗаполнения, "ДатаОкончания",	ЗаписьКалендаря, "end");
	
	НаВесьДень = Истина;
	Если ЗаписьКалендаря["start"] <> Неопределено Тогда
		НаВесьДень = ЗаписьКалендаря["start"]["date"] <> Неопределено;
	КонецЕсли;
	ДанныеЗаполнения.НаВесьДень = НаВесьДень;
	
	Если ЗаписьКалендаря["summary"] <> Неопределено Тогда
		ДанныеЗаполнения.Тема = ЗаписьКалендаря["summary"];
	КонецЕсли;
	Если ЗаписьКалендаря["description"] <> Неопределено Тогда
		ДанныеЗаполнения.Содержание = ЗаписьКалендаря["description"];
	КонецЕсли;
	ДанныеЗаполнения.Комментарий = НСтр("ru='Загружено из Google календаря';en='Uploaded from Google Calendar'");
	
	Если ЗаписьКалендаря["location"] <> Неопределено Тогда
		ДанныеЗаполнения.Место = ЗаписьКалендаря["location"];
	КонецЕсли;
	Если ЗаписьКалендаря["status"] <> Неопределено Тогда
		ДанныеЗаполнения.Отменено = ЗаписьКалендаря["status"] = "cancelled";
	КонецЕсли;
	
	Если ЗаписьКалендаря["id"] <> Неопределено Тогда
		ДанныеЗаполнения.Идентификатор = ЗаписьКалендаря["id"];
	КонецЕсли;
	Если ЗаписьКалендаря["etag"] <> Неопределено Тогда
		ДанныеЗаполнения.ETag = ЗаписьКалендаря["etag"];
	КонецЕсли;
	
	Если ЗаписьКалендаря["guestsCanModify"] <> Неопределено Тогда
		ДанныеЗаполнения.ГостиМогутИзменятьСобытие = ЗаписьКалендаря["guestsCanModify"];
	КонецЕсли;
	Если ЗаписьКалендаря["guestsCanSeeOtherGuests"] <> Неопределено Тогда
		ДанныеЗаполнения.ГостиМогутВидетьГостей = ЗаписьКалендаря["guestsCanSeeOtherGuests"];
	КонецЕсли;
	Если ЗаписьКалендаря["guestsCanInviteOthers"] <> Неопределено Тогда
		ДанныеЗаполнения.ГостиМогутПриглашатьГостей = ЗаписьКалендаря["guestsCanInviteOthers"];
	КонецЕсли;
	
	Если ЗаписьКалендаря["colorId"] <> Неопределено Тогда
		ДанныеЗаполнения.ИндексЦвета = ЗаписьКалендаря["colorId"];
	КонецЕсли;
	Если ЗаписьКалендаря["htmlLink"] <> Неопределено Тогда
		ДанныеЗаполнения.Гиперссылка = ЗаписьКалендаря["htmlLink"];
	КонецЕсли;
	
	Если ЗаписьКалендаря["attendees"] <> Неопределено Тогда
		Для Каждого ДанныеУчастника Из ЗаписьКалендаря["attendees"] Цикл
			Участник = Новый Структура;
			Участник.Вставить("УчастникИмя",		ДанныеУчастника["displayName"]);
			Участник.Вставить("УчастникАдрес",		ДанныеУчастника["email"]);
			Если ДанныеУчастника["organizer"] <> Неопределено Тогда
				Участник.Вставить("УчастникЭтоЯ",		ДанныеУчастника["organizer"]);
			Иначе
				Участник.Вставить("УчастникЭтоЯ",		Ложь);
			КонецЕсли;
			УчастникОтклик = ДанныеУчастника["responseStatus"];
			Если УчастникОтклик = "declined" Тогда
				Участник.Вставить("УчастникОтклик", "0");
			ИначеЕсли УчастникОтклик = "accepted" Тогда
				Участник.Вставить("УчастникОтклик", "1");
			Иначе
				Участник.Вставить("УчастникОтклик", "2");
			КонецЕсли;
			ДанныеЗаполнения.Участники.Добавить(Участник);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеДляИзмененияЗаписиКалендаря(ДанныеВзаимодействия)
	
	ДанныеДляИзменения = Новый Соответствие;
	
	ДанныеДляИзменения["start"]			= ОписаниеДатыСобытия(ДанныеВзаимодействия.ДатаНачала);
	ДанныеДляИзменения["end"]			= ОписаниеДатыСобытия(ДанныеВзаимодействия.ДатаОкончания);
	
	ДанныеДляИзменения["summary"]		= ДанныеВзаимодействия.Тема;
	ДанныеДляИзменения["description"]	= ДанныеВзаимодействия.Содержание;
	ДанныеДляИзменения["location"]		= ДанныеВзаимодействия.Место;
	Если ДанныеВзаимодействия.Отменено Тогда
		ДанныеДляИзменения["status"]	= "cancelled";
	Иначе
		ДанныеДляИзменения["status"]	= "confirmed";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеВзаимодействия.ИндексЦвета) Тогда
		ДанныеДляИзменения["colorId"]	= ДанныеВзаимодействия.ИндексЦвета;
	КонецЕсли;
	
	ДанныеДляИзменения["id"]			= ДанныеВзаимодействия.Идентификатор;
	
	ДанныеДляИзменения["guestsCanModify"] 			= ДанныеВзаимодействия.ГостиМогутИзменятьСобытие;
	ДанныеДляИзменения["guestsCanSeeOtherGuests"] 	= ДанныеВзаимодействия.ГостиМогутВидетьГостей;
	ДанныеДляИзменения["guestsCanInviteOthers"] 	= ДанныеВзаимодействия.ГостиМогутПриглашатьГостей;
	
	Участники = Новый Массив;
	Для Каждого ДанныеУчастника Из ДанныеВзаимодействия.Участники Цикл
		НовыйУчастник = Новый Соответствие;
		НовыйУчастник["displayName"]	= ДанныеУчастника.УчастникИмя;
		НовыйУчастник["email"]			= ДанныеУчастника.УчастникАдрес;
		Если ДанныеУчастника.УчастникОтклик = 0 Тогда
			НовыйУчастник["responseStatus"] = "declined";
		ИначеЕсли ДанныеУчастника.УчастникОтклик = 1 Тогда
			НовыйУчастник["responseStatus"] = "accepted";
		ИначеЕсли ДанныеУчастника.УчастникОтклик = 2 Тогда
			НовыйУчастник["responseStatus"] = "tentative";
		Иначе
			НовыйУчастник["responseStatus"] = "needsAction";
		КонецЕсли;
		Участники.Добавить(НовыйУчастник);
	КонецЦикла;
	ДанныеДляИзменения["attendees"] = Участники;
	
	Возврат ДанныеДляИзменения;
	
КонецФункции

Процедура ВыгрузитьДанныеВУзел(Календарь, Узел, ДанныеДляВыгрузки, СеансовыеДанные)
	
	ГраницаСекций = НоваяГраницаСекций();
	
	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI("https://www.googleapis.com/batch");
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(АдресAPI.Схема);
	
	HTTPСоединение = Новый HTTPСоединение(
		АдресAPI.Хост,
		АдресAPI.Порт,,,
		ИнтернетПрокси,
		20,
		Новый ЗащищенноеСоединениеOpenSSL);
	
	ПакетныйЗапросHTTP = Новый HTTPЗапрос;
	ПакетныйЗапросHTTP.АдресРесурса = АдресAPI.ПутьНаСервере;
	ПакетныйЗапросHTTP.Заголовки["Authorization"] = СтрШаблон("%1 %2", СеансовыеДанные["token_type"], СеансовыеДанные["access_token"]);
	ПакетныйЗапросHTTP.Заголовки["Content-Type"] = СтрШаблон("multipart/mixed; boundary=%1", ГраницаСекций);
	
	// ЗаписьСообщения используется только для управления нумерацией сообщений
	// Реальная запись будет производиться в отправляемый по HTTPS пакет
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Узел);
	
	ВыборкаДанных = ПланыОбмена.ВыбратьИзменения(Узел, ЗаписьСообщения.НомерСообщения, ДанныеДляВыгрузки);
	
	ТелоПакетногоЗапросаИзменениеДанныхКалендаря = ТелоПакетногоЗапросаИзменениеДанныхКалендаря(Календарь, ВыборкаДанных, ГраницаСекций);
	
	Если Не ЗначениеЗаполнено(ТелоПакетногоЗапросаИзменениеДанныхКалендаря) Тогда
		Возврат;
	КонецЕсли;
	
	ПакетныйЗапросHTTP.УстановитьТелоИзСтроки(
		ТелоПакетногоЗапросаИзменениеДанныхКалендаря,,
		ИспользованиеByteOrderMark.НеИспользовать);
	ПакетныйОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(ПакетныйЗапросHTTP);
	
	Если ПакетныйОтветHTTP.КодСостояния = 200 Тогда
		НомерСообщения = ЗаписьСообщения.НомерСообщения;
		ЗаписьСообщения.ЗакончитьЗапись();
	Иначе
		ЗаписьСообщения.ПрерватьЗапись();
		Возврат;
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НомерСообщения);
	
КонецПроцедуры

Функция ТелоПакетногоЗапросаИзменениеДанныхКалендаря(Календарь, ВыборкаДанных, ГраницаСекций)
	
	Результат = "";
	
	Пока ВыборкаДанных.Следующий() Цикл
		
		Взаимодействие = ВыборкаДанных.Получить();
		
		Если Взаимодействие = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Взаимодействие) = Тип("УдалениеОбъекта") Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеВзаимодействия = CRM_СинхронизацияКалендарей.ПрочитатьВзаимодействие(Календарь, Взаимодействие);
		ДанныеДляИзменения = ДанныеДляИзмененияЗаписиКалендаря(ДанныеВзаимодействия);
		
		// Новое
		Если Не ЗначениеЗаполнено(ДанныеВзаимодействия.Идентификатор) Тогда
			ДанныеДляИзменения["id"] = СтрЗаменить(ДанныеВзаимодействия.Ссылка.УникальныйИдентификатор(), "-", "");
		КонецЕсли;
		
		ОтправлятьУведомление = ДанныеВзаимодействия.ОтправлятьУведомление;
		
		Если ИмяМетодаHTTP(ДанныеВзаимодействия) = "DELETE" Тогда
			
			Результат = СтрШаблон(
			"%1--%2
			|Content-Type: application/http
			|Content-ID: %3
			|
			|%4 /calendar/v3/calendars/%5/events/%6" + ?(ОтправлятьУведомление, "?sendNotifications=true", ""),
			ОтступДляСекции(Результат),								// 1
			ГраницаСекций,											// 2
			ДанныеВзаимодействия.Ссылка.УникальныйИдентификатор(),	// 3
			ИмяМетодаHTTP(ДанныеВзаимодействия),					// 4
			Календарь.Идентификатор,								// 5
			ДанныеВзаимодействия.Идентификатор);					// 6
			
		Иначе // POST, PATCH
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			НастройкиСериализации = Новый НастройкиСериализацииJSON;
			НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
			ЗаписатьJSON(ЗаписьJSON, ДанныеДляИзменения, НастройкиСериализации);
			СтрокаJSON = СтрЗаменить(ЗаписьJSON.Закрыть(), """%null%""", "null"); // Удаление полей
			
			Результат = СтрШаблон(
			"%1--%2
			|Content-Type: application/http
			|Content-ID: %3
			|
			|%4 /calendar/v3/calendars/%5/events/%6"
			+ ?(ОтправлятьУведомление, "?sendNotifications=true", "")
			+ ?(ОтправлятьУведомление, "&", "") + "%7 
			|Content-Type: application/json
			|%8
			|%9",
			ОтступДляСекции(Результат),								// 1
			ГраницаСекций,											// 2
			ДанныеВзаимодействия.Ссылка.УникальныйИдентификатор(),	// 3
			ИмяМетодаHTTP(ДанныеВзаимодействия),					// 4
			Календарь.Идентификатор,								// 5
			ДанныеВзаимодействия.Идентификатор,						// 6
			ПередаваемыеПоля(ДанныеВзаимодействия.Идентификатор),	// 7
			ЗаголовокETag(ДанныеВзаимодействия.ETag),				// 8
			СтрокаJSON);											// 9
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Результат = СтрШаблон(
		"%1
		|
		|--%2--",
		Результат,
		ГраницаСекций);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеДатыСобытия(Знач ДатаВремя)
	
	Результат = Новый Соответствие;
	
	ДатаВремяПриведенноеКСерверу = МестноеВремя(УниверсальноеВремя(ДатаВремя, ПолучитьЧасовойПоясИнформационнойБазы()));
	
	Если НачалоДня(ДатаВремяПриведенноеКСерверу) = ДатаВремяПриведенноеКСерверу Тогда
		Результат["date"] = Формат(ДатаВремяПриведенноеКСерверу, "ДФ=yyyy-MM-dd");
		Результат["dateTime"] = "%null%";
	Иначе
		Результат["date"] = "%null%";
		Результат["dateTime"] = ДатаВремяПриведенноеКСерверу;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтступДляСекции(ТелоСообщения)
	
	Если ЗначениеЗаполнено(ТелоСообщения) Тогда
		Возврат ТелоСообщения + Символы.ПС + Символы.ПС;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПередаваемыеПоля(Идентификатор)
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат "?fields=etag,start,end,status,summary,description,attendees,location,guestsCanInviteOthers,guestsCanSeeOtherGuests,guestsCanModify";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ЗаголовокETag(ETag)
	
	Если ЗначениеЗаполнено(ETag) Тогда
		Возврат СтрШаблон(
		"If-Match: %1%2",
		ETag,
		Символы.ПС);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ИмяМетодаHTTP(Данные)
	
	Если Данные.Отменено Тогда
		Возврат "DELETE";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Идентификатор) Тогда
		Возврат "PATCH";
	КонецЕсли;
	
	Возврат "POST";
	
КонецФункции

Процедура ОбработатьОшибкиАвторизации(СеансовыеДанные, ОписаниеОшибки)
	
	Для Каждого ТекОписаниеОшибки Из ОписаниеОшибки["errors"] Цикл
		Если ТекОписаниеОшибки["reason"] = "authError" Тогда
			СеансовыеДанные=Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПолеДатаВремя(Приемник, ИмяПоляПриемник, Источник, ИмяПоляИсточник)
	
	Если Не ЗначениеЗаполнено(Источник[ИмяПоляИсточник]) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник[ИмяПоляИсточник]["dateTime"]) Тогда
		ЗначениеПоляДатаВремя = Источник[ИмяПоляИсточник]["dateTime"];
	Иначе
		ЗначениеПоляДатаВремя = Источник[ИмяПоляИсточник]["date"];
	КонецЕсли;
	
	ЗначениеПриведенноеКЧасовомуПоясуИБ = МестноеВремя(УниверсальноеВремя(ЗначениеПоляДатаВремя), ПолучитьЧасовойПоясИнформационнойБазы());
	
	Приемник.Вставить(ИмяПоляПриемник, ЗначениеПриведенноеКЧасовомуПоясуИБ);
	
КонецПроцедуры

Функция ОписанияВсехКалендарей(СеансовыеДанные)
	
	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
		"https://www.googleapis.com/calendar/v3/users/me/calendarList");
		
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ВызовМетода(АдресAPI, СеансовыеДанные));
	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
	Возврат РезультатЧтенияJSON;
	
КонецФункции

Функция СобытияКалендаря(ИдентификаторКалендаря, СинхроТокен, СтраничныйТокен, СеансовыеДанные)
	
	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
	СтрШаблон(
	"https://www.googleapis.com/calendar/v3/calendars/%1/events?singleEvents=True&maxResults=256&timeZone=%2%3%4%5",
	ИдентификаторКалендаря,
	ЧасовойПояс(),
	ПараметрПериод(СинхроТокен),
	ПараметрСинхроТокен(СинхроТокен),
	ПараметрСтраничныйТокен(СтраничныйТокен)));
	
	СтрокаJSON = ВызовМетода(АдресAPI, СеансовыеДанные);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON,
		Истина,,,
		"ВосстановитьДатуJSON",
		CRM_ОбменСGoogle,,
		СтрРазделить("created,date,dateTime,updated", ","));
	
	Возврат РезультатЧтенияJSON;
	
КонецФункции

Функция ВосстановитьДатуJSON(Свойство, Значение, Параметры) Экспорт
	
	Попытка
		
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Синхронизация календаря Google.'"),
		УровеньЖурналаРегистрации.Предупреждение,,,
		СтрШаблон(
		НСтр("ru = 'Не удалось прочитать дату JSON для свойства ""%1"": ""%2"".'"), 
		Свойство,
		Значение));
		
	КонецПопытки;
	
	Возврат '0001-01-01';
	
КонецФункции

Функция ПараметрПериод(СинхроТокен)
	
	Если ЗначениеЗаполнено(СинхроТокен) Тогда
		Возврат "";
	КонецЕсли;
	
	Начало = ЗаписатьДатуJSON(
	НачалоДня(ТекущаяДатаСеанса()),
	ФорматДатыJSON.ISO,
	ВариантЗаписиДатыJSON.УниверсальнаяДата);
	
	Окончание = ЗаписатьДатуJSON(
	ДобавитьМесяц(КонецДня(ТекущаяДатаСеанса()), 24),
	ФорматДатыJSON.ISO,
	ВариантЗаписиДатыJSON.УниверсальнаяДата);
	
	Возврат СтрШаблон("&timeMin=%1&timeMax=%2", Начало, Окончание);
	
КонецФункции

Функция ПараметрСинхроТокен(СинхроТокен)
	
	Если ЗначениеЗаполнено(СинхроТокен) Тогда
		Возврат СтрШаблон("&syncToken=%1", СинхроТокен);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПараметрСтраничныйТокен(СтраничныйТокен)
	
	Если ЗначениеЗаполнено(СтраничныйТокен) Тогда
		Возврат СтрШаблон("&pageToken=%1", СтраничныйТокен);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ВызовМетода(АдресAPI, СеансовыеДанные = Неопределено, HTTPМетод = Неопределено, ДополнительныеЗаголовки = Неопределено, ТелоЗапроса = Неопределено)
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(АдресAPI.Схема);
	
	HTTPСоединение = Новый HTTPСоединение(
		АдресAPI.Хост,
		АдресAPI.Порт,,,
		ИнтернетПрокси,
		20,
		Новый ЗащищенноеСоединениеOpenSSL);
	
	ЗапросHTTP = Новый HTTPЗапрос;
	ЗапросHTTP.АдресРесурса = АдресAPI.ПутьНаСервере;
	ЗапросHTTP.Заголовки["Content-Type"] = "application/x-www-form-urlencoded";
	Если СеансовыеДанные <> Неопределено Тогда
		ЗапросHTTP.Заголовки["Authorization"] = СтрШаблон(
		"%1 %2",
		СеансовыеДанные["token_type"],
		СеансовыеДанные["access_token"]);
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеЗаголовки)=Тип("Соответствие") Тогда
		Для Каждого ДопЗаголовок Из ДополнительныеЗаголовки Цикл
			ЗапросHTTP.Заголовки[ДопЗаголовок.Ключ] = ДопЗаголовок.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если ТелоЗапроса <> Неопределено Тогда
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса,, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
	Если HTTPМетод = Неопределено Тогда
		ОтветHTTP = HTTPСоединение.Получить(ЗапросHTTP);
	Иначе
		ОтветHTTP = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, ЗапросHTTP);
	КонецЕсли;
	
	Возврат ОтветHTTP.ПолучитьТелоКакСтроку();
	
КонецФункции

Функция НоваяГраницаСекций()
	
	Возврат СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");

КонецФункции

#Область ОбновлениеИнформационнойБазы

// Отключает ранее настроенный канал связи с Google при смене механизма обмена.
//
Процедура ОтключитьКаналСинхронизацииGoogle(Пользователь) Экспорт
	
	КодДействителен = ОбновитьКодАвторизации(Пользователь);
	
	Если Не КодДействителен Тогда
		Возврат;
	КонецЕсли;
	
	КодАвторизации		= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "AccessTokenGApi");
	ИдКалендаряКанала	= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ИдКалендаряКанала");
	ИдКанала			= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "IDКаналаGApi");
	
	Если Не ЗначениеЗаполнено(ИдКанала) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКанала = "{
	|	""id"": """+ИдКанала+""",
	| 	""resourceId"": """+ИдКалендаряКанала+"""
	|  }";
	ФайлЗапроса = ПолучитьИмяВременногоФайла("txt");
	
	ЗаписатьФайлВформате_UTF8_без_BOM(ОписаниеКанала,ФайлЗапроса);
	Файл = Новый Файл(ФайлЗапроса);
	РазмерФайла = Файл.Размер();
	Файл = Неопределено;
	
	Соединение = Новый HTTPСоединение("www.googleapis.com",,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Bearer " + КодАвторизации);
	Заголовки.Вставить("Content-Type",	"application/json ; charset=UTF-8");
	Заголовки.Вставить("Content-Length", Формат(РазмерФайла, "ЧГ="));
	
	ФайлРезультата = ПолучитьИмяВременногоФайла("txt");
	ЗапросHTTP				= Новый HTTPЗапрос;
	ЗапросHTTP.АдресРесурса	= "calendar/v3/channels/stop";
	ЗапросHTTP.Заголовки	= Заголовки;
	ЗапросHTTP.УстановитьИмяФайлаТела(ФайлЗапроса);
	
	Попытка
		
		Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP, ФайлРезультата);
		Если (Ответ.КодСостояния = 200) ИЛИ (Ответ.КодСостояния = 204) Тогда
			CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя("", "IDКаналаGApi", Пользователь);
			CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(Дата(1,1,1), "ВремяЖизниКаналаGApi", Пользователь);
			УдалитьЗаписьОКаналеНаСайте(Пользователь, ИдКалендаряКанала, ИдКанала);
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось отключить канал синхронизации Google.'") + Символы.ПС +
			НСтр("ru = 'Пользователь: '") + Строка(Пользователь) + Символы.ПС +
			НСтр("ru = 'Текст ошибки: '") + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ru='Синхронизация Google'", УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьКодАвторизации(Пользователь) Экспорт
	
	МакетНастроекКонсоли = РегистрыСведений.CRM_СеансовыеДанныеGoogle.ПолучитьМакет("УдалитьПараметрыПриложенияGoogle");
	Client_id         = МакетНастроекКонсоли.ПолучитьОбласть("Client_id|Значение").ТекущаяОбласть.Текст;
	Client_secret     = МакетНастроекКонсоли.ПолучитьОбласть("Client_secret|Значение").ТекущаяОбласть.Текст;
	Redirect_uri      = МакетНастроекКонсоли.ПолучитьОбласть("Redirect_uri|Значение").ТекущаяОбласть.Текст;
	
	Refresh_token = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "RefreshTokenGApi");
	
	СтруктураТокенов = Новый Структура;
	Сервер = "accounts.google.com";
	КодОтвета = 0;
	
	Если Не ЗначениеЗаполнено(Refresh_token) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(Сервер,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Host","accounts.google.com");
	Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded");
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла();
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ПараметрыЗапроса = "client_id=" + Client_id + "&client_secret=" + Client_secret + "&refresh_token=" + Refresh_token + "&grant_type=refresh_token";
	ТекстовыйФайл.УстановитьТекст(ПараметрыЗапроса);
	ТекстовыйФайл.Записать(ФайлЗапроса);
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	ЗапросHTTP				= Новый HTTPЗапрос;
	ЗапросHTTP.АдресРесурса	= "/o/oauth2/token";
	ЗапросHTTP.Заголовки	= Заголовки;
	ЗапросHTTP.УстановитьИмяФайлаТела(ФайлЗапроса);
	
	Попытка
		
		Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP, ФайлРезультата);
		КодОтвета = Ответ.КодСостояния;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось получить код доступа к Google API.'") + Символы.ПС +
			НСтр("ru = 'Пользователь: '") + Строка(Пользователь) + Символы.ПС +
			НСтр("ru = 'Текст ошибки: '") + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ru='Синхронизация Google'", УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
		
	КонецПопытки;
	
	Если КодОтвета <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ФайлОтвет = Новый ТекстовыйДокумент();
	ФайлОтвет.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
	ТекстОтвета = ФайлОтвет.ПолучитьТекст();
	
	Для н = 1 По СтрЧислоСтрок(ТекстОтвета) Цикл
		ТекСтр = СтрПолучитьСтроку(ТекстОтвета, н);
		Если Найти(ТекСтр, "access_token") > 0 Тогда
			access_token = Сред(ТекСтр, 21, СтрДлина(ТекСтр) - 22);
			СтруктураТокенов.Вставить("access_token", access_token);
		КонецЕсли;
		Если Найти(ТекСтр, "expires_in") > 0 Тогда
			expires_in = Сред(ТекСтр, 18, СтрДлина(ТекСтр) - 18);
			СтруктураТокенов.Вставить("TTL", expires_in);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураТокенов;
	
КонецФункции

Функция ОбновитьКодАвторизации(Пользователь)
	
	КодДействителен = Ложь;
	
	// токен доступа
	Если Пользователь = Неопределено Тогда
		Access_token = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("AccessTokenGApi");
		ВремяЖизниТокена = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ВремяЖизниТокенаAPI");
	Иначе
		Access_token = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "AccessTokenGApi");
		ВремяЖизниТокена = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ВремяЖизниТокенаAPI");
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Access_token) ИЛИ ТекущаяДатаСеанса()> ВремяЖизниТокена Тогда
		СтруктураТокенаАвторизации = ПолучитьКодАвторизации(Пользователь);
		Если Не СтруктураТокенаАвторизации = Неопределено Тогда 
			CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(СтруктураТокенаАвторизации.access_token, "AccessTokenGApi", Пользователь);
			CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(ТекущаяДатаСеанса()+Число(СтруктураТокенаАвторизации.TTL), "ВремяЖизниТокенаAPI", Пользователь);
			КодДействителен = Истина;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Access_token) ИЛИ ТекущаяДатаСеанса()< ВремяЖизниТокена Тогда
		КодДействителен = Истина;
	КонецЕсли;
	
	Возврат КодДействителен;
	
КонецФункции

Функция УдалитьЗаписьОКаналеНаСайте(Пользователь, ИдКалендаря, ИдКанала)
	
	Результат = Ложь;
	
	Соединение = Новый HTTPСоединение("pushtest.rarus.ru",,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	Запрос = Новый HTTPЗапрос;
	Запрос.АдресРесурса = "stopChannel.php?channel="+ИдКанала+"&resourse="+ИдКалендаря;
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
	
	Попытка
		Ответ = Соединение.Получить(Запрос, ИмяВыходногоФайла);
		Если Ответ.КодСостояния = 200 Тогда
			Результат = Истина;
		Иначе
			Результат = Ложь;
		КонецЕсли;
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось удалить запись о канале синхронизации на сайте pushtest.rarus.ru.'") + Символы.ПС +
		НСтр("ru = 'Пользователь: '") + Строка(Пользователь) + Символы.ПС +
		НСтр("ru = 'Текст ошибки: '") + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ru='Синхронизация Google'", УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
		
		Результат = Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьФайлВформате_UTF8_без_BOM(Текст, ПолноеИмяФайла) 
	
	ТекстовыйФайлUTF8_Bom = Новый ТекстовыйДокумент();
	ТекстовыйФайлUTF8_Bom.ДобавитьСтроку(текст);
	ТекстовыйФайлUTF8_Bom.Записать(полноеИмяФайла,"UTF-8");
	
	Данные = Новый ДвоичныеДанные(полноеИмяФайла);
	Строка64		= Base64Строка(Данные);
	Строка64		= Прав(Строка64,СтрДлина(Строка64)-4);
	ДанныеНаЗапись	= Base64Значение(Строка64);
	ДанныеНаЗапись.Записать(ПолноеИмяФайла);
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

