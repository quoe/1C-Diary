////////////////////////////////////////////////////////////////////////////////
//	Общие серверные процедуры для работы со службами Google
//
////////////////////////////////////////////////////////////////////////////////

//+++ Нужно

// Формирует ключ из идентификатора посредством расчета хеш-суммы по алгоритму SHA-256
//
// Параметры:
//  Идентификатор	 - Строка - идентификатор, для которого нужно получить ключ
//  КонтекстПроверки - Строка - параметр передаётся в процедуру ОбщегоНазначенияКлиентСервер.Проверить()
//  и позволяет определить, откуда произошёл вызов в случае ошибки. 
// 
// Возвращаемое значение:
//  Строка - строка длинной 64 символа, значение вычисленной хеш-суммы
//
Функция КлючИзИдентификатора(Идентификатор, КонтекстПроверки) Экспорт
	
	ОбщегоНазначенияКлиентСервер.Проверить(
	ЗначениеЗаполнено(Идентификатор),
	НСтр("ru = 'Не указан Идентификатор для преобразования его в Ключ'"),
	КонтекстПроверки);
	
	ОбщегоНазначенияКлиентСервер.Проверить(
	ТипЗнч(Идентификатор) = Тип("Строка"),
	НСтр("ru = 'Идентификатор должен быть строкового типа'"),
	КонтекстПроверки);
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(Идентификатор);
	Возврат СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	
КонецФункции

//---

//#Область ПрограммныйИнтерфейс

//// Процедура выполняет инициализацию сеансовых данных OAuth2 для работы с Google
//// В случае если переданные сеансовые данные не заполнены (структура не содержит
//// токен доступа access_token), выполняется их чтение из регистра сведений 
//// СеансовыеДанныеGoogle, проверка действительности на сервере Google, и, 
//// в случае необходимости обновление с помощью токена обновления refresh_token.
//// В случае если сеансовые данные заполнены, выполняется их проверка и запись 
//// в регистр сведений.
////
//// Параметры:
////  Данные			- Структура - сеансовые данные,
////  ключи соответствуют ресурсам регистра СеансовыеДанныеGoogle
////  Пользователь	- СправочникСсылка.Пользователи
////  ОбластьДоступа	- ПеречислениеСсылка.ОбластиДоступаGoogle
////  УчетнаяЗаписьЭлектроннойПочты - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - указывается для области доступа "Почта"
////
//Процедура ИнициализироватьСеансовыеДанные(Данные, Пользователь, ОбластьДоступа, УчетнаяЗаписьЭлектроннойПочты = Неопределено) Экспорт
//	
//	Если ОбластьДоступа = Перечисления.ОбластиДоступаGoogle.Почта
//		И Не ЗначениеЗаполнено(УчетнаяЗаписьЭлектроннойПочты) Тогда
//		ВызватьИсключение НСтр("ru = 'Не указана учетная запись электронной почты.'");
//	КонецЕсли;
//	
//	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(Данные) Тогда
//		РегистрыСведений.СеансовыеДанныеGoogle.ПрочитатьИОбновитьСеансовыеДанные(Данные, Пользователь, ОбластьДоступа, УчетнаяЗаписьЭлектроннойПочты);
//	Иначе
//		РегистрыСведений.СеансовыеДанныеGoogle.ПроверитьИЗаписатьСеансовыеДанные(Данные, Пользователь, ОбластьДоступа, УчетнаяЗаписьЭлектроннойПочты);
//	КонецЕсли;
//	
//КонецПроцедуры

//// Функция возвращает данные авторизованного пользователя
////
//// Параметры:
////  СеансовыеДанные	 - Структура -  - сеансовые данные, 
////  ключи соответствуют ресурсам регистра СеансовыеДанныеGoogle
//// 
//// Возвращаемое значение:
////  Соответствие - данные авторизованного пользователя
////
//Функция ДанныеАвторизованногоПользователя(Знач СеансовыеДанные) Экспорт
//	
//	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
//	"https://www.googleapis.com/oauth2/v2/userinfo");
//	
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(ВызовМетода(АдресAPI, СеансовыеДанные));
//	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
//	Возврат РезультатЧтенияJSON;
//	
//КонецФункции

//// Функция возвращает данные почтового профиля авторизованного пользователя
////
//// Параметры:
////  СеансовыеДанные	 - Структура -  - сеансовые данные,
////  ключи соответствуют ресурсам регистра СеансовыеДанныеGoogle
//// 
//// Возвращаемое значение:
////  Соответствие - данные почтового профиля
////
//Функция ДанныеПочтовогоПрофиля(Знач СеансовыеДанные) Экспорт
//	
//	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
//	СтрШаблон("https://www.googleapis.com/gmail/v1/users/me/profile%1",
//	КвотаПользователя("?quotaUser")));
//	
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(ВызовМетода(АдресAPI, СеансовыеДанные));
//	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
//	Возврат РезультатЧтенияJSON;
//	
//КонецФункции

//Функция ИдентификаторСообщения(Знач Идентификатор, Знач СеансовыеДанные) Экспорт
//	
//	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
//	СтрШаблон("https://www.googleapis.com/gmail/v1/users/me/messages/%1?format=metadata&metadataHeaders=Message-Id&fields=payload%2",
//	Идентификатор,
//	КвотаПользователя("&quotaUser")));
//	
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(ВызовМетода(АдресAPI, СеансовыеДанные));
//	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
//	
//	Если РезультатЧтенияJSON["payload"] = Неопределено Тогда
//		Возврат "";
//	КонецЕсли;
//	
//	Если ТипЗнч(РезультатЧтенияJSON["payload"]["headers"]) <> Тип("Массив") Тогда
//		Возврат "";
//	КонецЕсли;
//	
//	Для Каждого ТекЗаголовок Из РезультатЧтенияJSON["payload"]["headers"] Цикл
//		Если НРег(ТекЗаголовок["name"]) = "message-id" Тогда
//			Возврат ТекЗаголовок["value"];
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат "";
//	
//КонецФункции

//// Синхронизация с Google Calendar в фоновом задании
////
//// Параметры:
////  СеансовыеДанные	 - Структура - поля соответствуют ресурсам регистра сведений СеансовыеДанныеGoogle
////  АдресХранилища	 - Строка - используется для совместимости с подсистемой ДлительныеОперации
////  Пользователь	 - СправочникСсылка.Пользователь - Пользователь для которого выполняется синхронизация,
////                     если Пользователь не указан, то используется Пользователи.ТекущийПользователь();
////
//Процедура СинхронизироватьGoogleCalendar(Знач СеансовыеДанные, Знач АдресХранилища = Неопределено, Знач Пользователь = Неопределено) Экспорт
//	
//	Если Не ЗначениеЗаполнено(Пользователь) Тогда
//		Пользователь = Пользователи.ТекущийПользователь();
//	КонецЕсли;
//	
//	СоздатьОтсутствующиеКалендариВGoogle(СеансовыеДанные, Пользователь);
//	ВыгрузитьДанныеGoogleCalendar(СеансовыеДанные, Пользователь);
//	ЗагрузитьДанныеGoogleCalendar(СеансовыеДанные, Пользователь);
//	
//КонецПроцедуры

//// Загрузка контактов из адресной книги Google в фоновом задании
////
//// Параметры:
////  СеансовыеДанные	 - Структура - поля соответствуют ресурсам регистра сведений СеансовыеДанныеGoogle
////  АдресХранилища	 - Строка - используется для совместимости с подсистемой ДлительныеОперации
////  Пользователь	 - СправочникСсылка.Пользователь - Пользователь для которого выполняется синхронизация,
////                     если Пользователь не указан, то используется Пользователи.ТекущийПользователь();
////
//Процедура ЗагрузитьКонтактыИзGoogle(Знач СеансовыеДанные, Знач АдресХранилища = Неопределено, Знач Пользователь = Неопределено) Экспорт
//	
//	Если Не ЗначениеЗаполнено(Пользователь) Тогда
//		Пользователь = Пользователи.ТекущийПользователь();
//	КонецЕсли;
//	
//	ЗагрузитьКонтактыИзGoogleРекурсивно(
//	"https://www.google.com/m8/feeds/contacts/default/full?max-results=256&alt=json",
//	СеансовыеДанные,
//	Пользователь);
//	
//КонецПроцедуры



//Процедура ИнициализироватьУзелПланаОбменаДляКалендаряGoogle() Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	ЭтотУзел = ПланыОбмена.ОбменСGoogleCalendar.ЭтотУзел();
//	Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзел, "Код")) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	УзелОбъект = ЭтотУзел.ПолучитьОбъект();
//	УзелОбъект.ОбменДанными.Загрузка = Истина;
//	УзелОбъект.УстановитьНовыйКод();
//	УзелОбъект.Наименование = НСтр("ru = 'Этот узел'");
//	УзелОбъект.Записать();
//	
//КонецПроцедуры

//// Подключает обработчики события "АвтоПодбор" для тех элементов формы,
//// тип соответсвующих реквизитов которых удовлетворяет
//// ОбменСGoogleКлиентСервер.ЭтоСправочникДляПодключенияКлассификатораКонтактов()
////
//// Параметры:
////  Форма - форма, для элементов которой устанавливаются обработчики,
////  СтатическоеОписание - Соответствие, где Ключ - имя элемента на форме (например, "Контрагент"),
////  значение - Структура с полями:
////   * ПутьКДанным - Строка, например "Объект.Контрагент",
////   * ТипЗначения - Тип - например, Тип("СправочникСсылка.Контрагенты"),
////   * ИмяФормыОбъекта - имя формы для создания объекта из классификатора, например "Справочник.Контрагенты.ФормаОбъекта".
////  ГруппаДополнительныхРеквизитов - Строка - имя группы, где расположены дополнительные реквизиты.
////  В этой группе будет осуществляться поиск доп. реквизитов. Если не задано, поиск реквизитов будет осуществляться по всем элементам.
//Процедура ПодключитьОбработчикиСобытияАвтоподбор(Форма, СтатическоеОписание = Неопределено, ГруппаДополнительныхРеквизитов = Неопределено) Экспорт
//	
//	ЗаполнитьРеквизитПоддержкаGoogle(Форма, СтатическоеОписание, ГруппаДополнительныхРеквизитов);
//	
//	Для Каждого КлючИЗначение Из Форма.ПоддержкаGoogle.ОписаниеПолейДляАвтоПодбора Цикл
//		
//		ТекЭлемент = Форма.Элементы[КлючИЗначение.Ключ];
//		
//		Если Не ЗначениеЗаполнено(ТекЭлемент.ПолучитьДействие("АвтоПодбор")) Тогда
//			ТекЭлемент.УстановитьДействие("АвтоПодбор", "Подключаемый_АвтоПодбор");
//		КонецЕсли;
//		
//		Если Не ЗначениеЗаполнено(ТекЭлемент.ПолучитьДействие("ОбработкаВыбора")) Тогда
//			ТекЭлемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбора");
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//// Инициализирует реквизиты формы редактирования контрагента для автоподбора из классификатора
////
//// Параметры:
////  Форма		 - УправляемаяФорма - форма, для которой выполняется инициализация реквизитов
////  Параметры	 - Структура - параметры, переданные в форму при её открытии
////
//Процедура ПодготовитьРеквизитыДляАвтоподбораИзКлассификатора(Форма, Параметры) Экспорт
//	
//	Параметры.Свойство("КлассификаторДляЗаполненияКИ", Форма.КлассификаторДляЗаполненияКИ);
//	
//	Форма.ПоддержкаGoogle = ОписаниеПоддержкиGoogle(Форма);
//	
//КонецПроцедуры

//// Увеличивает значение счетчика количества предложений загрузки контактов из Google
////
//// Параметры:
////  Форма		 - УправляемаяФорма - форма с инициализированным реквизитом ПоддержкаGoogle
////
//Процедура УвеличитьЗначениеСчетчикаПодсказок(Форма) Экспорт
//	
//	Если Форма.ПоддержкаGoogle.УвеличитьЗначениеСчетчикаПодсказок Тогда
//		РегистрыСведений.СчетчикиПодсказок.УвеличитьЗначениеСчетчика(Перечисления.ВидыПодсказок.Google);
//	КонецЕсли;
//	
//КонецПроцедуры

//// Функция возвращает текст ошибки, если указанная идентификация некорректна
////
//// Параметры:
////  ИдентификацияПриложенияGoogle	 - строка	 - Идентификация приложения Google в формате JSON
//// 
//// Возвращаемое значение:
////  строка - пустая строка, если идентификация корректна
////
//Функция ИдентификацияПриложенияGoogleКорректна(ИдентификацияПриложенияGoogle) Экспорт
//	
//	Результат = "";
//	
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(ИдентификацияПриложенияGoogle);
//	Попытка 
//		РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON);
//	Исключение
//		Результат = НСтр("ru = 'Требуется указать данные в формате JSON'");
//		Возврат Результат;
//	КонецПопытки;
//	
//	ВидыИдентификацииПриложения = ОбменСGoogleКлиентСервер.ВидыИдентификацииПриложения();
//	
//	Для Каждого ВидИдентификации Из ВидыИдентификацииПриложения Цикл
//		Если РезультатЧтенияJSON.Свойство(ВидИдентификации) Тогда
//			Возврат Результат;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Результат = СтрШаблон(
//		НСтр("ru = 'Некорректный формат идентификации клиента Google: ожидается один из ключей: %1'"),
//		СтрСоединить(ВидыИдентификацииПриложения, ", ")
//	);
//	
//	Возврат Результат;
//	
//КонецФункции

//// Загружает заголовки сообщений из Gmail и записывает на их основе документы События
////
//// Параметры:
////  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись электронной почты,
////  СеансовыеДанные - Структура - поля соответствуют ресурсам регистра сведений СеансовыеДанныеGoogle,
////  РежимЗагрузки - Строка - одно из значений: ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения() или
////                                             ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиПредыдущиеСообщения(),
////  Пользователь - СправочникСсылка.Пользователь - устанавливается при загрузке почты регламентным заданием,
////  ОтборПоКонтакту - СправочникСсылка.Контрагент, СправочникСсылка.КонтактноеЛицо - параметр для загрузки почты по указанному контакту.
////
//Функция ЗагрузитьЗаголовкиСообщенийGmail(Знач УчетнаяЗапись, Знач СеансовыеДанные, Знач РежимЗагрузки, Знач Пользователь, Знач ОтборПоКонтакту = Неопределено) Экспорт
//	
//	РезультатЗагрузкиЗаголовков = ЭлектроннаяПочтаУНФ.НовыйРезультатЗагрузкиЗаголовков();
//	
//	ЗаголовокПрогресса = ЭлектроннаяПочтаУНФ.ЗаголовокПрогресса(УчетнаяЗапись, ОтборПоКонтакту);
//	
//	ДлительныеОперации.СообщитьПрогресс(0, ЗаголовокПрогресса);
//	
//	ИдентификаторыСообщений = ИдентификаторыСообщенийДлаЗагрузкиЗаголовков(УчетнаяЗапись, СеансовыеДанные, РежимЗагрузки, ОтборПоКонтакту);
//	СобытияПоИдентификаторам = СобытияПоИдентификаторамGMail(УчетнаяЗапись, ИдентификаторыСообщений);
//	
//	ПараметрыСинхронизации = ПараметрыСинхронизации(УчетнаяЗапись);
//	ДанныеСообщений = ДанныеСообщений(ИдентификаторыСообщений, СеансовыеДанные, ПараметрыСинхронизации.ВариантЗагрузки);
//	
//	АдресаУчастников = АдресаУчастников(ДанныеСообщений);
//	
//	// Если адресов не слишком много, то сопоставляем их все сразу: так быстрее.
//	// Если адресов много, то для предотвращения нехватки памяти, будем сопоставлять индивидуально для каждого сообщения.
//	Если АдресаУчастников.Количество() <= ЭлектроннаяПочтаУНФКлиентСервер.МаксимальноеКоличествоПакетноСопоставляемыхАдресов() Тогда
//		СопоставленныеКонтактыПоАдресамЭП = ЭлектроннаяПочтаУНФ.СопоставленныеКонтактыПоАдресамЭП(АдресаУчастников);
//	КонецЕсли;
//	
//	ИдентификаторИсторииДляЗаписи = ИдентификаторыСообщений["historyId"];
//	
//	Для Каждого ТекДанные Из ДанныеСообщений Цикл
//		
//		ДлительныеОперации.СообщитьПрогресс(Окр(РезультатЗагрузкиЗаголовков.Загружено / ДанныеСообщений.Количество() * 100),
//		СтрШаблон(НСтр("ru = '%1: загружено %2 из %3'"),
//		ЗаголовокПрогресса,
//		РезультатЗагрузкиЗаголовков.Загружено,
//		ДанныеСообщений.Количество()));
//		
//		Если СобытияПоИдентификаторам[ТекДанные.Идентификатор] <> Неопределено Тогда
//			РегистрыСведений.ИдентификаторыСобытий.ЗаписатьИдентификатор(УчетнаяЗапись, СобытияПоИдентификаторам[ТекДанные.Идентификатор], ТекДанные.Идентификатор);
//			Продолжить;
//		КонецЕсли;
//		
//		Если ЭтоСпам(ТекДанные.Метки) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		СсылкаНаСобытие = ЗаписатьСобытиеПоДаннымGMail(ТекДанные, УчетнаяЗапись, СопоставленныеКонтактыПоАдресамЭП, Пользователь, ПараметрыСинхронизации.ВариантЗагрузки);
//		
//		ОбработатьОжиданиеПросмотра(ТекДанные, СсылкаНаСобытие, ПараметрыСинхронизации.ВариантСинхронизации);
//		
//		ЭлектроннаяПочтаУНФ.ОбработатьРезультатЗагрузкиЗаголовков(РезультатЗагрузкиЗаголовков, СсылкаНаСобытие, ТекДанные.Дата, РежимЗагрузки);
//		
//		Если РежимЗагрузки = ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения() Тогда
//			ИдентификаторИсторииДляЗаписи = НаиболееПозднийИдентификаторИстории(ТекДанные.ИдентификаторИстории, ИдентификаторИсторииДляЗаписи);
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Если ЗначениеЗаполнено(ИдентификаторИсторииДляЗаписи) Тогда
//		РегистрыСведений.ИнкрементнаяСинхронизацияПочты.ЗаписатьИдентификаторИстории(ИдентификаторИсторииДляЗаписи, УчетнаяЗапись);
//	КонецЕсли;
//	
//	СинхронизироватьУдаление(ПараметрыСинхронизации, УчетнаяЗапись, СеансовыеДанные);
//	СинхронизироватьПросмотр(ПараметрыСинхронизации, УчетнаяЗапись, СеансовыеДанные);
//	
//	ЭлектроннаяПочтаУНФ.ОчиститьУдалениеСобытий(УчетнаяЗапись);
//	ЭлектроннаяПочтаУНФ.ОчиститьПросмотрСобытий(УчетнаяЗапись);
//	
//	Возврат РезультатЗагрузкиЗаголовков;
//	
//КонецФункции

//Процедура ЗагрузитьСодержаниеСообщенияGmail(Знач Идентификатор, Знач СеансовыеДанные, Знач АдресХранилища) Экспорт
//	
//	СодержаниеСообщения = СодержаниеСообщения(Идентификатор, СеансовыеДанные);
//	
//	ТекИнтернетПочтовоеСообщение = ИнтернетПочтовоеСообщениеИзСырыхДанных(СодержаниеСообщения["raw"]);
//	
//	ДанныеСобытия = Документы.Событие.НовыеДанныеСобытия();
//	
//	Документы.Событие.ЗаполнитьТекстыИзПочтовогоСообщения(ДанныеСобытия, ТекИнтернетПочтовоеСообщение);
//	Документы.Событие.ЗаполнитьВложенияИзПочтовогоСообщения(ДанныеСобытия, ТекИнтернетПочтовоеСообщение);
//	
//	ПоместитьВоВременноеХранилище(ДанныеСобытия, АдресХранилища);
//	
//КонецПроцедуры

//Функция ИнтернетПочтовоеСообщениеИзСырыхДанных(Знач СырыеДанные)
//	
//	СодержаниеСообщенияДвоичныеДанные = Base64URLЗначение(СырыеДанные);
//	
//	Результат = Новый ИнтернетПочтовоеСообщение;
//	Результат.УстановитьИсходныеДанные(СодержаниеСообщенияДвоичныеДанные);
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ОтправитьПочтовоеСообщение(Знач ПараметрыПисьма, Знач СеансовыеДанные) Экспорт
//	
//	ИнтернетПочтовоеСообщение = ЭлектроннаяПочтаУНФ.НовоеИнтернетПочтовоеСообщение(ПараметрыПисьма);
//	
//	СлепыеКопии = Новый Массив;
//	Для Каждого ТекИнтернетПочтовыйАдрес Из ИнтернетПочтовоеСообщение.СлепыеКопии Цикл
//		СлепыеКопии.Добавить(ТекИнтернетПочтовыйАдрес.Адрес);
//	КонецЦикла;
//	
//	Если ЗначениеЗаполнено(СлепыеКопии) Тогда
//		ИнтернетПочтовоеСообщение.УстановитьПолеЗаголовка(
//		"Bcc",
//		СтрСоединить(СлепыеКопии, ","),
//		СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования);
//	КонецЕсли;
//	
//	ТелоСообщения = Новый Соответствие;
//	ТелоСообщения["raw"] = Base64URLСтрока(ИнтернетПочтовоеСообщение.ПолучитьИсходныеДанные());
//	
//	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
//	СтрШаблон("https://www.googleapis.com/gmail/v1/users/me/messages/send%1",
//	КвотаПользователя("?quotaUser")));
//	
//	Заголовки = Новый Соответствие;
//	Заголовки["Content-Type"] = "application/json";
//	
//	ЗаписьJSON = Новый ЗаписьJSON;
//	ЗаписьJSON.УстановитьСтроку();
//	ЗаписатьJSON(ЗаписьJSON, ТелоСообщения);
//	ТелоЗапроса = ЗаписьJSON.Закрыть();
//	
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(ВызовМетода(АдресAPI, СеансовыеДанные, "POST", Заголовки, ТелоЗапроса));
//	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
//	
//	Если ТипЗнч(РезультатЧтенияJSON["error"]) = Тип("Соответствие") Тогда
//		ВызватьИсключение СтрШаблон(
//		НСтр("ru = 'Во время отправки сообщения произошла ошибка:
//		|%1'"),
//		РезультатЧтенияJSON["error"]["message"]);
//	КонецЕсли;
//	
//	Возврат РезультатЧтенияJSON["id"];
//	
//КонецФункции

//Функция ЗаписиDNSSRV(ТипЗаписиSRV, ИмяДомена) Экспорт
//	
//	ЗапросSMTP = ОбщегоНазначенияКлиентСервер.СтруктураURI(
//	СтрШаблон("https://dns.google.com/resolve?name=%1._tcp.%2&type=SRV",
//	ТипЗаписиSRV,
//	ИмяДомена));
//	
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(ВызовМетода(ЗапросSMTP, Новый Соответствие));
//	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
//	
//	Если РезультатЧтенияJSON["Status"] <> 0 Тогда
//		Возврат Новый Массив;
//	КонецЕсли;
//	
//	Если ТипЗнч(РезультатЧтенияJSON["Answer"]) <> Тип("Массив") Тогда
//		Возврат Новый Массив;
//	КонецЕсли;
//	
//	Возврат РезультатЧтенияJSON["Answer"];
//	
//КонецФункции

//Функция ПараметрыСинхронизации(Знач УчетнаяЗапись) Экспорт
//	
//	Результат = Новый Структура;
//	Результат.Вставить("ВариантЗагрузки", Перечисления.ВариантыЗагрузкиПисем.ТолькоЗаголовки);
//	Результат.Вставить("ВариантСинхронизации", Перечисления.ВариантыСинхронизацииПисем.НеСинхронизировать);
//	Результат.Вставить("ВариантУдаления", Перечисления.ВариантыУдаленияПисем.Архивировать);
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	НастройкиЗагрузкиПисем.ВариантЗагрузки КАК ВариантЗагрузки,
//	|	НастройкиЗагрузкиПисем.ВариантСинхронизации КАК ВариантСинхронизации,
//	|	НастройкиЗагрузкиПисем.ВариантУдаления КАК ВариантУдаления
//	|ИЗ
//	|	РегистрСведений.НастройкиЗагрузкиПисем КАК НастройкиЗагрузкиПисем
//	|ГДЕ
//	|	НастройкиЗагрузкиПисем.УчетнаяЗапись = &УчетнаяЗапись
//	|	И НастройкиЗагрузкиПисем.ПочтоваяПапка = &ПочтоваяПапка");
//	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
//	Запрос.УстановитьПараметр("ПочтоваяПапка", ИдентификаторПочтовойПапки(УчетнаяЗапись));
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат Результат;
//	КонецЕсли;
//	
//	Выборка = РезультатЗапроса.Выбрать();
//	Выборка.Следующий();
//	
//	Если ЗначениеЗаполнено(Выборка.ВариантЗагрузки) Тогда
//		Результат.ВариантЗагрузки = Выборка.ВариантЗагрузки;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(Выборка.ВариантСинхронизации) Тогда
//		Результат.ВариантСинхронизации = Выборка.ВариантСинхронизации;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(Выборка.ВариантУдаления) Тогда
//		Результат.ВариантУдаления = Выборка.ВариантУдаления;
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ИдентификаторПочтовойПапки(Знач УчетнаяЗапись) Экспорт
//	
//	Возврат Строка(УчетнаяЗапись.УникальныйИдентификатор());
//	
//КонецФункции

//#КонецОбласти

//#Область СлужебныйПрограммныйИнтерфейс

//// Обработчик регламентного задания СинхронизацияGoogleCalendar
////
//Процедура ЗаданиеСинхронизироватьКалендарь() Экспорт
//	
//	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	ЗапросПользователиСеансовыхДанных = Новый Запрос(
//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	СеансовыеДанныеGoogle.Пользователь
//	|ИЗ
//	|	РегистрСведений.СеансовыеДанныеGoogle КАК СеансовыеДанныеGoogle
//	|ГДЕ
//	|	НЕ СеансовыеДанныеGoogle.disabled");
//	
//	РезультатЗапроса = ЗапросПользователиСеансовыхДанных.Выполнить();
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Выборка = РезультатЗапроса.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		
//		СеансовыеДанные = РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные(
//		Выборка.Пользователь,
//		Перечисления.ОбластиДоступаGoogle.Календарь);
//		
//		Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если Не РегистрыСведений.СеансовыеДанныеGoogle.ТокенДоступаДействителен(СеансовыеДанные.access_token) Тогда
//			РегистрыСведений.СеансовыеДанныеGoogle.ОбновитьСеансовыеДанные(
//			СеансовыеДанные,
//			Выборка.Пользователь,
//			Перечисления.ОбластиДоступаGoogle.Календарь);
//			СеансовыеДанные = РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные(
//			Выборка.Пользователь,
//			Перечисления.ОбластиДоступаGoogle.Календарь);
//		КонецЕсли;
//		
//		СинхронизироватьGoogleCalendar(СеансовыеДанные,, Выборка.Пользователь);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//// Обработчик регламентного задания ЗагрузкаКонтактовИзGoogle
////
//Процедура ЗаданиеЗагрузитьКонтакты() Экспорт
//	
//	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	ЗапросПользователиСеансовыхДанных = Новый Запрос(
//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	СеансовыеДанныеGoogle.Пользователь
//	|ИЗ
//	|	РегистрСведений.СеансовыеДанныеGoogle КАК СеансовыеДанныеGoogle
//	|ГДЕ
//	|	НЕ СеансовыеДанныеGoogle.disabled");
//	
//	РезультатЗапроса = ЗапросПользователиСеансовыхДанных.Выполнить();
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Выборка = РезультатЗапроса.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		
//		СеансовыеДанные = РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные(
//		Выборка.Пользователь,
//		Перечисления.ОбластиДоступаGoogle.Контакты);
//		
//		Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если Не РегистрыСведений.СеансовыеДанныеGoogle.ТокенДоступаДействителен(СеансовыеДанные.access_token) Тогда
//			РегистрыСведений.СеансовыеДанныеGoogle.ОбновитьСеансовыеДанные(
//			СеансовыеДанные,
//			Выборка.Пользователь,
//			Перечисления.ОбластиДоступаGoogle.Контакты);
//			СеансовыеДанные = РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные(
//			Выборка.Пользователь,
//			Перечисления.ОбластиДоступаGoogle.Контакты);
//		КонецЕсли;
//		
//		ЗагрузитьКонтактыИзGoogleРекурсивно(
//		"https://www.google.com/m8/feeds/contacts/default/full?max-results=256&alt=json",
//		СеансовыеДанные,
//		Выборка.Пользователь);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//// Обработка смены календаря в Событии при условии его интеграции с Google
////
//// Параметры:
////  ЗаписьКалендаря		 - СправочникОбъект.ЗаписиКалендаряСотрудника
////  КалендарьСотрудника	 - СправочникСсылка.КалендариСотрудников
////
//Процедура ОбработатьСменуКалендаря(ЗаписьКалендаря, КалендарьСотрудника) Экспорт
//	
//	Если Не ЗначениеЗаполнено(ЗаписьКалендаря.Идентификатор) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ЗаписьКалендаря.Календарь = КалендарьСотрудника Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ЗаписьКалендаря.Источник = Неопределено;
//	ЗаписьКалендаря.ПометкаУдаления = Истина;
//	ЗаписьКалендаря.Записать();
//	ЗаписьКалендаря = Справочники.ЗаписиКалендаряСотрудника.СоздатьЭлемент();
//	ЗаписьКалендаря.УстановитьНовыйКод();
//	
//КонецПроцедуры

//Функция СоздатьУчетнуюЗаписьGoogle(СеансовыеДанные) Экспорт
//	
//	АдресЭлектроннойПочты = ДанныеПочтовогоПрофиля(СеансовыеДанные)["emailAddress"];
//	Если Не ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
//		ВызватьИсключение НСтр("ru = 'Не удалось определить адрес электронной почты Google.'");
//	КонецЕсли;
//	
//	ИмяОтправителя = ДанныеАвторизованногоПользователя(СеансовыеДанные)["name"];
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
//	|ИЗ
//	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
//	|ГДЕ
//	|	НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
//	|	И УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты = &АдресЭлектроннойПочты");
//	Запрос.УстановитьПараметр("АдресЭлектроннойПочты", АдресЭлектроннойПочты);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если Не РезультатЗапроса.Пустой() Тогда
//		Выборка = РезультатЗапроса.Выбрать();
//		Выборка.Следующий();
//		Возврат Выборка.Ссылка;
//	КонецЕсли;
//	
//	НоваяУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СоздатьЭлемент();
//	НоваяУчетнаяЗапись.Наименование = АдресЭлектроннойПочты;
//	НоваяУчетнаяЗапись.АдресЭлектроннойПочты = АдресЭлектроннойПочты;
//	НоваяУчетнаяЗапись.ИмяПользователя = ИмяОтправителя;
//	// Настройки серверов входящей и исходящей почты используются только для того,
//	// чтобы БСП считала, что с помощью этой учетной записи можно отправлять и получать почту.
//	// Фактически, отправка выполняется с помощью Gmail API.
//	НоваяУчетнаяЗапись.ИспользоватьДляОтправки = Истина;
//	НоваяУчетнаяЗапись.ИспользоватьДляПолучения = Истина;
//	НоваяУчетнаяЗапись.СерверВходящейПочты = "imap.gmail.com";
//	НоваяУчетнаяЗапись.СерверИсходящейПочты = "smtp.gmail.com";
//	НоваяУчетнаяЗапись.Записать();
//	Возврат НоваяУчетнаяЗапись.Ссылка;
//	
//КонецФункции

//Функция ЭтоУчетнаяЗаписьGoogle(УчетнаяЗаписьЭлектроннойПочты) Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Если Не ЗначениеЗаполнено(УчетнаяЗаписьЭлектроннойПочты) Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	СеансовыеДанныеGoogle.УчетнаяЗаписьЭлектроннойПочты
//	|ИЗ
//	|	РегистрСведений.СеансовыеДанныеGoogle КАК СеансовыеДанныеGoogle
//	|ГДЕ
//	|	СеансовыеДанныеGoogle.УчетнаяЗаписьЭлектроннойПочты = &УчетнаяЗаписьЭлектроннойПочты");
//	Запрос.УстановитьПараметр("УчетнаяЗаписьЭлектроннойПочты", УчетнаяЗаписьЭлектроннойПочты);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Возврат Не РезультатЗапроса.Пустой();
//	
//КонецФункции

//Процедура ОбработкаПолученияФормыУчетнойЗаписиЭлектроннойПочты(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
//	
//	Если ВидФормы <> "ФормаОбъекта" Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если Не Параметры.Свойство("Ключ") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если Не ЭтоУчетнаяЗаписьGoogle(Параметры.Ключ) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ВыбраннаяФорма = Метаданные.РегистрыСведений.СеансовыеДанныеGoogle.Формы.УчетнаяЗаписьGmail;
//	СтандартнаяОбработка = Ложь;
//	
//КонецПроцедуры

//#КонецОбласти

//#Область ОбработчикиВыгрузкиЗагрузкиДанных

//// Вызывается при регистрации произвольных обработчиков выгрузки данных.
////
//// Параметры: ТаблицаОбработчиков - ТаблицаЗначений, в данной процедуре требуется
////  дополнить эту таблицу значений информацией о регистрируемых произвольных
////  обработчиках выгрузки данных. Колонки:
////    ОбъектМетаданных - ОбъектМетаданных, при выгрузке данных которого должен
////      вызываться регистрируемый обработчик,
////    Обработчик - ОбщийМодуль, общий модуль, в котором реализован произвольный
////      обработчик выгрузки данных. Набор экспортных процедур, которые должны
////      быть реализованы в обработчике, зависит от установки значений следующих
////      колонок таблицы значений,
////    Версия - Строка - номер версии интерфейса обработчиков выгрузки / загрузки данных,
////      поддерживаемого обработчиком,
////    ПередВыгрузкойТипа - Булево, флаг необходимости вызова обработчика перед
////      выгрузкой всех объектов информационной базы, относящихся к данному объекту
////      метаданных. Если присвоено значение Истина - в общем модуле обработчика должна
////      быть реализована экспортируемая процедура ПередВыгрузкойТипа(),
////      поддерживающая следующие параметры:
////        Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
////          контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
////          к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера,
////        Сериализатор - СериализаторXDTO, инициализированный с поддержкой выполнения
////          аннотации ссылок. В случае, если в произвольном обработчике выгрузки требуется
////          выполнять выгрузку дополнительных данных - следует использовать
////          СериализаторXDTO, переданный в процедуру ПередВыгрузкойТипа() в качестве
////          значения параметра Сериализатор, а не полученных с помощью свойства глобального
////          контекста СериализаторXDTO,
////        ОбъектМетаданных - ОбъектМетаданных, перед выгрузкой данных которого
////          был вызван обработчик,
////        Отказ - Булево. Если в процедуре ПередВыгрузкойТипа() установить значение
////          данного параметра равным Истина - выгрузка объектов, соответствующих
////          текущему объекту метаданных, выполняться не будет.
////    ПередВыгрузкойОбъекта - Булево, флаг необходимости вызова обработчика перед
////      выгрузкой конкретного объекта информационной базы. Если присвоено значение
////      Истина - в общем модуле обработчика должна быть реализована экспортируемая процедура
////      ПередВыгрузкойОбъекта(), поддерживающая следующие параметры:
////        Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
////          контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
////          к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера,
////        МенеджерВыгрузкиОбъекта - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерВыгрузкиДанныхИнформационнойБазы -
////          менеджер выгрузки текущего объекта. Подробнее см. комментарий к программному интерфейсу обработки
////          ВыгрузкаЗагрузкаДанныхМенеджерВыгрузкиДанныхИнформационнойБазы. Параметр передается только при вызове
////          процедур обработчиков, для которых при регистрации указана версия не ниже 1.0.0.1,
////        Сериализатор - СериализаторXDTO, инициализированный с поддержкой выполнения
////          аннотации ссылок. В случае, если в произвольном обработчике выгрузки требуется
////          выполнять выгрузку дополнительных данных - следует использовать
////          СериализаторXDTO, переданный в процедуру ПередВыгрузкойОбъекта() в качестве
////          значения параметра Сериализатор, а не полученных с помощью свойства глобального
////          контекста СериализаторXDTO,
////        Объект - КонстантаМенеджерЗначения.*, СправочникОбъект.*, ДокументОбъект.*,
////          БизнесПроцессОбъект.*, ЗадачаОбъект.*, ПланСчетовОбъект.*, ПланОбменаОбъект.*,
////          ПланВидовХарактеристикОбъект.*, ПланВидовРасчетаОбъект.*, РегистрСведенийНаборЗаписей.*,
////          РегистрНакопленияНаборЗаписей.*, РегистрБухгалтерииНаборЗаписей.*,
////          РегистрРасчетаНаборЗаписей.*, ПоследовательностьНаборЗаписей.*, ПерерасчетНаборЗаписей.* -
////          объект данных информационной базы, перед выгрузкой которого был вызван обработчик.
////          Значение, переданное в процедуру ПередВыгрузкойОбъекта() в качестве значения параметра
////          Объект может быть модифицировано внутри обработчика ПередВыгрузкойОбъекта(), при
////          этом внесенные изменения будут отражены в сериализации объекта в файлах выгрузки, но
////          не будут зафиксированы в информационной базе
////        Артефакты - Массив(ОбъектXDTO) - набор дополнительной информации, логически неразрывно
////          связанной с объектом, но не являющейся его частью (артефакты объекта). Артефакты должны
////          сформированы внутри обработчика ПередВыгрузкойОбъекта() и добавлены в массив, переданный
////          в качестве значения параметра Артефакты. Каждый артефакт должен являться XDTO-объектом,
////          для типа которого в качестве базового типа используется абстрактный XDTO-тип
////          {http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1}Artefact. Допускается использовать XDTO-пакеты,
////          помимо изначально поставляемых в составе подсистемы ВыгрузкаЗагрузкаДанных. В дальнейшем
////          артефакты, сформированные в процедуре ПередВыгрузкойОбъекта(), будут доступны в процедурах
////          обработчиков загрузки данных (см. комментарий к процедуре ПриРегистрацииОбработчиковЗагрузкиДанных().
////        Отказ - Булево. Если в процедуре ПередВыгрузкойОбъекта() установить значение
////           данного параметра равным Истина - выгрузка объекта, для которого был вызван обработчик,
////           выполняться не будет.
////    ПослеВыгрузкиТипа() - Булево, флаг необходимости вызова обработчика после выгрузки всех
////      объектов информационной базы, относящихся к данному объекту метаданных. Если присвоено значение
////      Истина - в общем модуле обработчика должна быть реализована экспортируемая процедура
////      ПослеВыгрузкиТипа(), поддерживающая следующие параметры:
////        Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
////          контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
////          к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера,
////        Сериализатор - СериализаторXDTO, инициализированный с поддержкой выполнения
////          аннотации ссылок. В случае, если в произвольном обработчике выгрузки требуется
////          выполнять выгрузку дополнительных данных - следует использовать
////          СериализаторXDTO, переданный в процедуру ПослеВыгрузкиТипа() в качестве
////          значения параметра Сериализатор, а не полученных с помощью свойства глобального
////          контекста СериализаторXDTO,
////        ОбъектМетаданных - ОбъектМетаданных, после выгрузки данных которого
////          был вызван обработчик.
////
//Процедура ПриРегистрацииОбработчиковВыгрузкиДанных(ТаблицаОбработчиков) Экспорт
//	
//	ОбрабатываемыеОбъектыМетаданных = Новый Массив;
//	ОбрабатываемыеОбъектыМетаданных.Добавить(Метаданные.Справочники.КлассификаторКонтактов);
//	ОбрабатываемыеОбъектыМетаданных.Добавить(Метаданные.Документы.Событие);
//	
//	Для Каждого ТекОбъектМетаданных Из ОбрабатываемыеОбъектыМетаданных Цикл
//		НовыйОбработчик = ТаблицаОбработчиков.Добавить();
//		НовыйОбработчик.ОбъектМетаданных = ТекОбъектМетаданных;
//		НовыйОбработчик.Обработчик = ОбменСGoogle;
//		НовыйОбработчик.ПередВыгрузкойОбъекта = Истина;
//		НовыйОбработчик.Версия = ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ВерсияОбработчиков1_0_0_1();
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ПередВыгрузкойОбъекта(Контейнер, МенеджерВыгрузкиОбъекта, Сериализатор, Объект, Артефакты, Отказ) Экспорт
//	
//	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
//	
//	ЗаменитьНедопустимыеСимволыВСтроковыхРеквизитах(Объект, ОбъектМетаданных.СтандартныеРеквизиты);
//	
//	ЗаменитьНедопустимыеСимволыВСтроковыхРеквизитах(Объект, ОбъектМетаданных.Реквизиты);
//	
//	Для Каждого ТекТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
//		Для Каждого ТекСтрока Из Объект[ТекТабличнаяЧасть.Имя] Цикл
//			ЗаменитьНедопустимыеСимволыВСтроковыхРеквизитах(ТекСтрока, ТекТабличнаяЧасть.Реквизиты);
//		КонецЦикла;
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ЗаменитьНедопустимыеСимволыВСтроковыхРеквизитах(Данные, КоллекцияРеквизитовОбъектаМетаданных)
//	
//	Для Каждого ТекРеквизит Из КоллекцияРеквизитовОбъектаМетаданных Цикл
//		Если ТипЗнч(Данные[ТекРеквизит.Имя]) = Тип("Строка") Тогда
//			Данные[ТекРеквизит.Имя] = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Данные[ТекРеквизит.Имя]);
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

//#КонецОбласти

//#Область СлужебныеПроцедурыИФункции

//Процедура ЗагрузитьДанныеGoogleCalendar(СеансовыеДанные, Пользователь)
//	
//	ОписанияВсехКалендарей = ОписанияВсехКалендарей(СеансовыеДанные);
//	
//	Если ЗначениеЗаполнено(ОписанияВсехКалендарей["error"]) Тогда
//		ОбработатьОшибкиАвторизации(СеансовыеДанные, ОписанияВсехКалендарей["error"]);
//		Возврат;
//	КонецЕсли;
//	
//	Для Каждого ТекОписаниеКалендаря Из ОписанияВсехКалендарей["items"] Цикл
//		
//		Если ТекОписаниеКалендаря["accessRole"] <> "owner" Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		СтраничныйТокен = "";
//		
//		// Цикл выполняется пока страничный токен не станет равным Неопределено
//		Пока ЗначениеЗаполнено(СтраничныйТокен) Или СтраничныйТокен= "" Цикл
//			
//			КалендарьСотрудника = СсылкаНаКалендарьСотрудника(ТекОписаниеКалендаря, Пользователь);
//			
//			Если Не ЗначениеЗаполнено(КалендарьСотрудника) Тогда
//				Прервать;
//			КонецЕсли;
//			
//			СинхроТокен = РегистрыСведений.ИнкрементнаяСинхронизация.СинхроТокен(КалендарьСотрудника);
//			
//			СобытияКалендаря = СобытияКалендаря(
//			ТекОписаниеКалендаря["id"],
//			СинхроТокен,
//			СтраничныйТокен,
//			СеансовыеДанные);
//			
//			Если СобытияКалендаря["error"] <> Неопределено 
//				И СобытияКалендаря["error"]["code"] = 410 Тогда
//				// Выполняется полная синхронизация, без указания синхротокена
//				СобытияКалендаря = СобытияКалендаря(
//				ТекОписаниеКалендаря["id"],,
//				СтраничныйТокен,
//				СеансовыеДанные);
//			КонецЕсли;
//			
//			Если СобытияКалендаря["error"] <> Неопределено Тогда
//				ВызватьИсключение 
//				СтрШаблон(
//				НСтр("ru = 'Произошла ошибка синхронизации с Google Calendar: %1'"),
//				СобытияКалендаря["error"]["message"]);
//			КонецЕсли;
//			
//			Для Каждого ТекОписаниеСобытия Из СобытияКалендаря["items"] Цикл
//				ОбновитьЗаписьКалендаря(КалендарьСотрудника, ТекОписаниеСобытия, Пользователь);
//			КонецЦикла;
//			
//			СтраничныйТокен = СобытияКалендаря["nextPageToken"];
//			
//			Если ЗначениеЗаполнено(СобытияКалендаря["nextSyncToken"]) Тогда
//				РегистрыСведений.ИнкрементнаяСинхронизация.ЗаписатьСинхроТокен(КалендарьСотрудника, СобытияКалендаря["nextSyncToken"]);
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//	КонецЦикла;

//КонецПроцедуры

//Процедура СоздатьОтсутствующиеКалендариВGoogle(СеансовыеДанные, Пользователь)
//	
//	ЗапросКалендариСотрудника = Новый Запрос(
//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	КалендариСотрудников.Ссылка КАК КалендарьСотрудника,
//	|	КалендариСотрудников.id КАК ИдентификаторКалендаря,
//	|	КалендариСотрудников.Наименование КАК НаименованиеКалендаря
//	|ИЗ
//	|	Справочник.КалендариСотрудников КАК КалендариСотрудников
//	|ГДЕ
//	|	КалендариСотрудников.СинхронизироватьСGoogle
//	|	И НЕ КалендариСотрудников.ПометкаУдаления
//	|	И КалендариСотрудников.Пользователь = &Пользователь");
//	ЗапросКалендариСотрудника.УстановитьПараметр("Пользователь", Пользователь);
//	
//	РезультатЗапроса = ЗапросКалендариСотрудника.Выполнить();
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Выборка = РезультатЗапроса.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		
//		Если ЗначениеЗаполнено(Выборка.ИдентификаторКалендаря) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		СоздатьКалендарьВGoogle(Выборка.КалендарьСотрудника, Выборка.НаименованиеКалендаря, СеансовыеДанные);
//		УстановитьЦветКалендаряВGoogle(Выборка.КалендарьСотрудника, Пользователь, СеансовыеДанные);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура СоздатьКалендарьВGoogle(КалендарьСотрудника, НаименованиеКалендаря, СеансовыеДанные)
//	
//	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
//	"https://www.googleapis.com/calendar/v3/calendars");
//	
//	ДанныеКалендаря = Новый Соответствие;
//	ДанныеКалендаря["summary"] = НаименованиеКалендаря;
//	
//	Заголовки = Новый Соответствие;
//	Заголовки["Content-Type"] = "application/json";
//	
//	ЗаписьJSON = Новый ЗаписьJSON;
//	ЗаписьJSON.УстановитьСтроку();
//	ЗаписатьJSON(ЗаписьJSON, ДанныеКалендаря);
//	ТелоЗапроса = ЗаписьJSON.Закрыть();
//	
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(ВызовМетода(АдресAPI, СеансовыеДанные, "POST", Заголовки, ТелоЗапроса));
//	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
//	
//	КалендарьОбъект = КалендарьСотрудника.ПолучитьОбъект();
//	КалендарьОбъект.id = РезультатЧтенияJSON["id"];
//	
//	КалендарьОбъект.ОбменДанными.Загрузка = Истина;
//	КалендарьОбъект.Записать();
//	
//КонецПроцедуры

//Процедура УстановитьЦветКалендаряВGoogle(КалендарьСотрудника, Пользователь, СеансовыеДанные)
//	
//	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
//	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"));
//	
//	НастройкиДоступныхКалендарей = НастройкиДоступныхКалендарей(ПользовательИБ);
//	НайденнаяНастройка = НастройкиДоступныхКалендарей.Найти(КалендарьСотрудника);
//	Если НайденнаяНастройка = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
//	СтрШаблон(
//	"https://www.googleapis.com/calendar/v3/users/me/calendarList/%1",
//	КалендарьСотрудника.id));
//	
//	ПараметрыКалендаря = Новый Соответствие;
//	ПараметрыКалендаря["colorId"] = НайденнаяНастройка.ВариантЦвета;
//	
//	Заголовки = Новый Соответствие;
//	Заголовки["Content-Type"] = "application/json";
//	
//	ЗаписьJSON = Новый ЗаписьJSON;
//	ЗаписьJSON.УстановитьСтроку();
//	ЗаписатьJSON(ЗаписьJSON, ПараметрыКалендаря);
//	ТелоЗапроса = ЗаписьJSON.Закрыть();
//	
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(ВызовМетода(АдресAPI, СеансовыеДанные, "PATCH", Заголовки, ТелоЗапроса));
//	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
//	
//КонецПроцедуры

//Процедура ВыгрузитьДанныеGoogleCalendar(СеансовыеДанные, Пользователь)
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ
//	|	ЗаписиКалендаряСотрудникаИзменения.Узел КАК Узел,
//	|	ЗаписиКалендаряСотрудникаИзменения.Ссылка
//	|ИЗ
//	|	Справочник.ЗаписиКалендаряСотрудника.Изменения КАК ЗаписиКалендаряСотрудникаИзменения
//	|ГДЕ
//	|	ЗаписиКалендаряСотрудникаИзменения.Узел.КалендарьСотрудника.Пользователь = &Пользователь
//	|ИТОГИ ПО
//	|	Узел");
//	Запрос.УстановитьПараметр("Пользователь", Пользователь);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДанныеДляВыгрузки = Новый Массив;
//	
//	// Выгружаем данные порциями по 50 записей, 
//	// это максимально допустимый размер для пакетного запроса
//	ВыборкаКалендари = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	Пока ВыборкаКалендари.Следующий() Цикл
//		
//		ДанныеДляВыгрузки.Очистить();
//		
//		ВыборкаСсылки = ВыборкаКалендари.Выбрать();
//		Пока ВыборкаСсылки.Следующий() Цикл
//			ДанныеДляВыгрузки.Добавить(ВыборкаСсылки.Ссылка);
//			Если ДанныеДляВыгрузки.Количество() < 50 Тогда
//				Продолжить;
//			КонецЕсли;
//			ВыгрузитьДанныеВУзел(ВыборкаКалендари.Узел, ДанныеДляВыгрузки, СеансовыеДанные);
//			ДанныеДляВыгрузки.Очистить();
//		КонецЦикла;
//		
//		Если ЗначениеЗаполнено(ДанныеДляВыгрузки) Тогда
//			ВыгрузитьДанныеВУзел(ВыборкаКалендари.Узел, ДанныеДляВыгрузки, СеансовыеДанные);
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ВыгрузитьДанныеВУзел(Узел, ДанныеДляВыгрузки, СеансовыеДанные)
//	
//	ГраницаСекций = НоваяГраницаСекций();
//	
//	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI("https://www.googleapis.com/batch/calendar/v3");
//	
//	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(АдресAPI.Схема);
//	
//	HTTPСоединение = Новый HTTPСоединение(
//	АдресAPI.Хост,
//	АдресAPI.Порт,,,
//	ИнтернетПрокси,
//	20,
//	ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение());
//	
//	ПакетныйЗапросHTTP = Новый HTTPЗапрос;
//	ПакетныйЗапросHTTP.АдресРесурса = АдресAPI.ПутьНаСервере;
//	ПакетныйЗапросHTTP.Заголовки["Authorization"] = СтрШаблон("%1 %2", СеансовыеДанные["token_type"], СеансовыеДанные["access_token"]);
//	ПакетныйЗапросHTTP.Заголовки["Content-Type"] = СтрШаблон("multipart/mixed; boundary=%1", ГраницаСекций);
//	
//	// ЗаписьСообщения используется только для управления нумерацией сообщений
//	// Реальная запись будет производиться в отправляемый по HTTPS пакет
//	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
//	ЗаписьXML = Новый ЗаписьXML;
//	ЗаписьXML.УстановитьСтроку();
//	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Узел);
//	
//	ВыборкаДанных = ПланыОбмена.ВыбратьИзменения(Узел, ЗаписьСообщения.НомерСообщения, ДанныеДляВыгрузки);
//	
//	ТелоПакетногоЗапросаИзменениеДанныхКалендаря = ТелоПакетногоЗапросаИзменениеДанныхКалендаря(ВыборкаДанных, ГраницаСекций);
//	
//	Если Не ЗначениеЗаполнено(ТелоПакетногоЗапросаИзменениеДанныхКалендаря) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПакетныйЗапросHTTP.УстановитьТелоИзСтроки(
//	ТелоПакетногоЗапросаИзменениеДанныхКалендаря,,
//	ИспользованиеByteOrderMark.НеИспользовать);
//	ПакетныйОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(ПакетныйЗапросHTTP);
//	
//	Если ПакетныйОтветHTTP.КодСостояния = 200 Тогда
//		НомерСообщения = ЗаписьСообщения.НомерСообщения;
//		ЗаписьСообщения.ЗакончитьЗапись();
//	Иначе
//		ЗаписьСообщения.ПрерватьЗапись();
//		Возврат;
//	КонецЕсли;
//	
//	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НомерСообщения);
//	
//КонецПроцедуры

//Функция ТелоПакетногоЗапросаИзменениеДанныхКалендаря(ВыборкаДанных, ГраницаСекций)
//	
//	Результат = "";
//	
//	Пока ВыборкаДанных.Следующий() Цикл
//		
//		Данные = ВыборкаДанных.Получить();
//		
//		Если Данные = Неопределено Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ДанныеДляИзменения = Новый Соответствие;
//		
//		Если Не ЗначениеЗаполнено(Данные.Идентификатор) Тогда
//			ДанныеДляИзменения["id"] = СтрЗаменить(Данные.Ссылка.УникальныйИдентификатор(), "-", "");
//		КонецЕсли;
//		
//		ДанныеДляИзменения["description"] = Данные.Описание;
//		ДанныеДляИзменения["summary"] = Данные.Наименование;
//		
//		ДанныеДляИзменения["start"] = ОписаниеДатыСобытия(Данные.Начало);
//		ДанныеДляИзменения["end"] = ОписаниеДатыСобытия(Данные.Окончание);
//		
//		Если Данные.ПометкаУдаления Тогда
//			ДанныеДляИзменения["status"] = "cancelled"
//		Иначе
//			ДанныеДляИзменения["status"] = "tentative";
//		КонецЕсли;
//		
//		Если ИмяМетодаHTTP(Данные) = "DELETE" Тогда
//			
//			Результат = СтрШаблон(
//			"%1--%2
//			|Content-Type: application/http
//			|Content-ID: %3
//			|
//			|%4 /calendar/v3/calendars/%5/events/%6",
//			ОтступДляСекции(Результат),					// 1
//			ГраницаСекций,								// 2
//			Данные.Ссылка.УникальныйИдентификатор(),	// 3
//			ИмяМетодаHTTP(Данные),						// 4
//			Данные.Календарь.id,						// 5
//			Данные.Идентификатор);						// 6
//			
//		Иначе // POST, PATCH
//			
//			ЗаписьJSON = Новый ЗаписьJSON;
//			ЗаписьJSON.УстановитьСтроку();
//			НастройкиСериализации = Новый НастройкиСериализацииJSON;
//			НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
//			ЗаписатьJSON(ЗаписьJSON, ДанныеДляИзменения, НастройкиСериализации);
//			СтрокаJSON = СтрЗаменить(ЗаписьJSON.Закрыть(), """%null%""", "null"); // Удаление полей
//			
//			Результат = СтрШаблон(
//			"%1--%2
//			|Content-Type: application/http
//			|Content-ID: %3
//			|
//			|%4 /calendar/v3/calendars/%5/events/%6%7
//			|Content-Type: application/json
//			|%8
//			|%9",
//			ОтступДляСекции(Результат),					// 1
//			ГраницаСекций,								// 2
//			Данные.Ссылка.УникальныйИдентификатор(),	// 3
//			ИмяМетодаHTTP(Данные),						// 4
//			Данные.Календарь.id,						// 5
//			Данные.Идентификатор,						// 6
//			ПередаваемыеПоля(Данные.Идентификатор),		// 7
//			ЗаголовокETag(Данные.ETag),					// 8
//			СтрокаJSON);								// 9
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Если ЗначениеЗаполнено(Результат) Тогда
//		Результат = СтрШаблон(
//		"%1
//		|
//		|--%2--",
//		Результат,
//		ГраницаСекций);
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ОписаниеДатыСобытия(Знач ДатаВремя)
//	
//	Результат = Новый Соответствие;
//	
//	ДатаВремяПриведенноеКСерверу = МестноеВремя(УниверсальноеВремя(ДатаВремя, ПолучитьЧасовойПоясИнформационнойБазы()));
//	
//	Если НачалоДня(ДатаВремяПриведенноеКСерверу) = ДатаВремяПриведенноеКСерверу Тогда
//		Результат["date"] = Формат(ДатаВремяПриведенноеКСерверу, "ДФ=yyyy-MM-dd");
//		Результат["dateTime"] = "%null%";
//	Иначе
//		Результат["date"] = "%null%";
//		Результат["dateTime"] = ДатаВремяПриведенноеКСерверу;
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ОтступДляСекции(ТелоСообщения)
//	
//	Если ЗначениеЗаполнено(ТелоСообщения) Тогда
//		Возврат ТелоСообщения + Символы.ПС + Символы.ПС;
//	КонецЕсли;
//	
//	Возврат "";
//	
//КонецФункции

//Функция ПередаваемыеПоля(Идентификатор)
//	
//	Если ЗначениеЗаполнено(Идентификатор) Тогда
//		Возврат "?fields=etag,start,end,status,summary,description,attendees";
//	КонецЕсли;
//	
//	Возврат "";
//	
//КонецФункции

//Функция ЗаголовокETag(ETag)
//	
//	Если ЗначениеЗаполнено(ETag) Тогда
//		Возврат СтрШаблон(
//		"If-Match: %1%2",
//		ETag,
//		Символы.ПС);
//	КонецЕсли;
//	
//	Возврат "";
//	
//КонецФункции

//Функция ИмяМетодаHTTP(Данные)
//	
//	Если Данные.ПометкаУдаления Тогда
//		Возврат "DELETE";
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(Данные.Идентификатор) Тогда
//		Возврат "PATCH";
//	КонецЕсли;
//	
//	Возврат "POST";
//	
//КонецФункции

//Процедура ОбработатьОшибкиАвторизации(СеансовыеДанные, ОписаниеОшибки)
//	
//	Для Каждого ТекОписаниеОшибки Из ОписаниеОшибки["errors"] Цикл
//		Если ТекОписаниеОшибки["reason"] = "authError" Тогда
//			СеансовыеДанные=Неопределено;
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ЗаполнитьПолеДатаВремя(Приемник, ИмяПоляПриемник, Источник, ИмяПоляИсточник)
//	
//	Если Не ЗначениеЗаполнено(Источник[ИмяПоляИсточник]) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(Источник[ИмяПоляИсточник]["dateTime"]) Тогда
//		ЗначениеПоляДатаВремя = Источник[ИмяПоляИсточник]["dateTime"];
//	Иначе
//		ЗначениеПоляДатаВремя = Источник[ИмяПоляИсточник]["date"];
//	КонецЕсли;
//	
//	ЗначениеПриведенноеКЧасовомуПоясуИБ = МестноеВремя(УниверсальноеВремя(ЗначениеПоляДатаВремя), ПолучитьЧасовойПоясИнформационнойБазы());
//	
//	Приемник.Вставить(ИмяПоляПриемник, ЗначениеПриведенноеКЧасовомуПоясуИБ);
//	
//КонецПроцедуры

//Функция ОписанияВсехКалендарей(СеансовыеДанные)
//	
//	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
//	"https://www.googleapis.com/calendar/v3/users/me/calendarList");
//	
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(ВызовМетода(АдресAPI, СеансовыеДанные));
//	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
//	Возврат РезультатЧтенияJSON;
//	
//КонецФункции

//Функция СобытияКалендаря(ИдентификаторКалендаря, СинхроТокен, СтраничныйТокен, СеансовыеДанные)
//	
//	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
//	СтрШаблон(
//	"https://www.googleapis.com/calendar/v3/calendars/%1/events?singleEvents=True&maxResults=256&timeZone=%2%3%4%5",
//	ИдентификаторКалендаря,
//	ЧасовойПояс(),
//	ПараметрПериод(СинхроТокен),
//	ПараметрСинхроТокен(СинхроТокен),
//	ПараметрСтраничныйТокен(СтраничныйТокен)));
//	
//	СтрокаJSON = ВызовМетода(АдресAPI, СеансовыеДанные);
//	
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
//	
//	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON,
//	Истина,,,
//	"ВосстановитьДатуJSON",
//	ОбменСGoogle,,
//	СтрРазделить("created,date,dateTime,updated", ","));
//	
//	Возврат РезультатЧтенияJSON;
//	
//КонецФункции

//Функция ВосстановитьДатуJSON(Свойство, Значение, Параметры) Экспорт
//	
//	Попытка
//		
//		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
//		
//	Исключение
//		
//		ЗаписьЖурналаРегистрации(
//		НСтр("ru = 'Синхронизация календаря Google.'"),
//		УровеньЖурналаРегистрации.Предупреждение,,,
//		СтрШаблон(
//		НСтр("ru = 'Не удалось прочитать дату JSON для свойства ""%1"": ""%2"".'"), 
//		Свойство,
//		Значение));
//		
//	КонецПопытки;
//	
//	Возврат '0001-01-01';
//	
//КонецФункции

//Функция ПараметрПериод(СинхроТокен)
//	
//	Если ЗначениеЗаполнено(СинхроТокен) Тогда
//		Возврат "";
//	КонецЕсли;
//	
//	Начало = ЗаписатьДатуJSON(
//	НачалоДня(ТекущаяДатаСеанса()),
//	ФорматДатыJSON.ISO,
//	ВариантЗаписиДатыJSON.УниверсальнаяДата);
//	
//	Окончание = ЗаписатьДатуJSON(
//	ДобавитьМесяц(КонецДня(ТекущаяДатаСеанса()), 24),
//	ФорматДатыJSON.ISO,
//	ВариантЗаписиДатыJSON.УниверсальнаяДата);
//	
//	Возврат СтрШаблон("&timeMin=%1&timeMax=%2", Начало, Окончание);
//	
//КонецФункции

//Функция ПараметрСинхроТокен(СинхроТокен)
//	
//	Если ЗначениеЗаполнено(СинхроТокен) Тогда
//		Возврат СтрШаблон("&syncToken=%1", СинхроТокен);
//	КонецЕсли;
//	
//	Возврат "";
//	
//КонецФункции

//Функция ПараметрСтраничныйТокен(СтраничныйТокен)
//	
//	Если ЗначениеЗаполнено(СтраничныйТокен) Тогда
//		Возврат СтрШаблон("&pageToken=%1", СтраничныйТокен);
//	КонецЕсли;
//	
//	Возврат "";
//	
//КонецФункции

//Процедура ЗагрузитьКонтактыИзGoogleРекурсивно(URL, СеансовыеДанные, Пользователь)
//	
//	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
//	
//	Заголовки = Новый Соответствие;
//	Заголовки["GData-Version"] = "3.0";
//	
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(ВызовМетода(АдресAPI, СеансовыеДанные,, Заголовки));
//	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
//	
//	Если Не ЗначениеЗаполнено(РезультатЧтенияJSON["feed"]) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ТипЗнч(РезультатЧтенияJSON["feed"]["entry"])<>Тип("Массив") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Для Каждого ТекВхождение Из РезультатЧтенияJSON["feed"]["entry"] Цикл
//		ЗаписатьКонтактПоДаннымGoogle(ТекВхождение, Пользователь);
//	КонецЦикла;
//	
//	Если Не ЗначениеЗаполнено(РезультатЧтенияJSON["feed"]["link"]) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Для Каждого ТекСсылка Из РезультатЧтенияJSON["feed"]["link"] Цикл
//		Если ТекСсылка["rel"]="next" Тогда
//			ЗагрузитьКонтактыИзGoogleРекурсивно(ТекСсылка["href"], СеансовыеДанные, Пользователь);
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ЗаписатьКонтактПоДаннымGoogle(ТекВхождение, Пользователь)
//	
//	Если Не ЗначениеЗаполнено(ТекВхождение["title"]["$t"]) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	КонтактОбъект = Справочники.КлассификаторКонтактов.ОбъектПоИдентификатору(
//	ТекВхождение["id"]["$t"], 
//	Пользователь);
//	
//	Если КонтактОбъект=Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ЗаписьJSON = Новый ЗаписьJSON;
//	ЗаписьJSON.УстановитьСтроку();
//	ЗаписатьJSON(ЗаписьJSON, ТекВхождение);
//	КонтактОбъект.JSON = ЗаписьJSON.Закрыть();
//	
//	КонтактОбъект.Title = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекВхождение["title"]["$t"]);
//	
//	Если ТипЗнч(ТекВхождение["updated"])=Тип("Соответствие") Тогда
//		КонтактОбъект.Updated = ПрочитатьДатуJSON(ТекВхождение["updated"]["$t"], ФорматДатыJSON.ISO);
//	КонецЕсли;
//	
//	Если ТипЗнч(ТекВхождение["gd$organization"])=Тип("Массив") Тогда
//		Для Каждого ТекЭлементЗаписиОрганизация Из ТекВхождение["gd$organization"] Цикл
//			Если ЗначениеЗаполнено(ТекЭлементЗаписиОрганизация["gd$orgName"]) Тогда
//				КонтактОбъект.Organization = ТекЭлементЗаписиОрганизация["gd$orgName"]["$t"];
//			КонецЕсли;
//			Если ЗначениеЗаполнено(ТекЭлементЗаписиОрганизация["gd$orgTitle"]) Тогда
//				КонтактОбъект.Position = ТекЭлементЗаписиОрганизация["gd$orgTitle"]["$t"];
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//	КонтактОбъект.ДатаСинхронизации = ТекущаяДатаСеанса();
//	
//	КонтактОбъект.Записать();
//	
//КонецПроцедуры

//Функция ВызовМетода(АдресAPI, СеансовыеДанные = Неопределено, HTTPМетод = Неопределено, ДополнительныеЗаголовки = Неопределено, ТелоЗапроса = Неопределено)
//	
//	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(АдресAPI.Схема);
//	
//	HTTPСоединение = Новый HTTPСоединение(
//	АдресAPI.Хост,
//	АдресAPI.Порт,,,
//	ИнтернетПрокси,
//	20,
//	ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение());
//	
//	ЗапросHTTP = Новый HTTPЗапрос;
//	ЗапросHTTP.АдресРесурса = АдресAPI.ПутьНаСервере;
//	ЗапросHTTP.Заголовки["Content-Type"] = "application/x-www-form-urlencoded";
//	Если СеансовыеДанные <> Неопределено Тогда
//		ЗапросHTTP.Заголовки["Authorization"] = СтрШаблон(
//		"%1 %2",
//		СеансовыеДанные["token_type"],
//		СеансовыеДанные["access_token"]);
//	КонецЕсли;
//	
//	Если ТипЗнч(ДополнительныеЗаголовки)=Тип("Соответствие") Тогда
//		Для Каждого ДопЗаголовок Из ДополнительныеЗаголовки Цикл
//			ЗапросHTTP.Заголовки[ДопЗаголовок.Ключ] = ДопЗаголовок.Значение;
//		КонецЦикла;
//	КонецЕсли;
//	
//	Если ТелоЗапроса <> Неопределено Тогда
//		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса,, ИспользованиеByteOrderMark.НеИспользовать);
//	КонецЕсли;
//	
//	Если HTTPМетод = Неопределено Тогда
//		ОтветHTTP = HTTPСоединение.Получить(ЗапросHTTP);
//	Иначе
//		ОтветHTTP = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, ЗапросHTTP);
//	КонецЕсли;
//	
//	Возврат ОтветHTTP.ПолучитьТелоКакСтроку();
//	
//КонецФункции

//Функция НоваяГраницаСекций()
//	
//	Возврат СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");

//КонецФункции

//Процедура ЗаполнитьРеквизитПоддержкаGoogle(Форма, СтатическоеОписание, ГруппаДополнительныхРеквизитов)
//	
//	Форма.ПоддержкаGoogle = ОписаниеПоддержкиGoogle(Форма);
//	
//	Форма.ПоддержкаGoogle.Вставить("ОписаниеПолейДляАвтоПодбора",
//	ОписаниеПолейДляАвтоПодбора(Форма, СтатическоеОписание, ГруппаДополнительныхРеквизитов));
//	
//КонецПроцедуры

//Функция ОписаниеПоддержкиGoogle(Форма)
//	
//	Результат = Новый Структура;
//	
//	СостояниеКлассификатораКонтактов = Справочники.КлассификаторКонтактов.ТекущееСостояние();
//	
//	Результат.Вставить("КлассификаторКонтактовЗаполнен", СостояниеКлассификатораКонтактов.КлассификаторКонтактовЗаполнен);
//	Результат.Вставить("ЕстьКонтактыСозданныеПоСобытию", СостояниеКлассификатораКонтактов.ЕстьКонтактыСозданныеПоСобытию);
//	Результат.Вставить("ПревышеноЗначениеСчетчикаПодсказок", Ложь);
//	Результат.Вставить("УвеличитьЗначениеСчетчикаПодсказок", Не ЗначениеЗаполнено(Форма.Объект.Ссылка));
//	Если Не Результат.КлассификаторКонтактовЗаполнен Тогда
//		Результат.ПревышеноЗначениеСчетчикаПодсказок = РегистрыСведений.СчетчикиПодсказок.ПревышеноЗначение(Перечисления.ВидыПодсказок.Google, 10,,, Ложь);
//	КонецЕсли;
//	
//	ОтключенныеОбластиДоступа = РегистрыСведений.СеансовыеДанныеGoogle.ОтключенныеОбластиДоступа(Пользователи.ТекущийПользователь());
//	
//	Результат.Вставить("ЗагружатьКонтактыИзGoogle", ОтключенныеОбластиДоступа.Найти(Перечисления.ОбластиДоступаGoogle.Контакты) = Неопределено);
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ОписаниеПолейДляАвтоПодбора(Знач Форма, Знач СтатическоеОписание, Знач ГруппаДополнительныхРеквизитов)
//	
//	Если СтатическоеОписание = Неопределено Тогда
//		Результат = Новый Соответствие;
//	Иначе 
//		Результат = СтатическоеОписание;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ГруппаДополнительныхРеквизитов) Тогда
//		ЗаполнитьОписаниеПолейДляАвтоПодбораРекурсивно(Результат, Форма.Элементы[ГруппаДополнительныхРеквизитов].ПодчиненныеЭлементы, Форма);
//	ИначеЕсли Не ЗначениеЗаполнено(Результат) Тогда
//		ЗаполнитьОписаниеПолейДляАвтоПодбораИзВсехЭлементовФормы(Результат, Форма);
//	КонецЕсли;
//	
//	Возврат Новый ФиксированноеСоответствие(Результат);
//	
//КонецФункции

//Процедура ЗаполнитьОписаниеПолейДляАвтоПодбораРекурсивно(ОписаниеПолей, Знач ПодчиненныеЭлементы, Знач Форма)
//	
//	Для Каждого ТекЭлемент Из ПодчиненныеЭлементы Цикл
//		
//		Если ТипЗнч(ТекЭлемент) = Тип("ГруппаФормы") Тогда
//			ЗаполнитьОписаниеПолейДляАвтоПодбораРекурсивно(ОписаниеПолей, ТекЭлемент, Форма);
//			Продолжить;
//		КонецЕсли;
//		
//		ЗаполнитьОписаниеПолейДляАвтоПодбора(ОписаниеПолей, ТекЭлемент, Форма);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ЗаполнитьОписаниеПолейДляАвтоПодбораИзВсехЭлементовФормы(ОписаниеПолей, Знач Форма)
//	
//	Для Каждого ТекЭлемент Из Форма.Элементы Цикл
//		
//		ЗаполнитьОписаниеПолейДляАвтоПодбора(ОписаниеПолей, ТекЭлемент, Форма);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ЗаполнитьОписаниеПолейДляАвтоПодбора(Знач ОписаниеПолей, Знач ТекЭлемент, Знач Форма)
//	
//	Если ТипЗнч(ТекЭлемент) <> Тип("ПолеФормы") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ТекЭлемент.Вид <> ВидПоляФормы.ПолеВвода Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ТекЭлемент.ОграничениеТипа) Тогда
//		ОписаниеТиповРеквизита = ТекЭлемент.ОграничениеТипа;
//	Иначе
//		ОписаниеТиповРеквизита = ОписаниеТиповРеквизита(
//		Форма,
//		ТекЭлемент.ПутьКДанным);
//	КонецЕсли;
//	
//	Если Не ОбменСGoogleКлиентСервер.ЭтоСправочникДляПодключенияКлассификатораКонтактов(ОписаниеТиповРеквизита) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ОбщегоНазначенияКлиентСервер.Проверить(ОписаниеТиповРеквизита.Типы().Количество() = 1);
//	
//	ОписаниеПолей[ТекЭлемент.Имя] = Новый Структура;
//	ОписаниеПолей[ТекЭлемент.Имя].Вставить("ПутьКДанным", ТекЭлемент.ПутьКДанным);
//	ОписаниеПолей[ТекЭлемент.Имя].Вставить("ТипЗначения", ОписаниеТиповРеквизита.Типы()[0]);
//	ОписаниеПолей[ТекЭлемент.Имя].Вставить("ИмяФормыОбъекта", ИмяФормыОбъекта(ОписаниеТиповРеквизита.Типы()[0]));

//КонецПроцедуры

//// Возвращает описание типов реквизита.
////
//// Параметры:
////  Форма		 - УправляемаяФорма - форма, в которой находится указанные реквизит
////  ПутьКДанным	 - Строка - путь к данным (путь к реквизиту формы)
//// Возвращаемое значение:
////  ОписаниеТипов
//Функция ОписаниеТиповРеквизита(Форма, ПутьКДанным)
//	
//	КомпонентыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
//	
//	Если КомпонентыПути.Количество() > 3 Тогда
//		Возврат Новый ОписаниеТипов;
//	КонецЕсли;
//	
//	Если КомпонентыПути[0] = "Элементы" Тогда
//		Возврат Новый ОписаниеТипов;
//	КонецЕсли;
//	
//	ИмяРеквизита = КомпонентыПути[КомпонентыПути.ВГраница()];
//	
//	КомпонентыПути.Удалить(КомпонентыПути.ВГраница());
//	
//	МассивРеквизитов = Форма.ПолучитьРеквизиты(СтрСоединить(КомпонентыПути, "."));
//	
//	Для Каждого Реквизит Из МассивРеквизитов Цикл
//		Если Реквизит.Имя=ИмяРеквизита Тогда
//			Возврат Реквизит.ТипЗначения;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат Новый ОписаниеТипов;
//	
//КонецФункции

//Функция ИмяФормыОбъекта(Тип)
//	
//	Возврат СтрШаблон(
//	"%1.ФормаОбъекта",
//	Метаданные.НайтиПоТипу(Тип).ПолноеИмя());
//	
//КонецФункции

//// Записывает настройки календаря в хранилище общих настроек пользователя.
////
//// Параметры:
////  КалендарьСотрудника	 - СправочникСсылка.КалендариСотрудников - календарь, для которого сохраняются настройки.
////  ДанныеЗаполнения	 - Структура - структура, содержащая ключи:
////   * Пользователь - СправочниикСсылка.Пользователи - пользователь, для которого сохраняются настройки,
////   * colorId - Число - индекс цвета в Google,
////   * selected - Булево - признак того, что календарь отмечен как выбранный,
////   * primary - Булево - признак того, что календарь отмечен как основной.
//Процедура ЗаписатьНастройкиКалендаря(КалендарьСотрудника, ДанныеЗаполнения) Экспорт
//	
//	// Свойство "Пользователь" в ДанныхЗаполнения устанавливается только для новых календарей
//	// Для ранее записанных календарей настройки при обмене не обновляем
//	Если Не ДанныеЗаполнения.Свойство("Пользователь") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
//	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Пользователь, "ИдентификаторПользователяИБ"));
//	
//	НастройкиДоступныхКалендарей = НастройкиДоступныхКалендарей(ПользовательИБ);
//	
//	НоваяНастройка = НастройкиДоступныхКалендарей.Добавить();
//	НоваяНастройка.Календарь = КалендарьСотрудника;
//	Если ДанныеЗаполнения.Свойство("colorId") Тогда
//		НоваяНастройка.ВариантЦвета = ДанныеЗаполнения.colorId;
//	КонецЕсли;
//	Если ДанныеЗаполнения.Свойство("selected") Тогда
//		НоваяНастройка.Выбран = ДанныеЗаполнения.selected;
//	КонецЕсли;
//	
//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
//	"НастройкиКалендаряСотрудника",
//	"ДоступныеКалендари",
//	НастройкиДоступныхКалендарей,,
//	ПользовательИБ.Имя);
//	
//	УстановитьКалендарьПоУмолчанию(КалендарьСотрудника, ДанныеЗаполнения);
//	
//КонецПроцедуры

//Функция НастройкиДоступныхКалендарей(ПользовательИБ)
//	
//	ТаблицаНастроекПоУмолчанию = Новый ТаблицаЗначений;
//	ТаблицаНастроекПоУмолчанию.Колонки.Добавить("Календарь", Новый ОписаниеТипов("СправочникСсылка.КалендариСотрудников"));
//	ТаблицаНастроекПоУмолчанию.Колонки.Добавить("ВариантЦвета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)));
//	ТаблицаНастроекПоУмолчанию.Колонки.Добавить("Выбран", Новый ОписаниеТипов("Булево"));
//	
//	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
//	"НастройкиКалендаряСотрудника",
//	"ДоступныеКалендари",
//	ТаблицаНастроекПоУмолчанию,,
//	ПользовательИБ.Имя);
//	
//КонецФункции

//Процедура ОбновитьЗаписьКалендаря(КалендарьСотрудника, ЗаписьКалендаря, Пользователь)
//	
//	ЗаписьОбъект = Справочники.ЗаписиКалендаряСотрудника.ОбъектПоИдентификатору(
//	ЗаписьКалендаря["id"],
//	КалендарьСотрудника);
//	
//	ЗаписьОбъект.ПометкаУдаления = ЗаписьКалендаря["status"] = "cancelled";
//	
//	Если ЗаписьОбъект.ПометкаУдаления И Не ЗначениеЗаполнено(ЗаписьОбъект.Ссылка) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДанныеЗаполнения = Новый Структура;
//	
//	ЗаполнитьПолеДатаВремя(ДанныеЗаполнения, "Начало", ЗаписьКалендаря, "start");
//	ЗаполнитьПолеДатаВремя(ДанныеЗаполнения, "Окончание", ЗаписьКалендаря, "end");
//	
//	ДанныеЗаполнения.Вставить("Идентификатор", ЗаписьКалендаря["id"]);
//	ДанныеЗаполнения.Вставить("ETag", ЗаписьКалендаря["etag"]);
//	ДанныеЗаполнения.Вставить("Наименование", ЗаписьКалендаря["summary"]);
//	ДанныеЗаполнения.Вставить("Описание", ЗаписьКалендаря["description"]);
//	
//	ДанныеЗаполнения.Вставить("Календарь", КалендарьСотрудника);
//	
//	ЗаписьОбъект.Заполнить(ДанныеЗаполнения);
//	
//	Если ЗаписьОбъект.ПометкаУдаления Тогда
//		ОчиститьИсточник(ЗаписьОбъект);
//	Иначе
//		ПривязатьИсточникПоКлючу(ЗаписьОбъект, Пользователь);
//	КонецЕсли;
//	
//	ЗаписьОбъект.ОбменДанными.Загрузка = Истина;
//	ЗаписьОбъект.Записать();
//	
//	ОбновитьСвязанноеСобытие(ЗаписьОбъект);
//	
//КонецПроцедуры

//Процедура ОчиститьИсточник(ЗаписьОбъект)
//	
//	Если Не ЗначениеЗаполнено(ЗаписьОбъект.Источник) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ЗапросНаличияДругихСсылокНаИсточник = Новый Запрос(
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ЗаписиКалендаряСотрудника.Ссылка
//	|ИЗ
//	|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
//	|ГДЕ
//	|	ЗаписиКалендаряСотрудника.Источник = &Источник
//	|	И ЗаписиКалендаряСотрудника.ПометкаУдаления = ЛОЖЬ
//	|	И ЗаписиКалендаряСотрудника.Ссылка <> &Ссылка");
//	ЗапросНаличияДругихСсылокНаИсточник.УстановитьПараметр("Источник", ЗаписьОбъект.Источник);
//	ЗапросНаличияДругихСсылокНаИсточник.УстановитьПараметр("Ссылка", ЗаписьОбъект.Ссылка);
//	
//	РезультатЗапроса = ЗапросНаличияДругихСсылокНаИсточник.Выполнить();
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ЗаписьОбъект.Источник = Неопределено;
//	
//КонецПроцедуры

//// Процедура нужна для того, чтобы привязать источник для записи, для которой в Google был изменён календарь.
//// В этом случае в Google создаётся новая запись, с таким же идентификатором.
////
//Процедура ПривязатьИсточникПоКлючу(ЗаписьОбъект, Пользователь)
//	
//	Если ЗначениеЗаполнено(ЗаписьОбъект.Источник) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ
//	|	ЗаписиКалендаряСотрудника.Источник,
//	|	ЗаписиКалендаряСотрудника.НомерСтрокиИсточника
//	|ИЗ
//	|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Событие КАК Событие
//	|		ПО ЗаписиКалендаряСотрудника.Источник = Событие.Ссылка
//	|ГДЕ
//	|	ЗаписиКалендаряСотрудника.Ключ = &Ключ
//	|	И ЗаписиКалендаряСотрудника.Календарь.Пользователь = &Пользователь
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ЗаписиКалендаряСотрудника.Источник,
//	|	ЗаписиКалендаряСотрудника.НомерСтрокиИсточника
//	|ИЗ
//	|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаРаботу КАК ЗаданиеНаРаботу
//	|		ПО ЗаписиКалендаряСотрудника.Источник = ЗаданиеНаРаботу.Ссылка
//	|ГДЕ
//	|	ЗаписиКалендаряСотрудника.Ключ = &Ключ
//	|	И ЗаписиКалендаряСотрудника.Календарь.Пользователь = &Пользователь");
//	Запрос.УстановитьПараметр("Ключ", КлючИзИдентификатора(ЗаписьОбъект.Идентификатор, ТипЗнч(ЗаписьОбъект)));
//	Запрос.УстановитьПараметр("Пользователь", Пользователь);
//	
//	Для Каждого РезультатЗапроса Из Запрос.ВыполнитьПакет() Цикл
//		Если РезультатЗапроса.Пустой() Тогда
//			Продолжить;
//		КонецЕсли;
//		Выборка = РезультатЗапроса.Выбрать();
//		Выборка.Следующий();
//		ЗаполнитьЗначенияСвойств(ЗаписьОбъект, Выборка);
//		Прервать;
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ОбновитьСвязанноеСобытие(ЗаписьОбъект)
//	
//	Если Не ЗначениеЗаполнено(ЗаписьОбъект.Источник) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ТипЗнч(ЗаписьОбъект.Источник) <> Тип("ДокументСсылка.Событие") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ИсточникОбъект = ЗаписьОбъект.Источник.ПолучитьОбъект();
//	ИсточникОбъект.КалендарьСотрудника = ЗаписьОбъект.Календарь;
//	
//	ИсточникОбъект.ПометкаУдаления = ЗаписьОбъект.ПометкаУдаления;
//	
//	Если ИсточникОбъект.ПометкаУдаления Тогда
//		ИсточникОбъект.Состояние = Справочники.СостоянияСобытий.Отменено;
//	ИначеЕсли ИсточникОбъект.Состояние = Справочники.СостоянияСобытий.Отменено Тогда
//		ИсточникОбъект.Состояние = Справочники.СостоянияСобытий.Запланировано;
//	КонецЕсли;
//	
//	ИсточникОбъект.Тема = ЗаписьОбъект.Наименование;
//	ИсточникОбъект.Содержание = ЗаписьОбъект.Описание;
//	ИсточникОбъект.НачалоСобытия = ЗаписьОбъект.Начало;
//	ИсточникОбъект.ОкончаниеСобытия = ЗаписьОбъект.Окончание;
//	
//	ИсточникОбъект.ОбменДанными.Загрузка = Истина;
//	ИсточникОбъект.Записать();
//	
//КонецПроцедуры

//// Функция возвращает ссылку на календарь сотрудника.
////
//// Параметры:
////  ОписаниеКалендаря	 - Соответствие - данные, полученные в результате выполнения запроса
////                         GET https://www.googleapis.com/calendar/v3/users/me/calendarList
////  Пользователь		 - СправочникСсылка.Пользователь - пользователь календаря.
//// 
//// Возвращаемое значение:
////  СправочникСсылка.КалендарьСотрудника - ссылка на календарь сотрудника или
////                                         ПустаяСсылка, для случая, когда
////                                         СинхронизироватьСGoogle = Ложь
////
//Функция СсылкаНаКалендарьСотрудника(ОписаниеКалендаря, Пользователь)
//	
//	Если Не ЗначениеЗаполнено(ОписаниеКалендаря["id"]) Тогда
//		Возврат ПредопределенноеЗначение("Справочник.КалендариСотрудников.ПустаяСсылка");
//	КонецЕсли;
//	
//	НайденнаяСсылка = Справочники.КалендариСотрудников.СсылкаПоИдентификатору(
//	ОписаниеКалендаря["id"],
//	Пользователь);
//	
//	ДанныеЗаполнения = Новый Структура;
//	
//	Если ЗначениеЗаполнено(НайденнаяСсылка) Тогда
//		
//		КалендарьСотрудника = НайденнаяСсылка.ПолучитьОбъект();
//		Если Не КалендарьСотрудника.СинхронизироватьСGoogle Тогда
//			Возврат Справочники.КалендариСотрудников.ПустаяСсылка();
//		КонецЕсли;
//		
//	Иначе
//		
//		КалендарьСотрудника = Справочники.КалендариСотрудников.СоздатьЭлемент();
//		ДанныеЗаполнения.Вставить("Пользователь", Пользователь);
//		ДанныеЗаполнения.Вставить("СинхронизироватьСGoogle", Истина);
//		ДанныеЗаполнения.Вставить("ВладелецКалендаря", Справочники.Сотрудники.ПустаяСсылка());
//		
//		СотрудникиПользователя = УправлениеНебольшойФирмойСервер.ПолучитьСотрудниковПользователя(Пользователь);
//		
//		Если СотрудникиПользователя.Количество() > 0 Тогда
//			ДанныеЗаполнения.ВладелецКалендаря = СотрудникиПользователя[0];
//		КонецЕсли;
//		
//		Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ВладелецКалендаря) Тогда
//			ВызватьИсключение СтрШаблон(
//			НСтр("ru = 'Не удалось определить владельца календаря ""%1"" для пользователя ""%2"".'"),
//			КалендарьСотрудника,
//			Пользователь);
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеЗаполнения, ОписаниеКалендаря);
//	ДанныеЗаполнения.Вставить("Наименование", ДанныеЗаполнения.summary);
//	
//	КалендарьСотрудника.Заполнить(ДанныеЗаполнения);
//	
//	КалендарьСотрудника.ОбменДанными.Загрузка = Истина;
//	КалендарьСотрудника.Записать();
//	
//	ЗаписатьНастройкиКалендаря(КалендарьСотрудника.Ссылка, ДанныеЗаполнения);
//	
//	Возврат КалендарьСотрудника.Ссылка;
//	
//КонецФункции

//Процедура УстановитьКалендарьПоУмолчанию(КалендарьСотрудника, ДанныеЗаполнения)
//	
//	Если Не ДанныеЗаполнения.Свойство("primary") Тогда
//		Возврат;
//	КонецЕсли;

//	Если Не ДанныеЗаполнения.primary Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ
//	|	НастройкиПользователей.Значение
//	|ИЗ
//	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
//	|ГДЕ
//	|	НастройкиПользователей.Пользователь = &Пользователь
//	|	И НастройкиПользователей.Настройка = &Настройка");
//	Запрос.УстановитьПараметр("Пользователь", ДанныеЗаполнения.Пользователь);
//	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойКалендарь);
//	
//	ОсновнойКалендарь = Неопределено;
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если Не РезультатЗапроса.Пустой() Тогда
//		Выборка = РезультатЗапроса.Выбрать();
//		Выборка.Следующий();
//		ОсновнойКалендарь = Выборка.Значение;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ОсновнойКалендарь) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	УправлениеНебольшойФирмойСервер.УстановитьНастройкуПользователя(КалендарьСотрудника, "ОсновнойКалендарь", ДанныеЗаполнения.Пользователь);
//	
//КонецПроцедуры

//Функция ИдентификаторыСообщенийСМоментаПоследнейСинхронизации(Знач СеансовыеДанные, Знач ИдентификаторИстории)
//	
//	Если Не ЗначениеЗаполнено(ИдентификаторИстории) Тогда
//		Возврат ИдентификаторыСообщений(СеансовыеДанные);
//	КонецЕсли;
//	
//	ИсторияИзменений = ИсторияИзменений(СеансовыеДанные, ИдентификаторИстории);
//	Если ЗначениеЗаполнено(ИсторияИзменений["error"]) Тогда
//		Возврат ИдентификаторыСообщений(СеансовыеДанные);
//	КонецЕсли;
//	
//	УникальныеИдентификаторы = Новый Соответствие;
//	
//	Результат = Новый Соответствие;
//	Результат["messages"] = Новый Массив;
//	
//	ДополнитьИдентификаторамиИзИсторииИзменений(Результат["messages"], ИсторияИзменений, УникальныеИдентификаторы);
//	Если ДостигнутМаксимальныйРазмерПакета(Результат["messages"]) Тогда
//		Возврат ИдентификаторыСообщений(СеансовыеДанные);
//	КонецЕсли;
//	
//	Пока ЗначениеЗаполнено(ИсторияИзменений["nextPageToken"]) Цикл
//		
//		ИсторияИзменений = ИсторияИзменений(СеансовыеДанные, ИдентификаторИстории, ИсторияИзменений["nextPageToken"]);
//		Если ЗначениеЗаполнено(ИсторияИзменений["error"]) Тогда
//			Возврат ИдентификаторыСообщений(СеансовыеДанные);
//		КонецЕсли;
//		
//		ДополнитьИдентификаторамиИзИсторииИзменений(Результат["messages"], ИсторияИзменений, УникальныеИдентификаторы);
//		Если ДостигнутМаксимальныйРазмерПакета(Результат["messages"]) Тогда
//			Возврат ИдентификаторыСообщений(СеансовыеДанные);
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Результат["historyId"] = ИсторияИзменений["historyId"];
//	
//	Возврат Результат;
//	
//КонецФункции

//Процедура ДополнитьИдентификаторамиИзИсторииИзменений(МассивСообщений, ИсторияИзменений, УникальныеИдентификаторы)
//	
//	Если ТипЗнч(ИсторияИзменений["history"]) <> Тип("Массив") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Для Каждого ТекЗапись Из ИсторияИзменений["history"] Цикл
//		
//		Для Каждого ТекЗапись Из ТекЗапись["messages"] Цикл
//			
//			Если УникальныеИдентификаторы[ТекЗапись["id"]] <> Неопределено Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			УникальныеИдентификаторы[ТекЗапись["id"]] = Истина;
//			МассивСообщений.Добавить(ТекЗапись);
//			
//			Если ДостигнутМаксимальныйРазмерПакета(МассивСообщений) Тогда
//				Возврат;
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Функция ДостигнутМаксимальныйРазмерПакета(МассивСообщений)
//	
//	Возврат МассивСообщений.Количество() >= 100;
//	
//КонецФункции

//Функция ИсторияИзменений(Знач СеансовыеДанные, Знач ИдентификаторИстории, Знач СтраничныйТокен = "")
//	
//	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
//	СтрШаблон(
//	"https://www.googleapis.com/gmail/v1/users/me/history?startHistoryId=%1%2%3",
//	ИдентификаторИстории,
//	?(ЗначениеЗаполнено(СтраничныйТокен), СтрШаблон("&pageToken=%1", СтраничныйТокен), ""),
//	КвотаПользователя("&quotaUser")));
//	
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(ВызовМетода(АдресAPI, СеансовыеДанные));
//	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
//	
//	Возврат РезультатЧтенияJSON;
//	
//КонецФункции

//Функция ИдентификаторыПредыдущихСообщений(Знач УчетнаяЗапись, Знач СеансовыеДанные)
//	
//	ДатаНаиболееРаннегоСообщения = ДатаНаиболееРаннегоСообщения(УчетнаяЗапись);
//	
//	Если Не ЗначениеЗаполнено(ДатаНаиболееРаннегоСообщения) Тогда
//		Возврат ИдентификаторыСообщений(СеансовыеДанные);
//	КонецЕсли;
//	
//	Результат = Новый Соответствие;
//	Результат["messages"] = Новый Массив;
//	
//	ПараметрЗапроса = СтрШаблон("older:%2", Формат(ДатаНаиболееРаннегоСообщения, "ДФ=yyyy/MM/dd"));
//	
//	ИдентификаторыСообщений = ИдентификаторыСообщений(СеансовыеДанные, ПараметрЗапроса);
//	ДополнитьИдентификаторамиОтсутствующимиВЛокальнойБазе(Результат["messages"], ИдентификаторыСообщений, УчетнаяЗапись);
//	
//	Пока ЗначениеЗаполнено(ИдентификаторыСообщений["nextPageToken"]) Цикл
//		
//		Если ДостигнутМаксимальныйРазмерПакета(Результат["messages"]) Тогда
//			Прервать;
//		КонецЕсли;
//		
//		ИдентификаторыСообщений = ИдентификаторыСообщений(СеансовыеДанные, ПараметрЗапроса, ИдентификаторыСообщений["nextPageToken"]);
//		ДополнитьИдентификаторамиОтсутствующимиВЛокальнойБазе(Результат["messages"], ИдентификаторыСообщений, УчетнаяЗапись);
//		
//	КонецЦикла;
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ДатаНаиболееРаннегоСообщения(УчетнаяЗапись)
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	Событие.НачалоСобытия КАК НачалоСобытия
//	|ИЗ
//	|	Документ.Событие КАК Событие
//	|ГДЕ
//	|	Событие.УчетнаяЗапись = &УчетнаяЗапись
//	|	И Событие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЭлектронноеПисьмо)
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	НачалоСобытия");
//	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат '00010101';
//	КонецЕсли;
//	
//	Выборка = РезультатЗапроса.Выбрать();
//	Выборка.Следующий();
//	Возврат Выборка.НачалоСобытия;
//	
//КонецФункции

//Функция ПараметрЗапросаДляОтбораПоКонтакту(ОтборПоКонтакту)
//	
//	Если Не ЗначениеЗаполнено(ОтборПоКонтакту) Тогда
//		Возврат "";
//	КонецЕсли;
//	
//	КомпонентыЗапроса = Новый Массив;
//	Для Каждого ТекАдресЭП Из ЭлектроннаяПочтаУНФ.ВсеАдресаЭлектроннойПочтыКонтакта(ОтборПоКонтакту) Цикл
//		КомпонентыЗапроса.Добавить(СтрШаблон("from:%1 OR to:%1", ТекАдресЭП));
//	КонецЦикла;
//	
//	Возврат СтрСоединить(КомпонентыЗапроса, " OR ");
//	
//КонецФункции

//Процедура ДополнитьИдентификаторамиОтсутствующимиВЛокальнойБазе(МассивСообщений, ИдентификаторыСообщений, УчетнаяЗапись)
//	
//	Если ТипЗнч(ИдентификаторыСообщений["messages"]) <> Тип("Массив") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	СобытияПоИдентификаторам = СобытияПоИдентификаторамGMail(УчетнаяЗапись, ИдентификаторыСообщений);
//	
//	Для Каждого ТекИдентификатор Из ИдентификаторыСообщений["messages"] Цикл
//		
//		Если СобытияПоИдентификаторам[ТекИдентификатор["id"]] <> Неопределено Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		МассивСообщений.Добавить(ТекИдентификатор);
//		
//		Если ДостигнутМаксимальныйРазмерПакета(МассивСообщений) Тогда
//			Возврат;
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Функция ИдентификаторыСообщенийДлаЗагрузкиЗаголовков(Знач УчетнаяЗапись, Знач СеансовыеДанные, Знач РежимЗагрузки, Знач ОтборПоКонтакту)
//	
//	Если ЗначениеЗаполнено(ОтборПоКонтакту) Тогда
//		Возврат ИдентификаторыСообщенийСОтборомПоКонтакту(УчетнаяЗапись, СеансовыеДанные, ОтборПоКонтакту);
//	КонецЕсли;
//	
//	Если РежимЗагрузки = ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиПредыдущиеСообщения() Тогда
//		Возврат ИдентификаторыПредыдущихСообщений(УчетнаяЗапись, СеансовыеДанные);
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(ДатаНаиболееРаннегоСообщения(УчетнаяЗапись)) Тогда
//		Возврат ИдентификаторыСообщений(СеансовыеДанные);
//	КонецЕсли;
//	
//	ИдентификаторИстории = РегистрыСведений.ИнкрементнаяСинхронизацияПочты.ИдентификаторИстории(УчетнаяЗапись);
//	Возврат ИдентификаторыСообщенийСМоментаПоследнейСинхронизации(СеансовыеДанные, ИдентификаторИстории);
//	
//КонецФункции

//Функция ИдентификаторыСообщенийСОтборомПоКонтакту(Знач УчетнаяЗапись, Знач СеансовыеДанные, Знач ОтборПоКонтакту)
//	
//	Результат = Новый Соответствие;
//	Результат["messages"] = Новый Массив;
//	
//	ПараметрЗапроса = ПараметрЗапросаДляОтбораПоКонтакту(ОтборПоКонтакту);
//	
//	ИдентификаторыСообщений = ИдентификаторыСообщений(СеансовыеДанные, ПараметрЗапроса);
//	ДополнитьИдентификаторамиОтсутствующимиВЛокальнойБазе(Результат["messages"], ИдентификаторыСообщений, УчетнаяЗапись);
//	
//	Пока ЗначениеЗаполнено(ИдентификаторыСообщений["nextPageToken"]) Цикл
//		
//		Если ДостигнутМаксимальныйРазмерПакета(Результат["messages"]) Тогда
//			Прервать;
//		КонецЕсли;
//		
//		ИдентификаторыСообщений = ИдентификаторыСообщений(СеансовыеДанные, ПараметрЗапроса, ИдентификаторыСообщений["nextPageToken"]);
//		ДополнитьИдентификаторамиОтсутствующимиВЛокальнойБазе(Результат["messages"], ИдентификаторыСообщений, УчетнаяЗапись);
//		
//	КонецЦикла;
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ИдентификаторыСообщений(Знач СеансовыеДанные, Знач ПараметрЗапроса = "", Знач СтраничныйТокен = "")
//	
//	МассивПараметров = Новый Массив;
//	
//	Если ЗначениеЗаполнено(ПараметрЗапроса) Тогда
//		МассивПараметров.Добавить(СтрШаблон("q=%1", ПараметрЗапроса));
//	КонецЕсли;

//	Если ЗначениеЗаполнено(СтраничныйТокен) Тогда
//		МассивПараметров.Добавить(СтрШаблон("pageToken=%1", СтраничныйТокен));
//	КонецЕсли;
//	
//	КвотаПользователя = КвотаПользователя("");
//	Если ЗначениеЗаполнено(КвотаПользователя) Тогда
//		МассивПараметров.Добавить(СтрШаблон("quotaUser=%1", КвотаПользователя));
//	КонецЕсли;
//	
//	СтрокаПараметров = СтрСоединить(МассивПараметров, "&");
//	
//	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
//	СтрШаблон("https://www.googleapis.com/gmail/v1/users/me/messages%1",
//	?(ЗначениеЗаполнено(СтрокаПараметров), СтрШаблон("?%1", СтрокаПараметров), "")));
//	
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(ВызовМетода(АдресAPI, СеансовыеДанные));
//	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
//	Возврат РезультатЧтенияJSON;
//	
//КонецФункции

//Функция СодержаниеСообщения(Идентификатор, Знач СеансовыеДанные)
//	
//	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
//	СтрШаблон("https://www.googleapis.com/gmail/v1/users/me/messages/%1?format=raw%2",
//	Идентификатор,
//	КвотаПользователя("&quotaUser")));
//	
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(ВызовМетода(АдресAPI, СеансовыеДанные));
//	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
//	Возврат РезультатЧтенияJSON;
//	
//КонецФункции

//Функция ДанныеСообщений(Идентификаторы, Знач СеансовыеДанные, Знач ВариантЗагрузки)
//	
//	ГраницаСекций = НоваяГраницаСекций();
//	
//	HTTPСоединение = Новый HTTPСоединение(
//	"www.googleapis.com",,,,,
//	20,
//	ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение());
//	
//	ПакетныйЗапросHTTP = Новый HTTPЗапрос;
//	ПакетныйЗапросHTTP.АдресРесурса = "/batch/gmail/v1";
//	ПакетныйЗапросHTTP.Заголовки["Authorization"] = СтрШаблон("%1 %2", СеансовыеДанные["token_type"], СеансовыеДанные["access_token"]);
//	ПакетныйЗапросHTTP.Заголовки["Content-Type"] = СтрШаблон("multipart/mixed; boundary=%1", ГраницаСекций);
//	ПакетныйЗапросHTTP.УстановитьТелоИзСтроки(ТелоПакетногоЗапросаДанныеСообщений(Идентификаторы, ГраницаСекций, ВариантЗагрузки));
//	
//	ПакетныйОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(ПакетныйЗапросHTTP);
//	
//	КомпонентыПакетногоОтвета = КомпонентыПакетногоОтвета(ПакетныйОтветHTTP, Неопределено);
//	
//	Результат = ДанныеСообщенийИзПакетногоОтвета(КомпонентыПакетногоОтвета);
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ТелоПакетногоЗапросаДанныеСообщений(Идентификаторы, ГраницаСекций, ВариантЗагрузки)
//	
//	Результат = "";
//	
//	Для Каждого ТекИдентификатор Из Идентификаторы["messages"] Цикл
//		
//		Результат = СтрШаблон("%1--%2
//		|Content-Type: application/http
//		|
//		|GET /gmail/v1/users/me/messages/%3?format=%4",
//		ТекстСОтбивкой(Результат),
//		ГраницаСекций,
//		ТекИдентификатор["id"],
//		ИдентификаторФормата(ВариантЗагрузки));
//		
//	КонецЦикла;
//	
//	Возврат СтрШаблон("%1
//	|
//	|--%2--",
//	Результат,
//	ГраницаСекций);
//	
//КонецФункции

//Функция ТекстСОтбивкой(Результат)
//	
//	Если ЗначениеЗаполнено(Результат) Тогда
//		Возврат СтрШаблон("%1
//		|
//		|",
//		Результат);
//	Иначе
//		Возврат "";
//	КонецЕсли;
//	
//КонецФункции

//Функция ИдентификаторФормата(ВариантЗагрузки)
//	
//	Если ВариантЗагрузки = Перечисления.ВариантыЗагрузкиПисем.ТекстыИВложения Тогда
//		Возврат "raw";
//	Иначе
//		Возврат "metadata";
//	КонецЕсли;
//	
//КонецФункции

//Функция КомпонентыПакетногоОтвета(ПакетныйОтветHTTP, Менеджер)
//	
//	Результат = Новый Соответствие;
//	
//	ContentType = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(ПакетныйОтветHTTP.Заголовки["Content-Type"]);
//	
//	ОбщегоНазначенияКлиентСервер.Проверить(
//	ContentType.Свойство("boundary"),
//	НСтр("ru = 'Не обнаружен параметр boundary в ответе на пакетный запрос'"),
//	"РаботаСGoogle.КомпонентыПакетногоОтвета");
//	
//	// Используется библиотечная функция вместо платформенной СтрРазделить(),
//	// так как она позволяет применять разделитель, состоящий из нескольких символов
//	Для Каждого Компонент Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
//		ПакетныйОтветHTTP.ПолучитьТелоКакСтроку(),
//		СтрШаблон("--%1", ContentType.boundary),
//		Истина,
//		Истина) Цикл
//		СтруктураКомпонентаПакета = СтруктураКомпонентаПакета(Компонент, Менеджер);
//		Если СтруктураКомпонентаПакета.Свойство("Ключ") Тогда
//			Результат[СтруктураКомпонентаПакета.Ключ] = СтруктураКомпонентаПакета;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат Результат;

//КонецФункции

//Функция СтруктураКомпонентаПакета(Компонент, Менеджер)
//	
//	Если ПустаяСтрока(Компонент) Тогда
//		Возврат Новый Структура;
//	КонецЕсли;
//	
//	Результат = ЗаголовкиИКодСостоянияКомпонента(Компонент);
//	
//	Если Менеджер = Неопределено Тогда
//		Результат.Вставить("Идентификатор", Результат.Заголовки["ETag"]);
//	Иначе
//		Результат.Вставить("Идентификатор", СтрЗаменить(Результат.Заголовки["Content-ID"], "response-", ""));
//	КонецЕсли;
//	
//	Если Менеджер = Неопределено Тогда
//		Результат.Вставить("Ключ", Результат.Идентификатор);
//	ИначеЕсли СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Результат.Идентификатор) Тогда
//		Результат.Вставить("Ключ", Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Результат.Идентификатор)));
//	КонецЕсли;
//	
//	Содержимое = СодержимоеКомпонента(Компонент, Результат.ИндексСтрокиНачалоСодержимого, Результат.Идентификатор);
//	
//	Если Содержимое = Неопределено Тогда
//		Возврат Новый Структура;
//	КонецЕсли;
//	
//	Результат.Вставить("Содержимое", Содержимое);
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ЗаголовкиИКодСостоянияКомпонента(Знач Компонент)
//	
//	Результат = Новый Структура;
//	
//	Результат.Вставить("Заголовки", Новый Соответствие);
//	
//	Для ИндексСтрок = 1 По СтрЧислоСтрок(Компонент) Цикл
//		
//		ТекСтрока = СтрПолучитьСтроку(Компонент, ИндексСтрок);
//		
//		Если ПустаяСтрока(ТекСтрока) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если СтрНачинаетсяС(ТекСтрока, "{") Тогда
//			Прервать;
//		КонецЕсли;
//		
//		Если СтрНачинаетсяС(ТекСтрока, "HTTP") Тогда
//			ТекЗаголовок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекСтрока, " ", Истина, Истина);
//			ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
//			Результат.Вставить("КодСостояния", ОписаниеТипаЧисло.ПривестиЗначение(ТекЗаголовок[1]));
//			Продолжить;
//		КонецЕсли;
//		
//		ТекЗаголовок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекСтрока, ": ", Истина, Истина);
//		
//		Если Не ЗначениеЗаполнено(ТекЗаголовок) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если ТекЗаголовок.Количество() < 2 Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Результат.Заголовки[ТекЗаголовок[0]] = ТекЗаголовок[1];
//		
//	КонецЦикла;
//	
//	Результат.Вставить("ИндексСтрокиНачалоСодержимого", ИндексСтрок);
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция СодержимоеКомпонента(Знач Компонент, Знач ИндексСтрокиНачалоСодержимого, Знач Идентификатор)
//	
//	СтрокиJSON = Новый Массив;
//	
//	Для ИндексСтрок = ИндексСтрокиНачалоСодержимого По СтрЧислоСтрок(Компонент) Цикл
//		СтрокиJSON.Добавить(СтрПолучитьСтроку(Компонент, ИндексСтрок));
//	КонецЦикла;
//	
//	ТелоКомпонента = СтрСоединить(СтрокиJSON, Символы.ПС);
//	
//	Если Не ЗначениеЗаполнено(ТелоКомпонента) Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(ТелоКомпонента);
//	
//	Попытка
//		
//		Результат = ПрочитатьJSON(ЧтениеJSON, Истина)
//		
//	Исключение
//		
//		ИнформацияОбОшибке = ИнформацияОбОшибке();
//		
//		КомментарийПоОшибке = СтрШаблон(
//		НСтр("ru = '%1
//		|Идетификатор фрагмента: %2'"),
//		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
//		Идентификатор);
//		
//		ЗаписьЖурналаРегистрации(
//		НСтр("ru = 'Ошибка при чтении сообщения Gmail'"),
//		УровеньЖурналаРегистрации.Ошибка,,,
//		КомментарийПоОшибке);
//		
//		Возврат Неопределено;
//		
//	КонецПопытки;
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ДанныеСообщенийИзПакетногоОтвета(КомпонентыПакетногоОтвета)
//	
//	Результат = Новый Массив;
//	
//	Для Каждого КомпонентПакетногоОтвета Из КомпонентыПакетногоОтвета Цикл
//		
//		Если КомпонентПакетногоОтвета.Значение.КодСостояния >= 400 Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ДанныеСообщения = НовыеДанныеСообщения();
//		ДанныеСообщения.Идентификатор = КомпонентПакетногоОтвета.Значение.Содержимое["id"];
//		ДанныеСообщения.ИдентификаторИстории = КомпонентПакетногоОтвета.Значение.Содержимое["historyId"];
//		ДанныеСообщения.Сниппет = КомпонентПакетногоОтвета.Значение.Содержимое["snippet"];
//		ДанныеСообщения.Дата = ДатаИзВремениUnix(КомпонентПакетногоОтвета.Значение.Содержимое["internalDate"]);
//		ДанныеСообщения.ВходящееИсходящееСобытие = ВходящееИсходящееСобытие(КомпонентПакетногоОтвета.Значение.Содержимое["labelIds"]);
//		ДанныеСообщения.Метки = КомпонентПакетногоОтвета.Значение.Содержимое["labelIds"];
//		
//		ЗаполнитьПоляПоРазобраннымДанным(ДанныеСообщения, КомпонентПакетногоОтвета);
//		ЗаполнитьПоляПоСырымДанным(ДанныеСообщения, КомпонентПакетногоОтвета);
//		
//		Результат.Добавить(ДанныеСообщения);
//		
//	КонецЦикла;
//	
//	Возврат Результат;
//	
//КонецФункции

//Процедура ЗаполнитьПоляПоРазобраннымДанным(Знач ДанныеСообщения, Знач КомпонентПакетногоОтвета)
//	
//	Если КомпонентПакетногоОтвета.Значение.Содержимое["payload"] = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Заголовки = КомпонентПакетногоОтвета.Значение.Содержимое["payload"]["headers"];
//	
//	Для Каждого ТекЗаголовок Из Заголовки Цикл
//		
//		Если НРег(ТекЗаголовок["name"]) = "subject" Тогда
//			ДанныеСообщения.Тема = ТекЗаголовок["value"];
//		КонецЕсли;
//		
//		Если НРег(ТекЗаголовок["name"]) = "message-id" Тогда
//			ДанныеСообщения.ИдентификаторСообщения = ТекЗаголовок["value"];
//		КонецЕсли;
//		
//		Если НРег(ТекЗаголовок["name"]) = "in-reply-to" Тогда
//			ДанныеСообщения.ИдентификаторОснования = ТекЗаголовок["value"];
//		КонецЕсли;
//		
//		Если НРег(ТекЗаголовок["name"]) = "references" Тогда
//			ДанныеСообщения.ИдентификаторыОснований = ТекЗаголовок["value"];
//		КонецЕсли;
//		
//		Если НРег(ТекЗаголовок["name"]) = "from" Тогда
//			ЗаполнитьЗначенияСвойств(
//			ДанныеСообщения.Отправитель,
//			ЭлектроннаяПочтаУНФ.АдресЭлектроннойПочтыИзСтроки(ТекЗаголовок["value"]));
//		КонецЕсли;
//		
//		Если НРег(ТекЗаголовок["name"]) = "to" Тогда
//			ДанныеСообщения.Получатели = ЭлектроннаяПочтаУНФ.АдресаЭлектроннойПочтыИзСтроки(ТекЗаголовок["value"]);
//		КонецЕсли;
//		
//	КонецЦикла;

//КонецПроцедуры

//Процедура ЗаполнитьПоляПоСырымДанным(Знач ДанныеСообщения, Знач КомпонентПакетногоОтвета)
//	
//	Если КомпонентПакетногоОтвета.Значение.Содержимое["raw"] = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ТекИнтернетПочтовоеСообщение = ИнтернетПочтовоеСообщениеИзСырыхДанных(
//	КомпонентПакетногоОтвета.Значение.Содержимое["raw"]);
//	
//	ДанныеСообщения.ИдентификаторСообщения = ТекИнтернетПочтовоеСообщение.ИдентификаторСообщения;
//	ДанныеСообщения.ИдентификаторОснования = ЭлектроннаяПочтаУНФ.ЗначениеПоляЗаголовкаПисьма(ТекИнтернетПочтовоеСообщение.Заголовок, "in-reply-to");
//	ДанныеСообщения.ИдентификаторыОснований = ЭлектроннаяПочтаУНФ.ЗначениеПоляЗаголовкаПисьма(ТекИнтернетПочтовоеСообщение.Заголовок, "references");
//	
//	ЗаполнитьЗначенияСвойств(
//	ДанныеСообщения.Отправитель,
//	ТекИнтернетПочтовоеСообщение.Отправитель);
//	
//	Для Каждого ТекПолучатель Из ТекИнтернетПочтовоеСообщение.Получатели Цикл
//		ДанныеСообщения.Получатели.Добавить(ТекПолучатель);
//	КонецЦикла;
//	
//	ДанныеСообщения.Вставить("Содержание");
//	ДанныеСообщения.Вставить("СодержаниеHTML");
//	
//	Документы.Событие.ЗаполнитьТекстыИзПочтовогоСообщения(ДанныеСообщения, ТекИнтернетПочтовоеСообщение);
//	Документы.Событие.ЗаполнитьВложенияИзПочтовогоСообщения(ДанныеСообщения, ТекИнтернетПочтовоеСообщение);
//	
//КонецПроцедуры

//Функция АдресаУчастников(Знач ДанныеСообщений)
//	
//	Результат = Новый Массив;
//	
//	Для Каждого ТекМетаданные Из ДанныеСообщений Цикл
//		Если ТекМетаданные.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
//			Если Не ЗначениеЗаполнено(ТекМетаданные.Отправитель.Адрес) Тогда
//				Продолжить;
//			КонецЕсли;
//			Если Результат.Найти(НРег(ТекМетаданные.Отправитель.Адрес)) = Неопределено Тогда
//				Результат.Добавить(НРег(ТекМетаданные.Отправитель.Адрес));
//			КонецЕсли;
//		Иначе
//			Для Каждого ТекПолучатель Из ТекМетаданные.Получатели Цикл
//				Если Не ЗначениеЗаполнено(ТекПолучатель.Адрес) Тогда
//					Продолжить;
//				КонецЕсли;
//				Если Результат.Найти(НРег(ТекПолучатель.Адрес)) = Неопределено Тогда
//					Результат.Добавить(НРег(ТекПолучатель.Адрес));
//				КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция НовыеДанныеСообщения()
//	
//	Результат = Новый Структура;
//	Результат.Вставить("Идентификатор");
//	Результат.Вставить("ИдентификаторСообщения");
//	Результат.Вставить("ИдентификаторИстории");
//	Результат.Вставить("ИдентификаторОснования");
//	Результат.Вставить("ИдентификаторыОснований");
//	Результат.Вставить("ВходящееИсходящееСобытие");
//	Результат.Вставить("Метки");
//	Результат.Вставить("Сниппет");
//	Результат.Вставить("Дата");
//	Результат.Вставить("Тема");
//	Результат.Вставить("Отправитель", Новый Структура);
//	Результат.Вставить("Получатели", Новый Массив);
//	Результат.Отправитель.Вставить("Адрес");
//	Результат.Отправитель.Вставить("ОтображаемоеИмя");
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ДатаИзВремениUnix(ВремяUnix)
//	
//	Возврат МестноеВремя('1970-01-01' + ВремяUnix / 1000);
//	
//КонецФункции

//Функция ВходящееИсходящееСобытие(Метки)
//	
//	Если ТипЗнч(Метки) = Тип("Массив")
//		И Метки.Найти("SENT") <> Неопределено Тогда
//		Возврат Перечисления.ВходящееИсходящееСобытие.Исходящее;
//	КонецЕсли;
//	
//	Возврат Перечисления.ВходящееИсходящееСобытие.Входящее;
//	
//КонецФункции

//Функция ЭтоСпам(Метки)
//	
//	Если ТипЗнч(Метки) = Тип("Массив")
//		И Метки.Найти("SPAM") <> Неопределено Тогда
//		Возврат Истина;
//	КонецЕсли;
//	
//	Возврат Ложь;
//	
//КонецФункции

//Функция НеПросмотрено(Метки)
//	
//	Если ТипЗнч(Метки) = Тип("Массив")
//		И Метки.Найти("UNREAD") <> Неопределено Тогда
//		Возврат Истина;
//	КонецЕсли;
//	
//	Возврат Ложь;
//	
//КонецФункции

//Процедура СинхронизироватьУдаление(ПараметрыСинхронизации, УчетнаяЗапись, СеансовыеДанные)
//	
//	Если Не ЭлектроннаяПочтаУНФ.СледуетСинхронизироватьУдаление(ПараметрыСинхронизации.ВариантСинхронизации) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ
//	|	УдалениеСобытий.Событие КАК Событие,
//	|	ИдентификаторыСобытий.Идентификатор КАК Идентификатор
//	|ИЗ
//	|	РегистрСведений.ИдентификаторыСобытий КАК ИдентификаторыСобытий
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалениеСобытий КАК УдалениеСобытий
//	|		ПО ИдентификаторыСобытий.Событие = УдалениеСобытий.Событие
//	|ГДЕ
//	|	ИдентификаторыСобытий.УчетнаяЗапись = &УчетнаяЗапись");
//	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ТаблицаУдалено = РезультатЗапроса.Выгрузить();
//	
//	Если ПараметрыСинхронизации.ВариантУдаления = Перечисления.ВариантыУдаленияПисем.Удалять Тогда
//		УдалитьСообщения(ТаблицаУдалено.ВыгрузитьКолонку("Идентификатор"), СеансовыеДанные);
//	Иначе
//		УдалитьМетки(ТаблицаУдалено.ВыгрузитьКолонку("Идентификатор"), СеансовыеДанные, "INBOX");
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура СинхронизироватьПросмотр(ПараметрыСинхронизации, УчетнаяЗапись, СеансовыеДанные)
//	
//	Если Не ЭлектроннаяПочтаУНФ.СледуетСинхронизироватьПросмотр(ПараметрыСинхронизации.ВариантСинхронизации) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ
//	|	ПросмотрСобытий.Событие КАК Событие,
//	|	ПросмотрСобытий.Просмотрено КАК Просмотрено,
//	|	ИдентификаторыСобытий.Идентификатор КАК Идентификатор
//	|ИЗ
//	|	РегистрСведений.ИдентификаторыСобытий КАК ИдентификаторыСобытий
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПросмотрСобытий КАК ПросмотрСобытий
//	|		ПО ИдентификаторыСобытий.Событие = ПросмотрСобытий.Событие
//	|ГДЕ
//	|	ИдентификаторыСобытий.УчетнаяЗапись = &УчетнаяЗапись
//	|	И ПросмотрСобытий.Просмотрено");
//	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ТаблицаПросмотрено = РезультатЗапроса.Выгрузить();
//	
//	УдалитьМетки(ТаблицаПросмотрено.ВыгрузитьКолонку("Идентификатор"), СеансовыеДанные, "UNREAD");
//	
//КонецПроцедуры

//Процедура УдалитьСообщения(ИдентификаторыСообщений, Знач СеансовыеДанные)
//	
//	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
//	СтрШаблон("https://www.googleapis.com/gmail/v1/users/me/messages/batchDelete%1",
//	КвотаПользователя("?quotaUser")));
//	
//	ТелоЗапроса = Новый Соответствие;
//	ТелоЗапроса["ids"] = ИдентификаторыСообщений;
//	
//	Заголовки = Новый Соответствие;
//	Заголовки["Content-Type"] = "application/json";
//	
//	ЗаписьJSON = Новый ЗаписьJSON;
//	ЗаписьJSON.УстановитьСтроку();
//	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
//	ТелоЗапроса = ЗаписьJSON.Закрыть();
//	
//	ВызовМетода(АдресAPI, СеансовыеДанные, "POST", Заголовки, ТелоЗапроса);
//	
//КонецПроцедуры

//Процедура УдалитьМетки(ИдентификаторыСообщений, Знач СеансовыеДанные, Знач ИдентификаторМетки)
//	
//	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
//	СтрШаблон("https://www.googleapis.com/gmail/v1/users/me/messages/batchModify%1",
//	КвотаПользователя("?quotaUser")));
//	
//	ТелоЗапроса = Новый Соответствие;
//	ТелоЗапроса["removeLabelIds"] = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторМетки);
//	ТелоЗапроса["ids"] = ИдентификаторыСообщений;
//	
//	Заголовки = Новый Соответствие;
//	Заголовки["Content-Type"] = "application/json";
//	
//	ЗаписьJSON = Новый ЗаписьJSON;
//	ЗаписьJSON.УстановитьСтроку();
//	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
//	ТелоЗапроса = ЗаписьJSON.Закрыть();
//	
//	ВызовМетода(АдресAPI, СеансовыеДанные, "POST", Заголовки, ТелоЗапроса);
//	
//КонецПроцедуры

//Функция СобытияПоИдентификаторамGMail(УчетнаяЗапись, ИдентификаторыСообщений)
//	
//	Идентификаторы = Новый Массив;
//	Для Каждого ТекИдентификаторСообщения Из ИдентификаторыСообщений["messages"] Цикл
//		Идентификаторы.Добавить(ТекИдентификаторСообщения["id"]);
//	КонецЦикла;
//	
//	Возврат РегистрыСведений.ИдентификаторыСобытий.СобытияПоИдентификаторам(УчетнаяЗапись, Идентификаторы);
//	
//КонецФункции

//Функция ЗаписатьСобытиеПоДаннымGMail(ДанныеСообщения, УчетнаяЗапись, СопоставленныеКонтакты, Пользователь, ВариантЗагрузки)
//	
//	Результат = Документы.Событие.ПустаяСсылка();
//	
//	ИдентификаторыСвязанныхСообщений = ЭлектроннаяПочтаУНФ.ИдентификаторыСвязанныхСообщений(ДанныеСообщения.ИдентификаторыОснований);
//	
//	Блокировка = ЭлектроннаяПочтаУНФ.НоваяБлокировкаИдентификаторовПисем(УчетнаяЗапись);
//	
//	НачатьТранзакцию();
//	
//	Попытка
//		
//		Блокировка.Заблокировать();
//		
//		СобытияПоИдентификатору = РегистрыСведений.ИдентификаторыСобытий.СобытияПоИдентификаторам(УчетнаяЗапись, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСообщения.Идентификатор));
//		Если ЗначениеЗаполнено(СобытияПоИдентификатору) Тогда
//			ТекстИсключения = СтрШаблон(
//			НСтр("ru = 'Возможно, запущено несколько заданий загрузки почты: сообщение с идентификатором %1 уже записано.'"),
//			ДанныеСообщения.Идентификатор);
//			ВызватьИсключение ТекстИсключения;
//		КонецЕсли;
//		
//		НовоеСобытие = Документы.Событие.СоздатьДокумент();
//		НовоеСобытие.ДополнительныеСвойства.Вставить("Идентификатор", ДанныеСообщения.Идентификатор);
//		НовоеСобытие.ДополнительныеСвойства.Вставить("ИдентификаторыСообщений",
//		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСообщения.ИдентификаторСообщения));
//		
//		ЗначенияЗаполнения = Новый Структура;
//		ЗначенияЗаполнения.Вставить("Дата", ДанныеСообщения.Дата);
//		ЗначенияЗаполнения.Вставить("НачалоСобытия", ДанныеСообщения.Дата);
//		ЗначенияЗаполнения.Вставить("ОкончаниеСобытия", ТекущаяДатаСеанса());
//		Если ЗначенияЗаполнения.ОкончаниеСобытия < ЗначенияЗаполнения.НачалоСобытия Тогда
//			ЗначенияЗаполнения.ОкончаниеСобытия = ЗначенияЗаполнения.НачалоСобытия;
//		КонецЕсли;
//		ЗначенияЗаполнения.Вставить("УчетнаяЗапись", УчетнаяЗапись);
//		ЗначенияЗаполнения.Вставить("ТипСобытия", Перечисления.ТипыСобытий.ЭлектронноеПисьмо);
//		ЗначенияЗаполнения.Вставить("Тема", ДанныеСообщения.Тема);
//		ЗначенияЗаполнения.Вставить("ВходящееИсходящееСобытие", ДанныеСообщения.ВходящееИсходящееСобытие);
//		ЗначенияЗаполнения.Вставить("Состояние", Справочники.СостоянияСобытий.Завершено);
//		ЗначенияЗаполнения.Вставить("ЗагрузитьПриОткрытии", ЭлектроннаяПочтаУНФ.ЗагрузитьПриОткрытии(ВариантЗагрузки));
//		
//		ДобавитьСвойствоПриНаличии(ЗначенияЗаполнения, ДанныеСообщения, "Содержание");
//		ДобавитьСвойствоПриНаличии(ЗначенияЗаполнения, ДанныеСообщения, "СодержаниеHTML");
//		ДобавитьСвойствоПриНаличии(НовоеСобытие.ДополнительныеСвойства, ДанныеСообщения, "Вложения");
//		
//		НовоеСобытие.Заполнить(ЗначенияЗаполнения);
//		
//		ЭлектроннаяПочтаУНФ.ЗаполнитьКонтакты(НовоеСобытие, ДанныеСообщения, СопоставленныеКонтакты);
//		
//		ТемаИСодержание = Документы.Событие.ТемаИСодержание(
//		ДанныеСообщения.Тема,
//		ДанныеСообщения.Сниппет,
//		"");
//		
//		НовоеСобытие.ДополнительныеСвойства.Вставить("ТемаИСодержание", ТемаИСодержание);
//		
//		НовоеСобытие.ЗаполнитьДокументыОснования(ДанныеСообщения.ИдентификаторОснования, ИдентификаторыСвязанныхСообщений);
//		
//		НовоеСобытие.Автор = Пользователь;
//		
//		НовоеСобытие.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//		Пользователь,
//		"ОсновнойОтветственный");
//		
//		НовоеСобытие.Записать();
//		
//		РегистрыСведений.ОтказалисьОтРассылки.ЗарегистрироватьОтказОтРассылкиЕслиТребуется(
//		ДанныеСообщения.Тема, 
//		ДанныеСообщения.Отправитель.Адрес);
//		
//		Результат = НовоеСобытие.Ссылка;
//		
//		ЗафиксироватьТранзакцию();
//		
//	Исключение
//		
//		ОтменитьТранзакцию();
//		
//		ИнформацияОбОшибке = ИнформацияОбОшибке();
//		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка заголовков сообщений электронной почты'"),
//		УровеньЖурналаРегистрации.Ошибка,,,
//		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
//		
//		Результат = Документы.Событие.ПустаяСсылка();
//		
//	КонецПопытки;
//	
//	Возврат Результат;
//	
//КонецФункции

//Процедура ДобавитьСвойствоПриНаличии(Назначение, Источник, ИмяСвойства)
//	
//	Если Не Источник.Свойство(ИмяСвойства) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Назначение.Вставить(ИмяСвойства, Источник[ИмяСвойства]);
//	
//КонецПроцедуры

//Функция Base64URLЗначение(Base64URLСтрока)
//	
//	СтрокиПо64Символа = Новый Массив;
//	
//	Итератор = 1;
//	Пока Итератор < СтрДлина(Base64URLСтрока) Цикл
//		ТекСтрока = Сред(Base64URLСтрока, Итератор, 64);
//		СтрокиПо64Символа.Добавить(ТекСтрока);
//		Итератор = Итератор + 64;
//	КонецЦикла;
//	
//	Результат = СтрСоединить(СтрокиПо64Символа, Символы.ПС);
//	Результат = СтрЗаменить(Результат, "-", "+");
//	Результат = СтрЗаменить(Результат, "_", "/");
//	
//	Возврат Base64Значение(Результат);
//	
//КонецФункции

//Функция Base64URLСтрока(ДвоичныеДанные)
//	
//	Результат = Base64Строка(ДвоичныеДанные);
//	Результат = СтрЗаменить(Результат, Символы.ВК, "");
//	Результат = СтрЗаменить(Результат, Символы.ПС, "");
//	Результат = СтрЗаменить(Результат, "+", "-");
//	Результат = СтрЗаменить(Результат, "/", "_");
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция НаиболееПозднийИдентификаторИстории(Идентификатор1, Идентификатор2)
//	
//	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
//	
//	Если ОписаниеТиповЧисло.ПривестиЗначение(Идентификатор1) > ОписаниеТиповЧисло.ПривестиЗначение(Идентификатор2) Тогда
//		Возврат Идентификатор1;
//	Иначе
//		Возврат Идентификатор2;
//	КонецЕсли;
//	
//КонецФункции

//Функция КвотаПользователя(ИмяПараметра)
//	
//	Результат = Формат(ОбщегоНазначения.ЗначениеРазделителяСеанса(), "ЧГ=");
//	
//	Если ЗначениеЗаполнено(ИмяПараметра) И ЗначениеЗаполнено(Результат) Тогда
//		Возврат СтрШаблон("%1=%2", ИмяПараметра, Результат);
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

//Процедура ОбработатьОжиданиеПросмотра(Знач ТекДанные, Знач СсылкаНаСобытие, Знач ВариантСинхронизации)
//	
//	Если Не ЭлектроннаяПочтаУНФ.СледуетСинхронизироватьПросмотр(ВариантСинхронизации) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если НеПросмотрено(ТекДанные.Метки) Тогда
//		РегистрыСведений.ПросмотрСобытий.ДобавитьОжиданиеПросмотра(СсылкаНаСобытие);
//	Иначе
//		РегистрыСведений.ПросмотрСобытий.УдалитьЗапись(СсылкаНаСобытие);
//	КонецЕсли;
//	
//КонецПроцедуры

//#КонецОбласти
