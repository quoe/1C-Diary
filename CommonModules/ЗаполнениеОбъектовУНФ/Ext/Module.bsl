
//+++ Оставить

//Процедура ЗаполнитьПоляПередЗаписью(ДокументОбъект) Экспорт
//	
//	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
//	"ЗаполнениеОбъектовУНФ.ЗаполнитьПоляПередЗаписью",
//	"ДокументОбъект",
//	ДокументОбъект,
//	Новый ОписаниеТипов("ДокументОбъект.ПриходнаяНакладная, ДокументОбъект.РасходнаяНакладная"));
//	
//	ЗаполнитьДоговорПоУмолчанию(ДокументОбъект);
//	ЗаполнитьЗаказВТабличныхЧастях(ДокументОбъект);
//	ЗаполнитьСкладВЗависимостиОтПоложения(ДокументОбъект);
//	
//КонецПроцедуры

//Процедура ЗаполнитьДоговорПоУмолчанию(ДокументОбъект)
//	
//	Если ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ДокументОбъект.Контрагент.ВестиРасчетыПоДоговорам Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДокументОбъект.Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(ДокументОбъект.Контрагент);
//	
//КонецПроцедуры

//Процедура ЗаполнитьЗаказВТабличныхЧастях(ДокументОбъект)
//	
//	Если ПоложениеЗаказа(ДокументОбъект) = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
//		Возврат
//	КонецЕсли;
//	
//	Для Каждого ТекСтрокаЗапасы Из ДокументОбъект.Запасы Цикл
//		ТекСтрокаЗапасы.Заказ = ЗаказИзШапки(ДокументОбъект);
//	КонецЦикла;
//	
//	Если ДокументОбъект.Контрагент.ВестиРасчетыПоЗаказам
//		И ТребуетсяЗаполнятьЗаказВ_ТЧ_Предоплата(ДокументОбъект) Тогда
//		
//		Для Каждого ТекСтрокаПредоплата Из ДокументОбъект.Предоплата Цикл
//			ТекСтрокаПредоплата.Заказ = ЗаказИзШапки(ДокументОбъект);
//		КонецЦикла;
//		
//	КонецЕсли;

//КонецПроцедуры

//Процедура ЗаполнитьСкладВЗависимостиОтПоложения(ДокументОбъект)
//	
//	Если ДокументОбъект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
//		СтруктурнаяЕдиницаИЯчейка = СтруктурнаяЕдиницаИЯчейкаДляШапки(ДокументОбъект);
//		ДокументОбъект.СтруктурнаяЕдиница = СтруктурнаяЕдиницаИЯчейка.СтруктурнаяЕдиница;
//		ДокументОбъект.Ячейка = СтруктурнаяЕдиницаИЯчейка.Ячейка;
//	Иначе
//		Для Каждого ТекСтрокаЗапасы Из ДокументОбъект.Запасы Цикл
//			ТекСтрокаЗапасы.СтруктурнаяЕдиница = ДокументОбъект.СтруктурнаяЕдиница;
//			ТекСтрокаЗапасы.Ячейка = ДокументОбъект.Ячейка;
//		КонецЦикла;
//	КонецЕсли;
//	
//КонецПроцедуры

Функция ПолучитьКалендарьСотрудника(Сотрудник = Неопределено) Экспорт
	
	Пользователь = Неопределено;
	
	//+++
	//Если Сотрудник <> Неопределено Тогда
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//		|	СотрудникиПользователя.Пользователь КАК Пользователь
	//		|ИЗ
	//		|	РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
	//		|ГДЕ
	//		|	СотрудникиПользователя.Сотрудник = &Сотрудник";
	//	
	//	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	Если Не РезультатЗапроса.Пустой() Тогда
	//		
	//		Выборка = РезультатЗапроса.Выбрать();
	//		Выборка.Следующий();
	//		Пользователь = Выборка.Пользователь;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//---
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
	Календарь = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойКалендарь");
	
	Возврат Календарь;
	
КонецФункции

//---

//#Область ПрограммныйИнтерфейс

//// Процедура предназначена для заполнения документов.
//// Применяются следующие принципы:
//// - всё что заполнено обработчиками в модуле объекта считается первичным и наиболее приоритетным.
//// - остальное заполнение выполняется по цепочке, через структуру ДанныеЗаполнения.
//// - каждая последующая процедура в цепочке дополняет структуру ДанныеЗаполнения,
//// при этом, если указанный реквизит уже заполнен в ДокументОбъект, то в структуру
//// ДанныеЗаполнения он не попадает.
//// - по окончании выполнения цепочки ДокументОбъект заполняется данными из ДанныеЗаполнения.
////
//// Параметры:
////  ДокументОбъект		 - ДокументОбъект - заполняемый документ.
////  ДанныеЗаполнения	 - Структура, ЛюбаяСсылка - значение, на основании
////                       которого выполняется заполнение документа.
////  СтратегияЗаполнения	 - Строка - имя процедуры обработчика заполнения
////                       в модуле объекта;
////                       - Соответствие - соответствие типов параметра
////                       ДанныеЗаполнения и имён обработчиков заполнения
////                       в модуле объекта.
////  ИсключаяСвойства	 - Строка - список имен свойств, разделенный запятыми,
////                       которые необходимо исключить из заполнения.
////
//Процедура ЗаполнитьДокумент(ДокументОбъект, Знач ДанныеЗаполнения, Знач СтратегияЗаполнения = Неопределено, ИсключаяСвойства = "") Экспорт
//	
//	Если ПропуститьЗаполнение(ДанныеЗаполнения) Тогда
//		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеЗаполнения);
//		Возврат;
//	КонецЕсли;
//	
//	Если ЭтоЗаполнениеПоШаблону(ДанныеЗаполнения) Тогда
//		ОбработатьЗаполнениеПоШаблону(ДанныеЗаполнения, ДокументОбъект);
//	Иначе
//		ВызватьОбработчикПередЗаполнением(СтратегияЗаполнения, ДокументОбъект, ДанныеЗаполнения);
//	КонецЕсли;
//	
//	ПреобразоватьДанныеЗаполненияСсылочногоТипаВСтруктуру(ДанныеЗаполнения, ДокументОбъект);
//	ПреобразоватьЗначенияДанныхЗаполненияТипаМассивВСсылку(ДанныеЗаполнения);
//	ДополнитьПериодРегистрации(ДанныеЗаполнения, ДокументОбъект);
//	ДополнитьЗначениямиИзНастроек(ДанныеЗаполнения, ДокументОбъект);
//	РазыменоватьПоляСобытия(ДанныеЗаполнения);
//	ДополнитьПредопределеннымиЭлементамиСправочников(ДанныеЗаполнения, ДокументОбъект);
//	РазыменоватьПоля(ДанныеЗаполнения, ДокументОбъект);
//	ДополнитьСуммаВключаетНДС(ДанныеЗаполнения, ДокументОбъект);
//	
//	ДанныеЗаполнения.Вставить("Автор", Пользователи.ТекущийПользователь());
//	
//	УдалитьНезаполненныеИсключаемыеСвойства(ДанныеЗаполнения, ИсключаяСвойства);
//	ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеЗаполнения,, ИсключаяСвойства);
//	
//	ПодписьДокументовУНФ.ОбработкаЗаполненияПодписей(ДокументОбъект);
//	
//	ЗаполнитьТабличныеЧасти(ДокументОбъект, ДанныеЗаполнения);
//	
//КонецПроцедуры

//Процедура УдалитьНезаполненныеИсключаемыеСвойства(ДанныеЗаполнения, ИсключаяСвойства)
//	
//	Если ИсключаяСвойства="" Тогда
//		Возврат;
//	КонецЕсли;
//	
//	//Преобразуем строку ИсключаяСвойства в структуру
//	СтруктураИсключаяСвойства = ОбщегоНазначенияПереопределяемый.СтрокаВСтруктуру(ИсключаяСвойства, ",");
//	
//	//Удалим из структуры ИсключаяСвойства те свойства, которых нет в ДанныеЗаполнения
//	Для каждого ИмяСвойства Из СтруктураИсключаяСвойства Цикл
//		Если НЕ ДанныеЗаполнения.Свойство(ИмяСвойства.Ключ) Тогда
//			СтруктураИсключаяСвойства.Удалить(ИмяСвойства.Ключ);
//	    КонецЕсли;
//	КонецЦикла;
//	
//	//Преобразуем структуру ИсключаяСвойства обратно в строку с запятыми
//	ИсключаяСвойства = ОбщегоНазначенияПереопределяемый.СтруктураВСтроку(СтруктураИсключаяСвойства, ",");
//	
//КонецПроцедуры

//Процедура ДополнитьВалюты(ЗначенияИзНастроек, ДокументОбъект) Экспорт
//	
//	ВалютаПоУмолчанию = Константы.НациональнаяВалюта.Получить();
//	
//	Для Каждого ИмяРеквизита Из ИменаРеквизитов(ВалютаПоУмолчанию, ДокументОбъект) Цикл
//		
//		Если ЗначенияИзНастроек.Свойство(ИмяРеквизита) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизита]) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ЗначенияИзНастроек.Вставить(ИмяРеквизита, ВалютаПоУмолчанию);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//// Выполняет подстановку значений из заполненных элементов справочников,
//// например, из значения Организация заполняются БанковскийСчет, Касса,
//// Ответственные лица и НалогообложениеНДС, из значения Контрагент
//// заполняется Договор, а из Договора - ВалютаРасчетов, ВидЦен,
//// ВидЦенКонтрагента и ВидСкидкиНаценки.
////
//// Параметры:
////  ДанныеЗаполнения - Структура - структура, которая будет дополнена разыменованными значениями.
////  ДокументОбъект	 - ДокументОбъект - заполняемый документ.
////
//Процедура РазыменоватьПоля(ДанныеЗаполнения, ДокументОбъект) Экспорт
//	
//	РазыменованныеПоля = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеЗаполнения);
//	
//	УдалитьНезаполненныеЗначения(РазыменованныеПоля);
//	
//	РазыменоватьПоляОрганизации(РазыменованныеПоля, ДокументОбъект);
//	РазыменоватьПоляКонтрагента(РазыменованныеПоля);
//	РазыменоватьПоляДоговора(РазыменованныеПоля, ДокументОбъект);
//	ПроверитьВалюту(ДанныеЗаполнения, РазыменованныеПоля);
//	РазыменоватьПоляДисконтнойКарты(РазыменованныеПоля);
//	РазыменоватьПоляСтруктурнойЕдиницы(РазыменованныеПоля, ДокументОбъект);
//	РазыменоватьПоляВидаЦен(РазыменованныеПоля);
//	РазыменоватьПоляВалюты(РазыменованныеПоля);
//	
//	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
//	ДанныеЗаполнения,
//	РазыменованныеПоля, 
//	Не ЭтоЗаполнениеПоШаблону(ДанныеЗаполнения));
//	
//КонецПроцедуры

//Процедура ПроверитьВалюту(ДанныеЗаполнения, РазыменованныеПоля)
//	
//	Если Не РазыменованныеПоля.Свойство("ВалютаДокумента") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ДанныеЗаполнения.Свойство("ВалютаДокумента")
//		И ДанныеЗаполнения.ВалютаДокумента = РазыменованныеПоля.ВалютаДокумента Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДанныеЗаполнения.Удалить("ВалютаДокумента");
//	
//	Если ДанныеЗаполнения.Свойство("БанковскийСчет") Тогда
//		ДанныеЗаполнения.Удалить("БанковскийСчет");
//	КонецЕсли;
//	
//	Если РазыменованныеПоля.Свойство("БанковскийСчет") Тогда
//		РазыменованныеПоля.Удалить("БанковскийСчет");
//	КонецЕсли;
//	
//КонецПроцедуры

//Функция ОтображаемыеРеквизиты(Знач Форма) Экспорт
//	
//	Результат = Новый Массив;
//	
//	Для Каждого ТекЭлемент Из Форма.Элементы Цикл
//		
//		Если ТипЗнч(ТекЭлемент) <> Тип("ПолеФормы") Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если Не ТекЭлемент.Видимость Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если Не СтрНачинаетсяС(ТекЭлемент.ПутьКДанным, "Объект.") Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Результат.Добавить(СтрЗаменить(ТекЭлемент.ПутьКДанным, "Объект.", ""));
//		
//	КонецЦикла;
//	
//	Возврат Результат;
//	
//КонецФункции

//// Функция возвращает признак заполнения по шаблону.
////
//// Параметры:
////  ДанныеЗаполнения - Структура - данные заполнения.
//// 
//// Возвращаемое значение:
////  Булево - Истина если данные заполнения содержат ссылку на шаблон.
////
//Функция ЭтоЗаполнениеПоШаблону(ДанныеЗаполнения) Экспорт
//	
//	Перем ШаблонДокумента;
//	
//	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если Не ДанныеЗаполнения.Свойство("ШаблонДокумента", ШаблонДокумента) Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если ТипЗнч(ШаблонДокумента) <> Тип("СправочникСсылка.ШаблоныДокументов") Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(ШаблонДокумента) Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Возврат Истина;
//	
//КонецФункции


//// Возвращает наиболее часто встречающиеся в табличной части "Запасы" значения полей
//// "СтруктурнаяЕдиница" и "Ячейка". Если значения встречаются с одинаковой частотой,
//// то возвращаются значения из первой строки табличной части "Запасы".
//// 
//// Возвращаемое значение:
////  Структура - значения "СтруктурнаяЕдиница" и "Ячейка" для заполнения в шапке документа.
////
//Функция СтруктурнаяЕдиницаИЯчейкаДляШапки(ДокументОбъект)
//	
//	Результат = Новый Структура;
//	Результат.Вставить("СтруктурнаяЕдиница", ДокументОбъект.СтруктурнаяЕдиница);
//	Результат.Вставить("Ячейка", ДокументОбъект.Ячейка);
//	
//	Если ДокументОбъект.Запасы.Количество() = 0 Тогда
//		Возврат Результат;
//	КонецЕсли;
//	
//	Результат.СтруктурнаяЕдиница = ДокументОбъект.Запасы[0].СтруктурнаяЕдиница;
//	Результат.Ячейка = ДокументОбъект.Запасы[0].Ячейка;
//	
//	Если ДокументОбъект.Запасы.Количество() = 1 Тогда
//		Возврат Результат;
//	КонецЕсли;
//	
//	ТаблицаСтруктурныеЕдиницыИЯчейки = ДокументОбъект.Запасы.Выгрузить(, "СтруктурнаяЕдиница, Ячейка");
//	ТаблицаСтруктурныеЕдиницыИЯчейки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
//	Для Каждого ТекСтрока Из ТаблицаСтруктурныеЕдиницыИЯчейки Цикл
//		ТекСтрока.Количество = 1;
//	КонецЦикла;
//	ТаблицаСтруктурныеЕдиницыИЯчейки.Свернуть("СтруктурнаяЕдиница, Ячейка", "Количество");
//	
//	Если ТаблицаСтруктурныеЕдиницыИЯчейки.Количество() < 2 Тогда
//		Возврат Результат;
//	КонецЕсли;
//	
//	ТаблицаСтруктурныеЕдиницыИЯчейки.Сортировать("Количество Убыв");
//	
//	Если ТаблицаСтруктурныеЕдиницыИЯчейки[0].Количество = ТаблицаСтруктурныеЕдиницыИЯчейки[1].Количество Тогда
//		Возврат Результат;
//	КонецЕсли;
//	
//	Результат.СтруктурнаяЕдиница = ТаблицаСтруктурныеЕдиницыИЯчейки[0].СтруктурнаяЕдиница;
//	Результат.Ячейка = ТаблицаСтруктурныеЕдиницыИЯчейки[0].Ячейка;
//	
//	Возврат Результат;
//	
//КонецФункции

//// Заполняет склады и ячейки в табличной части документа "Запасы".
////
//// Параметры:
////  ДокументОбъект	 - ДокументОбъект.ПриходнаяНакладная, ДокументОбъект.РасходнаяНакладная.
////
//Процедура ЗаполнитьСкладВТЧЗапасы(ДокументОбъект) Экспорт
//	
//	Если ДокументОбъект.Запасы.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	СкладИЯчейка = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
//	ДокументОбъект.Запасы.Выгрузить(,"Номенклатура").ВыгрузитьКолонку(0),
//	"Склад,Ячейка");
//	
//	Для Каждого ТекСтрокаЗапасы Из ДокументОбъект.Запасы Цикл
//		
//		Если Не ЗначениеЗаполнено(ТекСтрокаЗапасы.Номенклатура) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если Не ЗначениеЗаполнено(СкладИЯчейка[ТекСтрокаЗапасы.Номенклатура]) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если Не ЗначениеЗаполнено(СкладИЯчейка[ТекСтрокаЗапасы.Номенклатура].Склад) Тогда
//			ТекСтрокаЗапасы.СтруктурнаяЕдиница = ДокументОбъект.СтруктурнаяЕдиница;
//			Если ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") И ТекСтрокаЗапасы.Свойство("Ячейка") Тогда
//				ТекСтрокаЗапасы.Ячейка = ДокументОбъект.Ячейка;
//			КонецЕсли; 
//			Продолжить;
//		КонецЕсли;
//		
//		ТекСтрокаЗапасы.СтруктурнаяЕдиница = СкладИЯчейка[ТекСтрокаЗапасы.Номенклатура].Склад;
//		
//		Если ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") И ТекСтрокаЗапасы.Свойство("Ячейка") Тогда
//			ТекСтрокаЗапасы.Ячейка = СкладИЯчейка[ТекСтрокаЗапасы.Номенклатура].Ячейка;
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//#КонецОбласти

//#Область ОбработчикиСобытий

//Процедура ЗаполнитьАвтораПриКопировании(Источник, ОбъектКопирования) Экспорт
//	
//	ДанныеЗаполнения = Новый Структура;
//	ДанныеЗаполнения.Вставить("Автор", Пользователи.ТекущийПользователь());
//	
//	ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения);
//	
//КонецПроцедуры

//#КонецОбласти

//#Область СлужебныеПроцедурыИФункции

//Функция СовпадаетТипОрдерныйСкладСПараметромВыбора(ЭтоОрдерныйСклад, ПараметрыВыбора)
//	
//	Для каждого ПараметрВыбора Из ПараметрыВыбора Цикл
//		
//		Если ПараметрВыбора.Имя = "Отбор.ОрдерныйСклад" Тогда
//			
//			Возврат (ЭтоОрдерныйСклад = ПараметрВыбора.Значение);
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Возврат Истина;
//	
//КонецФункции

//Функция ПропуститьЗаполнение(ДанныеЗаполнения)
//	
//	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если Не ДанныеЗаполнения.Свойство("ПропуститьЗаполнение") Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если ТипЗнч(ДанныеЗаполнения.ПропуститьЗаполнение) = Тип("Булево") Тогда
//		Возврат ДанныеЗаполнения.ПропуститьЗаполнение;
//	КонецЕсли;
//	
//	Возврат Ложь;
//	
//КонецФункции

//Процедура ОбработатьЗаполнениеПоШаблону(ДанныеЗаполнения, ДокументОбъект)
//	
//	Для Каждого ТекСтрока Из ДанныеЗаполнения.ШаблонДокумента.ЗначенияРеквизитов Цикл
//		
//		Если Не ТекСтрока.Использование Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ДанныеЗаполнения.Вставить(ТекСтрока.Реквизит, ТекСтрока.Значение);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//// Выбирает обработчик заполнения на основе переданного
//// параметра СтратегияЗаполнения, затем вызывает
//// этот обработчик из модуля объекта ДокументОбъект.
////
//// Параметры:
////  СтратегияЗаполнения	 - Строка - имя процедуры обработчика заполнения
////                       в модуле объекта;
////                       - Соответствие - соответствие типов параметра
////                       ДанныеЗаполнения и имён обработчиков заполнения
////                       в модуле объекта.
////  ДокументОбъект		 - ДокументОбъект - заполняемый документ.
////  ДанныеЗаполнения	 - Структура, ЛюбаяСсылка - значение, на основании
////                       которого выполняется заполнение документа.
////
//Процедура ВызватьОбработчикПередЗаполнением(СтратегияЗаполнения, ДокументОбъект, ДанныеЗаполнения)
//	
//	Если Не ЗначениеЗаполнено(СтратегияЗаполнения) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ТипЗнч(СтратегияЗаполнения) = Тип("Строка") Тогда
//		ОбщегоНазначения.ВыполнитьМетодОбъекта(
//		ДокументОбъект,
//		СтратегияЗаполнения,
//		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЗаполнения));
//		Возврат;
//	КонецЕсли;
//	
//	Если ТипЗнч(СтратегияЗаполнения) <> Тип("Соответствие") Тогда
//		ВызватьИсключение НСтр("ru = 'Некорректный тип параметра ""ОбработчикЗаполнения"": ожидается Строка или Соответствие.'");
//	КонецЕсли;
//	
//	ИмяОбработчикаПередЗаполнением = СтратегияЗаполнения[ТипЗнч(ДанныеЗаполнения)];
//	
//	Если Не ЗначениеЗаполнено(ИмяОбработчикаПередЗаполнением) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ОбщегоНазначения.ВыполнитьМетодОбъекта(
//	ДокументОбъект,
//	ИмяОбработчикаПередЗаполнением,
//	ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЗаполнения));
//	
//КонецПроцедуры

//// В случае когда в ДанныеЗаполнения передано значение ссылочного типа,
//// преобразует ДанныеЗаполнения в Структуру.
//// Если заполняемый документ ещё не содержит значения, переданного
//// в параметре ДанныеЗаполнения, указанное значение будет помещено
//// в структуру ДанныеЗаполнения.
////
//// Параметры:
////  ДанныеЗаполнения	 - Произвольный - значение, на основании котрого
////                       выполняется заполнение документа.
////  ДокументОбъект		 - ДокументОбъект - заполняемый документ.
////
//Процедура ПреобразоватьДанныеЗаполненияСсылочногоТипаВСтруктуру(ДанныеЗаполнения, ДокументОбъект)
//	
//	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
//		ДанныеЗаполнения = Новый Структура;
//		Возврат;
//	КонецЕсли;
//	
//	Если Не ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеЗаполнения) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПараметрОснование = ДанныеЗаполнения;
//	ДанныеЗаполнения = Новый Структура;
//	
//	Для Каждого ИмяРеквизита Из ИменаРеквизитов(ПараметрОснование, ДокументОбъект) Цикл
//		
//		Если ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизита]) Тогда
//			
//			Продолжить;
//			
//		КонецЕсли;
//		
//		ДанныеЗаполнения.Вставить(ИмяРеквизита, ПараметрОснование);
//		
//	КонецЦикла;
//	
//	ДополнитьИзОснования(ДанныеЗаполнения, ПараметрОснование, "ВидЦен");
//	ДополнитьИзОснования(ДанныеЗаполнения, ПараметрОснование, "СуммаВключаетНДС");
//	ДополнитьИзОснования(ДанныеЗаполнения, ПараметрОснование, "ВидСкидкиНаценки");
//	ДополнитьИзОснования(ДанныеЗаполнения, ПараметрОснование, "ИсточникПривлечения");
//	
//КонецПроцедуры

//Процедура ДополнитьСуммаВключаетНДС(ДанныеЗаполнения, ДокументОбъект)
//	
//	Если ДанныеЗаполнения.Свойство("СуммаВключаетНДС") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаВключаетНДС", ДокументОбъект.Метаданные()) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДанныеЗаполнения.Вставить("СуммаВключаетНДС", Истина);
//	
//КонецПроцедуры

//// В целях заполнения документов значениями из отбора преобразует все значения типа Массив
//// в структуре ДанныеЗаполнения в одиночные значения, устанавливая в соответствющий ключ 
//// последний элемент массива.
//// 
//// Параметры:
////  ДанныеЗаполнения - Структура.
////
//Процедура ПреобразоватьЗначенияДанныхЗаполненияТипаМассивВСсылку(ДанныеЗаполнения)
//	
//	Для Каждого КлючИЗначение Из ДанныеЗаполнения Цикл
//		
//		Если ТипЗнч(КлючИЗначение.Значение) <> Тип("Массив") Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ПоследнийЭлементМассива = КлючИЗначение.Значение[КлючИЗначение.Значение.ВГраница()];
//		
//		Если ТипЗнч(ПоследнийЭлементМассива) = Тип("Структура") Тогда
//			// Здесь считаем, что это заполнение табличной части, пропускаем преобразование.
//			Продолжить;
//		КонецЕсли;
//		
//		ДанныеЗаполнения.Вставить(КлючИЗначение.Ключ, ПоследнийЭлементМассива);
//		
//		Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ПоследнийЭлементМассива) Тогда
//			ДополнитьИзОснования(ДанныеЗаполнения, ПоследнийЭлементМассива, "СуммаВключаетНДС");
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ДополнитьИзОснования(ДанныеЗаполнения, ПараметрОснование, ИмяРеквизита)
//	
//	Если ДанныеЗаполнения.Свойство(ИмяРеквизита) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ОбъектМетаданных = ПараметрОснование.Метаданные();
//	
//	Если Не ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, ОбъектМетаданных) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДанныеЗаполнения.Вставить(
//	ИмяРеквизита,
//	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
//	ПараметрОснование,
//	ИмяРеквизита,
//	Истина));
//	
//КонецПроцедуры

//Процедура ДополнитьПериодРегистрации(ДанныеЗаполнения, ДокументОбъект)
//	
//	Если ДанныеЗаполнения.Свойство("ПериодРегистрации") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит("ПериодРегистрации", ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДанныеЗаполнения.Вставить("ПериодРегистрации", НачалоМесяца(ТекущаяДатаСеанса()));
//	
//КонецПроцедуры

//// Выполняет подстановку значений из настроек.
////
//// Параметры:
////  ДанныеЗаполнения - Структура - структура, которая будет дополнена значениями из настроек.
////  ДокументОбъект	 - ДокументОбъект - заполняемый документ.
////
//Процедура ДополнитьЗначениямиИзНастроек(ДанныеЗаполнения, ДокументОбъект)
//	
//	ЗначенияИзНастроек = Новый Структура;
//	
//	ДополнитьВалюты(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьОрганизация(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьПодразделение(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьСтруктурнуюЕдиницу(ЗначенияИзНастроек, ДокументОбъект, "ОсновноеПодразделение");
//	ДополнитьСтруктурнуюЕдиницу(ЗначенияИзНастроек, ДокументОбъект, "ОсновнойСклад");
//	ДополнитьОсновнойОтветственный(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьВидЦен(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьОснованиеПечати(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьПоложениеОтветственный(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьПоложениеДатыПоступленияВЗаказеПоставщику(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьНастройкиЗаказНаряда(ЗначенияИзНастроек, ДокументОбъект, ДанныеЗаполнения);
//	ДополнитьПоложениеВидаРаботВЗаданииНаРаботу(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьПоложениеДатыОтгрузкиВЗаказеПокупателя(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьПоложениеЗаказаПокупателяВДокументахОтгрузки(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьПоложениеЗаказаПокупателяВДокументахПоступления(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьПоложениеЗаказаПоставщикуВДокументахПоступления(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьПоложениеЗаказаПокупателяВПеремещенииЗапасов(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьПоложениеСкладаВДокументахПоступления(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьПоложениеСкладаВДокументахОтгрузки(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьПоложениеСкладаВДокументахПроизводства(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьПоложениеЗаказаПокупателяВДокументахПроизводства(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьПоложениеИсполнителяВСдельномНаряде(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьПоложениеСтруктурнойЕдиницыВСдельномНаряде(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьПоложениеСтруктурнойЕдиницыВЗаказеНаПроизводство(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьИспользоватьРесурсыПредприятияВЗаказеНаПроизводство(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьНоменклатуройДоставки(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьСпособомРаспределенияМатериалов(ЗначенияИзНастроек, ДокументОбъект);
//	ДополнитьПоложениеЭквайринговогоТерминалаВБанковскихДокументах(ЗначенияИзНастроек, ДокументОбъект);
//	
//	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеЗаполнения, ЗначенияИзНастроек, Ложь);
//	
//КонецПроцедуры

//#Область ДополнитьЗначениямиИзНастроек

//Процедура ДополнитьОрганизация(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ОтсутствуетНезаполненныйРеквизит("Организация", ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ОрганизацияПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ОсновнаяОрганизация");
//	
//	Если ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
//		ЗначенияИзНастроек.Вставить("Организация", ОрганизацияПоУмолчанию);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьПодразделение(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ОтсутствуетНезаполненныйРеквизит("Подразделение", ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПодразделениеПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ОсновноеПодразделение");
//	
//	Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
//		ЗначенияИзНастроек.Вставить("Подразделение", ПодразделениеПоУмолчанию);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьСтруктурнуюЕдиницу(ЗначенияИзНастроек, ДокументОбъект, ИмяНастройки)
//	
//	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	СтруктурнаяЕдиница = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	ИмяНастройки);
//	
//	Если Не ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ТипСтруктурнойЕдиницы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "ТипСтруктурнойЕдиницы", Истина);
//	ЭтоОрдерныйСклад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "ОрдерныйСклад", Истина);
//	
//	Для Каждого Реквизит Из ДокументОбъект.Ссылка.Метаданные().Реквизиты Цикл
//		
//		Если ЗначенияИзНастроек.Свойство(Реквизит.Имя) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если Не Реквизит.Тип.СодержитТип(ТипЗнч(СтруктурнаяЕдиница)) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если Не ТипСтруктурнойЕдиницыВПараметрыВыбора(ТипСтруктурнойЕдиницы, Реквизит.ПараметрыВыбора) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если Не СовпадаетТипОрдерныйСкладСПараметромВыбора(ЭтоОрдерныйСклад, Реквизит.ПараметрыВыбора) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(ДокументОбъект[Реквизит.Имя]) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ЗначенияИзНастроек.Вставить(Реквизит.Имя, СтруктурнаяЕдиница);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ДополнитьОсновнойОтветственный(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ОтсутствуетНезаполненныйРеквизит("Ответственный", ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ОсновнойОтветственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ОсновнойОтветственный");
//	
//	Если ЗначениеЗаполнено(ОсновнойОтветственный) Тогда
//		ЗначенияИзНастроек.Вставить("Ответственный", ОсновнойОтветственный);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьВидЦен(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ЗначенияИзНастроек.Свойство("ВидЦен")
//		И ЗначениеЗаполнено(ЗначенияИзНастроек.ВидЦен) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит("ВидЦен", ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ВидЦенПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ОсновнойВидЦенПродажи");
//	
//	Если ЗначениеЗаполнено(ВидЦенПоУмолчанию) Тогда
//		ЗначенияИзНастроек.Вставить("ВидЦен", ВидЦенПоУмолчанию);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьОснованиеПечати(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.РасходнаяНакладная")
//		И ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.ОтчетОПереработке") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ДокументОбъект.ОснованиеПечати) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
//		ЗначенияИзНастроек.Вставить(
//		"ОснованиеПечати",
//		СтрШаблон(
//		НСтр("ru = 'Договор: %1'"),
//		ДокументОбъект.Договор));
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьПоложениеОтветственный(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит("ПоложениеОтветственный", ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПоложениеОтветственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ПоложениеОтветственный");
//	
//	Если ЗначениеЗаполнено(ПоложениеОтветственный) Тогда
//		ЗначенияИзНастроек.Вставить("ПоложениеОтветственный", ПоложениеОтветственный);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьПоложениеДатыПоступленияВЗаказеПоставщику(ЗначенияИзНастроек, Документобъект)
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПоложениеДатыПоступленияПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ПоложениеДатыПоступленияВЗаказеПоставщику");
//	
//	Если ЗначениеЗаполнено(ПоложениеДатыПоступленияПоУмолчанию) Тогда
//		ЗначенияИзНастроек.Вставить("ПоложениеДатыПоступления", ПоложениеДатыПоступленияПоУмолчанию);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьНастройкиЗаказНаряда(ЗначенияИзНастроек, ДокументОбъект, ДанныеЗаполнения)
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ВидОперации = ДокументОбъект.ВидОперации;
//	
//	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
//		ДанныеЗаполнения.Свойство("ВидОперации", ВидОперации);
//	КонецЕсли;
//	
//	Если ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
//		Возврат;
//	КонецЕсли;
//	
//	РеквизитыЗаказНаряда = Новый Соответствие;
//	РеквизитыЗаказНаряда["ПоложениеВидаРабот"] = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
//	РеквизитыЗаказНаряда["ИспользоватьТовары"] = Истина;
//	РеквизитыЗаказНаряда["ИспользоватьМатериалыЗаказчика"] = Ложь;
//	РеквизитыЗаказНаряда["ИспользоватьМатериалы"]= Ложь;
//	РеквизитыЗаказНаряда["ИспользоватьЗарплатаИсполнителей"]= Ложь;
//	
//	Для Каждого КлючИЗначение Из РеквизитыЗаказНаряда Цикл
//		
//		Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта(
//			КлючИЗначение.Ключ,
//			ДокументОбъект.Метаданные()) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//		Пользователи.ТекущийПользователь(),
//		СтрШаблон(
//		"%1ВЗаказНаряде",
//		КлючИЗначение.Ключ),
//		КлючИЗначение.Значение);
//		
//		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
//			ЗначенияИзНастроек.Вставить(КлючИЗначение.Ключ, ЗначениеНастройки);
//		Иначе
//			ЗначенияИзНастроек.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ДополнитьПоложениеВидаРаботВЗаданииНаРаботу(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЗаданиеНаРаботу") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит("ПоложениеВидаРабот", ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПоложениеВидаРаботПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ПоложениеВидаРаботВЗаданииНаРаботу");
//	
//	Если ЗначениеЗаполнено(ПоложениеВидаРаботПоУмолчанию) Тогда
//		ЗначенияИзНастроек.Вставить("ПоложениеВидаРабот", ПоложениеВидаРаботПоУмолчанию);
//	Иначе
//		ЗначенияИзНастроек.Вставить("ПоложениеВидаРабот", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьПоложениеДатыОтгрузкиВЗаказеПокупателя(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит("ПоложениеДатыОтгрузки", ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПоложениеДатыОтгрузкиПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ПоложениеДатыОтгрузкиВЗаказеПокупателя");
//	
//	Если ЗначениеЗаполнено(ПоложениеДатыОтгрузкиПоУмолчанию) Тогда
//		ЗначенияИзНастроек.Вставить("ПоложениеДатыОтгрузки", ПоложениеДатыОтгрузкиПоУмолчанию);
//	Иначе
//		ЗначенияИзНастроек.Вставить("ПоложениеДатыОтгрузки", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьПоложениеЗаказаПокупателяВДокументахОтгрузки(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.АктВыполненныхРабот")
//		И ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЧекККМ")
//		И ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЧекККМВозврат")
//		И ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.РасходнаяНакладная") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит(
//		"ПоложениеЗаказаПокупателя",
//		ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПоложениеЗаказаПокупателяВДокументахОтгрузки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ПоложениеЗаказаПокупателяВДокументахОтгрузки");
//	
//	Если ЗначениеЗаполнено(ПоложениеЗаказаПокупателяВДокументахОтгрузки) Тогда
//		ЗначенияИзНастроек.Вставить("ПоложениеЗаказаПокупателя", ПоложениеЗаказаПокупателяВДокументахОтгрузки);
//	Иначе
//		ЗначенияИзНастроек.Вставить("ПоложениеЗаказаПокупателя", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьПоложениеЗаказаПоставщикуВДокументахПоступления(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит(
//		"ПоложениеЗаказаПоставщику",
//		ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПоложениеЗаказаПоставщикуВДокументахПоступления = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ПоложениеЗаказаПоставщикуВДокументахПоступления");
//	
//	Если ЗначениеЗаполнено(ПоложениеЗаказаПоставщикуВДокументахПоступления) Тогда
//		ЗначенияИзНастроек.Вставить("ПоложениеЗаказаПоставщику", ПоложениеЗаказаПоставщикуВДокументахПоступления);
//	Иначе
//		ЗначенияИзНастроек.Вставить("ПоложениеЗаказаПоставщику", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьПоложениеЗаказаПокупателяВПеремещенииЗапасов(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ПеремещениеЗапасов") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит(
//		"ПоложениеЗаказаПокупателя",
//		ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПоложениеЗаказаПокупателяВПеремещенииЗапасов = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ПоложениеЗаказаПокупателяВПеремещенииЗапасов");
//	
//	Если ЗначениеЗаполнено(ПоложениеЗаказаПокупателяВПеремещенииЗапасов) Тогда
//		ЗначенияИзНастроек.Вставить("ПоложениеЗаказаПокупателя", ПоложениеЗаказаПокупателяВПеремещенииЗапасов);
//	Иначе
//		ЗначенияИзНастроек.Вставить("ПоложениеЗаказаПокупателя", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьИспользоватьРесурсыПредприятияВЗаказеНаПроизводство(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит(
//		"ИспользоватьРесурсыПредприятия",
//		ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ИспользоватьРесурсыПредприятияВЗаказеНаПроизводство = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ИспользоватьРесурсыПредприятияВЗаказеНаПроизводство");
//	
//	Если ЗначениеЗаполнено(ИспользоватьРесурсыПредприятияВЗаказеНаПроизводство) Тогда
//		ЗначенияИзНастроек.Вставить("ИспользоватьРесурсыПредприятия", ИспользоватьРесурсыПредприятияВЗаказеНаПроизводство);
//	Иначе
//		ЗначенияИзНастроек.Вставить("ИспользоватьРесурсыПредприятия", Истина);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьНоменклатуройДоставки(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.ЗаказПокупателя") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит(
//		"НоменклатураДоставки",
//		ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	НоменклатураДоставки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"НоменклатураДоставки");
//	
//	Если Не ЗначениеЗаполнено(НоменклатураДоставки) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ЗначенияИзНастроек.Вставить("НоменклатураДоставки", НоменклатураДоставки);
//	
//	ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураДоставки, "ВидСтавкиНДС", Истина);
//	Если ЗначениеЗаполнено(ВидСтавкиНДС) Тогда
//		ЗначенияИзНастроек.Вставить("СтавкаНДСДоставки", Справочники.СтавкиНДС.СтавкаНДС(ВидСтавкиНДС));
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьПоложениеСкладаВДокументахПоступления(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит(
//		"ПоложениеСклада",
//		ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПоложениеСкладаВДокументахПоступления = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ПоложениеСкладаВДокументахПоступления");
//	
//	Если ЗначениеЗаполнено(ПоложениеСкладаВДокументахПоступления) Тогда
//		ЗначенияИзНастроек.Вставить("ПоложениеСклада", ПоложениеСкладаВДокументахПоступления);
//	Иначе
//		ЗначенияИзНастроек.Вставить("ПоложениеСклада", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьПоложениеСкладаВДокументахОтгрузки(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.РасходнаяНакладная")
//		И ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит(
//		"ПоложениеСклада",
//		ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПоложениеСкладаВДокументахОтгрузки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ПоложениеСкладаВДокументахОтгрузки");
//	
//	Если ЗначениеЗаполнено(ПоложениеСкладаВДокументахОтгрузки) Тогда
//		ЗначенияИзНастроек.Вставить("ПоложениеСклада", ПоложениеСкладаВДокументахОтгрузки);
//	Иначе
//		ЗначенияИзНастроек.Вставить("ПоложениеСклада", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьПоложениеИсполнителяВСдельномНаряде(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.СдельныйНаряд") И ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит(
//		"ПоложениеИсполнителя",
//		ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПоложениеИсполнителяВСдельномНаряде = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ПоложениеИсполнителяВСдельномНаряде");
//	
//	Если ЗначениеЗаполнено(ПоложениеИсполнителяВСдельномНаряде) Тогда
//		ЗначенияИзНастроек.Вставить("ПоложениеИсполнителя", ПоложениеИсполнителяВСдельномНаряде);
//	Иначе
//		ЗначенияИзНастроек.Вставить("ПоложениеИсполнителя", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьПоложениеСтруктурнойЕдиницыВСдельномНаряде(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.СдельныйНаряд") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит(
//		"ПоложениеСтруктурнойЕдиницы",
//		ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПоложениеСтруктурнойЕдиницыВСдельномНаряде = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ПоложениеСтруктурнойЕдиницыВСдельномНаряде");
//	
//	Если ЗначениеЗаполнено(ПоложениеСтруктурнойЕдиницыВСдельномНаряде) Тогда
//		ЗначенияИзНастроек.Вставить("ПоложениеСтруктурнойЕдиницы", ПоложениеСтруктурнойЕдиницыВСдельномНаряде);
//	Иначе
//		ЗначенияИзНастроек.Вставить("ПоложениеСтруктурнойЕдиницы", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьПоложениеСтруктурнойЕдиницыВЗаказеНаПроизводство(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит(
//		"ПоложениеСтруктурнойЕдиницыОпераций",
//		ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПоложениеСтруктурнойЕдиницыВСдельномНаряде = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ПоложениеСтруктурнойЕдиницыВСдельномНаряде");
//	
//	Если ЗначениеЗаполнено(ПоложениеСтруктурнойЕдиницыВСдельномНаряде) Тогда
//		ЗначенияИзНастроек.Вставить("ПоложениеСтруктурнойЕдиницыОпераций", ПоложениеСтруктурнойЕдиницыВСдельномНаряде);
//	Иначе
//		ЗначенияИзНастроек.Вставить("ПоложениеСтруктурнойЕдиницыОпераций", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьПоложениеСкладаВДокументахПроизводства(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЗаказНаПроизводство")
//		И ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.СборкаЗапасов") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит(
//		"ПоложениеСклада",
//		ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПоложениеСкладаВДокументахПроизводства = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ПоложениеСкладаВДокументахПроизводства");
//	
//	Если ЗначениеЗаполнено(ПоложениеСкладаВДокументахПроизводства) Тогда
//		ЗначенияИзНастроек.Вставить("ПоложениеСклада", ПоложениеСкладаВДокументахПроизводства);
//	Иначе
//		ЗначенияИзНастроек.Вставить("ПоложениеСклада", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьПоложениеЗаказаПокупателяВДокументахПроизводства(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЗаказНаПроизводство")
//		И ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.СборкаЗапасов") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит(
//		"ПоложениеЗаказаПокупателя",
//		ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПоложениеЗаказаПокупателяВДокументахПроизводства = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ПоложениеЗаказаПокупателяВДокументахПроизводства");
//	
//	Если ЗначениеЗаполнено(ПоложениеЗаказаПокупателяВДокументахПроизводства) Тогда
//		ЗначенияИзНастроек.Вставить("ПоложениеЗаказаПокупателя", ПоложениеЗаказаПокупателяВДокументахПроизводства);
//	Иначе
//		ЗначенияИзНастроек.Вставить("ПоложениеЗаказаПокупателя", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьПоложениеЭквайринговогоТерминалаВБанковскихДокументах(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.РасходСоСчета")
//		И ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит(
//		"ПоложениеЭквайринговогоТерминала",
//		ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПоложениеЭквайринговогоТерминала = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ПоложениеЭквайринговогоТерминалаВБанковскихДокументах");
//	
//	Если ЗначениеЗаполнено(ПоложениеЭквайринговогоТерминала) Тогда
//		ЗначенияИзНастроек.Вставить("ПоложениеЭквайринговогоТерминала", ПоложениеЭквайринговогоТерминала);
//	Иначе
//		ЗначенияИзНастроек.Вставить("ПоложениеЭквайринговогоТерминала", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьСпособомРаспределенияМатериалов(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.ЗаказНаПроизводство")
//		И ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.СборкаЗапасов") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	РучноеРаспределение = (Константы.ИспользоватьРучноеРаспределениеМатериаловПоУмолчанию.Получить()=Перечисления.ДаНет.Да);
//	
//	ЗначенияИзНастроек.Вставить("РучноеРаспределение", РучноеРаспределение);
//	
//КонецПроцедуры

//Процедура ДополнитьПоложениеЗаказаПокупателяВДокументахПоступления(ЗначенияИзНастроек, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит(
//		"ПоложениеЗаказаПокупателя",
//		ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПоложениеЗаказаПокупателяВДокументахПоступления = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//	Пользователи.ТекущийПользователь(),
//	"ПоложениеЗаказаПокупателяВДокументахПоступления");
//	
//	Если ЗначениеЗаполнено(ПоложениеЗаказаПокупателяВДокументахПоступления) Тогда
//		ЗначенияИзНастроек.Вставить("ПоложениеЗаказаПокупателя", ПоложениеЗаказаПокупателяВДокументахПоступления);
//	Иначе
//		ЗначенияИзНастроек.Вставить("ПоложениеЗаказаПокупателя", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
//	КонецЕсли;
//	
//КонецПроцедуры

//#КонецОбласти

//Процедура ДополнитьПредопределеннымиЭлементамиСправочников(ДанныеЗаполнения, ДокументОбъект)
//	
//	ПредопределенныеЭлементыСправочников = Новый Структура;
//	
//	ДополнитьПредопределеннойОрганизацией(ПредопределенныеЭлементыСправочников, ДокументОбъект);
//	ДополнитьПредопределеннымПодразделением(ПредопределенныеЭлементыСправочников, ДокументОбъект);
//	ДополнитьПредопределеннымиСтруктурнымиЕдиницами(ПредопределенныеЭлементыСправочников, ДокументОбъект);
//	ДополнитьПредопределеннымВидомЦен(ПредопределенныеЭлементыСправочников, ДокументОбъект);
//	
//	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеЗаполнения, ПредопределенныеЭлементыСправочников, Ложь);
//	
//КонецПроцедуры

//#Область ДополнитьПредопределеннымиЭлементамиСправочников

//Процедура ДополнитьПредопределеннойОрганизацией(ПредопределенныеЭлементыСправочников, ДокументОбъект)
//	
//	Если ОтсутствуетНезаполненныйРеквизит("Организация", ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	Организации.Ссылка КАК Ссылка
//	|ИЗ
//	|	Справочник.Организации КАК Организации
//	|ГДЕ
//	|	Организации.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных";
//	
//	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", "ОсновнаяОрганизация");
//	
//	Попытка
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			ОрганизацияПоУмолчанию = Выборка.Ссылка;
//		КонецЕсли;
//	Исключение
//		ОрганизацияПоУмолчанию = Неопределено;
//	КонецПопытки;
//	
//	ПредопределенныеЭлементыСправочников.Вставить("Организация", ОрганизацияПоУмолчанию);

//КонецПроцедуры

//Процедура ДополнитьПредопределеннымПодразделением(ПредопределенныеЭлементыСправочников, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит("Подразделение", ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПредопределенныеЭлементыСправочников.Вставить(
//	"Подразделение",
//	ОбщегоНазначения.ПредопределенныйЭлемент(
//	"Справочник.СтруктурныеЕдиницы.ОсновноеПодразделение"));

//КонецПроцедуры

//Процедура ДополнитьПредопределеннымиСтруктурнымиЕдиницами(ПредопределенныеЭлементыСправочников, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах")
//		ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйОрдер") Тогда
//		
//		Возврат;
//		
//	КонецЕсли;
//	
//	Если Не ОтсутствуетНезаполненныйРеквизит("СтруктурнаяЕдиница", ДокументОбъект) Тогда
//		ПравилаЗаполненияДляСтруктурнойЕдиницы = Новый Соответствие;
//		ЗаполнениеОбъектовУНФПереопределяемый.ПриОпределенииПравилУстановкиСтруктурныхЕдиниц(
//		ПравилаЗаполненияДляСтруктурнойЕдиницы);
//		
//		ПредопределеннаяСтруктурнаяЕдиница = ПравилаЗаполненияДляСтруктурнойЕдиницы[ТипЗнч(ДокументОбъект)];
//		
//		Если ЗначениеЗаполнено(ПредопределеннаяСтруктурнаяЕдиница) Тогда
//			ПредопределенныеЭлементыСправочников.Вставить(
//			"СтруктурнаяЕдиница",
//			ПредопределеннаяСтруктурнаяЕдиница);
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если Не ОтсутствуетНезаполненныйРеквизит("СтруктурнаяЕдиницаПродажи", ДокументОбъект) Тогда
//		ПредопределенныеЭлементыСправочников.Вставить(
//		"СтруктурнаяЕдиницаПродажи",
//		ОбщегоНазначения.ПредопределенныйЭлемент(
//		"Справочник.СтруктурныеЕдиницы.ОсновноеПодразделение"));
//	КонецЕсли;
//	
//	Если Не ОтсутствуетНезаполненныйРеквизит("СтруктурнаяЕдиницаРезерв", ДокументОбъект) Тогда
//		ПредопределенныеЭлементыСправочников.Вставить(
//		"СтруктурнаяЕдиницаРезерв",
//		ОбщегоНазначения.ПредопределенныйЭлемент(
//		"Справочник.СтруктурныеЕдиницы.ОсновнойСклад"));
//	КонецЕсли;

//	Если Не ОтсутствуетНезаполненныйРеквизит("СтруктурнаяЕдиницаОпераций", ДокументОбъект) Тогда
//		ПредопределенныеЭлементыСправочников.Вставить(
//		"СтруктурнаяЕдиницаОпераций",
//		ОбщегоНазначения.ПредопределенныйЭлемент(
//		"Справочник.СтруктурныеЕдиницы.ОсновноеПодразделение"));
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДополнитьПредопределеннымВидомЦен(ПредопределенныеЭлементыСправочников, ДокументОбъект)
//	
//	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМ") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМВозврат") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтсутствуетНезаполненныйРеквизит("ВидЦен", ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПредопределенныеЭлементыСправочников.Вставить(
//	"ВидЦен",
//	ОбщегоНазначения.ПредопределенныйЭлемент(
//	"Справочник.ВидыЦен.Оптовая"));
//	
//КонецПроцедуры

//#КонецОбласти

//Процедура УдалитьНезаполненныеЗначения(РазыменованныеПоля)
//	
//	Для Каждого КлючИЗначение Из РазыменованныеПоля Цикл
//		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
//			Продолжить;
//		КонецЕсли;
//		РазыменованныеПоля.Удалить(КлючИЗначение.Ключ);
//	КонецЦикла;

//КонецПроцедуры

//#Область РазыменоватьПоля

//Процедура РазыменоватьПоляСобытия(РазыменованныеПоля)
//	
//	Если Не РазыменованныеПоля.Свойство("Событие") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	РазыменоватьПоляСобытияКонтрагент(РазыменованныеПоля);
//	РазыменоватьПоляСобытияПроект(РазыменованныеПоля);
//	
//КонецПроцедуры

//Процедура РазыменоватьПоляСобытияКонтрагент(РазыменованныеПоля)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	СобытиеУчастники.НомерСтроки КАК НомерСтроки,
//	|	СобытиеУчастники.Контакт КАК Контакт
//	|ИЗ
//	|	Документ.Событие.Участники КАК СобытиеУчастники
//	|ГДЕ
//	|	(СобытиеУчастники.Контакт ССЫЛКА Справочник.Контрагенты
//	|			ИЛИ СобытиеУчастники.Контакт ССЫЛКА Справочник.КонтактныеЛица
//	|			ИЛИ СобытиеУчастники.Контакт ССЫЛКА Справочник.Лиды)
//	|	И СобытиеУчастники.Ссылка = &Ссылка";
//	Запрос.УстановитьПараметр("Ссылка", РазыменованныеПоля.Событие);
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Если НЕ Выборка.Следующий() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Контрагент = Неопределено;
//	
//	Если ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
//		
//		Контрагент = Выборка.Контакт;
//		
//	ИначеЕсли ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
//		
//		КонтрагентыКонтакта = Справочники.КонтактныеЛица.СвязанныеКонтрагенты(Выборка.Контакт);
//		Если КонтрагентыКонтакта.Количество() = 1 Тогда
//			Контрагент = КонтрагентыКонтакта[0];
//		КонецЕсли;
//		
//	ИначеЕсли ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.Лиды") Тогда
//		
//		Контрагент = Справочники.Лиды.ПолучитьСоздатьКонтрагента(Выборка.Контакт);
//		
//	КонецЕсли;
//	
//	Если Контрагент = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	РазыменованныеПоля.Вставить("Контрагент", Контрагент);
//	
//КонецПроцедуры

//Процедура РазыменоватьПоляСобытияПроект(РазыменованныеПоля)
//	
//	Если Не ПолучитьФункциональнуюОпцию("УчетПоПроектам") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если РазыменованныеПоля.Свойство("Проект") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РазыменованныеПоля.Событие, "Проект", Истина);
//	Если ЗначениеЗаполнено(Проект) Тогда
//		РазыменованныеПоля.Вставить("Проект", Проект);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура РазыменоватьПоляОрганизации(РазыменованныеПоля, ДокументОбъект)
//	
//	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта(
//		"Организация",
//		ДокументОбъект.Метаданные()) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Организация = ДокументОбъект.Организация;
//	
//	Если Не ЗначениеЗаполнено(Организация) Тогда
//		РазыменованныеПоля.Свойство("Организация", Организация);
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(Организация) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	РазыменоватьПоляОрганизацииБанковскийСчет(РазыменованныеПоля, ДокументОбъект, Организация);
//	РазыменоватьПоляОрганизацииКасса(РазыменованныеПоля, ДокументОбъект, Организация);
//	РазыменоватьПоляОрганизацииНалогообложениеНДС(РазыменованныеПоля, ДокументОбъект, Организация);
//	РазыменоватьПоляОрганизацииСтавкаНДСДоставки(РазыменованныеПоля, ДокументОбъект, Организация);
//	
//КонецПроцедуры

//Процедура РазыменоватьПоляОрганизацииБанковскийСчет(РазыменованныеПоля, ДокументОбъект, Организация)
//	
//	Если ОтсутствуетНезаполненныйРеквизит("БанковскийСчет", ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", ДокументОбъект.Метаданные())
//		И ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
//		ВалютаДенежныхСредств = ДокументОбъект.ВалютаДокумента;
//	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДенежныхСредств", ДокументОбъект.Метаданные())
//		И ЗначениеЗаполнено(ДокументОбъект.ВалютаДенежныхСредств) Тогда
//		ВалютаДенежныхСредств = ДокументОбъект.ВалютаДенежныхСредств;
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
//		РазыменованныеПоля.Свойство("ВалютаДокумента", ВалютаДенежныхСредств);
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
//		РазыменованныеПоля.Свойство("ВалютаДенежныхСредств", ВалютаДенежныхСредств);
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	ВЫБОР
//	|		КОГДА Организации.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
//	|			ТОГДА Организации.БанковскийСчетПоУмолчанию
//	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
//	|	КОНЕЦ КАК БанковскийСчет
//	|ИЗ
//	|	Справочник.Организации КАК Организации
//	|ГДЕ
//	|	Организации.Ссылка = &Организация");
//	Запрос.УстановитьПараметр("Организация", Организация);
//	Запрос.УстановитьПараметр("ВалютаДенежныхСредств", ВалютаДенежныхСредств);
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Выборка = РезультатЗапроса.Выбрать();
//	Выборка.Следующий();
//	
//	Если Не ЗначениеЗаполнено(Выборка.БанковскийСчет) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	РазыменованныеПоля.Вставить("БанковскийСчет", Выборка.БанковскийСчет);
//	
//	Если ОтсутствуетНезаполненныйРеквизит("БанковскийСчетПолучатель", ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	РазыменованныеПоля.Вставить("БанковскийСчетПолучатель", Выборка.БанковскийСчет);
//	
//КонецПроцедуры

//Процедура РазыменоватьПоляОрганизацииКасса(РазыменованныеПоля, ДокументОбъект, Организация)
//	
//	Если ОтсутствуетНезаполненныйРеквизит("Касса", ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	КассаПоУмолчанию = Справочники.Кассы.ПолучитьКассуПоУмолчанию(Организация);
//	
//	Если Не ЗначениеЗаполнено(КассаПоУмолчанию) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	РазыменованныеПоля.Вставить("Касса", КассаПоУмолчанию);
//	
//	Если ОтсутствуетНезаполненныйРеквизит("КассаПолучатель", ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	РазыменованныеПоля.Вставить("КассаПолучатель", КассаПоУмолчанию);
//	
//КонецПроцедуры

//Процедура РазыменоватьПоляОрганизацииНалогообложениеНДС(РазыменованныеПоля, ДокументОбъект, Организация)
//	
//	Если ОтсутствуетНезаполненныйРеквизит("НалогообложениеНДС", ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	РазыменованныеПоля.Вставить("НалогообложениеНДС",
//	УправлениеНебольшойФирмойСервер.НалогообложениеНДС(
//	Организация,,
//	ТекущаяДатаСеанса()));
//	
//КонецПроцедуры

//Процедура РазыменоватьПоляКонтрагента(РазыменованныеПоля)
//	
//	Если Не РазыменованныеПоля.Свойство("Контрагент") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
//	РазыменованныеПоля.Контрагент,
//	"ЭтоГруппа, КонтактноеЛицоПодписант");
//	
//	Если ДанныеКонтрагента.ЭтоГруппа Тогда
//		ВызватьИсключение НСтр("ru = 'Нельзя выбирать группу контрагентов.'");
//	КонецЕсли;
//	
//	Если РазыменованныеПоля.Свойство("Договор")
//		И ЗначениеЗаполнено(РазыменованныеПоля.Договор)
//		И РазыменованныеПоля.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РазыменованныеПоля.Договор, "Владелец", Истина) Тогда
//	Иначе
//		
//		РазыменованныеПоля.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(РазыменованныеПоля.Контрагент));
//		
//	КонецЕсли;
//	
//	РазыменованныеПоля.Вставить("КонтактноеЛицоПодписант", ДанныеКонтрагента.КонтактноеЛицоПодписант);
//	
//КонецПроцедуры

//Процедура РазыменоватьПоляДоговора(РазыменованныеПоля, ДокументОбъект)
//	
//	Если Не РазыменованныеПоля.Свойство("Договор") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
//	РазыменованныеПоля.Договор,
//	"ВалютаРасчетов, ВидЦен, ВидЦенКонтрагента, ВидСкидкиНаценки");
//	
//	Для Каждого КлючИЗначение Из ДанныеДоговора Цикл
//		
//		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Для Каждого ИмяРеквизита Из ИменаРеквизитов(КлючИЗначение.Значение, ДокументОбъект) Цикл
//			РазыменованныеПоля.Вставить(ИмяРеквизита, КлючИЗначение.Значение);
//		КонецЦикла;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура РазыменоватьПоляДисконтнойКарты(РазыменованныеПоля)
//	
//	Если Не РазыменованныеПоля.Свойство("ДисконтнаяКарта") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	РазыменованныеПоля.Вставить(
//	"ПроцентСкидкиПоДисконтнойКарте",
//	УправлениеНебольшойФирмойСервер.ВычислитьПроцентСкидкиПоДисконтнойКарте(
//	ТекущаяДатаСеанса(),
//	РазыменованныеПоля.ДисконтнаяКарта));
//	
//КонецПроцедуры

//Процедура РазыменоватьПоляСтруктурнойЕдиницы(РазыменованныеПоля, ДокументОбъект)
//	
//	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("СтруктурнаяЕдиница", ДокументОбъект.Метаданные()) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	СтруктурнаяЕдиница = ДокументОбъект.СтруктурнаяЕдиница;
//	
//	Если Не ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
//		РазыменованныеПоля.Свойство("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ОписаниеПолейСтруктурнойЕдиницы = Новый Структура;
//	ОписаниеПолейСтруктурнойЕдиницы.Вставить("СтруктурнаяЕдиницаПродукции", "ПолучательПеремещения");
//	ОписаниеПолейСтруктурнойЕдиницы.Вставить("ЯчейкаПродукции", "ЯчейкаПолучателяПеремещения");
//	ОписаниеПолейСтруктурнойЕдиницы.Вставить("СтруктурнаяЕдиницаЗапасов", "ИсточникПеремещения");
//	ОписаниеПолейСтруктурнойЕдиницы.Вставить("ЯчейкаЗапасов", "ЯчейкаИсточникаПеремещения");
//	ОписаниеПолейСтруктурнойЕдиницы.Вставить("СтруктурнаяЕдиницаОтходов", "ПолучательОтходов");
//	ОписаниеПолейСтруктурнойЕдиницы.Вставить("ЯчейкаОтходов", "ЯчейкаПолучателяОтходов");
//	ОписаниеПолейСтруктурнойЕдиницы.Вставить("СтруктурнаяЕдиницаПолучатель", "ПолучательПеремещения");
//	ОписаниеПолейСтруктурнойЕдиницы.Вставить("СтруктурнаяЕдиницаРезерв", "ИсточникПеремещения");
//	
//	ДанныеСтруктурнойЕдиницы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
//	СтруктурнаяЕдиница,
//	ОписаниеПолейСтруктурнойЕдиницы);
//	
//	Для Каждого КлючИЗначение Из ДанныеСтруктурнойЕдиницы Цикл
//		
//		Если ОтсутствуетНезаполненныйРеквизит(КлючИЗначение.Ключ, ДокументОбъект) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
//			РазыменованныеПоля.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура РазыменоватьПоляВидаЦен(РазыменованныеПоля)
//	
//	Если Не РазыменованныеПоля.Свойство("ВидЦен") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если Не РазыменованныеПоля.Свойство("СуммаВключаетНДС") Тогда
//		РазыменованныеПоля.Вставить(
//		"СуммаВключаетНДС",
//		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
//		РазыменованныеПоля.ВидЦен,
//		"ЦенаВключаетНДС",
//		Истина));
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура РазыменоватьПоляВалюты(РазыменованныеПоля)
//	
//	Для Каждого КлючИЗначение Из РазыменованныеПоля Цикл
//		
//		Если ТипЗнч(КлючИЗначение.Значение) <> Тип("СправочникСсылка.Валюты") Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
//		РазыменованныеПоля,
//		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(,
//		Новый Структура("Валюта", КлючИЗначение.Значение)),
//		Истина);
//		
//		Прервать;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//#КонецОбласти

//Функция ТипСтруктурнойЕдиницыВПараметрыВыбора(ТипСтруктурнойЕдиницы, ПараметрыВыбора)
//	
//	Для каждого ПараметрВыбора Из ПараметрыВыбора Цикл
//		
//		Если ПараметрВыбора.Имя <> "Отбор.ТипСтруктурнойЕдиницы" Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если ТипЗнч(ПараметрВыбора.Значение) = Тип("ФиксированныйМассив") Тогда
//			Для каждого ЗначениеПараметра Из ПараметрВыбора.Значение Цикл
//				Если ТипСтруктурнойЕдиницы = ЗначениеПараметра Тогда
//					Возврат Истина;
//				КонецЕсли; 
//			КонецЦикла;
//		ИначеЕсли ТипЗнч(ПараметрВыбора.Значение) = Тип("ПеречислениеСсылка.ТипыСтруктурныхЕдиниц") 
//			И ТипСтруктурнойЕдиницы = ПараметрВыбора.Значение Тогда
//			Возврат Истина;
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Возврат Ложь;
//	
//КонецФункции 

//Функция ОтсутствуетНезаполненныйРеквизит(ИмяРеквизита, ДокументОбъект)
//	
//	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта(
//		ИмяРеквизита,
//		ДокументОбъект.Метаданные()) Тогда
//		Возврат Истина;
//	КонецЕсли;
//	
//	Возврат ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизита]);
//	
//КонецФункции

//// Возвращает имена всех реквизитов документа, тип которых соответствуют
//// типу указанного параметра Значение.
////
//// Параметры:
////  Значение					 - Произвольный
////  ДокументОбъект				 - ДокументОбъект
//// 
//// Возвращаемое значение:
////  Массив - массив строк - имен реквизитов документа.
////
//Функция ИменаРеквизитов(Значение, ДокументОбъект)
//	
//	Результат = Новый Массив;
//	
//	ИменаИсключаемыхРеквизитов = ЗаполнениеОбъектовУНФПереопределяемый.ИсключениеИменРеквизитовПриСопоставленииПоТипу();
//	
//	Для Каждого Реквизит Из ДокументОбъект.Ссылка.Метаданные().Реквизиты Цикл
//		
//		Если ИменаИсключаемыхРеквизитов.Найти(Реквизит.Имя) <> Неопределено Тогда
//			
//			Продолжить;
//			
//		КонецЕсли;
//		
//		Если Реквизит.Тип.СодержитТип(ТипЗнч(Значение)) Тогда
//			Результат.Добавить(Реквизит.Имя);
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Возврат Результат;
//	
//КонецФункции

//Процедура ЗаполнитьТабличныеЧасти(ДокументОбъект, ДанныеЗаполнения)
//	
//	Для Каждого ТабличнаяЧасть Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
//		
//		Если Не ДанныеЗаполнения.Свойство(ТабличнаяЧасть.Имя) Тогда
//			Продолжить;
//		КонецЕсли;
//		//Если уже было заполнение, не перезаполняем второй раз
//		Если ДокументОбъект[ТабличнаяЧасть.Имя].Количество()>0 Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Для Каждого строкаЗаполнения Из ДанныеЗаполнения[ТабличнаяЧасть.Имя] Цикл
//			НоваяСтрокаТЧ = ДокументОбъект[ТабличнаяЧасть.Имя].Добавить();
//			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, строкаЗаполнения);
//			
//			Если ТабличнаяЧасть.Имя = "РесурсыПредприятия" Тогда Продолжить КонецЕсли;
//			
//			НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(ДокументОбъект, ТабличнаяЧасть.Имя, НоваяСтрокаТЧ);
//		КонецЦикла;
//		
//	КонецЦикла;

//КонецПроцедуры




//// Взаиморасчеты
//Функция ТребуетсяЗаполнятьЗаказВ_ТЧ_Предоплата(пДокументОбъект)
//	
//	МассивТипов = Новый Массив;
//	МассивТипов.Добавить(Тип("ДокументОбъект.ПриходнаяНакладная"));
//	МассивТипов.Добавить(Тип("ДокументОбъект.РасходнаяНакладная"));
//	МассивТипов.Добавить(Тип("ДокументОбъект.ЗаказПокупателя"));
//	МассивТипов.Добавить(Тип("ДокументОбъект.ЗаказПоставщику"));
//	МассивТипов.Добавить(Тип("ДокументОбъект.АктВыполненныхРабот"));
//	МассивТипов.Добавить(Тип("ДокументОбъект.ДополнительныеРасходы"));
//	
//	Возврат МассивТипов.Найти(ТипЗнч(пДокументОбъект)) = Неопределено;
//	
//КонецФункции
//// Конец Взаиморасчеты


//Функция ПоложениеЗаказа(ДокументОбъект)
//	
//	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПоложениеЗаказаПоставщику", ДокументОбъект.Метаданные()) Тогда
//		Возврат ДокументОбъект.ПоложениеЗаказаПоставщику;
//	КонецЕсли;
//	
//	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПоложениеЗаказаПокупателя", ДокументОбъект.Метаданные()) Тогда
//		Возврат ДокументОбъект.ПоложениеЗаказаПокупателя;
//	КонецЕсли;
//	
//КонецФункции

//Функция ЗаказИзШапки(ДокументОбъект)
//	
//	Если ЗначениеЗаполнено(ДокументОбъект.Заказ) Тогда
//		Возврат ДокументОбъект.Заказ;
//	Иначе
//		Возврат Неопределено;
//	КонецЕсли;
//	
//КонецФункции

//#КонецОбласти

//#Область ЗаполнениеОтдельныхРеквизитов


//// Функция возвращает первое по бизнес-логике состояние заказа
////
//// Параметры:
////  ВидЗаказа	 - СправочникСсылка.ВидыЗаказовПокупателей	 - параметр является обязательным, если включена ФО ИспользоватьВидыЗаказовПокупателей
//// 
//// Возвращаемое значение:
////  СправочникСсылка.СостоянияЗаказовПокупателей - состояние для заполнения документа
////
//Функция ПолучитьСостояниеЗаказаПокупателя(знач ВидЗаказа = Неопределено) Экспорт
//	
//	ИспользуютсяВидыЗаказов = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей");
//	Если ИспользуютсяВидыЗаказов И Не ЗначениеЗаполнено(ВидЗаказа) Тогда
//		ВызватьИсключение НСтр("ru='Не указан вид заказа для заполнения состояния заказа покупателя'");
//	КонецЕсли;
//	
//	Если Не ИспользуютсяВидыЗаказов Тогда
//		ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;
//	КонецЕсли;
//	
//	Результат = Неопределено;
//	Запрос = Новый Запрос;
//	
//	Запрос.Текст = 
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ВидыЗаказовПокупателейПорядокСостояний.Состояние КАК СостояниеЗаказа
//		|ИЗ
//		|	Справочник.ВидыЗаказовПокупателей.ПорядокСостояний КАК ВидыЗаказовПокупателейПорядокСостояний
//		|ГДЕ
//		|	ВидыЗаказовПокупателейПорядокСостояний.Ссылка = &ВидЗаказа
//		|	И ВидыЗаказовПокупателейПорядокСостояний.Состояние <> ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
//		|	И ВидыЗаказовПокупателейПорядокСостояний.Состояние.ПометкаУдаления = ЛОЖЬ
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ВидыЗаказовПокупателейПорядокСостояний.НомерСтроки";
//	
//	Запрос.УстановитьПараметр("ВидЗаказа", ВидЗаказа);
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Результат = Выборка.СостояниеЗаказа;
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ПолучитьВидЗаказаПокупателя() Экспорт
//	
//	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
//		Возврат Справочники.ВидыЗаказовПокупателей.Основной;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
//		|	ЗаказПокупателя.ВидЗаказа КАК ВидЗаказа
//		|ИЗ
//		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
//		|ГДЕ
//		|	ЗаказПокупателя.Автор = &Автор
//		|	И ЗаказПокупателя.ВидЗаказа <> ЗНАЧЕНИЕ(Справочник.ВидыЗаказовПокупателей.ПустаяСсылка)
//		|	И ЗаказПокупателя.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ЗаказПокупателя.Дата УБЫВ";
//	
//	Запрос.УстановитьПараметр("Автор", Пользователи.ТекущийПользователь());
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.ВидЗаказа;
//	КонецЕсли;
//	
//	Запрос.Текст = 
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
//		|	ЗаказПокупателя.ВидЗаказа КАК ВидЗаказа
//		|ИЗ
//		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
//		|ГДЕ
//		|	ЗаказПокупателя.ВидЗаказа <> ЗНАЧЕНИЕ(Справочник.ВидыЗаказовПокупателей.ПустаяСсылка)
//		|	И ЗаказПокупателя.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ЗаказПокупателя.Дата УБЫВ";
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.ВидЗаказа;
//	КонецЕсли;
//	
//	Возврат Справочники.ВидыЗаказовПокупателей.Основной;
//	
//КонецФункции

//// Функция возвращает первое по бизнес-логике состояние заказ-наряда
////
//// Параметры:
////  ВидЗаказа	 - СправочникСсылка.ВидыЗаказНарядов	 - параметр является обязательным, если включена ФО ИспользоватьВидыЗаказНарядов
//// 
//// Возвращаемое значение:
////  СправочникСсылка.СостоянияЗаказНарядов - состояние для заполнения документа
////
//Функция ПолучитьСостояниеЗаказНаряда(знач ВидЗаказа = Неопределено) Экспорт
//	
//	ИспользуютсяВидыЗаказов = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов");
//	Если ИспользуютсяВидыЗаказов И Не ЗначениеЗаполнено(ВидЗаказа) Тогда
//		ВызватьИсключение НСтр("ru='Не указан вид заказа для заполнения состояния заказ-наряда'");
//	КонецЕсли;
//	
//	Если Не ИспользуютсяВидыЗаказов Тогда
//		ВидЗаказа = Справочники.ВидыЗаказНарядов.Основной;
//	КонецЕсли;
//	
//	Результат = Неопределено;
//	Запрос = Новый Запрос;
//	
//	Запрос.Текст = 
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ВидыЗаказНарядовПорядокСостояний.Состояние КАК СостояниеЗаказа
//		|ИЗ
//		|	Справочник.ВидыЗаказНарядов.ПорядокСостояний КАК ВидыЗаказНарядовПорядокСостояний
//		|ГДЕ
//		|	ВидыЗаказНарядовПорядокСостояний.Ссылка = &ВидЗаказа
//		|	И ВидыЗаказНарядовПорядокСостояний.Состояние <> ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
//		|	И ВидыЗаказНарядовПорядокСостояний.Состояние.ПометкаУдаления = ЛОЖЬ
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ВидыЗаказНарядовПорядокСостояний.НомерСтроки";
//	
//	Запрос.УстановитьПараметр("ВидЗаказа", ВидЗаказа);
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Результат = Выборка.СостояниеЗаказа;
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ПолучитьВидЗаказНаряда() Экспорт
//	
//	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов") Тогда
//		Возврат Справочники.ВидыЗаказНарядов.Основной;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
//		|	ЗаказПокупателя.ВидЗаказа КАК ВидЗаказа
//		|ИЗ
//		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
//		|ГДЕ
//		|	ЗаказПокупателя.Автор = &Автор
//		|	И ЗаказПокупателя.ВидЗаказа <> ЗНАЧЕНИЕ(Справочник.ВидыЗаказНарядов.ПустаяСсылка)
//		|	И ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ЗаказПокупателя.Дата УБЫВ";
//	
//	Запрос.УстановитьПараметр("Автор", Пользователи.ТекущийПользователь());
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.ВидЗаказа;
//	КонецЕсли;
//	
//	Запрос.Текст = 
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
//		|	ЗаказПокупателя.ВидЗаказа КАК ВидЗаказа
//		|ИЗ
//		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
//		|ГДЕ
//		|	ЗаказПокупателя.ВидЗаказа <> ЗНАЧЕНИЕ(Справочник.ВидыЗаказНарядов.ПустаяСсылка)
//		|	И ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ЗаказПокупателя.Дата УБЫВ";
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.ВидЗаказа;
//	КонецЕсли;
//	
//	Возврат Справочники.ВидыЗаказНарядов.Основной;
//	
//КонецФункции

//Функция ПолучитьСостояниеЗаказаПоставщику() Экспорт
//	
//	Результат = Неопределено;
//	Запрос = Новый Запрос;
//	
//	Запрос.Текст = 
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	СостоянияЗаказовПоставщикам.Ссылка КАК СостояниеЗаказа
//		|ИЗ
//		|	Справочник.СостоянияЗаказовПоставщикам КАК СостоянияЗаказовПоставщикам
//		|ГДЕ
//		|	СостоянияЗаказовПоставщикам.ПометкаУдаления = ЛОЖЬ
//		|	И НЕ СостоянияЗаказовПоставщикам.Ссылка = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПоставщикам.Завершен)
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	СостоянияЗаказовПоставщикам.РеквизитДопУпорядочивания";
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Результат = Выборка.СостояниеЗаказа;
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ПолучитьСостояниеЗаказаНаПроизводство() Экспорт
//	
//	Результат = Неопределено;
//	Запрос = Новый Запрос;
//	
//	Запрос.Текст = 
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	СостоянияЗаказовНаПроизводство.Ссылка КАК СостояниеЗаказа
//		|ИЗ
//		|	Справочник.СостоянияЗаказовНаПроизводство КАК СостоянияЗаказовНаПроизводство
//		|ГДЕ
//		|	СостоянияЗаказовНаПроизводство.ПометкаУдаления = ЛОЖЬ
//		|	И НЕ СостоянияЗаказовНаПроизводство.Ссылка = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовНаПроизводство.Завершен)
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	СостоянияЗаказовНаПроизводство.РеквизитДопУпорядочивания";
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Результат = Выборка.СостояниеЗаказа;
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ПолучитьСостояниеЛида() Экспорт
//	
//	Результат = Неопределено;
//	Запрос = Новый Запрос;
//	
//	Запрос.Текст = 
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	СостоянияЛидов.Ссылка КАК СостояниеЛида
//		|ИЗ
//		|	Справочник.СостоянияЛидов КАК СостоянияЛидов
//		|ГДЕ
//		|	СостоянияЛидов.ПометкаУдаления = ЛОЖЬ
//		|	И НЕ СостоянияЛидов.Ссылка = ЗНАЧЕНИЕ(Справочник.СостоянияЛидов.Завершен)
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	СостоянияЛидов.РеквизитДопУпорядочивания";
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Результат = Выборка.СостояниеЛида;
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

//Процедура РазыменоватьПоляОрганизацииСтавкаНДСДоставки(РазыменованныеПоля, ДокументОбъект, Организация)
//	
//	Перем НалогообложениеНДС;
//	
//	Если ОтсутствуетНезаполненныйРеквизит("СтавкаНДСДоставки", ДокументОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	РазыменованныеПоля.Свойство("НалогообложениеНДС", НалогообложениеНДС);
//	
//	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
//		СтавкаНДСДоставки = Справочники.СтавкиНДС.СтавкаНДС(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ВидСтавкиНДСПоУмолчанию", Истина), ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, ТекущаяДатаСеанса()));
//	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
//		СтавкаНДСДоставки = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
//	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
//		СтавкаНДСДоставки = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(СтавкаНДСДоставки) Тогда
//		РазыменованныеПоля.Вставить("СтавкаНДСДоставки", СтавкаНДСДоставки);
//	КонецЕсли;
//	
//КонецПроцедуры

//#КонецОбласти
