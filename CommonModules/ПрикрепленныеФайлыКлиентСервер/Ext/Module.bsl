////////////////////////////////////////////////////////////////////////////////
// ПрикрепленныеФайлыКлиентСервер
//	Функционал подсистемы, общий для клиента и сервера
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает структуру для хранения информации о прикрепленном файле: наименование, двоичные данные, 
//	навигационная ссылка и т.д.
// 
// Возвращаемое значение:
//  Структура - структура для хранения и передачи медиа-данных
//	описание ключей см. в комментариях кода
//
Функция НоваяСтруктураПрикрепляемогоФайла() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("СпособОткрытия", Неопределено); // ПеречислениеСсылка.СпособОткрытияПрикрепленногоФайла
														// Определяет, как система должна обрабатывать двоичные данные
	
	Результат.Вставить("ДатаСоздания", Неопределено); // Дата создания файла. Используется для формирования автонаименования
												// и сравнения версий
	
	Результат.Вставить("Расширение", ""); // Расширение файла, назначенное при его создании
										// Обычно назначается приложением, создающим файл
	
	Результат.Вставить("Размер", Неопределено); // Размер в байтах
	
	Результат.Вставить("Наименование", ""); // Наименование файла без расширения
											// формируется автоматически, чтобы при открытии файла во внешних приложениях
											// пользователь мог по имени файла узнать обрабатываемые данные
	
	Результат.Вставить("Комментарий", ""); // произвольный текст, добавляется пользователем по желанию
	
	Результат.Вставить("ПрикрепленныйФайл", Неопределено); // СправочникСсылка.ПрикрепленныеФайлы - запись, в которой хранится файл в информационной базе 
														// Для новых файлов пустая, для считанных из базы - заполнена существующей ссылкой
	
	Результат.Вставить("НавигационнаяСсылка", ""); // Навигационная ссылка. В случае нового файла содержит адрес временного хранилища, 
												//а для файлов, записанных в справочнике - навигационную ссылку 
												//на реквизит справочника ПрикрепленныеФайлы
	
	Результат.Вставить("Предпросмотр", ""); // Навигационная ссылка на представление файла на форме. В случае картинки совпадает с НавигационнаяСсылка,
											//в других случаях является адресом на картинку из библиотеки, в зависимости от способа открытия
	
	Результат.Вставить("Иконка", ""); // Картинка из библиотеки
	
	Результат.Вставить("ИмяФайла", ""); // Имя файла - если заполнено, файл открыт в приложении и не сохранен в базу
	
	Результат.Вставить("НеСинхронизировать", Ложь); // Истина - запрет синхронизации файла с другими приложениями
	
	Возврат Результат;
	
КонецФункции

// Генерирует и возвращает новое наименование для прикрепленного файла
//
//Параметры:
//	СпособОткрытия	- ПеречислениеСсылка.СпособОткрытияПрикрепленногоФайла
//	ДатаФайла	    - Дата - дата создания файла
//
//Возвращаемое значение:
//	Строка - Новое автоматическое наименование
Функция АвтоНаименованиеФайла(СпособОткрытия, ДатаФайла) Экспорт

	Наименование = Формат(?(ЗначениеЗаполнено(ДатаФайла), ДатаФайла, ТекущаяДата()), "Л=ru_RU; ДЛФ=DT");
	Если СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакИзображение") Тогда
		Наименование = НСтр("ru='Фото '") + Наименование;
	ИначеЕсли СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакАудиоФайл") Тогда
		Наименование = НСтр("ru='Аудиозапись '") + Наименование;
	ИначеЕсли СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакВидеоЗапись") Тогда
		Наименование = НСтр("ru='Видео '") + Наименование;
	ИначеЕсли СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакТекст") Тогда
		Наименование = НСтр("ru='Текстовый файл '") + Наименование;
	ИначеЕсли СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакДокументПлатформы") Тогда
		Наименование = НСтр("ru='Таблица '") + Наименование;
	ИначеЕсли СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакHTML") Тогда
		Наименование = НСтр("ru='Веб-страница '") + Наименование;
	Иначе
		Наименование = НСтр("ru='Файл '") + Наименование;
	КонецЕсли;

	Возврат Наименование;
	
КонецФункции

// Возвращает наименование без пробельных и спецальных символов 
//
//Параметры:
//	Наименоваение	- Строка
//
//Возвращаемое значение:
//	Строка
Функция НаименованиеБезСлужебныхСимволов(Знач Наименование) Экспорт

	Наименование = СокрЛП(Наименование);
	
	Наименование = СтрЗаменить(Наименование, "*", " ");
	Наименование = СтрЗаменить(Наименование, "/", " ");
	Наименование = СтрЗаменить(Наименование, "\", " ");
	Наименование = СтрЗаменить(Наименование, ",", " ");
	Наименование = СтрЗаменить(Наименование, "?", " ");
	Наименование = СтрЗаменить(Наименование, "!", " ");
	Наименование = СтрЗаменить(Наименование, ".", "-");
	Наименование = СтрЗаменить(Наименование, ":", "-");
	Наименование = СтрЗаменить(Наименование, "`", " ");
	Наименование = СтрЗаменить(Наименование, "~", " ");
	Наименование = СтрЗаменить(Наименование, "$", " ");
	Наименование = СтрЗаменить(Наименование, "&", " ");
	Наименование = СтрЗаменить(Наименование, "#", " ");
	Наименование = СтрЗаменить(Наименование, "@", " ");
	Наименование = СтрЗаменить(Наименование, """", " ");
	Наименование = СтрЗаменить(Наименование, "|", " ");
	Наименование = СтрЗаменить(Наименование, "  ", " ");
	Наименование = СтрЗаменить(Наименование, "  ", " ");

	Возврат Наименование;
	
КонецФункции

// Обновляет надписи и доступность команд управления прикрепленными файлами на форме
Процедура ОбновитьПредставлениеМедиафайлов(Форма) Экспорт

	Форма.ПредставлениеФайлов = ПолучитьПредставлениеФайлов(Форма.МедиаФайлы);
		
КонецПроцедуры

// Возвращает форматированное представление списка файлов в виде строки
//
// Параметры:
//  МедиаФайлы	 - СписокЗначений	 - Список прикрпелнных файлов
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока - форматированное представление списка файлов
//
Функция ПолучитьПредставлениеФайлов(МедиаФайлы) Экспорт

	РазделительФайлов   = Новый ФорматированнаяСтрока("  ");
	ПредставлениеФайлов = Новый ФорматированнаяСтрока("");
	
	МаксДлиннаЗаголовка = 18;
	
	МаксКоличествоФайлов = 3;
	Количество = 0;	
	
	Для каждого Файл Из МедиаФайлы Цикл
		
		Если Количество >= МаксКоличествоФайлов Тогда
			Прервать;
		КонецЕсли;
		
		ИДФайла = "Файл_" + Строка(Файл.ПолучитьИдентификатор());
		ЗаголовокФайла = ДеньгиКлиентСервер.СокращенноеПредставление(Файл.Значение.Наименование, МаксДлиннаЗаголовка, Ложь); 
		
		ПредставлениеФайлов = Новый ФорматированнаяСтрока(
			ПредставлениеФайлов,
			?(ПустаяСтрока(ПредставлениеФайлов), "", РазделительФайлов),
			Новый ФорматированнаяСтрока(Файл.Значение.Иконка , , , , ИДФайла),
			Новый ФорматированнаяСтрока(ЗаголовокФайла , , , , ИДФайла)
			);
			
		Количество = Количество + 1;
		
	КонецЦикла;
	
	//Дополнительная информация о файлах
	Если Количество < МедиаФайлы.Количество() Тогда
		
		ЕщеФайлов    = МедиаФайлы.Количество() - Количество;
		ТекстОстатка = НСтр("ru=' (еще '")+Строка(ЕщеФайлов)+НСтр("ru=' файлов)'");
		
		ПредставлениеФайлов = Новый ФорматированнаяСтрока(
			ПредставлениеФайлов,
			?(ПустаяСтрока(ПредставлениеФайлов), "", РазделительФайлов),
			Новый ФорматированнаяСтрока(ТекстОстатка, , , , "Изменить")
			);
		
	КонецЕсли;

	РазделительФайлов = "   ";
	
	// Команда добавления нового файла
	ПредставлениеФайлов = Новый ФорматированнаяСтрока(
		ПредставлениеФайлов,
		?(ПустаяСтрока(ПредставлениеФайлов), "", "  |  "),
		Новый ФорматированнаяСтрока(НСтр("ru='Добавить'"), , , , "Добавить")
		);
		
	Если Количество >= МедиаФайлы.Количество() Тогда
		// Команда открытия списка всех файлов
		ПредставлениеФайлов = Новый ФорматированнаяСтрока(
			ПредставлениеФайлов,
			РазделительФайлов,
			Новый ФорматированнаяСтрока("Список...", , , , "Изменить")
			);
	КонецЕсли;
	
	Возврат ПредставлениеФайлов;	
	
КонецФункции

// Выводит на форму объекта представление текущего файла и обновляет 
//элементы управления файлами
//
//Параметры:
//	Форма - Управляемая форма в которой отображается файл
//
Процедура ОбновитьПредставлениеТекущегоФайла(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	КоличествоФайлов = Форма.Медиафайлы.Количество();
	
	Если КоличествоФайлов = 0 Или Форма.ИндексТекущегоФайла < 0 Тогда
		// Очищаем представление файла и навигацию
		
		Форма.ИмяТекущегоФайла           = ""; 
		Форма.ПредставлениеТекущегоФайла = ПредставлениеФайлаНаФорме("Добавить", "");
		Элементы.ПредставлениеТекущегоФайла.Подсказка = НСтр("ru='Прикрепить файл'");
		
		ИзменитьСвойствоЭлементаСПроверкой(Элементы.ФайлПредыдущий, "Доступность", Ложь);
		Элементы.ФайлПредыдущий.Картинка =  Новый Картинка;
		
		ИзменитьСвойствоЭлементаСПроверкой(Элементы.ФайлСледующий,  "Доступность", Ложь);
		Элементы.ФайлСледующий.Картинка = Новый Картинка;
		Элементы.ФайлСледующий.Подсказка = НСтр("ru='Следующий файл'");
		
		ИзменитьСвойствоЭлементаСПроверкой(Элементы.ТекущийФайлУдалитьФайл,          "Доступность", Ложь);
		ИзменитьСвойствоЭлементаСПроверкой(Элементы.ТекущийФайлОбновитьТекущийФайл,  "Доступность", Ложь);
		
	Иначе
		
		Форма.ИндексТекущегоФайла = Мин(Форма.ИндексТекущегоФайла, КоличествоФайлов - 1);
		ЭлементСписка                    = Форма.Медиафайлы[Форма.ИндексТекущегоФайла];
		Форма.ИмяТекущегоФайла           = ЭлементСписка.Значение.Наименование;
		Форма.ПредставлениеТекущегоФайла = ЭлементСписка.Значение.Предпросмотр;
		Элементы.ПредставлениеТекущегоФайла.Подсказка = НСтр("ru='Прикрепленный файл.
								|Нажмите левую клавишу мышы чтобы открыть, правую - для вызова контекстного меню'");
		
		ИзменитьСвойствоЭлементаСПроверкой(Элементы.ФайлПредыдущий, "Доступность", Форма.ИндексТекущегоФайла > 0);
		Элементы.ФайлПредыдущий.Картинка = ?(Элементы.ФайлПредыдущий.Доступность, БиблиотекаКартинок.ПереходНазад, Новый Картинка);
		
		ЕстьФайлыДалее = Форма.ИндексТекущегоФайла < КоличествоФайлов - 1;
		ИзменитьСвойствоЭлементаСПроверкой(Элементы.ФайлСледующий,  "Доступность", Истина);
		Элементы.ФайлСледующий.Картинка   = ?(ЕстьФайлыДалее, БиблиотекаКартинок.ПереходВперед, БиблиотекаКартинок.ДобавитьЭлементВЯчейку16);
		Элементы.ФайлСледующий.Подсказка  = ?(ЕстьФайлыДалее, НСтр("ru='Следующий файл'"), НСтр("ru='Добавить файл'"));
		
		ИзменитьСвойствоЭлементаСПроверкой(Элементы.ТекущийФайлУдалитьФайл,  "Доступность", Истина);
		ИзменитьСвойствоЭлементаСПроверкой(Элементы.ТекущийФайлОбновитьТекущийФайл,  "Доступность", Не ПустаяСтрока(ЭлементСписка.Значение.ИмяФайла));
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает иконку прикрепленного файла
//
// Параметры:
//  СпособОткрытия	 - Перечисления.СпособОткрытияПрикрепленногоФайла - 
// 
// Возвращаемое значение:
//  Картинка - иконка прикрепленного файла
//
Функция ИконкаПрикрепленногоФайла(СпособОткрытия) Экспорт
	
	Если СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакHTML") Тогда
		Возврат БиблиотекаКартинок.ПредставлениеФайлаHTML16;
	ИначеЕсли СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакАудиоФайл") Тогда
		Возврат БиблиотекаКартинок.ПредставлениеФайлаАудио16;
	ИначеЕсли СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакВидеоЗапись") Тогда
		Возврат БиблиотекаКартинок.ПредставлениеФайлаВидео16;
	ИначеЕсли СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакИзображение") Тогда
		Возврат БиблиотекаКартинок.ПредставлениеФайлаИзображение16;
	ИначеЕсли СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакДокументПлатформы") Тогда
		Возврат БиблиотекаКартинок.ПредставлениеФайлаПлатформы16;
	ИначеЕсли СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакТекст") Тогда
		Возврат БиблиотекаКартинок.ПредставлениеФайлаТекст16;
	ИначеЕсли СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.СредствамиОС") Тогда
		Возврат БиблиотекаКартинок.ПредставлениеФайлаПрочее16;
	КонецЕсли;

	Возврат БиблиотекаКартинок.ПредставлениеФайлаПусто16;
	
КонецФункции

// Возвращает адрес или навигационную ссылку картинки, отображающей файл на форме
//	Для фотографий и видеозапсией возвращается их превью, для прочих файлов - общие картинки из
//	параметра сеанса ПредставленияФайлов
//
//Параметры:
//	СпособОткрытия - ПеречислениеСсылка.СпособОткрытияПрикрепленногоФайла - определяет тип файла
//	АдресДвоичныхДанных - навигационная ссылка или адрес в хранилище значений
//	СтруктураПредставлений - Структура, хранящаяся в параметре сеанса ПредставленияФайлов. 
//							При вызове с кдиента желательно запоминать эту структуру для сокращения серверных вызовов
//
//Возвращаемое значение:
//	Строка - адрес или навигационная ссылка на картинку с представлением файла
//
Функция ПредставлениеФайлаНаФорме(СпособОткрытия, АдресДвоичныхДанных, СтруктураПредставлений = Неопределено) Экспорт

	Если СтруктураПредставлений = Неопределено Тогда
		СтруктураПредставлений = ПрикрепленныеФайлыВызовСервера.ПредставленияПрикрепленныхФайлов();
	КонецЕсли;
	
	Если СпособОткрытия = "Добавить" Тогда
		Возврат СтруктураПредставлений.Добавить;
	ИначеЕсли СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакИзображение") Тогда
		Возврат АдресДвоичныхДанных;
	ИначеЕсли СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакВидеоЗапись") Тогда
		Возврат СтруктураПредставлений.Видео;
	ИначеЕсли СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакАудиоФайл") Тогда
		Возврат СтруктураПредставлений.Аудио;
	ИначеЕсли СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакHTML") Тогда
		Возврат СтруктураПредставлений.HTML;
	ИначеЕсли СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакТекст") Тогда
		Возврат СтруктураПредставлений.Текст;
	ИначеЕсли СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакДокументПлатформы") Тогда
		Возврат СтруктураПредставлений.ФайлПлатформы;
	ИначеЕсли СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.СредствамиОС") Тогда
		Возврат СтруктураПредставлений.ДокументОфиса;
	Иначе
		Возврат СтруктураПредставлений.Прочее;
	КонецЕсли;

КонецФункции

// Возвращает индекс первого элемента списка значений, в котором хранится графический файл
//
//Параметры:
//	СписокФайлов	- СписокЗначений, значениями которого являются структуры описания прикрепленных файлов
//						(см. ПрикрепленныеФайлыКлиентСервер.НоваяСтруктураПрикрепляемогоФайла())
//
//Возвращаемое значение:
//	Число - индекс элемента с графическим файлом  или 0, если графических элеметов нет
Функция ИндексПервогоГрафическогоФайла(Знач СписокФайлов) Экспорт

	Для каждого ЭлементСписка Из СписокФайлов Цикл
		
		Если ЭлементСписка.Значение.СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособОткрытияПрикрепленногоФайла.КакИзображение") Тогда
			Возврат СписокФайлов.Индекс(ЭлементСписка);
		КонецЕсли;
		
	КонецЦикла;

	Возврат 0;
	
КонецФункции
 
// Возвращает строку расширений подходящих типов изображений
// 
// Возвращаемое значение:
//  Строка
//
Функция СписокРасширенийФайловКартинок() Экспорт
	
	Возврат "*.jpg;*.jpeg;*.png;*.bmp;*.tif;*.gif";	
	
КонецФункции

// Возвращает строку расширений подходящих типов изображений
// 
// Возвращаемое значение:
//  Строка
//
Функция СписокРасширенийФайловВидео() Экспорт
	
	Возврат "*.avi;*.flv;*.mov;*.qt;*.mkv;*.mp4;*.mp4;*.mpeg;*.mpg";	
	
КонецФункции

// Возвращает строку расширений подходящих типов изображений
// 
// Возвращаемое значение:
//  Строка
//
Функция СписокРасширенийФайловАудио() Экспорт
	
	Возврат "*.mp3;*.wav;*.wma;*.flac";	
	
КонецФункции

// Возвращает строку расширений подходящих типов текстовых документов
// 
// Возвращаемое значение:
//  Строка
//
Функция СписокРасширенийФайловТекста() Экспорт
	
	Возврат "*.txt";	
	
КонецФункции

// Возвращает строку расширений подходящих типов текстовых документов
// 
// Возвращаемое значение:
//  Строка
//
Функция СписокРасширенийФайловОфиса() Экспорт
	
	Возврат "*.doc;*.docx;*.rtf;*.odt;*.xls;*.xlsx;*.ods;*.pptx;*.odp";
	
КонецФункции

// Возвращает строку расширений подходящих типов документов платформы
// 
// Возвращаемое значение:
//  Строка
//
Функция СписокРасширенийФайловПлатформы() Экспорт
	
	Возврат "*.mxl;*.grs";	
	
КонецФункции

// Возвращает строку расширений подходящих типов html-документов
// 
// Возвращаемое значение:
//  Строка
//
Функция СписокРасширенийФайловHTML() Экспорт
	
	Возврат "*.html;*.htm;*.xhtm";	
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Изменяет свойство элемента формы, если оно не совпадает с указанным значением
//
Процедура ИзменитьСвойствоЭлементаСПроверкой(ЭлементФормы, ИмяСвойства, ЗначениеСвойства) 
	
	Если ЭлементФормы[ИмяСвойства] <> ЗначениеСвойства Тогда
		ЭлементФормы[ИмяСвойства] = ЗначениеСвойства;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти