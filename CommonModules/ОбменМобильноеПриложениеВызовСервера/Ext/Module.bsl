////////////////////////////////////////////////////////////////////////////////
// ОбменМобильноеПриложениеВызовСервера: общие процедуры и функции по 
//			обслуживанию плана обмена "МобильноеПриложение"
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Удаляет неактивные узлы плана обмена "МобильноеПриложение" из списка получателей 
//	объекта при его регистрации
Процедура УдалитьНеактивныеУзлыИзСписокаПолучателей(Объект) Экспорт

	НеактивныеУзлы = ОбменМобильноеПриложениеВызовСервераПовтИсп.ПолучитьНеактивныеУзлы();
	Если НеактивныеУзлы.Количество() > 0 Тогда
		ОбменДаннымиСобытия.СократитьПолучателей(Объект, НеактивныеУзлы);
	КонецЕсли; 

КонецПроцедуры

// Возвращает уникальный код для базы, которая используется в обмене с
//	мобильными приложениями как центральная. 
//
//	Примечание: в данной версии центральной базой может быть только 
//		одно настольное приложение 
Функция ПолучитьКодЦентральнойБазы() Экспорт

	ЭтотУзел = ОбменМобильноеПриложение.ПолучитьЭтотУзел();
	Возврат ЭтотУзел.Код;

КонецФункции

// Возвращает струкутуру для заполнения информацией о состоянии синхронизации
Функция СтруктураСостоянияСинхронизации() Экспорт

	// Структура используется для фиксирования текущего состояния синхронизации и 
	//	получения детальной информации об ошибке в виде, пригодном для использования в веб-сервисах
	Результат = Новый Структура;
	Результат.Вставить("Узел",                Неопределено); // Синхронизируемый узел плана обмена
	Результат.Вставить("Действие",            ""); // строковое опсиание выполняемого действия. Например, "Загрузка данных", "Проведение загруженных операций"
	Результат.Вставить("Завершено",           Ложь); // флаг завершения выполняемой операции
	Результат.Вставить("ЗавершеноСОшибками",  Ложь); // флаг завершения с ошибками
	Результат.Вставить("ПредставлениеОшибки", ""); // Описание ошибки для показа пользователю
	Результат.Вставить("ПодробностиОшибки",   ""); // Подробное описание ошибки, как оно выводится в системных сообщениях
	Результат.Вставить("ОписаниеОбъекта",     ""); // Представление объекта, вызвавшего ошибку

	Возврат Результат;
	
КонецФункции

// Записывает состояние синхронизации в параметр сеанса СостояниеСинхронизацииСМобильнымПриложением.
//	В случае ошибки добавляет соответствующую запись в журнал регистрации.
//
//Основное назначение параметра сеанса - получать информацию о состоянии синхронизации из веб-сервисов, 
//	и сообщать пользователю об ошибках без обращения к журналу регистрации
//
//Параметры:
//	Узел - Синхронизируемый узел плана обмена
//	Действие - Строка - опсиание выполняемого действия. Например, "Загрузка данных", "Проведение загруженных операций"
//	ДействиеЗавершено - Булево - признак завершения выполняемой операции
//	ЗавершеноСОшибками - Булево - признак прекращения выполняемой операции из-за ошибки
//	Ошибка - Строка или ИнформацияОбОшибке
//	ОписаниеОбъекта - произвольный тип - объект, вызвавший ошибку, или его описание
//
Процедура УстановитьСостояниеСинхронизации(Узел, ЭтапОбмена, Действие, ДействиеЗавершено = Ложь, 
			ЗавершеноСОшибками = Ложь, Ошибка = "", ОписаниеОбъекта = "") Экспорт

	СтруктураСостояния = СтруктураСостоянияСинхронизации();
	СтруктураСостояния.Узел               = Узел;
	СтруктураСостояния.Действие           = Действие;
	СтруктураСостояния.Завершено          = ДействиеЗавершено; 
	СтруктураСостояния.ЗавершеноСОшибками = ЗавершеноСОшибками; 
	Если ПараметрыСеанса.СостояниеСинхронизацииСМобильнымПриложением.Свойство("АдресВременногоХранилища") Тогда
		СтруктураСостояния.Вставить("АдресВременногоХранилища", ПараметрыСеанса.СостояниеСинхронизацииСМобильнымПриложением.АдресВременногоХранилища);
	КонецЕсли; 
	
	// Добавляем информацию об ошибке
	Если ЗавершеноСОшибками Тогда
		
		ЗафиксироватьОшибкуСинхронизации(Ошибка, Узел, ЭтапОбмена, ОписаниеОбъекта, СтруктураСостояния);
		
	Иначе
		
		ПараметрыСеанса.СостояниеСинхронизацииСМобильнымПриложением = Новый ФиксированнаяСтруктура(СтруктураСостояния);
		
		Если СтруктураСостояния.Свойство("АдресВременногоХранилища") И ЗначениеЗаполнено(СтруктураСостояния.АдресВременногоХранилища) Тогда
			ПоместитьВоВременноеХранилище(СтруктураСостояния, СтруктураСостояния.АдресВременногоХранилища);
		КонецЕсли;	
		
	КонецЕсли; 

КонецПроцедуры

// Добавляет/изменяет адрес временного хранилища в параметре сеанса СостояниеСинхронизацииСМобильнымПриложением
//	По указанному адресу доступ к текущмему состоянию синхронизации можно получить из сеанса, в котором синхронизация
//	была запущена в качетсве фонового задания.
// В момент обновления адреса все значения структуры СостояниеСинхронизацииСМобильнымПриложением полностью очищаются
//
//Параметры:
//	Адрес - адрес временного хранилища
//
Процедура ОбновитьАдресСостоянияСинхронизации(Адрес) Экспорт
	
	Если ЗначениеЗаполнено(Адрес) Тогда
		Адрес = ПоместитьВоВременноеХранилище(Неопределено, Адрес);
	КонецЕсли;
	
	СтруктураСостояния = СтруктураСостоянияСинхронизации();
	СтруктураСостояния.Вставить("АдресВременногоХранилища", Адрес);
	ПараметрыСеанса.СостояниеСинхронизацииСМобильнымПриложением = Новый ФиксированнаяСтруктура(СтруктураСостояния);
	
КонецПроцедуры

// Фиксирует описание ошибки для текущего состояния синхронизации в параметре сеанса СостояниеСинхронизацииСМобильнымПриложением
//		Перед вызовом этой процедуры состояние должно быть установлено с помощью УстановитьСостояниеСинхронизации()
//
//Параметры:
//	Ошибка - Строка или ИнформацияОбОшибке
//	Узел - ПланОбменаСсылка.МобильноеПриложение - узел, по которому регистрируется ошибка
//	ЭтапОбмена - ПеречислениеСсылка.ДействияПриОбмене или Строка - 
//	ОписаниеОбъекта - произвольный тип - объект, вызвавший ошибку, или его описание
//	СтруктураСостояния - Структура, описывающая состояние синхронизации. Если неопределено - будет получено текущее состояние
//	ПредставлениеОшибки - Строка (не обязательно, по умолчнанию "") - возращаемый параметр, сообщение для показа пользователю
//
Процедура ЗафиксироватьОшибкуСинхронизации(Ошибка, Узел, ЭтапОбмена, ОписаниеОбъекта = "", СтруктураСостояния = Неопределено, ПредставлениеОшибки = "") Экспорт

	Если СтруктураСостояния = Неопределено Тогда
		СтруктураСостояния = СтруктураСостоянияСинхронизации();
		ЗаполнитьЗначенияСвойств(СтруктураСостояния, ПараметрыСеанса.СостояниеСинхронизацииСМобильнымПриложением);
	КонецЕсли; 
	СтруктураСостояния.Завершено          = Истина;
	СтруктураСостояния.ЗавершеноСОшибками = Истина;
	
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Узел = СтруктураСостояния.Узел;
	КонецЕсли;
	Действие = СтруктураСостояния.Действие;
	
	Если ТипЗнч(ЭтапОбмена) = Тип("Строка") Тогда
		ЭтапОбмена = Перечисления.ДействияПриОбмене[ЭтапОбмена];
	КонецЕсли;
	
	// Формируем представление ошибки
	Если ЗначениеЗаполнено(Действие) Тогда
		
		Если ЗначениеЗаполнено(Узел) Тогда
			НачалоТекстаОшибки = НСтр("ru = 'Ошибка при выполнении операции ""%1"" для мобильного устройства ""%2""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			НачалоТекстаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НачалоТекстаОшибки, Действие, Узел);
		Иначе
			НачалоТекстаОшибки = НСтр("ru = 'Ошибка при выполнении операции ""%1"" обмена данными с мобильными устройствами'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			НачалоТекстаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НачалоТекстаОшибки, Действие, Узел);
		КонецЕсли;
		
	Иначе
		
		НачалоТекстаОшибки = "";
		
	КонецЕсли; 
	 
	
	Если ТипЗнч(Ошибка) = Тип("Строка") Тогда
		
		ПредставлениеОшибки = НачалоТекстаОшибки + Символы.ПС +  Ошибка;
		ПодробностиОшибки = "";
		
	Иначе
		
		ПредставлениеОшибки = НачалоТекстаОшибки + Символы.ПС + КраткоеПредставлениеОшибки(Ошибка);
		ПодробностиОшибки = ПодробноеПредставлениеОшибки(Ошибка);
		
	КонецЕсли; 
	
	// Обновляем параметры сеанса
	СтруктураСостояния.ПредставлениеОшибки = ПредставлениеОшибки; 
	СтруктураСостояния.ПодробностиОшибки   = ПодробностиОшибки; 
	СтруктураСостояния.ОписаниеОбъекта =  Строка(ОписаниеОбъекта); 
	
	ПараметрыСеанса.СостояниеСинхронизацииСМобильнымПриложением = Новый ФиксированнаяСтруктура(СтруктураСостояния);
	
	Если СтруктураСостояния.Свойство("АдресВременногоХранилища") И ЗначениеЗаполнено(СтруктураСостояния.АдресВременногоХранилища) Тогда
		ПоместитьВоВременноеХранилище(СтруктураСостояния, СтруктураСостояния.АдресВременногоХранилища);
	КонецЕсли;	
	
	// Добавляем запись в журнал регистрации
	КлючСообщения = КлючСообщенияОбменаДляУзла(Узел, ЭтапОбмена);
	Если ЗначениеЗаполнено(ОписаниеОбъекта) Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ОписаниеОбъекта));
		Объект = ОписаниеОбъекта;
	Иначе
		МетаданныеОбъекта = Неопределено;
		Объект = Неопределено;
	КонецЕсли; 
	
	ЗаписьЖурналаРегистрации(КлючСообщения, 
		УровеньЖурналаРегистрации.Ошибка, 
		МетаданныеОбъекта, 
		Объект, 
		ПредставлениеОшибки + Символы.ПС + ПодробностиОшибки); 

КонецПроцедуры

// Возвращает номер версии обмена, ниже которой обмен не поддерживается
Функция МинимальноДопустимаяВерсияОбмена() Экспорт

	Возврат "1.5.1";

КонецФункции

// Возвращает номер текущей версии обмена
Функция НомерВерсииОбмена() Экспорт

	Возврат "1.6.3";

КонецФункции

// Возвращает ключ сообщения в журнал регистрации для указанного в параметрах узла
//	с учетом пустого значения
Функция КлючСообщенияОбменаДляУзла(Узел, ДействиеПриОбмене) Экспорт

	КлючСообщения = ОбменМобильноеПриложение.КлючСобытияЖурналаРегистрации(ДействиеПриОбмене);
	
	//Если ЗначениеЗаполнено(Узел) И ТипЗнч(Узел) = Тип("ПланОбменаСсылка.МобильноеПриложение") Тогда
	//	
	//	КлючСообщения = КлючСообщения  + "." + Узел.Код;
	//	
	//КонецЕсли; 

	Возврат КлючСообщения;
	
КонецФункции

// Определяет авторизованность указанного провайдера.
//
// Параметры:
//  Провайдер	 	- Перечисление.ТипыПровайдеровREST - Провайдер услуг облачного хранилища
//  ОпрашиватьСервер  - Булево - Истина, если необходимо выполнить серверные вызовы для пущей уверенности
// 
// Возвращаемое значение:
//  Булево - Истина, если провайдер доступен
//
Функция ПровайдерАвторизован(Знач Провайдер, Знач ОпрашиватьСервер = Истина) Экспорт		
	Возврат RESTКлиентСервер.ПриложениеАвторизовано(Провайдер, ОпрашиватьСервер);
КонецФункции

// Возвращает каталог обмена указанного провайдера.
//
// Параметры:
//  Провайдер	 - Перечисление.ТипыПровайдеровREST - Провайдер услуг облачного хранилища
// 
// Возвращаемое значение:
//  Строка - Каталог обмена для указанного провайдера
//
Функция КаталогОбменаПровайдера(Знач Провайдер) Экспорт
	
	Параметры = RESTКлиентСервер.СвойстваПровайдера(Провайдер);
	Если Параметры = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат Параметры.КаталогОбмена;
	КонецЕсли;
	
КонецФункции

// Возвращает строковое представление провайдера
//
// Параметры:
//  Провайдер	 - Перечисление.ТипыПровайдеровREST - Провайдер услуг облачного хранилища
// 
// Возвращаемое значение:
//  Строка - Строковое представление провайдера
//
Функция ПредставлениеПровайдера(Знач Провайдер) Экспорт
	
	Если Провайдер = Неопределено Тогда
		СвойстваАккаунта = RESTВызовСервера.НастройкиАккаунтаИзПараметровСеанса();
	Иначе
		СвойстваАккаунта = RESTВызовСервера.НастройкиАккаунтаИзБезопасногоХранилища(Провайдер);
	КонецЕсли;
	
	Если СвойстваАккаунта = Неопределено Тогда
		Возврат "";
	Иначе 
		Возврат СвойстваАккаунта.ПредставлениеАккаунта;
	КонецЕсли;
	
КонецФункции

Функция КодироватьURLКакURL(Строка) Экспорт

	Возврат КодироватьСтроку(Строка, СпособКодированияСтроки.URLВКодировкеURL);

КонецФункции

Функция КодироватьСтрокуКакURL(Строка) Экспорт

	Возврат КодироватьСтроку(Строка, СпособКодированияСтроки.КодировкаURL);

КонецФункции

// Конвертирует строку из UTF-8 в строку вида "\u0410\u0440\..."
//	Символы с 1 по 127 не конветрируются
//
//Параметры:
//	Строка - Строка - конвертуруемый текст
//
//Возвращаемое значение:
//	Строка
//
Функция КодироватьСтрокуКакUnicode(Строка) Экспорт

	Результат = "";
	Для Счетчик = 1 по СтрДлина(Строка) Цикл
		Результат = Результат + СимволJSONEncode(Сред(Строка, Счетчик, 1));
	КонецЦикла;

	Возврат Результат;

КонецФункции
 
// Преобразует закодированную строку из Unicode в строку
//
// Параметры:
//  Данные	 - Строка - Закодированная строка
// 
// Возвращаемое значение:
//  Строка - Результирующая перекодированная строка
//
Функция UnicodeВСтроку(Знач Данные) Экспорт
	Результат = "";
	Маркер = 1;
	
	Пока Маркер <= СтрДлина(Данные) Цикл
		ТекСимвол = Сред(Данные, Маркер, 1);
		
		Если ТекСимвол=" " Тогда
			Результат = Результат + ТекСимвол;
			Маркер = Маркер + 1;
		ИначеЕсли ТекСимвол = "\" Тогда  //Нашли закодированный символ
			Маркер = Маркер + 2;
			Вес = 4096;
			ГотовыйКодСимвола = 0;
			Для Поз = 0 По 3 Цикл
				ТекущийКодСимвола = КодСимвола(Данные, Маркер + Поз);
				Если ТекущийКодСимвола > 96 Тогда // a-f
					ТекущийКодСимвола = ТекущийКодСимвола - 87;
				ИначеЕсли ТекущийКодСимвола > 64 Тогда // A-F
					ТекущийКодСимвола = ТекущийКодСимвола - 55;
				Иначе
					ТекущийКодСимвола = ТекущийКодСимвола - 48; // 0-9
				КонецЕсли;
				ГотовыйКодСимвола = ГотовыйКодСимвола + ТекущийКодСимвола*Вес;
				Вес = Вес / 16;
			КонецЦикла;
			Результат = Результат + Символ(ГотовыйКодСимвола);
			Маркер = Маркер + 4; // Смещаемся на след. символ
		Иначе
			Маркер = Маркер + 1;
			Результат = Результат + ТекСимвол;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

//Перевод чисел из десятичной в любую (с количеством цифр до 36) позиционную систему счисления
Функция ЧислоВДругойНотации(Знач Значение = 0, Нотация = 36) Экспорт
	Если Нотация <= 0 Тогда
		Возврат("");
	КонецЕсли;
	Значение = Число(Значение);
	Если Значение <= 0 Тогда
		Возврат("0");
	КонецЕсли;
	Значение = Цел(Значение);
	Результат = "";
	Пока Значение > 0 Цикл
		Результат = Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", Значение % Нотация + 1, 1) + Результат;
		Значение = Цел(Значение / Нотация);
	КонецЦикла;
	Возврат Нрег(Результат);
КонецФункции


#КонецОбласти





#Область СлужебныйИнтерфейс

Функция СимволJSONEncode(СимволИзТекста) 

	Код = КодСимвола(СимволИзТекста);
	Если Код < 127 Тогда
		Возврат СимволИзТекста;
	КонецЕсли;
	
	Уникод = ЧислоВДругойНотации(Код, 16);
	Пока СтрДлина(Уникод) < 4 Цикл
		Уникод = "0" + Уникод;
	КонецЦикла;
	 
	Возврат "\u" + Уникод;

КонецФункции

#КонецОбласти


