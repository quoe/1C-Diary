
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
// ОбщийМодуль.ИнтернетПоддержкаПользователейВызовСервера.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет, доступна ли текущему пользователю настройка параметров
// подключения к Интернет-поддержке в текущем режиме работы.
//
// Возвращаемое значение:
//	Булево - Истина, если настройка параметров доступна текущему пользователю;
//		Ложь - в противном случае.
//
Функция ДоступнаНастройкаПараметровПодключенияКИнтернетПоддержке() Экспорт
	
	Результат = Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь)
		И (Не ОбщегоНазначения.РазделениеВключено()
		Или Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных())
		И Не (ИнтернетПоддержкаПользователей.ИспользоватьПолучитьРежимВнешнихРесурсов());
	Возврат Результат;
	
КонецФункции

// Определяет, доступно ли текущему пользователю выполнение подключения
// Интернет-поддержки: авторизация/регистрация пользователя, регистрация
// программного продукта в соответствии с текущим режимом работы
// и правами пользователя.
//
// Возвращаемое значение:
//	Булево - Истина - подключение Интернет-поддержки доступно,
//		Ложь - в противном случае.
//
Функция ДоступноПодключениеИнтернетПоддержки() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.ДоступноПодключениеИнтернетПоддержки();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Записывает в журнал регистрации описание ошибки
// с именем события "Интернет-поддержка пользователей.Ошибка".
//
// Параметры:
//	СообщениеОбОшибке - Строка - строковое представление ошибки.
//	Данные - Произвольный - данные, к которым относится сообщение об ошибке.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке, Данные = Неопределено) Экспорт
	
	ИнтернетПоддержкаПользователей.ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке, Данные);
	
КонецПроцедуры

#Область ОбработкаБизнесПроцессов

// Возвращает настройку "НеНапоминатьОбАвторизацииДо".
//
// Возвращаемое значение:
// Дата - дата, до которой не следует напоминать об авторизации в сервисе ИПП
//	при запуске программы.
//
Функция ЗначениеНастройкиИППНеНапоминатьОбАвторизацииДо() Экспорт
	
	НеНапоминатьОбАвторизацииДо = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ИнтернетПоддержкаПользователей",
		"НеНапоминатьОбАвторизацииДо",
		'00010101');
	
	Возврат НеНапоминатьОбАвторизацииДо;
	
КонецФункции

// Устанавливает настройку "НеНапоминатьОбАвторизацииДо".
//
// Параметры:
//	УстанавливатьНастройку - Булево - установить или сбросить дату
//		для "НеНапоминатьОбАвторизацииДо".
//
Процедура УстановитьНастройкуИППНеНапоминатьОбАвторизацииДо(УстанавливатьНастройку) Экспорт
	
	СемьДнейВСекундах = 60 * 60 * 24 * 7;
	ЧерезСемьДней = НачалоДня(ТекущаяДатаСеанса() + СемьДнейВСекундах);
	НеНапоминатьОбАвторизацииДо = ?(УстанавливатьНастройку, ЧерезСемьДней, '00010101');
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ИнтернетПоддержкаПользователей",
		"НеНапоминатьОбАвторизацииДо",
		НеНапоминатьОбАвторизацииДо);
	
КонецПроцедуры

// Создает новый контекст взаимодействия с сервисом ИПП, в рамках которого
// выполняются все команды сервиса ИПП.
//
// Параметры:
//	МестоЗапуска - Строка - имя команды, использованной для запуска
//		механизма ИПП;
//	ПараметрыИПП - Структура - см. функцию ПараметрыСозданияКонтекста().
//	ПовторныйЗапуск - Булево - Истина, если запуск выполняется повторно.
//	СтартовыеПараметры - Структура, Неопределено - параметры, переданные при
//		запуске механизма.
//	ПриНачалеРаботыСистемы - Булево - признак начала бизнес-процесса при
//		при начале работы системы.
//
// Возвращаемое значение:
// Структура - структура с полями:
//	* ОписаниеСервисаИПП - Структура - см. функцию
//		ИнтернетПоддержкаПользователейКлиентСервер.НовыйОписаниеСервисаИПП();
//	* СетевыеПараметрыИПП - Структура - сетевые параметры ИПП, присутствует
//			только при подключении из клиентского приложения;
//		** ТаймаутСети - Число - таймаут подключения к сервису ИПП;
//	* КСКонтекст - Структура - клиент-серверный контекст взаимодействия;
//		** ОсновныеПараметры - Структура - см. функцию НовыйОсновныеПараметрыКонтекста();
//		** КонтекстРегистрации - Структура, Неопределено - контекст регистрации
//			программного продукта;
//		** Логин - Строка - Логин, с которым авторизовался пользователь ИПП;
//		** Пароль - Строка - Пароль,  с которым авторизовался пользователь ИПП;
//		** СессионныеПараметры - Соответствие - сеансовые данные, хранимые и
//			в сеансе взаимодействия с сервисом ИПП;
//		** СетевыеПараметрыИПП - Структура - сетевые параметры ИПП, присутствует
//				только при подключении из клиентского приложения;
//			*** ТаймаутСети - Число - таймаут подключения к сервису ИПП;
//		** ПриНачалеРаботыСистемы - Булево - запуск выполняется при начале работы системы;
//	* СтартовыеПараметрыМеханизма - Структура - параметры, с которыми был
//		выполнен запуск механизма. Копия параметра СтартовыеПараметры.
//
Функция НовыйКонтекстВзаимодействия(
	Знач МестоЗапуска,
	Знач ПовторныйЗапуск,
	Знач СтартовыеПараметры,
	Знач ПриНачалеРаботыСистемы = Ложь) Экспорт
	
	Результат = Новый Структура;
	
	ПараметрыИПП = ПараметрыСозданияКонтекста(МестоЗапуска, ПриНачалеРаботыСистемы);
	
	СтруктураЗапуска = ИнтернетПоддержкаПользователейКлиентСервер.ОпределитьВозможностьЗапускаПоМестуИПараметрам(
		МестоЗапуска,
		ПараметрыИПП);
	
	Если СтруктураЗапуска <> Неопределено Тогда
		// Если запуск запрещен, тогда возврат
		Результат.Вставить("УправляющаяСтруктураЗапуска", СтруктураЗапуска);
		Возврат Результат;
	КонецЕсли;
	
	// Создание контекста, используемого на клиенте и на сервере
	КСКонтекст = Новый Структура;
	КСКонтекст.Вставить("КонтекстРегистрации"         , Неопределено);
	КСКонтекст.Вставить("Логин"                       , "");
	КСКонтекст.Вставить("СессионныеПараметры"         , Новый Соответствие);
	КСКонтекст.Вставить("ПриНачалеРаботыСистемы"      , ПриНачалеРаботыСистемы);
	КСКонтекст.Вставить("ВыполненВызовОперацииСервиса", Ложь);
	
	ОсновныеПараметры = НовыйОсновныеПараметрыКонтекста();
	ОсновныеПараметры.МестоЗапуска          = МестоЗапуска;
	ОсновныеПараметры.ИмяWSОпределения      = ИнтернетПоддержкаПользователейКлиентСервер.АдресWSDLСервисаБизнесПроцессов();
	ОсновныеПараметры.URIСервиса            = ИнтернетПоддержкаПользователейКлиентСервер.URIСервисаСервисаБизнесПроцессов();
	ОсновныеПараметры.ПовторныйЗапуск       = ПовторныйЗапуск;
	ОсновныеПараметры.ОбращениеССервера     = ПараметрыИПП.ОбращениеССервера;
	
	СетевыеПараметрыИПП = Новый Структура;
	СетевыеПараметрыИПП.Вставить("ТаймаутСети", ПараметрыИПП.ТаймаутСети);
	
	Если ОсновныеПараметры.ОбращениеССервера Тогда
		
		ОсновныеПараметры.Вставить("СетевыеПараметрыИПП", СетевыеПараметрыИПП);
		
	Иначе
		Результат.Вставить("ОписаниеСервисаИПП" , Неопределено);
		Результат.Вставить("СетевыеПараметрыИПП", СетевыеПараметрыИПП);
	КонецЕсли;
	
	ЗаписатьСтартовыеПараметрыКонтекста(СтартовыеПараметры, КСКонтекст);
	ЗаписатьСтартовыеПараметрыКонтекста(ПараметрыИПП.ОбщиеСтартовыеПараметры, КСКонтекст);
	
	КСКонтекст.Вставить("ОсновныеПараметры", ОсновныеПараметры);
	
	Результат.Вставить("КСКонтекст"    , КСКонтекст);
	Результат.Вставить("ФормыОбработки", Новый Соответствие);
	
	// Сохранение в контексте взаимодействия стартовых параметров механизма.
	// Необходимы для повтора подключения из формы ошибки обращения к сервису ИПП.
	Результат.Вставить("СтартовыеПараметрыМеханизма", СтартовыеПараметры);
	
	// Доп. обработчик бизнес-процесса
	СерверныйОбработчик = ИнтернетПоддержкаПользователей.СерверныйОбработчикБизнесПроцесса(
		МестоЗапуска,
		"ПриСозданииКонтекстаВзаимодействия");
	
	Если СерверныйОбработчик <> Неопределено Тогда
		СерверныйОбработчик.ПриСозданииКонтекстаВзаимодействия(Результат);
	КонецЕсли;
	
	Результат.Вставить("ДополнительныеСтартовыеПараметры", ПараметрыИПП.ДополнительныеСтартовыеПараметры);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Тарификация

Функция УслугаПодключена(Знач ИдентификаторУслуги, Знач ЗначениеРазделителя = Неопределено) Экспорт
	
	Результат = ИнтернетПоддержкаПользователей.УслугаПодключена(ИдентификаторУслуги, ЗначениеРазделителя);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЛогИОтладка

// Процедура записывает сообщение в журнал регистрации.
//
// Параметры:
//  ИмяСобытия                      - строка;
//  ИдентификаторШага               - строка;
//  УровеньРегистрации              - строковое представление константы УровеньЖурналаРегистрации;
//  ОбъектМетаданных                - строковое представление объекта метаданных;
//  Данные                          - данные;
//  Комментарий                     - строка - произвольный комментарий;
//  ВестиПодробныйЖурналРегистрации - Булево - признак записи незначащих событий (Информации и Примечания).
//
Процедура ЗаписатьСообщениеВЖурналРегистрации(
			ИмяСобытия,
			ИдентификаторШага,
			УровеньРегистрации = "Ошибка",
			ОбъектМетаданных = "",
			Данные = Неопределено,
			Комментарий = "",
			ВестиПодробныйЖурналРегистрации = Истина) Экспорт

	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		ИмяСобытия,
		ИдентификаторШага,
		УровеньРегистрации,
		ОбъектМетаданных,
		Данные,
		Комментарий,
		ВестиПодробныйЖурналРегистрации);

КонецПроцедуры

// Выгружает журнал регистрации по событиям во временное хранилище.
//
// Параметры:
//  ПараметрыОтбора - Структура - структура с ключами:
//   * ДатаНачала    - Дата - начало периода журнала;
//   * ДатаОкончания - Дата - конец периода журнала;
//   * Событие       - Массив - массив событий (см. ОблачныйАрхивКлиентСервер.ПолучитьСписокВсехСобытийЖурналаРегистрации).
//  ПараметрыФайлаВыгрузки - Структура, Неопределено - структура с ключами:
//   * Архивировать - Булево - Истина, если необходимо архивировать выгрузку.
//
// Возвращаемое значение:
//   Структура с ключами:
//    * АдресВременногоХранилищаФайла - Строка - Адрес выгруженных данных в хранилище;
//    * ТекстОшибки - Строка - Текст ошибки или пустая строка.
//
Функция ВыгрузитьВсеСобытияЖурналаРегистрации(ПараметрыОтбора, ПараметрыФайлаВыгрузки) Экспорт

	Результат = ИнтернетПоддержкаПользователей.ВыгрузитьВсеСобытияЖурналаРегистрации(ПараметрыОтбора, ПараметрыФайлаВыгрузки);

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПередНачаломРаботыСистемы(Знач ПараметрыКлиента) Экспорт
	
	Результат = Новый Структура;
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.ПараметрыКлиентаНаСервереБИП = Новый ФиксированнаяСтруктура(ПараметрыКлиента);
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат.Вставить("ДоступнаРаботаСНастройкамиКлиентаЛицензирования",
		ИнтернетПоддержкаПользователей.ДоступнаРаботаСНастройкамиКлиентаЛицензирования());
	Возврат Результат;
	
КонецФункции

// Преобразует переданную строку в форматированную строку текста HTML.
//
Функция ФорматированнаяСтрокаИзHTML(Знач ТекстСообщения) Экспорт
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.ФорматированнаяСтрокаИзHTML(
		ТекстСообщения);
	
КонецФункции

#Область БСПНастройкиПрограммы

Процедура ВыйтиИзИПП() Экспорт
	
	// Проверка права записи данных
	Если Не ИнтернетПоддержкаПользователей.ПравоЗаписиПараметровИПП() Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для записи данных аутентификации Интернет-поддержки.'");
	КонецЕсли;
	
	// Запись данных
	УстановитьПривилегированныйРежим(Истина);
	ИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(Неопределено);
	
КонецПроцедуры

Процедура ИнтернетПоддержкаИСервисы_ПодключатьсяКСерверамВЗонеEuИзменении(Знач Значение) Экспорт
	
	Константы.ДоменРасположенияСерверовИПП.Установить(Значение);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаБизнесПроцессов

// Служебная Функция для определения зарегистрирована ли текущая конфигурация
// в сервисе Интернет-поддержки.
// Предназначена для выполнения на стороне сервера 1С:Предприятия
// в клиент-серверном варианте работы (если взаимодействие с веб-сервисом
// ИПП осуществляется на стороне кластера серверов) или в режиме веб-клиента.
//
// Параметры:
//	ОбращениеССервера - Булево - выходной параметр - Истина, если
//		обращение к сервису ИПП осуществляется с сервера 1С:Предприятия;
//	ПараметрыИПП - Структура - если обращение выполняется из клиента,
//		то в структуре возвращаются необходимые параметры для
//		работы на клиентской стороне (см. функцию СетевыеПараметрыИнтернетПоддержки());
//	ОшибкаОбращенияКВебСервису - Булево - выходной параметр - Истина,
//		если в процессе обращения к сервису ИПП произошла ошибка
//		и "зарегистрированность" конфигурации проверить не удалось.
//
// Возвращаемое значение:
//	Булево - Истина, если конфигурация зарегистрирована в сервисе ИПП,
//		Ложь - если не зарегистрирована или в процессе обращения к сервису ИПП
//		произошла ошибка.
//
Функция КонфигурацияЗарегистрированаВСервисеИПП(ОшибкаОбращенияКВебСервису = Ложь) Экспорт
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.КонфигурацияЗарегистрированаВСервисеИПП(
		ОшибкаОбращенияКВебСервису);
	
КонецФункции

// Возвращает все необходимые для работы с сервисом Интернет-поддержки
// параметры за одно обращение к серверу.
// Для минимизации объема передаваемой между клиентом и сервером информации
// возвращаются только необходимые параметры в зависимости от места вызова
// (клиент или сервер).
//
// Параметры:
//	МестоЗапуска - Строка - кнопка старта механизма ИПП;
//	ПриНачалеРаботыСистемы - Булево - признак начала бизнес-процесса при
//		при начале работы системы.
//
// Возвращаемое значение:
// Структура - структура с полями:
//	* МестоЗапуска - Строка - точка входа бизнес-процесса;
//	* ПриНачалеРаботыСистемы - Булево - Истина, если запуск бизнес-процесса
//		выполняется при начале работы системы;
//	* ИспользоватьИнтернетПоддержку - Булево - Истина, если разрешено
//		использование ИПП для текущего режима работы ИБ;
//	* ЗапускРазрешен - Булево - Истина, если текущему пользователю разрешен
//		запуск ИПП;
//	* ИспользоватьИнформационноеОкно - Булево - Истина, если в конфигурации
//		предусмотрено использование информационного окна;
//	* ТаймаутСети - Число - таймаут подключения к сервису ИПП в секундах;
//	* ОбращениеССервера - Булево - Истина, если соединение с сервисом ИПП
//		осуществляется на сервере информационной базы;
//	* НеНапоминатьОбАвторизацииДо - Дата - дата, по которую включительно
//		необходимо отключить напоминание об авторизации в ИПП при
//		старте программы
//	* ОбщиеСтартовыеПараметры - Структура - стартовые параметры механизма,
//		зачитанные из настроек подсистемы.
//
Функция ПараметрыСозданияКонтекста(МестоЗапуска, ПриНачалеРаботыСистемы)
	
	Результат = Новый Структура;
	
	Результат.Вставить("МестоЗапуска"          , МестоЗапуска);
	Результат.Вставить("ПриНачалеРаботыСистемы", ПриНачалеРаботыСистемы);
	Результат.Вставить("ДополнительныеСтартовыеПараметры", Новый Массив);
	
	Результат.Вставить("РаботаВМоделиСервиса", ОбщегоНазначения.РазделениеВключено());
	Если Результат.РаботаВМоделиСервиса Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ИнтернетПоддержкаПользователейКлиентСервер.ЭтоБазовыйБизнесПроцесс(МестоЗапуска) Тогда
		
		// В базовой функциональности доступен только бизнес-процесс
		// по точке входа "connectIPP".
		Результат.Вставить("ЗапускРазрешен", ДоступноПодключениеИнтернетПоддержки());
		
	Иначе
		
		Результат.Вставить("ЗапускРазрешен", Истина);
		// Вызов обработчика бизнес-процесса
		СерверныйОбработчик = ИнтернетПоддержкаПользователей.СерверныйОбработчикБизнесПроцесса(
			МестоЗапуска,
			"ПараметрыСозданияКонтекста");
		
		Если СерверныйОбработчик <> Неопределено Тогда
			ПрерватьОбработку = Ложь;
			СерверныйОбработчик.ПараметрыСозданияКонтекста(Результат, ПрерватьОбработку);
			Если ПрерватьОбработку Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Результат.ЗапускРазрешен Тогда
		Возврат Результат;
	КонецЕсли;
	
	
	НастройкиСоединения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	Результат.Вставить("ОбращениеССервера", Истина);
	Результат.Вставить("ТаймаутСети"      , 30);
	
	// Заполнение общих стартовых параметров
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщиеСтартовыеПараметры = Новый Структура;
	
	ДанныеИПП = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ИнтернетПоддержкаПользователей.ИдентификаторПодсистемы(),
		"login, password, regnumber");
	
	Если ДанныеИПП.login <> Неопределено Тогда
		ОбщиеСтартовыеПараметры.Вставить("login", ДанныеИПП.login);
	КонецЕсли;
	
	Если ДанныеИПП.password <> Неопределено Тогда
		ОбщиеСтартовыеПараметры.Вставить("password", ДанныеИПП.password);
	КонецЕсли;
	
	Если ДанныеИПП.regnumber <> Неопределено Тогда
		ОбщиеСтартовыеПараметры.Вставить("regnumber", ДанныеИПП.regnumber);
	КонецЕсли;
	
	Результат.Вставить("ОбщиеСтартовыеПараметры", ОбщиеСтартовыеПараметры);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Определяет состав основных параметров контекста взаимодействия с сервисом
// ИПП.
//
// Возвращаемое значение:
// Структура - структура с полями:
//	* ИмяWSОпределения - Строка - адрес WSDL-описания сервиса ИПП;
//	* URIСервиса - Строка - URI пространства имен сервиса;
//	* МестоЗапуска - Строка - имя кнопки вызова сервиса ИПП;
//	* ПовторныйЗапуск - Булево - Истина, если выполняется повторный запуск
//		механизма ИПП;
//	* ОбращениеССервера - Булево - Истина, если соединение с сервисом ИПП
//		устанавливается на сервере ИБ;
//
Функция НовыйОсновныеПараметрыКонтекста()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяWSОпределения" , "");
	Результат.Вставить("URIСервиса"       , "");
	Результат.Вставить("МестоЗапуска"     , "");
	Результат.Вставить("ПовторныйЗапуск"  , Ложь);
	Результат.Вставить("ОбращениеССервера", Истина);
	
	Возврат Результат;
	
КонецФункции

// Получение команд сервиса ИПП и выполнение команд сервиса или возврат
// управления клиентской стороне.
//
Процедура ОбработкаКомандСервиса(
	КСКонтекст,
	Знач ПараметрыЗапроса,
	КонтекстОбработчика,
	Знач Продолжение,
	СоздаваемыйКонтекстВзаимодействия = Неопределено,
	Знач ДопПараметры = Неопределено) Экспорт
	
	ПараметрыОбращенияКСервисуИПП     = Неопределено;
	МассивСессионныхПараметровЗапроса = Неопределено;
	ПараметрыСозданияКонтекста        = Неопределено;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ПараметрыОбращенияКСервисуИПП") Тогда
			ПараметрыОбращенияКСервисуИПП = ДопПараметры.ПараметрыОбращенияКСервисуИПП;
		КонецЕсли;
		Если ДопПараметры.Свойство("МассивСессионныхПараметровЗапроса") Тогда
			МассивСессионныхПараметровЗапроса = ДопПараметры.МассивСессионныхПараметровЗапроса;
		КонецЕсли;
		Если ДопПараметры.Свойство("ПараметрыСозданияКонтекста") Тогда
			ПараметрыСозданияКонтекста = ДопПараметры.ПараметрыСозданияКонтекста;
		КонецЕсли;
	КонецЕсли;
	
	Если КСКонтекст = Неопределено Тогда
		
		// Создание контекста взаимодействия с сервисом ИПП при первом запуске
		СоздаваемыйКонтекстВзаимодействия = НовыйКонтекстВзаимодействия(
			ПараметрыСозданияКонтекста.МестоЗапуска,
			ПараметрыСозданияКонтекста.ПовторныйЗапуск,
			ПараметрыСозданияКонтекста.СтартовыеПараметры);
		
		Если СоздаваемыйКонтекстВзаимодействия.Свойство("УправляющаяСтруктураЗапуска")
			ИЛИ НЕ СоздаваемыйКонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры.ОбращениеССервера Тогда
			Возврат;
		КонецЕсли;
		
		КСКонтекст = СоздаваемыйКонтекстВзаимодействия.КСКонтекст;
		
	КонецЕсли;
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	ОбработатьОтвет = Истина;
	
	Если ТипЗнч(ПараметрыОбращенияКСервисуИПП) = Тип("Структура") Тогда
		ПараметрыОбращенияКСервисуИПП.Свойство("ОбработатьОтвет", ОбработатьОтвет);
	КонецЕсли;
	
	// При продолжении обращение к веб-сервису не выполняется
	Если НЕ Продолжение Тогда
		
		// Всегда будет хотя бы один параметр запроса
		Если ТипЗнч(ПараметрыЗапроса) <> Тип("Массив") Тогда
			ПараметрыЗапроса = Новый Массив;
		КонецЕсли;
		
		ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьСессионныеПараметрыКЗапросу(
			КСКонтекст,
			ПараметрыЗапроса,
			МассивСессионныхПараметровЗапроса);
		
		Если СоздаваемыйКонтекстВзаимодействия <> Неопределено Тогда
			ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьДополнительныеСтартовыеПараметрыЗапроса(
				КСКонтекст,
				СоздаваемыйКонтекстВзаимодействия.ДополнительныеСтартовыеПараметры,
				ПараметрыЗапроса);
		КонецЕсли;
		
		ИспользоватьТаймаутПервогоВызова =(ОсновныеПараметры.МестоЗапуска = "systemStartNew"
			И Не КСКонтекст.ВыполненВызовОперацииСервиса);
		
		ДобавитьКомандыСервиса(
			ОсновныеПараметры,
			ПараметрыЗапроса,
			КонтекстОбработчика,
			ИспользоватьТаймаутПервогоВызова);
		
		КСКонтекст.ВыполненВызовОперацииСервиса = Истина;
		
		Если ОбработатьОтвет <> Истина Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Пока нет ошибки, препятствующей продолжению выполнения команд,
	// выполнять команды сервера.
	Попытка
		
		// Пока есть команды для выполнения
		Пока КонтекстОбработчика.Команды.Количество() > 0
			И НЕ КонтекстОбработчика.ПроизошлаОшибка
			И НЕ КонтекстОбработчика.ВыполнитьОстановку Цикл
			
			ТекущаяКоманда = КонтекстОбработчика.Команды[0];
			ТипКоманды = ИнтернетПоддержкаПользователейКлиентСервер.ТипКоманды(
				ТекущаяКоманда,
				ОсновныеПараметры.ОбращениеССервера,
				ОсновныеПараметры.МестоЗапуска);
			
			// Определение контекста выполнения - на сервере или на клиенте
			Если ТипКоманды = -1 Тогда
				
				// Если тип команды определить не удалось, тогда извлечь ее из стека и
				// продолжить выполнение.
				КонтекстОбработчика.Команды.Удалить(0);
				Продолжить;
				
			ИначеЕсли ТипКоманды = 0 Тогда
				
				// Извлечение команды из стека и выполнение ее на сервере информационной базы
				КонтекстОбработчика.Команды.Удалить(0);
				ВыполнитьКомандуСервиса(КСКонтекст, ТекущаяКоманда, КонтекстОбработчика);
				
			Иначе
				
				// Возврат управления клиентскому приложению
				Возврат;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		КонтекстОбработчика.ПроизошлаОшибка = Истина;
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("ПрерватьБизнесПроцесс");
		КонтекстОбработчика.ПолноеОписаниеОшибки = НСтр("ru = 'Произошло необрабатываемое исключение.'")
			+ " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Неизвестная ошибка. Подробнее см. в журнале регистрации.'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";
		
	КонецПопытки;
	
	// Если произошла ошибка, тогда завершить сеанс Интернет-поддержки с обработкой ошибок.
	Если КонтекстОбработчика.ПроизошлаОшибка Тогда
		ЗавершитьСеансИнтернетПоддержки(КСКонтекст, КонтекстОбработчика);
	КонецЕсли;
	
КонецПроцедуры

// Обращение к сервису ИПП и добавление команд в стек команд контекста
// обработчика команд.
//
Процедура ДобавитьКомандыСервиса(
	ОсновныеПараметры,
	ДополнительныеПараметры,
	КонтекстОбработчика = Неопределено,
	ИспользоватьТаймаутПервогоВызова = Ложь) Экспорт
	
	Попытка
		
		ОписаниеСервисаИППНаСервере =
			ИнтернетПоддержкаПользователейКлиентСервер.НовыйОписаниеСервисаИПП(
				ОсновныеПараметры.ИмяWSОпределения,
				?(ОсновныеПараметры.МестоЗапуска = "systemStartNew", 10, -1));
		
	Исключение
		
		Если ТипЗнч(КонтекстОбработчика) = Тип("Структура") Тогда
			КонтекстОбработчика.ПроизошлаОшибка      = Истина;
			КонтекстОбработчика.ПолноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
			КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ОтобразитьФормуОтсутствуетПодключение";
			КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
				НСтр("ru = 'Ошибка при подключении к сервису Интернет-поддержки'");
		КонецЕсли;
		
		Возврат;
		
	КонецПопытки;
	
	ДлительностьПолученияОписанияСервиса =
		ОписаниеСервисаИППНаСервере.ПроксиСервиса.ДлительностьПолученияОписанияСервиса;
	Если ИспользоватьТаймаутПервогоВызова Тогда
		Таймаут = 10 - ДлительностьПолученияОписанияСервиса;
		Если Таймаут < 1 Тогда
			Таймаут = 1;
		КонецЕсли;
	Иначе
		Таймаут = -1; // Использовать таймаут по умолчанию.
	КонецЕсли;
	
	Попытка
		
		ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьКомандыСервиса(
			ОписаниеСервисаИППНаСервере,
			ДополнительныеПараметры,
			КонтекстОбработчика,
			ОсновныеПараметры,
			Таймаут);
		
	Исключение
		
		Если ТипЗнч(КонтекстОбработчика) = Тип("Структура") Тогда
			КонтекстОбработчика.ПроизошлаОшибка      = Истина;
			КонтекстОбработчика.ПолноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
			КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ОтобразитьФормуОтсутствуетПодключение";
			КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
				НСтр("ru = 'Ошибка при получении данных с сервера Интернет-поддержки.'");
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

// Диспетчер выполнения команд сервиса ИПП на стороне сервера 1С:Предприятия
//
Процедура ВыполнитьКомандуСервиса(КСКонтекст, СтруктураКоманды, КонтекстОбработчика)
	
	ИмяКоманды = Неопределено;
	СтруктураКоманды.Свойство("ИмяКоманды", ИмяКоманды);
	
	Если ИмяКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяКоманды = "store.get" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ВыполнениеКомандыПрочитатьПараметры(
			Новый Структура("КСКонтекст", КСКонтекст),
			СтруктураКоманды,
			КонтекстОбработчика,
			Истина);
		
	ИначеЕсли ИмяКоманды = "store.put" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ВыполнениеКомандыЗаписьПараметров(
			КСКонтекст,
			СтруктураКоманды,
			КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "store.delete" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.УдалитьПараметрыКонтекста(
			КСКонтекст,
			СтруктураКоманды,
			КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "launchservice" Тогда
		ИзменитьБизнеспроцесс(КСКонтекст, СтруктураКоманды, КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "store.putorganizations" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьСписокОрганизаций(КСКонтекст, СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "store.putadressclassifier" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьАдресныйКлассификатор(КСКонтекст, СтруктураКоманды);
		
	Иначе
		
		// Обработка команды через доп. обработчик бизнес-процесса
		СерверныйОбработчик = ИнтернетПоддержкаПользователей.СерверныйОбработчикБизнесПроцесса(
			КСКонтекст.ОсновныеПараметры.МестоЗапуска,
			"ВыполнитьКомандуСервиса");
		
		Если СерверныйОбработчик <> Неопределено Тогда
			СерверныйОбработчик.ВыполнитьКомандуСервиса(КСКонтекст, СтруктураКоманды, КонтекстОбработчика);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет команду изменения адреса текущего сервиса ИПП.
//
Процедура ИзменитьБизнеспроцесс(КСКонтекст, СтруктураКоманды, КонтекстОбработчика)
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	ПараметрыКоманды = Неопределено;
	СтруктураКоманды.Свойство("Параметры", ПараметрыКоманды);
	
	БизнесПроцесс = Неопределено;
	ИмяURI        = Неопределено;
	
	Для каждого ПараметрКоманды Из ПараметрыКоманды Цикл
		
		Если ПараметрКоманды.Свойство("bp", БизнесПроцесс) Тогда
			ОсновныеПараметры.ИмяWSОпределения = БизнесПроцесс;
		КонецЕсли;
		
		Если ПараметрКоманды.Свойство("nameURI", ИмяURI) Тогда
			ОсновныеПараметры.URIСервиса = ИмяURI;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление номера сессии
	ПараметрыЗапроса = Новый Массив;
	ЗначениеПараметра = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
		КСКонтекст,
		"session_id");
	
	СтруктураЗначений = Новый Структура;
	СтруктураЗначений.Вставить("Имя"             , "session_id");
	СтруктураЗначений.Вставить("БизнесПроцесс"   , ОсновныеПараметры.ИмяWSОпределения);
	СтруктураЗначений.Вставить("Значение"        , ЗначениеПараметра);
	СтруктураЗначений.Вставить("ОбластьВидимости", "sessionParameter");
	
	ПараметрыЗапроса.Добавить(СтруктураЗначений);
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	// Изменение бизнес-процесса на веб-сервере.
	// Будет создано новое подключение к сервису.
	ДобавитьКомандыСервиса(ОсновныеПараметры, ПараметрыЗапроса, КонтекстОбработчика);
	
КонецПроцедуры

// Завершение сеанса Интернет-поддержки на стороне сервера 1С:Предприятия.
//
Процедура ЗавершитьСеансИнтернетПоддержки(КСКонтекст, КонтекстОбработчика) Экспорт
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	КоличествоКоманд = КонтекстОбработчика.ДействияПриОшибкеДляСервера.Количество();
	
	НомерКоманды = 0;
	Пока НомерКоманды < КонтекстОбработчика.ДействияПриОшибкеДляСервера.Количество() Цикл
		
		ДействиеВыполнено = Ложь;
		Действие = КонтекстОбработчика.ДействияПриОшибкеДляСервера[НомерКоманды];
		Если Действие = "СоздатьЗаписьВЖурналеРегистрации" Тогда
			
			Если НЕ ПустаяСтрока(КонтекстОбработчика.ПолноеОписаниеОшибки) Тогда
				ЗаписатьОшибкуВЖурналРегистрации(КонтекстОбработчика.ПолноеОписаниеОшибки);
			КонецЕсли;
			
			ДействиеВыполнено = Истина;
			
		ИначеЕсли Действие = "ПрерватьБизнесПроцесс" Тогда
			
			Если ОсновныеПараметры.ОбращениеССервера Тогда
				ЗавершитьБизнесПроцесс(КСКонтекст);
				ДействиеВыполнено = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДействиеВыполнено Тогда
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Удалить(НомерКоманды);
		Иначе
			НомерКоманды = НомерКоманды + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если какие-либо действия не были выполнены на сервере, тогда они будут возвращены
	// на клиентскую сторону для дальнейшего выполнения.
	
КонецПроцедуры

// Отправка оповещения сервису ИПП о завершении сеанса ИПП.
//
Процедура ЗавершитьБизнесПроцесс(КСКонтекст)
	
	Попытка
		
		ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
		
		ПараметрыЗакрытияБП = Новый Массив;
		ПараметрыЗакрытияБП.Добавить(Новый Структура("Имя, Значение", "CloseBP", "true"));
		
		ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьСессионныеПараметрыКЗапросу(
			КСКонтекст,
			ПараметрыЗакрытияБП);
		
		ДобавитьКомандыСервиса(
			ОсновныеПараметры,
			ПараметрыЗакрытияБП,
			Неопределено);
		
	Исключение
		// Обработка ответа сервиса не требуется, т.к. сервер просто оповещается
		// о закрытии бизнес-процесса для освобождения ресурсов.
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Сохранение стартовых параметров при в сессионных параметрах при запуске ИПП
//
Процедура ЗаписатьСтартовыеПараметрыКонтекста(Знач СтартовыеПараметрыСтруктура, КСКонтекст)
	
	Если СтартовыеПараметрыСтруктура <> Неопределено Тогда
		
		ТипСтрока = Тип("Строка");
		Для каждого ПараметрВСтруктуре Из СтартовыеПараметрыСтруктура Цикл
			
			Параметр = ИнтернетПоддержкаПользователейКлиентСервер.НовыйПараметрИПП(
				ПараметрВСтруктуре.Ключ,
				ПараметрВСтруктуре.Значение,
				"startUp");
			
			КСКонтекст.СессионныеПараметры.Вставить(ПараметрВСтруктуре.Ключ, Параметр);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет запись общих стартовых параметров.
//
Процедура ЗаписатьОбщиеПараметрыИПП(Знач ОбщиеПараметры) Экспорт
	
	// Проверка прав
	Если Не ИнтернетПоддержкаПользователей.ПравоЗаписиПараметровИПП() Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для записи параметров Интернет-поддержки.'");
	КонецЕсли;
	
	// Запись параметров
	УстановитьПривилегированныйРежим(Истина);
	ИнтернетПоддержкаПользователей.ЗаписатьОбщиеПараметрыИПП(ОбщиеПараметры);
	
КонецПроцедуры

// Удаление общих стартовых параметров.
//
// Параметры:
//	УдаляемыеИзРС - Массив - массив строк - имена удаляемых параметров.
//
Процедура УдалитьОбщиеПараметрыИПП(Знач УдаляемыеИзРС) Экспорт
	
	// Проверка прав
	Если Не ИнтернетПоддержкаПользователей.ПравоЗаписиПараметровИПП() Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для записи параметров Интернет-поддержки.'");
	КонецЕсли;
	
	// Запись параметров
	УстановитьПривилегированныйРежим(Истина);
	ИнтернетПоддержкаПользователей.УдалитьОбщиеПараметрыИПП(УдаляемыеИзРС);
	
КонецПроцедуры

// Очистка настроек ИПП текущего пользователя.
//
Процедура ОчиститьНастройкиИПППользователя() Экспорт
	
	// Вызов обработчиков дополнительных подсистем
	СерверныеОбработчики = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий().Сервер;
	ИменаМодулей = СерверныеОбработчики.ОчиститьНастройкиИПППользователя;
	
	Для каждого ИмяМодуля Из ИменаМодулей Цикл
		МодульОбработчика = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
		Если МодульОбработчика = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МодульОбработчика.ОчиститьНастройкиИПППользователя();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КлиентЛицензирования

// Возвращает Истина, если доступна работа с настройками клиента лицензирования,
// Ложь - в противном случае.
//
Функция ДоступнаРаботаСНастройкамиКлиентаЛицензирования()
	
	Возврат ИнтернетПоддержкаПользователей.ДоступнаРаботаСНастройкамиКлиентаЛицензирования();
	
КонецФункции

#КонецОбласти

#Область ОтправкаСообщенийВСлужбуТехническойПоддержки

Функция ОтправитьДанныеСообщенияВТехПоддержку(
	Знач Тема,
	Знач Сообщение,
	Знач Получатель,
	Знач Вложения,
	Знач ДопПараметры) Экспорт
	
	// Извлечение данных из временного хранилища.
	Если Вложения <> Неопределено Тогда
		Для каждого ТекВложение Из Вложения Цикл
			Если ТекВложение.Свойство("Адрес") Тогда
				ДДФайла = ПолучитьИзВременногоХранилища(ТекВложение.Адрес);
				ТекВложение.Вставить(
					"Текст",
					ИнтернетПоддержкаПользователейКлиентСервер.ТекстВДвоичныхДанных(ДДФайла));
				ТекВложение.Удалить("Адрес");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НастройкиСоединенияССерверами = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	
	Результат = ИнтернетПоддержкаПользователейКлиентСервер.ОтправитьДанныеСообщенияВТехПоддержку(
		Тема,
		Сообщение,
		Получатель,
		Вложения,
		НастройкиСоединенияССерверами,
		ДопПараметрыОтправкиСообщения(ДопПараметры));
	
	Результат.Вставить("Предупреждение", "");
	
	Если ПустаяСтрока(Результат.КодОшибки) Тогда
		ЗаполнитьПараметрыСтраницыОтправкиСообщенияВТехПоддержку(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция URLСтраницыОтправкиСообщенияВТехПоддержку(Домен, ТокенДанных)

	Возврат "https://"
		+ ИнтернетПоддержкаПользователейКлиентСервер.ХостСервисовТехническойПоддержки(Домен)
		+ "/confirm?uuid=" + ТокенДанных;

КонецФункции

Процедура ЗаполнитьПараметрыСтраницыОтправкиСообщенияВТехПоддержку(ПараметрыСообщения)
	
	НастройкиСоединенияССерверами = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	
	ПараметрыСообщения.Вставить("URLСтраницы", "");
	ПараметрыСообщения.URLСтраницы = URLСтраницыОтправкиСообщенияВТехПоддержку(
		НастройкиСоединенияССерверами.ДоменРасположенияСерверовИПП,
		ПараметрыСообщения.ТокенДанных);
	
	Если Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатПолученияТикета =
			ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ПараметрыСообщения.URLСтраницы);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ЗначениеЗаполнено(РезультатПолученияТикета.Тикет) Тогда
			ПараметрыСообщения.URLСтраницы = ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin(
				"/ticket/auth?token=" + РезультатПолученияТикета.Тикет,
				НастройкиСоединенияССерверами);
		Иначе
			Если РезультатПолученияТикета.КодОшибки <> "НеверныйЛогинИлиПароль" Тогда
				ПараметрыСообщения.Предупреждение = НСтр("ru = 'Ошибка входа на Портал 1С:ИТС.
					|Подробнее см. в журнале регистрации.'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДопПараметрыОтправкиСообщения(Знач ДопПараметры)
	
	Результат = Новый Структура;
	Результат.Вставить("Логин"         , "");
	Результат.Вставить("ПарольЗаполнен", Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	Если ДанныеАутентификации <> Неопределено Тогда
		Результат.Логин = ДанныеАутентификации.Логин;
		Результат.ПарольЗаполнен = ЗначениеЗаполнено(ДанныеАутентификации.Пароль);
	КонецЕсли;
	
	Результат.Вставить("ШаблонТекстаСообщения", ШаблонТекстаСообщения(ДопПараметры));
	
	Вложения = Новый Массив;
	Вложения.Добавить(
		Новый Структура(
			"Представление, Текст",
			НСтр("ru = 'Техническая информация.txt'"),
			ТекстВложенияТехническаяИнформация(
				ДопПараметры.ВидПриложения,
				Результат)));
	
	Результат.Вставить("Вложения", Вложения);
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонТекстаСообщения(ДопПараметры)
	
	Возврат НСтр("ru = 'Здравствуйте!
			|
			|%msgtxt
			|
			|Регистрационный номер программного продукта: <Укажите рег. номер>;
			|Организация: <Укажите название организации>.
			|С уважением,
			|.'");
	
КонецФункции

// Возвращает текст описания технических параметров программы.
Функция ТекстВложенияТехническаяИнформация(ВидПриложения, ДопПараметры)
	
	// Общие технические параметры и информация о сеансе
	СистИнфо = Новый СистемнаяИнформация;
	ЭтоФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ИмяПрограммы = Строка(ИнтернетПоддержкаПользователейКлиентСервер.ИмяПрограммы());
	Если ИмяПрограммы = "Unknown" Тогда
		ИмяПрограммы = НСтр("ru = '<Не заполнено>'");
	КонецЕсли;
	
	// Общая информация:
	Результат = НСтр("ru = 'Техническая информация о программе:
		|Название программы: %1
		|Имя программы: %2;
		|Версия программы: %3;
		|Поставщик: %4;
		|Версия Платформы 1С:Предприятие: %5;
		|Версия Библиотеки Интернет-поддержки: %6;
		|Версия Библиотеки стандартных подсистем: %7;
		|Вид приложения: %8;
		|Режим: %9;'");
	
	Результат =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Результат,
			Метаданные.Синоним,
			ИмяПрограммы
				+ " (" + Строка(ИнтернетПоддержкаПользователейКлиентСервер.ИмяКонфигурации()) + ")",
			Строка(ИнтернетПоддержкаПользователейКлиентСервер.ВерсияКонфигурации()),
			Метаданные.Поставщик,
			Строка(СистИнфо.ВерсияПриложения),
			ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки(),
			СтандартныеПодсистемыСервер.ВерсияБиблиотеки(),
			ВидПриложения,
			?(ЭтоФайловаяИБ, НСтр("ru = 'Файловый'"), НСтр("ru = 'Серверный'")));
	
	// Права:
	Результат = Результат
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Полные права: %1;
				|Права администратора: %2;
				|Права для подключения Интернет-поддержки: %3;'"),
			?(Пользователи.ЭтоПолноправныйПользователь(, Ложь, Ложь), НСтр("ru = 'есть'"), НСтр("ru = 'нет'")),
			?(Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь), НСтр("ru = 'есть'"), НСтр("ru = 'нет'")),
			?(ИнтернетПоддержкаПользователей.ПравоЗаписиПараметровИПП(), НСтр("ru = 'есть'"), НСтр("ru = 'нет'")));
	
	// Личные данные:
	Результат = Результат
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Логин для подключения Интернет-поддержки: %1;
				|Пароль для подключения Интернет-поддержки: %2;
				|Регистрационный номер программного продукта: %3;'"),
			ДопПараметры.Логин,
			?(ДопПараметры.ПарольЗаполнен, НСтр("ru = 'заполнен'"), НСтр("ru = 'не заполнен'")),
			ИнтернетПоддержкаПользователей.РегистрационныйНомерПрограммногоПродукта());
	
	// Настройки соединения:
	НастройкиСоединения = ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
	Результат = Результат
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настройки соединения с серверами Интернет-поддержки:
				|	Доменная зона: %1'"),
			?(НастройкиСоединения.ДоменРасположенияСерверовИПП = 1, "1c.eu", "1c.ru"));
	
	// Настройки клиента лицензирования:
	Если ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
		ИДКонфигурации = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ИДКонфигурации();
		Если Не ПустаяСтрока(ИДКонфигурации) Тогда
			Результат = Результат + Символы.ПС
				+ НСтр("ru = 'Имя клиента лицензирования:'") + " "
				+ КлиентЛицензирования.ИмяКлиентаЛицензирования()
				+ Символы.ПС + НСтр("ru = 'Идентификатор конфигурации:'")
				+ Символы.ПС + ИДКонфигурации;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыИФункции

// Прокси-функция для получения тикета в контексте сервера 1С:Предприятие
// при вызове из клиентского приложения.
//
Функция ТикетАутентификацииДляОткрытияСтраницы(Знач URLСтраницы) Экспорт
	
	Возврат ИнтернетПоддержкаПользователей.ТикетАутентификацииДляОткрытияСтраницы(URLСтраницы);
	
КонецФункции

#КонецОбласти

#КонецОбласти
