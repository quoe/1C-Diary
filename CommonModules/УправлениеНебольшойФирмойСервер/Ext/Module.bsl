
#Область СлужебныйПрограммныйИнтерфейс

Процедура ПередДобавлениемПодсистемы(Описание) Экспорт
	
	Если ВРег(Метаданные.Имя) = ВРег("УправлениеНебольшойФирмойБазовая") Тогда
		
		Описание.Имя = "УправлениеНебольшойФирмойБазовая";
		
	Иначе
		
		Описание.Имя = "УправлениеНебольшойФирмой";
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура инициализирует параметр сеанса ЭтоПервыйЗапуск
//
Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	
	
КонецПроцедуры //УстановкаПараметровСеанса_ЭтоПервыйЗапуск()

// Функция преобразует строку к множественному числу
//
// Параметры: 
//  Слово1 - форма слова в ед числе      ("шкаф")
//  Слово2 - форма слова для числит 2-4  ("шкафа")
//  Слово3 - форма слова для числит 5-10 ("шкафов")
//  ЦелоеЧисло - целое число
//
// Возвращаемое значение:
//  строку - одну из строк в зависимости от параметра ЦелоеЧисло
//
// Описание:
//  Предназначена для формирования "правильной" подписи к числительным
//
Функция ФормаМножественногоЧисла(Слово1, Слово2, Слово3, Знач ЦелоеЧисло) Экспорт
	
	// Изменим знак целого числа, иначе отрицательные числа будут неправильно преобразовываться
	Если ЦелоеЧисло < 0 Тогда
		ЦелоеЧисло = -1 * ЦелоеЧисло;
	КонецЕсли;
	
	Если ЦелоеЧисло <> Цел(ЦелоеЧисло) Тогда 
		// для нецелых чисел - всегда вторая форма
		Возврат Слово2;
	КонецЕсли;
	
	// остаток
	Остаток = ЦелоеЧисло%10;
	Если (ЦелоеЧисло >10) И (ЦелоеЧисло<20) Тогда
		// для второго десятка - всегда третья форма
		Возврат Слово3;
	ИначеЕсли Остаток=1 Тогда
		Возврат Слово1;
	ИначеЕсли (Остаток>1) И (Остаток<5) Тогда
		Возврат Слово2;
	Иначе
		Возврат Слово3;
	КонецЕсли;

КонецФункции

Процедура ИсключитьНедоступнуюТаблицуИзТекстаЗапроса(Запрос, ИмяТаблицы)
	
	Если ПравоДоступа("Чтение", Метаданные.Документы[ИмяТаблицы]) Тогда
		Возврат;
	КонецЕсли;
	
	// Привилегированный режим нужен, т.к. при отсутствии доступа схема запроса будет выдавать ошибки.
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ИндексыДляУдаления = Новый Соответствие;
	
	Для Каждого ТекПакет Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Для Каждого ТекОператор Из ТекПакет.Операторы Цикл
			
			ИндексыДляУдаления.Очистить();
			
			Для Каждого ТекИсточник Из ТекОператор.Источники Цикл
				Если СтрНайти(ТекИсточник.Источник.ИмяТаблицы, ИмяТаблицы) <> 0 Тогда
					ИндексыДляУдаления[ТекПакет.Операторы.Индекс(ТекОператор)] = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТекИндексДляУдаления Из ИндексыДляУдаления Цикл
				ТекПакет.Операторы.Удалить(ТекИндексДляУдаления.Ключ);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииУсловногоОформления

// Процедура устанавливает условное оформление в динамических списках
// для колонки "Дата"
//
Процедура УстановитьОформлениеКолонкиДата(ДинСписок) Экспорт
	
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из ДинСписок.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ПредустановленныйТолькоВремяПоляДата"
			ИЛИ ЭлементУсловногоОформления.Представление = "Формат поля Дата (сегодня - только время)" Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		ДинСписок.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	ЭлементОформления = ДинСписок.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Представление = "Формат поля Дата (сегодня - только время)";
	ЭлементОформления.ИдентификаторПользовательскойНастройки = "ПредустановленныйТолькоВремяПоляДата";
	
	ЭлементОформления.Использование = Истина;
	
	ГруппаЭлементовОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.Использование = Истина;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбора.ПравоеЗначение	= Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбора.ПравоеЗначение	= Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=Ч:мм");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Дата");
	
КонецПроцедуры

#КонецОбласти
//+++ Оставить

// Функция возвращает связанных Сотрудников пользователя для переданной записи
//
// Пользователь - (Справочник.Пользователи) Пользователь, для которого получаем таблицы значений с записями
//
Функция ПолучитьСотрудниковПользователя(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	//+++
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	СотрудникиПользователя.Сотрудник КАК Сотрудник
	//	|ИЗ
	//	|	РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
	//	|ГДЕ
	//	|	СотрудникиПользователя.Пользователь = &Пользователь
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	СотрудникиПользователя.Сотрудник.Наименование";
	//
	//Запрос.УстановитьПараметр("Пользователь", Пользователь);
	//
	//Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Результат = Новый Массив;
	Результат.Добавить(Пользователь);
	//---
	
	Возврат Результат;
	
КонецФункции // ПолучитьСотрудниковПользователя()

// Процедура записывает новую настройку пользователя.
//
Процедура УстановитьНастройкуПользователя(ЗначениеНастройки, ИмяНастройки, Пользователь = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		
		Пользователь = Пользователи.АвторизованныйПользователь();
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();

	НаборЗаписей.Отбор.Пользователь.Использование	= Истина;
	НаборЗаписей.Отбор.Пользователь.Значение		= Пользователь;
	НаборЗаписей.Отбор.Настройка.Использование		= Истина;
	НаборЗаписей.Отбор.Настройка.Значение			= ПланыВидовХарактеристик.НастройкиПользователей[ИмяНастройки];

	Запись = НаборЗаписей.Добавить();

	Запись.Пользователь	= Пользователь;
	Запись.Настройка	= ПланыВидовХарактеристик.НастройкиПользователей[ИмяНастройки];
	Запись.Значение		= ПланыВидовХарактеристик.НастройкиПользователей[ИмяНастройки].ТипЗначения.ПривестиЗначение(ЗначениеНастройки);
	
	НаборЗаписей.Записать();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры // УстановитьНастройкуПользователя()

//---

//#Область ПроцедурыИФункцииЗаполненияШапкиДокумента

//// Функция возвращает предопределенную организацию.
////
//Функция ПолучитьПредопределеннуюОрганизацию() Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	Организации.Ссылка КАК Организация
//	|ИЗ
//	|	Справочник.Организации КАК Организации
//	|ГДЕ
//	|	Организации.Предопределенный";
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.Организация;
//	Иначе	
//		Возврат Справочники.Организации.ПустаяСсылка();
//	КонецЕсли;
//	
//КонецФункции

//// Функция возвращает спецификацию по умолчанию для номенклатуры, характеристики.
////
//Функция ПолучитьПоУмолчаниюСпецификацию(Номенклатура, Характеристика = Неопределено) Экспорт
//	
//	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.Спецификации) ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СпецификацииПоУмолчанию) Тогда
//		Возврат Справочники.Спецификации.ПустаяСсылка();
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
//	Запрос.УстановитьПараметр("Характеристика", ?(Характеристика=Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Характеристика));
//	Запрос.Текст =
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	СпецификацииПоУмолчанию.Спецификация КАК Спецификация,
//	|	0 КАК Порядок
//	|ИЗ
//	|	РегистрСведений.СпецификацииПоУмолчанию КАК СпецификацииПоУмолчанию
//	|ГДЕ
//	|	СпецификацииПоУмолчанию.Номенклатура = &Номенклатура
//	|	И СпецификацииПоУмолчанию.Характеристика = &Характеристика
//	|	И СпецификацииПоУмолчанию.Спецификация.Владелец = СпецификацииПоУмолчанию.Номенклатура
//	|	И СпецификацииПоУмолчанию.Спецификация.ХарактеристикаПродукции = СпецификацииПоУмолчанию.Характеристика
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	СпецификацииПоУмолчанию.Спецификация,
//	|	1
//	|ИЗ
//	|	РегистрСведений.СпецификацииПоУмолчанию КАК СпецификацииПоУмолчанию
//	|ГДЕ
//	|	СпецификацииПоУмолчанию.Номенклатура = &Номенклатура
//	|	И СпецификацииПоУмолчанию.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
//	|	И СпецификацииПоУмолчанию.Спецификация.Владелец = СпецификацииПоУмолчанию.Номенклатура
//	|	И СпецификацииПоУмолчанию.Спецификация.ХарактеристикаПродукции = СпецификацииПоУмолчанию.Характеристика
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	Порядок";
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.Спецификация;
//	Иначе
//		Возврат Справочники.Спецификации.ПустаяСсылка();
//	КонецЕсли; 
//	
//КонецФункции

//// Процедура добавляет в переданную структуру информацию о кассе по умолчанию организации и валюту денежных средств, если не заполнена 
//// основная касса в настройках пользователя.
////
//Процедура ДобавитьВСтруктуруИнформациюОКассеПоУмолчаниюДляОрганизации(СтруктураДанные, Объект, РеквизитВалюта = Неопределено, ИмяРеквизитаВалюта = "") Экспорт
//	
//	ПользовательскаяНастройкаОсновнойКассы = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.АвторизованныйПользователь(), "ОсновнаяКасса");
//	Если НЕ Объект.Организация.Пустая() И 
//		(НЕ ЗначениеЗаполнено(ПользовательскаяНастройкаОсновнойКассы) ИЛИ ПользовательскаяНастройкаОсновнойКассы.ПометкаУдаления) И
//		Объект.Касса <> Объект.Организация.КассаПоУмолчанию Тогда
//		
//		ТекКассаПоУмолчанию = Объект.Организация.КассаПоУмолчанию;
//		Если Не ТекКассаПоУмолчанию.Пустая() И ТекКассаПоУмолчанию.ПометкаУдаления Тогда
//			ТекКассаПоУмолчанию = Справочники.Кассы.ПустаяСсылка();
//		КонецЕсли;
//		
//		СтруктураДанные.Вставить("Касса", ТекКассаПоУмолчанию);
//		
//		Если РеквизитВалюта <> Неопределено Тогда
//			ТекВалютаДенежныхСредств = ?(
//				ЗначениеЗаполнено(РеквизитВалюта),
//				РеквизитВалюта,
//				ТекКассаПоУмолчанию.ВалютаПоУмолчанию);
//			
//			СтруктураДанные.Вставить(ИмяРеквизитаВалюта, ТекВалютаДенежныхСредств);
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура НастроитьГруппуЦеныИВалюты(Форма) Экспорт
//	
//	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
//		Форма.Элементы.ЦеныИВалюта.МаксимальнаяШирина = Форма.Элементы.ЦеныИВалюта.МаксимальнаяШирина-2;
//		
//		Если Форма.Элементы.Найти("ВидОперации") = Неопределено  Тогда
//			Форма.Элементы.ЦеныИВалюта.МаксимальнаяШирина = Форма.Элементы.ЦеныИВалюта.МаксимальнаяШирина-2;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Если (ПолучитьФункциональнуюОпцию("ИспользоватьДисконтныеКарты") <> Истина
//		И Форма.Элементы.Найти("СчитатьДисконтнуюКарту") <> Неопределено)
//		ИЛИ (Форма.Элементы.Найти("СчитатьДисконтнуюКарту") <> Неопределено И Форма.Элементы.СчитатьДисконтнуюКарту.Видимость = Ложь) Тогда
//		
//		Форма.Элементы.ЦеныИВалюта.МаксимальнаяШирина = Форма.Элементы.ЦеныИВалюта.МаксимальнаяШирина+4;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//// Заполняет список выбора переданных полей формы значениями контактной информации контактрагента/контактных лиц.
////
//// Параметры:
////  Контрагент - СправочникСсылка.Контрагенты - Владелец КИ.
////  Элементы   - ВсеЭлементыФормы
////  СоответствиеЭлементовТипамКонтактнойИнформации - Соответствие - Те поля формы, список выбора которых требуется заполнить
////                                                                  значениями контактной информации.
////    * Ключ     - ПеречислениеСсылка.ТипыКонтактнойИнформации
////    * Значение - Имя поля формы
//// 
//// Возвращаемое значение:
////   - Соответствие
////     * Ключ     - ПеречислениеСсылка.ТипыКонтактнойИнформации
////     * Значение - Значение КИ по умолчанию
////
//Функция ПолучитьДанныеКИКонтрагентаДляВыбораНаФорме(Контрагент, Элементы, ПоляФормыСодержащиеКИ) Экспорт
//	
//	ТипыКИ = Новый Массив;
//	Для каждого КлючПоляФормыПоТипуКИ Из ПоляФормыСодержащиеКИ Цикл
//		Элементы[КлючПоляФормыПоТипуКИ.Значение].СписокВыбора.Очистить();
//		ТипыКИ.Добавить(КлючПоляФормыПоТипуКИ.Ключ);
//	КонецЦикла;
//	
//	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	СвязиКонтрагентКонтактСрезПервых.Контакт КАК Контакт,
//	|	СвязиКонтрагентКонтактСрезПервых.Порядок КАК Порядок
//	|ПОМЕСТИТЬ втПорядокКонтактовКонтрагента
//	|ИЗ
//	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПервых(, Контрагент = &Контрагент) КАК СвязиКонтрагентКонтактСрезПервых
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	КонтактныеЛица.Ссылка КАК Ссылка,
//	|	КонтактныеЛица.Наименование КАК Наименование,
//	|	втПорядокКонтактовКонтрагента.Порядок КАК РеквизитДопУпорядочивания,
//	|	КонтактныеЛица.КонтактнаяИнформация.(
//	|		Тип КАК Тип,
//	|		Представление КАК Представление,
//	|		АдресЭП КАК АдресЭП,
//	|		НомерТелефона КАК НомерТелефона
//	|	) КАК КонтактнаяИнформация
//	|ИЗ
//	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, Контрагент = &Контрагент) КАК СвязиКонтрагентКонтактСрезПоследних
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
//	|		ПО СвязиКонтрагентКонтактСрезПоследних.Контакт = КонтактныеЛица.Ссылка
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокКонтактовКонтрагента КАК втПорядокКонтактовКонтрагента
//	|		ПО (втПорядокКонтактовКонтрагента.Контакт = КонтактныеЛица.Ссылка)
//	|ГДЕ
//	|	КонтактныеЛица.КонтактнаяИнформация.Тип В(&ТипыКИ)
//	|	И СвязиКонтрагентКонтактСрезПоследних.СвязьНедействительна = ЛОЖЬ
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	РеквизитДопУпорядочивания
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	Контрагенты.Ссылка КАК Ссылка,
//	|	Контрагенты.Наименование КАК Наименование,
//	|	Контрагенты.КонтактнаяИнформация.(
//	|		Тип КАК Тип,
//	|		Представление КАК Представление,
//	|		АдресЭП КАК АдресЭП,
//	|		НомерТелефона КАК НомерТелефона
//	|	) КАК КонтактнаяИнформация
//	|ИЗ
//	|	Справочник.Контрагенты КАК Контрагенты
//	|ГДЕ
//	|	Контрагенты.Ссылка = &Контрагент
//	|	И Контрагенты.КонтактнаяИнформация.Тип В(&ТипыКИ)";
//	
//	Запрос.УстановитьПараметр("Контрагент", Контрагент);
//	Запрос.УстановитьПараметр("ТипыКИ", ТипыКИ);
//	
//	КонтрагентКонтактноеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "КонтактноеЛицо");
//	ЗначенияКИпоУмолчанию = Новый Соответствие;
//	
//	Результат = Запрос.ВыполнитьПакет();
//	Результат.Удалить(0);
//	
//	Для каждого Выборка Из Результат Цикл
//		
//		ВладельцыКИ = Выборка.Выгрузить();
//		Для каждого ВладелецКИ Из ВладельцыКИ Цикл
//			ПредставлениеВладелельцаКИ = Новый ФорматированнаяСтрока(
//				ВладелецКИ.Наименование,, 
//				Метаданные.ЭлементыСтиля.ТекстВторостепеннойНадписи.Значение
//			);
//			
//			Для каждого КлючПоляФормыПоТипуКИ Из ПоляФормыСодержащиеКИ Цикл
//				ТипКИ = КлючПоляФормыПоТипуКИ.Ключ;
//				
//				СтрокиКИ = ВладелецКИ.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип", ТипКИ));
//				Если СтрокиКИ.Количество() = 0 Тогда
//					Продолжить;
//				КонецЕсли;
//				
//				ПолеФормы = Элементы[КлючПоляФормыПоТипуКИ.Значение];
//				ПолеФормы.СписокВыбора.Добавить("", ПредставлениеВладелельцаКИ);
//				
//				Для каждого КИ Из СтрокиКИ Цикл
//					ПредставлениеКИ = Новый ФорматированнаяСтрока(
//						Новый ФорматированнаяСтрока("• ",, Метаданные.ЭлементыСтиля.ТекстВторостепеннойНадписи.Значение),
//						КИ.Представление
//					);
//					Если КИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
//						ЗначениеКИ = КИ.АдресЭП;
//					ИначеЕсли КИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
//						ЗначениеКИ = КИ.НомерТелефона;
//						Если СтрНачинаетсяС(ЗначениеКИ, "7") ИЛИ СтрНачинаетсяС(ЗначениеКИ, "8") Тогда
//							ЗначениеКИ = Сред(ЗначениеКИ, 2);
//						КонецЕсли;
//					Иначе
//						ЗначениеКИ = КИ.Представление;
//					КонецЕсли;
//					ПолеФормы.СписокВыбора.Добавить(ЗначениеКИ, ПредставлениеКИ);
//					
//					Если (ВладелецКИ.Ссылка = Контрагент ИЛИ ВладелецКИ.Ссылка = КонтрагентКонтактноеЛицо)
//						И ЗначенияКИпоУмолчанию.Получить(ТипКИ) = Неопределено Тогда
//						ЗначенияКИпоУмолчанию.Вставить(ТипКИ, ЗначениеКИ);
//					КонецЕсли;
//				КонецЦикла;
//			КонецЦикла;
//		КонецЦикла;
//	КонецЦикла;
//	
//	Возврат ЗначенияКИпоУмолчанию;
//	
//КонецФункции

//#КонецОбласти

//#Область ПрограммныйИнтерфейс

//// Выводит сообщение об ошибке заполнения поля.
////
//Процедура СообщитьОбОшибке(ОбъектСОшибкой, ТекстСообщения, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено, Поле = Неопределено, Отказ = Ложь, МассивСообщений = Неопределено) Экспорт
//	
//	Сообщение = Новый СообщениеПользователю();
//	Сообщение.Текст = ТекстСообщения;
//	
//	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
//		
//		// Платформа 8.2.15
//		
//	Иначе
//		
//		Если ИмяТабличнойЧасти <> Неопределено Тогда
//			Сообщение.Поле = ИмяТабличнойЧасти + "[" + (НомерСтроки - 1) + "]." + Поле;
//		ИначеЕсли ЗначениеЗаполнено(Поле) Тогда
//			Сообщение.Поле = Поле;
//		КонецЕсли;
//		
//		Сообщение.УстановитьДанные(ОбъектСОшибкой);
//		
//	КонецЕсли;
//	
//	Сообщение.Сообщить();
//	
//	Отказ = Истина;
//	
//	// Розница.ОтрицательныеОстатки
//	Если МассивСообщений <> Неопределено Тогда
//		МассивСообщений.Добавить(Новый Структура("Текст, Поле", Сообщение.Текст, Сообщение.Поле));
//	КонецЕсли;
//	
//КонецПроцедуры // СообщитьОбОшибке()

//// Позволяет определить есть ли среди реквизитов шапки документа
//// реквизит с переданным именем.
////
//// Параметры: 
////  ИмяРеквизита - строковое имя искомого реквизита, 
////  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
////
//// Возвращаемое значение:
////  Истина - нашли реквизит с таким именем, Ложь - не нашли.
////
//Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

//	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

//КонецФункции // ЕстьРеквизитДокумента()

//// Позволяет определить есть ли среди реквизитов шапки документа
//// реквизит с переданным именем.
////
//// Параметры: 
////  ИмяРеквизита - строковое имя искомого реквизита, 
////  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
////
//// Возвращаемое значение:
////  Истина - нашли реквизит с таким именем, Ложь - не нашли.
////
//Функция ЕстьРеквизитДокументаПоСсылке(ИмяРеквизита, СсылкаНаДокумент) Экспорт

//	МетаданныеДокумента = СсылкаНаДокумент.Метаданные();
//	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

//КонецФункции // ЕстьРеквизитДокумента()

//// Процедура удаляет проверяемый реквизит из массива проверяемых реквизитов.
//Процедура УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, ПроверяемыйРеквизит) Экспорт
//	
//	ПорядковыйНомер = ПроверяемыеРеквизиты.Найти(ПроверяемыйРеквизит);
//	Если ПорядковыйНомер <> Неопределено Тогда
//		ПроверяемыеРеквизиты.Удалить(ПорядковыйНомер);
//	КонецЕсли;
//	
//КонецПроцедуры // УдалитьПроверяемыйРеквизит()

//// Процедура создает новый ключ связи для таблиц.
////
//// Параметры:
////  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
////                 которой обрабатываются процедурой.
////
//Функция СоздатьНовыйКлючСвязи(ФормаДокумента) Экспорт

//	СписокЗначений = Новый СписокЗначений;
//	
//	ТабличнаяЧасть = ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти];
//	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
//        СписокЗначений.Добавить(СтрокаТЧ.КлючСвязи);
//	КонецЦикла;

//    Если СписокЗначений.Количество() = 0 Тогда
//		КлючСвязи = 1;
//	Иначе
//		СписокЗначений.СортироватьПоЗначению();
//		КлючСвязи = СписокЗначений.Получить(СписокЗначений.Количество() - 1).Значение + 1;
//	КонецЕсли;

//	Возврат КлючСвязи;

//КонецФункции // СоздатьНовыйКлючСвязи()



//// Процедура устанавливает условное оформление.
////
//Процедура ВыделитьЖирнымОсновнойЭлемент(ВыбранныйЭлемент, Список, ИмяНастройки = "ОсновнойЭлемент") Экспорт
//	
//	СписокУдаляемыхЭлементов = Новый СписокЗначений;
//	Для каждого ЭлементУсловногоОформления Из Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
//		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки Тогда
//			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
//		КонецЕсли;
//	КонецЦикла;
//	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
//		Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
//	КонецЦикла;
//	
//	Если Не ЗначениеЗаполнено(ВыбранныйЭлемент) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ЭлементУсловногоОформления = Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
//	
//	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	
//	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
//	ЭлементОтбора.ПравоеЗначение = ВыбранныйЭлемент;
//	
//	ШрифтВыделения = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина);
//	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтВыделения);
//	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
//	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки;
//	ЭлементУсловногоОформления.Представление = "Выделение основного элемента";
//	
//КонецПроцедуры

//// Функция получает наибольший общий делитель двух чисел.
////
//Функция ПолучитьНОД(а, б)
//	
//	Возврат ?(б = 0, а, ПолучитьНОД(б, а % б));
//	
//КонецФункции // ПолучитьНОД()

//// Функция получает наибольший общий делитель для массива.
////
//Функция ПолучитьНОДДляМассива(МассивЧисел, Кратность) Экспорт
//	
//	Если МассивЧисел.Количество() = 0 Тогда
//		Возврат 0;
//	КонецЕсли;
//	
//	НОД = МассивЧисел[0] * Кратность;
//	
//	Для каждого Сч Из МассивЧисел Цикл
//		НОД = ПолучитьНОД(НОД, Сч * Кратность);
//	КонецЦикла;
//	
//	Возврат НОД;
//	
//КонецФункции // ПолучитьНОДДляМассива()

//// Функция проверяет установлен ли пользователю профиль.
////
//Функция ПользователюУстановленПрофиль(Пользователь = Неопределено, ИдентификаторПрофиля = "", Профиль = Неопределено) Экспорт
//	
//	Если Пользователь = Неопределено Тогда
//		Пользователь = Пользователи.ТекущийПользователь();
//	КонецЕсли;

//	Если Профиль = Неопределено Тогда
//		Профиль = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторПрофиля));
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Пользователь", Пользователь);
//	Запрос.УстановитьПараметр("Профиль", Профиль);
//	
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ГруппыДоступаПользователи.Пользователь
//	|ИЗ
//	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
//	|ГДЕ
//	|	(НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления)
//	|	И ГруппыДоступаПользователи.Пользователь = &Пользователь
//	|	И (ГруппыДоступаПользователи.Ссылка.Профиль = &Профиль
//	|			ИЛИ ГруппыДоступаПользователи.Ссылка.Профиль = ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор))";
//	
//	УстановитьПривилегированныйРежим(Истина);
//	Результат = Запрос.Выполнить().Выбрать();
//	УстановитьПривилегированныйРежим(Ложь);
//	
//	Если Результат.Следующий() Тогда
//		Возврат Истина;
//	Иначе
//		Возврат Ложь;
//	КонецЕсли;
//	
//КонецФункции // ПользователюУстановленПрофиль()

//// Функция проверяет административные права пользователей
////
////
//Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
//                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
//                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
//	// Используется как замена:
//	// УправлениеНебольшойФирмойСервер.ПользователюУстановленПрофиль(, , ПредопределенноеЗначение("Справочник.ПрофилиГруппДоступа.Администратор"))
//	
//	Возврат Пользователи.ЭтоПолноправныйПользователь(Пользователь, ПроверятьПраваАдминистрированияСистемы, УчитыватьПривилегированныйРежим);
//	
//КонецФункции //ЭтоПолноправныйПользователь()

//// Процедура добавляет значения структуры в список значений
////
//// СписокЗначений - список значений, в который будут добавлены значения структуры;
//// СтруктураСоЗначениями - структура значения которой будут добавлены в список значений;
//// ДобавлятьДубликаты - флаг, который регулирует добавление 
////
//Процедура ЗначенияСтруктурыВСписокЗначений(СписокЗначений, СтруктураСоЗначениями, ДобавлятьДубликаты = Ложь) Экспорт
//	
//	Для каждого ЭлементСтруктуры Из СтруктураСоЗначениями Цикл
//		
//		Если НЕ ЗначениеЗаполнено(ЭлементСтруктуры.Значение) ИЛИ 
//			(НЕ ДобавлятьДубликаты И НЕ СписокЗначений.НайтиПоЗначению(ЭлементСтруктуры.Значение) = Неопределено) Тогда
//			
//			Продолжить;
//			
//		КонецЕсли;
//		
//		СписокЗначений.Добавить(ЭлементСтруктуры.Значение, ЭлементСтруктуры.Ключ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // ЗначенияСтруктурыВСписокЗначений()

//// Подписка на события при копировании документа.
////
//Процедура ПриКопированииОбъекта(Источник) Экспорт
//	
//	Если НЕ ПустаяСтрока(Источник.Комментарий) Тогда
//		Источник.Комментарий = "";
//	КонецЕсли;
//	
//	Если ЕстьРеквизитДокумента("ИдентификаторПлатежа", Источник.Метаданные()) Тогда
//		Источник.ИдентификаторПлатежа = "";
//	КонецЕсли; 
//	
//КонецПроцедуры // ПриКопированииОбъекта()

//// Получает текст представления строки ТЧ для отображении в поле Содержание.
////
//Функция ПолучитьТекстСодержания(Номенклатура, Характеристика = Неопределено) Экспорт
//	
//	ШаблонСодержание = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
//						?(ЗначениеЗаполнено(Номенклатура.НаименованиеПолное), Номенклатура.НаименованиеПолное, Номенклатура.Наименование),
//						Характеристика, Номенклатура.Артикул);
//	
//	Возврат ШаблонСодержание;
//	
//КонецФункции // ПолучитьДанныеСодержаниеНачалоВыбора()

//// Получает текст разделителя для формирования пакетного запроса.
////
//Функция ТекстРазделителяЗапросовПакета() Экспорт

//	ТекстРазделителя =
//	"
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|";

//	Возврат ТекстРазделителя;

//КонецФункции

//// Возвращает массив заказов, полученных из указанных документов
//Функция МассивЗаказов(МассивДокументов) Экспорт
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	АктВыполненныхРаботРаботыИУслуги.ЗаказПокупателя КАК Заказ
//	|ПОМЕСТИТЬ Вт_Заказы
//	|ИЗ
//	|	Документ.АктВыполненныхРабот.РаботыИУслуги КАК АктВыполненныхРаботРаботыИУслуги
//	|ГДЕ
//	|	АктВыполненныхРаботРаботыИУслуги.Ссылка В(&МассивДокументов)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	РасходнаяНакладнаяЗапасы.Заказ
//	|ИЗ
//	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
//	|ГДЕ
//	|	РасходнаяНакладнаяЗапасы.Ссылка В(&МассивДокументов)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	РезервированиеЗапасов.ЗаказПокупателя
//	|ИЗ
//	|	Документ.РезервированиеЗапасов КАК РезервированиеЗапасов
//	|ГДЕ
//	|	РезервированиеЗапасов.Ссылка В(&МассивДокументов)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	РасходнаяНакладнаяЗапасы.Заказ
//	|ИЗ
//	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
//	|ГДЕ
//	|	РасходнаяНакладнаяЗапасы.Ссылка В(&МассивДокументов)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ПриходнаяНакладнаяЗапасы.Заказ
//	|ИЗ
//	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
//	|ГДЕ
//	|	ПриходнаяНакладнаяЗапасы.Ссылка В(&МассивДокументов)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ОтчетПереработчика.ДокументОснование
//	|ИЗ
//	|	Документ.ОтчетПереработчика КАК ОтчетПереработчика
//	|ГДЕ
//	|	ОтчетПереработчика.Ссылка В(&МассивДокументов)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	Вт_Заказы.Заказ
//	|ИЗ
//	|	Вт_Заказы КАК Вт_Заказы");
//	
//	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
//	
//	Результат = Новый Массив;
//	
//	Для Каждого Элемент Из Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Заказ") Цикл
//		
//		Если Не ЗначениеЗаполнено(Элемент) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Результат.Добавить(Элемент);
//		
//	КонецЦикла;
//	
//	Возврат Результат;
//	
//КонецФункции

//// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
//// по ссылке на объект.
//// 
////  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
////  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
////  то следует использовать предварительный переход в привилегированный режим.
//// 
//// Функция не предназначена для получения значений реквизитов пустых ссылок.
////
//// Параметры:
////  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
////
////  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
////              требований к свойствам структуры.
////              Например, "Код, Наименование, Родитель".
////            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
////              псевдоним поля для возвращаемой структуры с результатом, а в качестве
////              значения (опционально) фактическое имя поля в таблице.
////              Если значение не определено, то имя поля берется из ключа.
////            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
////              к свойствам структуры.
////
//// Возвращаемое значение:
////  Структура - содержит имена (ключи) и значения затребованных реквизитов.
////              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
////              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
////
//Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
//	
//	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
//		Если ПустаяСтрока(Реквизиты) Тогда
//			Возврат Новый Структура;
//		КонецЕсли;
//		Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Реквизиты, ",", Истина);
//	КонецЕсли;
//	
//	СтруктураРеквизитов = Новый Структура;
//	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
//		СтруктураРеквизитов = Реквизиты;
//	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
//		Для Каждого Реквизит Из Реквизиты Цикл
//			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
//		КонецЦикла;
//	Иначе
//		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"),
//			Строка(ТипЗнч(Реквизиты)));
//	КонецЕсли;
//	
//	ТекстПолей = "";
//	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
//		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
//		              СокрЛП(КлючИЗначение.Значение),
//		              СокрЛП(КлючИЗначение.Ключ));
//		
//		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
//		
//		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
//		|	" + ИмяПоля + " КАК " + Псевдоним;
//	КонецЦикла;
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Ссылка", Ссылка);
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|" + ТекстПолей + "
//	|ИЗ
//	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
//	|ГДЕ
//	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
//	|";
//	Выборка = Запрос.Выполнить().Выбрать();
//	Выборка.Следующий();
//	
//	Результат = Новый Структура;
//	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
//		Результат.Вставить(КлючИЗначение.Ключ);
//	КонецЦикла;
//	ЗаполнитьЗначенияСвойств(Результат, Выборка);
//	
//	Возврат Результат;
//	
//КонецФункции

//// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
//// 
////  Если доступа к реквизиту нет, возникнет исключение прав доступа.
////  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
////  то следует использовать предварительный переход в привилегированный режим.
//// 
//// Параметры:
////  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
////  ИмяРеквизита - Строка, например, "Код".
//// 
//// Возвращаемое значение:
////  Произвольный    - зависит от типа значения прочитанного реквизита.
//// 
//Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
//	
//	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
//	
//КонецФункции

//// Функция - Ссылка на двоичные данные файла.
////
//// Параметры:
////  ПрисоединенныйФайл - СправочникСсылка - ссылка на справочник с именем "*ПрисоединенныеФайлы".
////  ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, который
////                       используется при получении двоичных данных файла.
//// 
//// Возвращаемое значение:
////   - Строка - адрес во временном хранилище; 
////   - Неопределено, если не удалось получить данные.
////
//Функция СсылкаНаДвоичныеДанныеФайла(ПрисоединенныйФайл, ИдентификаторФормы) Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	Попытка
//		
//		ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
//		ДополнительныеПараметры.ИдентификаторФормы = ИдентификаторФормы;
//		
//		Возврат РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ДополнительныеПараметры).СсылкаНаДвоичныеДанныеФайла;
//		
//	Исключение
//		Возврат Неопределено;
//	КонецПопытки;
//	
//КонецФункции // СсылкаНаДвоичныеДанныеФайла()

//// Функция возвращает двоичные данные используя API БСП.
////
//// Назначение функции:
////  проглот ВызватьИсключение, рекомендуется использовать в тех случаях,
////  когда отсутствие файла не должно блокировать работу систему. 
////
////  Например, если нет данных картинки для номенклатуры, 
////  Формирование прайс-листа останавливаться не должно.
////
//Функция ПолучитьДвоичныеДанныеФайла(ФайлКартинки) Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Попытка
//		
//		Возврат РаботаСФайлами.ДвоичныеДанныеФайла(ФайлКартинки);
//		
//	Исключение
//		
//		Возврат Неопределено;
//		
//	КонецПопытки;
//	
//КонецФункции // ПолучитьДвоичныеДанныеФайла()

//// Выполняет поиск регламентного задания и возвращает его параметр.
////
//// Параметры:
////  ИмяЗадания - Строка - имя задания
////  ИмяПараметра - Строка - имя параметра
////  ЗначениеПоУмолчанию - Произвольный - возвращаемое значение параметра, если задание не найдено
//// 
//// Возвращаемое значение:
////  Найденный параметр задания или значение по умолчанию
////
//Функция ПолучитьПараметрРегламентногоЗадания(ИмяЗадания, ИмяПараметра, ЗначениеПоУмолчанию) Экспорт
//	
//	РегламентноеЗадание = Метаданные.РегламентныеЗадания[ИмяЗадания];
//	Если РегламентноеЗадание = Неопределено Тогда
//		Возврат ЗначениеПоУмолчанию;
//	КонецЕсли;
//	
//	ПараметрыЗадания = Новый Структура;
//	ПараметрыЗадания.Вставить("Метаданные", РегламентноеЗадание);
//	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
//		ПараметрыЗадания.Вставить("ИмяМетода", РегламентноеЗадание.ИмяМетода);
//	КонецЕсли;
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
//	Если СписокЗаданий.Количество() Тогда
//		Возврат СписокЗаданий[0][ИмяПараметра];
//	Иначе
//		Возврат ЗначениеПоУмолчанию;
//	КонецЕсли;
//	
//КонецФункции

//// Выполняет поиск регламентного задания и изменяет его расписание.
////
//Процедура ИзменитьРасписаниеЗадания(ИмяЗадания, РасписаниеРегламентногоЗадания) Экспорт
//	
//	Отбор = Новый Структура("Метаданные", ИмяЗадания);
//	Найденные = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
//	ИдентификаторЗадания = ?(Найденные.Количество() = 0, Неопределено, Найденные[0]);
//	
//	РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(ИдентификаторЗадания, РасписаниеРегламентногоЗадания);
//	
//КонецПроцедуры

//Функция ПередНачаломРаботыСистемы(Знач ПараметрыКлиента) Экспорт
//	
//	Результат = Новый Структура;
//	УстановитьПривилегированныйРежим(Истина);
//	ПараметрыСеанса.ПараметрыКлиентаНаСервереУНФ = Новый ФиксированнаяСтруктура(ПараметрыКлиента);
//	УстановитьПривилегированныйРежим(Ложь);
//	
//	Возврат Результат;
//	
//КонецФункции

//// Возвращает параметры клиентского приложения.
////
//Функция ПараметрыКлиента() Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	Возврат ПараметрыСеанса.ПараметрыКлиентаНаСервереУНФ;
//	
//КонецФункции

//// Ранее возвращал признак ЭтоМобильныйКлиент, хранящийся в параметрах сеанса,
//// но в режиме сервиса из-за этого выводилось сообщение:
//// "Ошибка при получении значения атрибута контекста (ПараметрыКлиентаНаСервереУНФ)".
//// Поэтому сейчас этот вызов делегирован на библиотечный.
//// FIXME: Исправить все оставшиеся вызовы на ОбщегоНазначенияКлиентСервер.ЭтоМобильныйКлиент()
//Функция ЭтоМобильныйКлиент() Экспорт
//	
//	Возврат ОбщегоНазначения.ЭтоМобильныйКлиент();
//	
//КонецФункции

//// Настраивает форму объекта для корректного отображения в мобильном клиенте.
////
//// Параметры:
////  ЭлементыФормы	 - ВсеЭлементыФормы
////  Таблицы			 - Строка - Имена элементов-таблицы
////
//Процедура НастроитьФормуОбъектаМобильныйКлиент(ЭлементыФормы, Таблицы = "Запасы") Экспорт
//	
//	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Для нестандартных кнопок на форме, например, когда выполняется сбор статистики использования.
//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ФормаПровестиИЗакрыть", "Отображение", ОтображениеКнопки.Картинка);
//	
//	// Если у группы стоит сквозное выравнивание = Авто, которое нужно в тонком клиенте, то некоторые заголовки полей имеет избыточную ширину.
//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ГруппаНомерДата", "СквозноеВыравнивание", СквозноеВыравнивание.НеИспользовать);
//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "НомерДата", "СквозноеВыравнивание", СквозноеВыравнивание.НеИспользовать);
//	
//КонецПроцедуры

//// Настраивает вспомогательную форму для корректного отображения в мобильном клиенте.
////
//// Параметры:
////  Форма	 - УправляемаяФорма, для которой следует настроить отображение.
////
//Процедура НастроитьВспомогательнуюФормуМобильныйКлиент(Форма) Экспорт
//	
//	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если Форма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Низ Тогда
//		Форма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Авто;
//	КонецЕсли;
//	
//КонецПроцедуры

//// Добавляет в таблицу значений строки из другой таблицы значений и
//// в них значения колонок с совпадающими наименованиями.
////
//// Параметры:
////  ТаблицаИсточник - таблица значений, откуда берутся значения.
////  ТаблицаПриемник - таблица значений, куда добавляются строки.
////
//Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт

//	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

//		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
//		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

//	КонецЦикла;

//КонецПроцедуры // ЗагрузитьВТаблицуЗначений()

//// Выполняет пропорциональное распределение суммы в соответствии
//// с заданными коэффициентами распределения.
////
//// Параметры:
////  РаспределяемаяСумма - Число - сумма, которую надо распределить;
////  МассивКоэффициентов - Массив - коэффициенты распределения;
////  Точность - Число - точность округления при распределении. Необязателен.
////
//// Возвращаемое значение:
////  Массив - массив размерностью равный массиву коэффициентов, содержит
////           суммы в соответствии с весом коэффициента (из массива коэффициентов).
////           В случае если распределить не удалось (сумма = 0, кол-во коэффициентов = 0,
////           или суммарный вес коэффициентов = 0), тогда возвращается значение Неопределено.
////
//Функция РаспределитьСуммуПропорциональноКоэффициентам(Знач РаспределяемаяСумма, Коэффициенты, Знач Точность = 2) Экспорт
//	
//	Если Коэффициенты.Количество() = 0 Или Не ЗначениеЗаполнено(РаспределяемаяСумма) Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	ИндексМаксимальногоКоэффициента = 0;
//	МаксимальныйКоэффициент = 0;
//	РаспределеннаяСумма = 0;
//	СуммаКоэффициентов  = 0;
//	
//	Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
//		Коэффициент = Коэффициенты[Индекс];
//		
//		АбсолютноеЗначениеКоэффициента = ?(Коэффициент > 0, Коэффициент, -Коэффициент);
//		Если МаксимальныйКоэффициент < АбсолютноеЗначениеКоэффициента Тогда
//			МаксимальныйКоэффициент = АбсолютноеЗначениеКоэффициента;
//			ИндексМаксимальногоКоэффициента = Индекс;
//		КонецЕсли;
//		
//		СуммаКоэффициентов = СуммаКоэффициентов + Коэффициент;
//	КонецЦикла;
//	
//	Если СуммаКоэффициентов = 0 Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	Результат = Новый Массив(Коэффициенты.Количество());
//	
//	Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
//		Результат[Индекс] = Окр(РаспределяемаяСумма * Коэффициенты[Индекс] / СуммаКоэффициентов, Точность, 1);
//		РаспределеннаяСумма = РаспределеннаяСумма + Результат[Индекс];
//	КонецЦикла;
//	
//	// Погрешности округления отнесем на коэффициент с максимальным весом.
//	Если Не РаспределеннаяСумма = РаспределяемаяСумма Тогда
//		Результат[ИндексМаксимальногоКоэффициента] = Результат[ИндексМаксимальногоКоэффициента] + РаспределяемаяСумма - РаспределеннаяСумма;
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

//// Выполняет пропорциональное распределение суммы по колонке таблицы значений
////
//// Параметры:
////  РаспределяемаяСумма - Число - сумма, которую надо распределить;
////  Таблица - ТаблицаЗначений - таблица для распределения;
////  ИмяКолонки - Строка - имя колонки таблицы для помещения распределяемой суммы;
////  ИмяКолонкиБазы - Строка - имя колонки таблицы с коэффициентами распределения.
////
//Процедура РаспределитьСуммуПоКолонкеТаблицы(РаспределяемаяСумма, Таблица, ИмяКолонки, ИмяКолонкиБазы = "") Экспорт
//	
//	Если РаспределяемаяСумма <> 0 Тогда
//		Если ПустаяСтрока(ИмяКолонкиБазы) Тогда
//			МассивСтарыхСумм = Таблица.ВыгрузитьКолонку(ИмяКолонки);
//		Иначе
//			МассивСтарыхСумм = Таблица.ВыгрузитьКолонку(ИмяКолонкиБазы);
//		КонецЕсли;
//		МассивНовыхСумм = РаспределитьСуммуПропорциональноКоэффициентам(РаспределяемаяСумма, МассивСтарыхСумм);
//		Если МассивНовыхСумм <> Неопределено Тогда
//	 		Таблица.ЗагрузитьКолонку(МассивНовыхСумм, ИмяКолонки);
//		КонецЕсли; 
//	Иначе
//		Таблица.ЗаполнитьЗначения(0, ИмяКолонки);
//	КонецЕсли;
//	
//КонецПроцедуры

//#КонецОбласти

//#Область ПроцедурыИФункции

//// Функция получает таблицу из временной таблицы.
////
//Функция ТаблицаИзВременнойТаблицы(МенеджерВременныхТаблиц, Таблица) Экспорт
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ *
//	|	ИЗ " + Таблица + " КАК Таблица");
//	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
//	
//	Возврат Запрос.Выполнить().Выгрузить();
//	
//КонецФункции // ТаблицаИзВременнойТаблицы()

//// Функция в зависимости от признака ведения учета по компании
//// компанию-организацию или организацию документа.
////
//// Параметры:
////	Организация - СправочникСсылка.Организации.
////
//// Возвращаемое значение:
////  СправочникСсылка.Организация - ссылка на организацию.
////
//Функция ПолучитьОрганизацию(Организация) Экспорт
//	
//	Если Константы.УчетПоКомпании.Получить() Тогда
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	Организации.Ссылка КАК Компания
//		|ИЗ
//		|	Константы КАК Константы
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
//		|		ПО Константы.Компания = Организации.Ссылка";
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Возврат Выборка.Компания
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Возврат Организация;
//	
//КонецФункции // ПолучитьОрганизацию()

//// Процедура определяет ситуацию, когда при изменении своей даты документ 
//// оказывается в другом периоде нумерации документов, и в это м случае
//// присваивает документу новый уникальный номер.
////
//// Параметры:
////  ДокументСсылка - ссылка на документ,из которого вызвана процедура 
////  НоваяДатаДокумента - новая дата документа 
////  НачальнаяДатаДокумента - начальная дата документа 
////
//// Возвращаемое значение:
////  Число - разность дат.
////
//Функция ПроверитьНомерДокумента(ДокументСсылка, НоваяДатаДокумента, НачальнаяДатаДокумента) Экспорт
//	
//	// Определяем назначенную для данного вида документов периодичность смены номера
//	ПериодСменыНомера = ДокументСсылка.Метаданные().ПериодичностьНомера;
//	
//	//В зависимости от установленной периодичности смены номеров,
//	//определяем разность старой и новой датами документа.
//	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
//		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(НоваяДатаДокумента);
//	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
//		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(НоваяДатаДокумента);
//	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
//		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(НоваяДатаДокумента);
//	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
//		РазностьДат = НачальнаяДатаДокумента - НоваяДатаДокумента;
//	Иначе
//		Возврат 0;
//	КонецЕсли;
//	
//	Возврат РазностьДат;
//	
//КонецФункции // ПроверитьНомерДокумента()

//// Функция определяет тип налогообложения продажи товара налогом на добавленную стоимость.
////
//// Параметры:
////	Организация - СправочникСсылка.Организации - Организация, для которой определяется система налогообложения
////	Склад - СправочникСсылка.Склады - Розничный склад, для которой определяется система налогообложения
////	Дата - Дата определения системы налогообложения
////
//Функция НалогообложениеНДС(Организация, Склад = Неопределено, Дата) Экспорт
//	
//	Запрос = Новый Запрос;
//	
//	Если ЗначениеЗаполнено(Дата) Тогда
//		Запрос.УстановитьПараметр("Дата",Дата);
//	Иначе
//		Запрос.УстановитьПараметр("Дата", ТекущаяДата());
//	КонецЕсли;
//	
//	Запрос.УстановитьПараметр("Организация", Организация);
//	Запрос.УстановитьПараметр("Склад", Склад);
//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС) КАК НалогообложениеНДС
//	|ИЗ
//	|	РегистрСведений.ПримененияЕНВД.СрезПоследних(
//	|			&Дата,
//	|			Организация = &Организация
//	|				И СтруктурнаяЕдиница = &Склад) КАК ПримененияЕНВД
//	|ГДЕ
//	|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС)
//	|ИЗ
//	|	РегистрСведений.ПримененияПатенты.СрезПоследних(
//	|			&Дата,
//	|			Организация = &Организация
//	|				И СтруктурнаяЕдиница = &Склад) КАК ПримененияПатенты
//	|ГДЕ
//	|	ПримененияПатенты.РозничнаяТорговляОблагаетсяПатентом
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС)
//	|ИЗ
//	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&Дата, Организация = &Организация) КАК Налогообложение
//	|ГДЕ
//	|	(Налогообложение.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)
//	|			ИЛИ Налогообложение.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.ОсобыйПорядок))";
//	
//	НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
//	
//	Выборка = запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		НалогообложениеНДС = Выборка.НалогообложениеНДС;
//	КонецЕсли;
//	
//	Возврат НалогообложениеНДС;
//	
//КонецФункции // НалогообложениеНДС()

////Процедура устанавливает функциональную опцию ФункциональнаяОпцияУчетПоНесколькимСкладам и ФункциональнаяОпцияУчетПоНесколькимПодразделениям 
//// при записи второго склада / подразделения в форме объекта или списка справочника СтруктурныеЕдиницы
//Процедура ПроверитьУстановитьФОУчетПоНесколькимСкладамПодразделениям(ТипСтруктурнойЕдиницы) Экспорт
//	
//	Если ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
//		//Установим ФО УчетПоНесколькимПодразделениям, если записано больше одного подразделения
//		ТекущееЗначениеНесколькоПодразделений = Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить();
//		Если НЕ ТекущееЗначениеНесколькоПодразделений Тогда
//			Запрос = Новый Запрос;
//			Запрос.Текст = 
//			"ВЫБРАТЬ ПЕРВЫЕ 2
//			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтруктурныеЕдиницы.Ссылка) КАК КоличествоПодразделений
//			|ИЗ
//			|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
//			|ГДЕ
//			|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
//			|	И НЕ СтруктурныеЕдиницы.ПометкаУдаления";
//			
//			Выборка = Запрос.Выполнить().Выбрать();
//			Выборка.Следующий();
//			Если Выборка.КоличествоПодразделений > 1 Тогда
//				Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Установить(Истина);
//			КонецЕсли;
//		КонецЕсли;
//	Иначе
//		//Установим ФО УчетПоНесколькимСкладам, если записано больше одного подразделения
//		ТекущееЗначениеНесколькоСкладов = Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить();
//		Если НЕ ТекущееЗначениеНесколькоСкладов Тогда
//			Запрос = Новый Запрос;
//			Запрос.Текст = 
//			"ВЫБРАТЬ ПЕРВЫЕ 2
//			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтруктурныеЕдиницы.Ссылка) КАК КоличествоСкладов
//			|ИЗ
//			|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
//			|ГДЕ
//			|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы <> ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
//			|	И НЕ СтруктурныеЕдиницы.ПометкаУдаления";
//			
//			Выборка = Запрос.Выполнить().Выбрать();
//			Выборка.Следующий();
//			Если Выборка.КоличествоСкладов > 1 Тогда
//				Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Установить(Истина);
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	
//	
//КонецПроцедуры

//// Функция определяет тип налогообложения продажи товара налогом на добавленную стоимость.
////
//// Параметры:
////	Организация - СправочникСсылка.Организации - Организация, для которой определяется система налогообложения
////	Склад - СправочникСсылка.Склады - Розничный склад, для которой определяется система налогообложения
////	Дата - Дата определения системы налогообложения
////
//Функция СпециальныйНалоговыйРежим(Организация, Склад = Неопределено, Дата) Экспорт
//	
//	Запрос = Новый Запрос;
//	
//	Если ЗначениеЗаполнено(Дата) Тогда
//		Запрос.УстановитьПараметр("Дата",Дата);
//	Иначе
//		Запрос.УстановитьПараметр("Дата", ТекущаяДата());
//	КонецЕсли;
//	
//	Запрос.УстановитьПараметр("Организация", Организация);
//	Запрос.УстановитьПараметр("Склад", Склад);
//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ВЫБОР
//	|		КОГДА Налогообложение.ПлательщикЕНВД
//	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпециальныеНалоговыеРежимы.ЕНВД)
//	|		КОГДА Налогообложение.ПрименяетсяПатент
//	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпециальныеНалоговыеРежимы.ПСН)
//	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпециальныеНалоговыеРежимы.НеПрименяется)
//	|	КОНЕЦ КАК НалоговыйРежим
//	|ИЗ
//	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&Дата, Организация = &Организация) КАК Налогообложение
//	|ГДЕ
//	|	Налогообложение.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.ОсобыйПорядок)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ЗНАЧЕНИЕ(Перечисление.СпециальныеНалоговыеРежимы.ЕНВД)
//	|ИЗ
//	|	РегистрСведений.ПримененияЕНВД.СрезПоследних(
//	|			&Дата,
//	|			Организация = &Организация
//	|				И СтруктурнаяЕдиница = &Склад) КАК ПримененияЕНВД
//	|ГДЕ
//	|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ЗНАЧЕНИЕ(Перечисление.СпециальныеНалоговыеРежимы.ПСН)
//	|ИЗ
//	|	РегистрСведений.ПримененияПатенты.СрезПоследних(
//	|			&Дата,
//	|			Организация = &Организация
//	|				И СтруктурнаяЕдиница = &Склад) КАК ПримененияПатенты
//	|ГДЕ
//	|	ПримененияПатенты.РозничнаяТорговляОблагаетсяПатентом";
//	
//	НалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.НеПрименяется;
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		НалоговыйРежим = Выборка.НалоговыйРежим;
//	КонецЕсли;
//	
//	Возврат НалоговыйРежим;
//	
//КонецФункции // НалогообложениеНДС()

//#КонецОбласти

//#Область ИнформационнаяПанель

//// Получает необходимые данные для вывода в информационную панель списка.
////
//Функция ИнформационнаяПанельПолучитьДанные(ТекущийРеквизитКИ, ПараметрыИнфПанели) Экспорт
//	
//	СписокПолейКИ = "";
//	ТекстЗапроса = "";
//	
//	Запрос = Новый Запрос;
//	ПорядокЗапроса = 0;
//	Если ПараметрыИнфПанели.Свойство("Контрагент") Тогда
//		
//		СписокПолейКИ = "Телефон,ЭлПочта,Факс,ФактАдрес,ЮрАдрес,ПочтовыйАдрес,АдресДоставки,ДругаяИнформация";
//		СформироватьТекстЗапросаКонтрагентыИнфПанель(ТекстЗапроса);
//		
//		ПорядокЗапроса = ПорядокЗапроса + 1;
//		ПараметрыИнфПанели.Контрагент = ПорядокЗапроса;
//		
//		Запрос.УстановитьПараметр("Контрагент", ТекущийРеквизитКИ);
//		
//		Если ПараметрыИнфПанели.Свойство("Взаиморасчеты") Тогда
//			
//			СписокПолейКИ = СписокПолейКИ + ",Долг,НашДолг";
//			СформироватьТекстЗапросаВзаиморасчетыИнфПанель(ТекстЗапроса);
//			
//			ПорядокЗапроса = ПорядокЗапроса + 1;
//			ПараметрыИнфПанели.Взаиморасчеты = ПорядокЗапроса;
//			
//			ПараметрыВзаиморасчетов = ИнформационнаяПанельПолучитьПараметрыВзаиморасчетов();
//			Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыВзаиморасчетов.СписокОрганизаций);
//			Запрос.УстановитьПараметр("СписокТиповРасчетов", ПараметрыВзаиморасчетов.СписокТиповРасчетов);
//			
//		КонецЕсли;
//		
//		Если ПараметрыИнфПанели.Свойство("ДисконтнаяКарта") Тогда
//			СписокПолейКИ = СписокПолейКИ + ",ПроцентСкидкиПоДисконтнойКарте,СуммаПродажПоДисконтнойКарте,ПредставлениеПериода";
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Если ПараметрыИнфПанели.Свойство("КонтактноеЛицо") Тогда
//		
//		СписокПолейКИ = ?(ПустаяСтрока(СписокПолейКИ), "ТелефонКЛ,ЭлПочтаКЛ", СписокПолейКИ + ",ТелефонКЛ,ЭлПочтаКЛ");
//		СформироватьТекстЗапросаКонтактныеЛицаИнфПанель(ТекстЗапроса);
//		
//		ПорядокЗапроса = ПорядокЗапроса + 1;
//		ПараметрыИнфПанели.КонтактноеЛицо = ПорядокЗапроса;
//		
//		Если ТипЗнч(ТекущийРеквизитКИ) = Тип("СправочникСсылка.Контрагенты") Тогда
//			Запрос.УстановитьПараметр("КонтактноеЛицо", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийРеквизитКИ, "КонтактноеЛицо"));
//		Иначе
//			Запрос.УстановитьПараметр("КонтактноеЛицо", ТекущийРеквизитКИ);
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Запрос.Текст = ТекстЗапроса;
//	
//	ДанныеИП = Новый Структура(СписокПолейКИ);
//	
//	Результат = Запрос.ВыполнитьПакет();
//	
//	Если ПараметрыИнфПанели.Свойство("Контрагент") Тогда
//		
//		ВыборкаКИ = Результат[ПараметрыИнфПанели.Контрагент - 1].Выбрать();
//		ДанныеИП = ПолучитьДанныеКонтрагентыИнфПанель(ВыборкаКИ, ДанныеИП);
//		
//		Если ПараметрыИнфПанели.Свойство("Взаиморасчеты") Тогда
//			
//			ВыборкаДолги = Результат[ПараметрыИнфПанели.Взаиморасчеты - 1].Выбрать();
//			ДанныеИП = ПолучитьЗаполнитьДанныеВзаиморасчетыИнфПанель(ВыборкаДолги, ДанныеИП);
//			
//		КонецЕсли;
//		
//		Если ПараметрыИнфПанели.Свойство("ДисконтнаяКарта") Тогда
//			
//			ДополнительныеПараметры = Новый Структура("ПолучатьСуммуПродаж, Сумма, ПредставлениеПериода", Истина, 0, "");
//			ПроцентСкидкиПоДисконтнойКарте = ВычислитьПроцентСкидкиПоДисконтнойКарте(ТекущаяДата(), ПараметрыИнфПанели.ДисконтнаяКарта, ДополнительныеПараметры);
//			Если Не ПараметрыИнфПанели.ДисконтнаяКарта.Владелец.СтарыйМеханизмСкидок Тогда
//				ПроцентСкидкиПоДисконтнойКарте = НСтр("ru = '<Автоскидки>'");
//			КонецЕсли;
//			ДанныеИП = ПолучитьЗаполнитьДанныеПроцентСкидкиПоДисконтнойКартеИнфПанель(ПроцентСкидкиПоДисконтнойКарте, ДополнительныеПараметры.Сумма, ДополнительныеПараметры.ПредставлениеПериода, ДанныеИП);
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Если ПараметрыИнфПанели.Свойство("КонтактноеЛицо") Тогда
//		ВыборкаКИ = Результат[ПараметрыИнфПанели.КонтактноеЛицо - 1].Выбрать();
//		ДанныеИП = ПолучитьДанныеКонтактныеЛицаИнфПанель(ВыборкаКИ, ДанныеИП);
//	КонецЕсли;
//	
//	Возврат ДанныеИП;
//	
//КонецФункции // ИнформационнаяПанельПолучитьДанные()

//// Процедура формирует текст запроса по КИ контрагента.
////
//Процедура СформироватьТекстЗапросаКонтрагентыИнфПанель(ТекстЗапроса)
//	
//	ТекстЗапроса = ТекстЗапроса +
//	"ВЫБРАТЬ
//	|	ВидыКИ.Ссылка КАК ВидКИ,
//	|	ЕСТЬNULL(КонтрагентыКИ.Представление, """") КАК ПредставлениеКИ
//	|ИЗ
//	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКИ
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКИ
//	|		ПО (КонтрагентыКИ.Ссылка = &Контрагент)
//	|			И ВидыКИ.Ссылка = КонтрагентыКИ.Вид
//	|ГДЕ
//	|	ВидыКИ.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтрагенты)
//	|	И ВидыКИ.Предопределенный
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	КонтрагентыКИ.НомерСтроки";
//	
//КонецПроцедуры // СформироватьТекстЗапросаКонтрагентыИнфПанель()

//// Процедура формирует текст запроса по КИ контактного лица.
////
//Процедура СформироватьТекстЗапросаКонтактныеЛицаИнфПанель(ТекстЗапроса)
//	
//	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
//		ТекстЗапроса = ТекстЗапроса +
//		";
//		|////////////////////////////////////////////////////////////////////////////////
//		|";
//	КонецЕсли;
//	
//	ТекстЗапроса = ТекстЗапроса +
//	"ВЫБРАТЬ
//	|	ВидыКИ.Ссылка КАК ВидКИ,
//	|	ЕСТЬNULL(КонтактныеЛицаКИ.Представление, """") КАК ПредставлениеКИ
//	|ИЗ
//	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКИ
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКИ
//	|		ПО (КонтактныеЛицаКИ.Ссылка = &КонтактноеЛицо)
//	|			И ВидыКИ.Ссылка = КонтактныеЛицаКИ.Вид
//	|ГДЕ
//	|	ВидыКИ.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтактныеЛица)
//	|	И ВидыКИ.Предопределенный";
//	
//КонецПроцедуры // СформироватьТекстЗапросаКонтактныеЛицаИнфПанель()

//// Процедура формирует текст запроса по взаиморасчетам контрагента.
////
//Процедура СформироватьТекстЗапросаВзаиморасчетыИнфПанель(ТекстЗапроса)
//	
//	ТекстЗапроса = ТекстЗапроса +
//	";
//	|////////////////////////////////////////////////////////////////////////////////
//	|";
//	
//	ТекстЗапроса = ТекстЗапроса +
//	"ВЫБРАТЬ
//	|	ВЫБОР
//	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
//	|				И РасчетыСПокупателямиОстатки.СуммаОстаток > 0
//	|			ТОГДА -1 * РасчетыСПоставщикамиОстатки.СуммаОстаток + РасчетыСПокупателямиОстатки.СуммаОстаток
//	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
//	|			ТОГДА -РасчетыСПоставщикамиОстатки.СуммаОстаток
//	|		КОГДА РасчетыСПокупателямиОстатки.СуммаОстаток > 0
//	|			ТОГДА РасчетыСПокупателямиОстатки.СуммаОстаток
//	|		ИНАЧЕ 0
//	|	КОНЕЦ КАК ДолгКонтрагента,
//	|	ВЫБОР
//	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток > 0
//	|				И РасчетыСПокупателямиОстатки.СуммаОстаток < 0
//	|			ТОГДА -1 * РасчетыСПокупателямиОстатки.СуммаОстаток + РасчетыСПоставщикамиОстатки.СуммаОстаток
//	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток > 0
//	|			ТОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток
//	|		КОГДА РасчетыСПокупателямиОстатки.СуммаОстаток < 0
//	|			ТОГДА -РасчетыСПокупателямиОстатки.СуммаОстаток
//	|		ИНАЧЕ 0
//	|	КОНЕЦ КАК НашДолг
//	|ИЗ
//	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
//	|			,
//	|			Организация В (&СписокОрганизаций)
//	|				И ТипРасчетов В (&СписокТиповРасчетов)
//	|				И Контрагент = &Контрагент) КАК РасчетыСПоставщикамиОстатки,
//	|	РегистрНакопления.РасчетыСПокупателями.Остатки(
//	|			,
//	|			Организация В (&СписокОрганизаций)
//	|				И ТипРасчетов В (&СписокТиповРасчетов)
//	|				И Контрагент = &Контрагент) КАК РасчетыСПокупателямиОстатки";
//	
//КонецПроцедуры // СформироватьТекстЗапросаВзаиморасчетыИнфПанель()

//// Функция фозвращает необходимые параметры для расчета взаиморасчетов в инф. панели.
////
//Функция ИнформационнаяПанельПолучитьПараметрыВзаиморасчетов()
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	Организации.Ссылка КАК Организация
//	|ИЗ
//	|	Справочник.Организации КАК Организации";
//	
//	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
//	МассивОрганизаций = РезультатЗапроса.ВыгрузитьКолонку("Организация");
//	
//	МассивТиповРасчетов = Новый Массив;
//	МассивТиповРасчетов.Добавить(Перечисления.ТипыРасчетов.Аванс);
//	МассивТиповРасчетов.Добавить(Перечисления.ТипыРасчетов.Долг);
//	
//	Возврат Новый Структура("СписокОрганизаций,СписокТиповРасчетов", МассивОрганизаций, МассивТиповРасчетов);
//	
//КонецФункции // ИнформационнаяПанельПолучитьПараметрыВзаиморасчетов()

//// Получает необходимые данные о КИ контрагента.
////
//Функция ПолучитьДанныеКонтрагентыИнфПанель(ВыборкаКИ, ДанныеИП)
//	
//	Пока ВыборкаКИ.Следующий() Цикл
//		
//		ПредставлениеКИ = СокрЛП(ВыборкаКИ.ПредставлениеКИ);
//		Если ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента") Тогда
//			ДанныеИП.Телефон = ?(ПустаяСтрока(ДанныеИП.Телефон), ПредставлениеКИ, ДанныеИП.Телефон + ", "+ ПредставлениеКИ);
//		ИначеЕсли ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailКонтрагента") Тогда
//			ДанныеИП.ЭлПочта = ?(ПустаяСтрока(ДанныеИП.ЭлПочта), ПредставлениеКИ, ДанныеИП.ЭлПочта + ", "+ ПредставлениеКИ);
//		ИначеЕсли ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФаксКонтрагента") Тогда
//			ДанныеИП.Факс = ?(ПустаяСтрока(ДанныеИП.Факс), ПредставлениеКИ, ДанныеИП.Факс + ", "+ ПредставлениеКИ);
//		ИначеЕсли ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента") Тогда
//			ДанныеИП.ФактАдрес = ?(ПустаяСтрока(ДанныеИП.ФактАдрес), ПредставлениеКИ, ДанныеИП.ФактАдрес + Символы.ПС + ПредставлениеКИ);
//		ИначеЕсли ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента") Тогда
//			ДанныеИП.ЮрАдрес = ?(ПустаяСтрока(ДанныеИП.ЮрАдрес), ПредставлениеКИ, ДанныеИП.ЮрАдрес + Символы.ПС + ПредставлениеКИ);
//		ИначеЕсли ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента") Тогда
//			ДанныеИП.ПочтовыйАдрес = ?(ПустаяСтрока(ДанныеИП.ПочтовыйАдрес), ПредставлениеКИ, ДанныеИП.ПочтовыйАдрес + Символы.ПС + ПредставлениеКИ);
//		ИначеЕсли ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета") Тогда
//			ДанныеИП.АдресДоставки = ?(ПустаяСтрока(ДанныеИП.АдресДоставки), ПредставлениеКИ, ДанныеИП.АдресДоставки + Символы.ПС + ПредставлениеКИ);
//		ИначеЕсли ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента") Тогда
//			ДанныеИП.ДругаяИнформация = ?(ПустаяСтрока(ДанныеИП.ДругаяИнформация), ПредставлениеКИ, ДанныеИП.ДругаяИнформация + Символы.ПС + ПредставлениеКИ);
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Возврат ДанныеИП;
//	
//КонецФункции // ПолучитьДанныеКонтрагентыИнфПанель()

//// Получает необходимые данные о КИ контактного лица.
////
//Функция ПолучитьДанныеКонтактныеЛицаИнфПанель(ВыборкаКИ, ДанныеИП)
//	
//	Пока ВыборкаКИ.Следующий() Цикл
//		
//		ПредставлениеКИ = СокрЛП(ВыборкаКИ.ПредставлениеКИ);
//		Если ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица") Тогда
//			ДанныеИП.ТелефонКЛ = ?(ПустаяСтрока(ДанныеИП.ТелефонКЛ), ПредставлениеКИ, ДанныеИП.ТелефонКЛ + ", "+ ПредставлениеКИ);
//		ИначеЕсли ВыборкаКИ.ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailКонтактногоЛица") Тогда
//			ДанныеИП.ЭлПочтаКЛ = ?(ПустаяСтрока(ДанныеИП.ЭлПочтаКЛ), ПредставлениеКИ, ДанныеИП.ЭлПочтаКЛ + ", "+ ПредставлениеКИ);
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Возврат ДанныеИП;
//	
//КонецФункции // ПолучитьДанныеКонтактныеЛицаИнфПанель()

//// Получает необходимые данные о взаиморасчетах контрагента.
////
//Функция ПолучитьЗаполнитьДанныеВзаиморасчетыИнфПанель(ВыборкаДолги, ДанныеИП)
//	
//	ВыборкаДолги.Следующий();
//	
//	ДанныеИП.Долг = ВыборкаДолги.ДолгКонтрагента;
//	ДанныеИП.НашДолг = ВыборкаДолги.НашДолг;
//	
//	Возврат ДанныеИП;
//	
//КонецФункции // ПолучитьЗаполнитьДанныеВзаиморасчетыИнфПанель()

//// Получает необходимые данные о проценте скидки по дисконтной карте контрагента.
////
//Функция ПолучитьЗаполнитьДанныеПроцентСкидкиПоДисконтнойКартеИнфПанель(ПроцентСкидкиПоДисконтнойКарте, СуммаПродажПоДисконтнойКарте, ПредставлениеПериода, ДанныеИП)
//	
//	ДанныеИП.ПроцентСкидкиПоДисконтнойКарте = ПроцентСкидкиПоДисконтнойКарте;
//	ДанныеИП.СуммаПродажПоДисконтнойКарте = СуммаПродажПоДисконтнойКарте;
//	ДанныеИП.ПредставлениеПериода = ПредставлениеПериода;
//		
//	Возврат ДанныеИП;
//	
//КонецФункции // ПолучитьЗаполнитьДанныеВзаиморасчетыИнфПанель()

//#КонецОбласти

//#Область ПроцедурыИФункцииРаботыСПолнотекстовымПоиском

//// Функция определяет актуальность индекса поиска для справочника Контрагенты.
////
//Функция ИндексПоискаОбновитьАвтоматичестки() Экспорт
//	
//	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
//		
//		Возврат ((ТекущаяДата() - ПолнотекстовыйПоиск.ДатаАктуальности()) < 2*60*60);
//		
//	КонецЕсли;
//	
//	Возврат Ложь;
//	
//КонецФункции // ИндексПоискаОбновитьАвтоматичестки()

//// Функция возвращает результат полнотекстового поиска.
////
//Функция НайтиКонтрагентовПолнотекстовыйПоиск(Форма) Экспорт
//	
//	Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
//	
//	ТаблицаОснований = Форма.РеквизитФормыВЗначение("Основания");
//	
//	// Получить результаты поиска
//	ТекстОшибки = НайтиКонтрагентов(Форма.СтрокаПолнотекстовогоПоиска, ТаблицаОснований);
//	Если ТекстОшибки = Неопределено Тогда
//		
//		ОбновитьСписокВыбора(Форма.Элементы.СтрокаПолнотекстовогоПоиска.СписокВыбора, Форма.СтрокаПолнотекстовогоПоиска, 100);
//		
//		Сохранить("ИсторияПоискаКонтрагентов", Форма.Элементы.СтрокаПолнотекстовогоПоиска.СписокВыбора);
//		
//		// Вернуть таблицу оснований.
//		Форма.ЗначениеВРеквизитФормы(ТаблицаОснований, "Основания");
//		
//		// Установить отбор по списку найденных контрагентов
//		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
//			Форма.Список.Отбор,
//			"Поиск",
//			ТаблицаОснований.ВыгрузитьКолонку("Контрагент"),
//			ВидСравненияКомпоновкиДанных.ВСписке,, Истина
//		);
//		
//		Форма.Элементы.СтрокаПолнотекстовогоПоиска.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
//		Возврат Неопределено;
//		
//	КонецЕсли;
//	
//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
//		Форма.Список.Отбор,
//		"Поиск",
//		Справочники.Контрагенты.ПустаяСсылка(),
//		ВидСравненияКомпоновкиДанных.Равно,, Истина
//	);
//	
//	Форма.Элементы.СтрокаПолнотекстовогоПоиска.ЦветФона = ЦветаСтиля.СобытиеОтказ;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // НайтиКонтрагентовПолнотекстовыйПоиск()

//// Осуществляет расширенный поиск контрагентов.
////
//Функция НайтиКонтрагентов(СтрокаПоиска, СписокКонтрагентов)
//	
//	// Настроить параметры поиска
//	ОбластьПоиска = Новый Массив;
//	РазмерПорции = 100;
//	СтрокаПоискаРасширенная = ?(ПустаяСтрока(СтрокаПоиска), СтрокаПоиска, СтрокаПоиска + "*");
//	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоискаРасширенная, РазмерПорции);
//	ОбластьПоиска.Добавить(Метаданные.Справочники.Контрагенты);
//	ОбластьПоиска.Добавить(Метаданные.Справочники.КонтактныеЛица);
//	ОбластьПоиска.Добавить(Метаданные.Справочники.ФизическиеЛица);
//	ОбластьПоиска.Добавить(Метаданные.Справочники.ДоговорыКонтрагентов);
//	ОбластьПоиска.Добавить(Метаданные.Справочники.БанковскиеСчета);
//	СписокПоиска.ОбластьПоиска = ОбластьПоиска;
//	
//	СписокПоиска.ПерваяЧасть();
//	
//	// Возврат, если поиск не результативен.
//	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
//		Возврат НСтр("ru = 'Слишком много результатов, уточните запрос.'");
//	КонецЕсли;

//	Если СписокПоиска.ПолноеКоличество() = 0 Тогда
//		Возврат НСтр("ru = 'Ничего не найдено'");
//	КонецЕсли;
//	
//	КоличествоЭлементов = СписокПоиска.ПолноеКоличество();
//	
//	//сформировать список найденных контрагентов.
//	СписокКонтрагентов.Очистить();
//	НачальнаяПозиция = 0;
//	КонечнаяПозиция = ?(КоличествоЭлементов > РазмерПорции, РазмерПорции, КоличествоЭлементов) - 1;
//	ЕстьСледующаяПорция = Истина;
//	
//	//Обработать по порциям результаты ППД
//	Пока ЕстьСледующаяПорция Цикл
//		
//		Для СчетчикЭлементов = 0 По КонечнаяПозиция Цикл
//			
//			// Сформировать элемент результата
//			Элемент = СписокПоиска.Получить(СчетчикЭлементов);
//			ЭлементСсылка = Элемент.Значение.Ссылка;
//			Основание = Элемент.Метаданные.ПредставлениеОбъекта + " """ +
//			Элемент.Представление + """ - " + Элемент.Описание;
//			
//			// Контрагенты
//			Если Элемент.Метаданные = Метаданные.Справочники.Контрагенты Тогда
//				
//				Контрагент = Элемент.Значение;
//				Основание = НСтр("ru = 'Найдено: Контрагент - '") + Элемент.Описание;
//				
//			// Контактные лица
//			ИначеЕсли Элемент.Метаданные = Метаданные.Справочники.КонтактныеЛица Тогда
//				
//				Контрагент = Элемент.Значение.Владелец;
//				ШаблонОснования = НСтр("ru = 'Найдено: Контактное лицо ""%1"" - %2'");
//				Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОснования, Элемент.Значение, Элемент.Описание);
//				
//			// Физические лица
//			ИначеЕсли Элемент.Метаданные = Метаданные.Справочники.ФизическиеЛица Тогда
//				
//				ТаблицаНайденныхКонтрагентов = ПолучитьКонтрагентовПоФизЛицу(Элемент.Значение);
//				Если ТаблицаНайденныхКонтрагентов <> Неопределено Тогда
//					
//					Для каждого СтрокаТаблицы Из ТаблицаНайденныхКонтрагентов Цикл
//						ШаблонОснования = НСтр("ru = 'Найдено: Физическое лицо ""%1"" контактного лица ""%2"" - %3'");
//						Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОснования, Элемент.Значение, СтрокаТаблицы.Представление, Элемент.Описание);
//						Если НЕ ДобавитьКонтрагентаВСписокНайденныхПолнотекстовымПоиском(СписокКонтрагентов, СтрокаТаблицы.Контрагент, Основание, ЭлементСсылка) Тогда
//							Возврат НСтр("ru = 'Слишком много результатов, уточните запрос.'");
//						КонецЕсли;
//					КонецЦикла;
//					
//				КонецЕсли;
//				
//			// Договоры
//			ИначеЕсли Элемент.Метаданные = Метаданные.Справочники.ДоговорыКонтрагентов Тогда
//				
//				Контрагент = Элемент.Значение.Владелец;
//				ШаблонОснования =  НСтр("ru = 'Найдено: Договор ""%1"" - %2'");
//				Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОснования, Элемент.Значение, Элемент.Описание);
//				
//			// Банковские счета
//			ИначеЕсли Элемент.Метаданные = Метаданные.Справочники.БанковскиеСчета Тогда
//				
//				Контрагент = Элемент.Значение.Владелец;
//				ШаблонОснования =  НСтр("ru = 'Найдено: Банковский счет ""%1"" - %2'");
//				Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОснования, Элемент.Значение, Элемент.Описание);
//				
//			ИначеЕсли Не ЗначениеЗаполнено(Элемент.Значение.Контрагент) Тогда
//				
//				Продолжить;
//				Контрагент = Элемент.Значение.Контрагент;
//				
//			КонецЕсли;
//			
//			Если НЕ Элемент.Метаданные = Метаданные.Справочники.ФизическиеЛица Тогда
//				Если НЕ ДобавитьКонтрагентаВСписокНайденныхПолнотекстовымПоиском(СписокКонтрагентов, Контрагент, Основание, ЭлементСсылка) Тогда
//					Возврат НСтр("ru = 'Слишком много результатов, уточните запрос.'");
//				КонецЕсли;
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
//		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоЭлементов - 1);
//		Если ЕстьСледующаяПорция Тогда
//			КонечнаяПозиция = 
//			?(КоличествоЭлементов > НачальнаяПозиция + РазмерПорции, РазмерПорции,
//			КоличествоЭлементов - НачальнаяПозиция) - 1;
//			СписокПоиска.СледующаяЧасть();
//		КонецЕсли;
//	КонецЦикла;
//	
//	Если СписокКонтрагентов.Количество() = 0 Тогда
//		Возврат НСтр("ru = 'Ничего не найдено'");
//	КонецЕсли;
//	
//	Возврат Неопределено;
//	
//КонецФункции // НайтиКонтрагентов()

//// Получает массив контрагентов по физическому лицу, в массив попадают контрагенты,
//// у которых физическое лицо указано в качестве контактного лица, а также все контрагенты,
//// для которого физическое лицо указано в качестве контрагента.
////
//// Параметры
////	Физлицо - Справочник.ФизическиеЛица - физлицо, для которого выполняется поиск
////
//// Возвращаемое значение:
////	Массив - массив найденных по физлицу контрагентов.
////
//Функция ПолучитьКонтрагентовПоФизЛицу(ФизЛицо)
//	
//	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
//		Возврат Новый Массив;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//	|	КонтактныеЛица.Владелец КАК Контрагент,
//	|	КонтактныеЛица.Ссылка,
//	|	КонтактныеЛица.Представление
//	|ИЗ
//	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
//	|ГДЕ
//	|	КонтактныеЛица.Физлицо = &ФизЛицо";
//	
//	Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо);
//	
//	Результат = Запрос.Выполнить();
//	Если Результат.Пустой() Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	Возврат Результат.Выгрузить();
//	
//КонецФункции // ПолучитьКонтрагентовПоФизЛицу()

//// Функция добавляет в список найденных полнотекстовым поиском контрагентов.
////
//Функция ДобавитьКонтрагентаВСписокНайденныхПолнотекстовымПоиском(СписокКонтрагентов, Контрагент, Основание, ЭлементСсылка)
//	
//	// Добавить элемент, если контрагента еще нет в списке найденных
//	НайденнаяСтрока = СписокКонтрагентов.Найти(Контрагент, "Контрагент");
//	Если НайденнаяСтрока = Неопределено Тогда
//		
//		//Ограничить количество возвращаемых контрагентов
//		Если СписокКонтрагентов.Количество() > 100 Тогда
//			Возврат Ложь;
//		Иначе 
//			Запись = СписокКонтрагентов.Добавить();
//			Запись.Контрагент = Контрагент;
//			Запись.Основание = Основание;
//			Запись.Ссылка = ЭлементСсылка;
//		КонецЕсли;
//		
//	Иначе
//		
//		Если (ТипЗнч(НайденнаяСтрока.Ссылка) = Тип("СправочникСсылка.КонтактныеЛица")
//			ИЛИ ТипЗнч(НайденнаяСтрока.Ссылка) = Тип("СправочникСсылка.ФизическиеЛица")
//			ИЛИ ТипЗнч(НайденнаяСтрока.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
//			ИЛИ ТипЗнч(НайденнаяСтрока.Ссылка) = Тип("СправочникСсылка.БанковскиеСчета"))
//			И ТипЗнч(ЭлементСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
//		
//			НайденнаяСтрока.Контрагент = Контрагент;
//			НайденнаяСтрока.Основание = Основание;
//			НайденнаяСтрока.Ссылка = ЭлементСсылка;
//		
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Возврат Истина;
//	
//КонецФункции // ДобавитьКонтрагентаВСписокНайденныхПолнотекстовымПоиском()

//// Обновляет индекс полнотекстового поиска.
////
//Процедура ОбновитьИндексаПолнотекстовогоПоиска() Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	ПолнотекстовыйПоиск.ОбновитьИндекс();
//	
//КонецПроцедуры // ОбновитьИндексаПолнотекстовогоПоиска()

//// Процедура загружает историю поиска контрагентов.
////
//Процедура Загрузить(ИмяНастройки, СписокВыбора) Экспорт
//	
//	ИсторияПоиска = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяНастройки, "");
//	Если ИсторияПоиска <> Неопределено Тогда
//		СписокВыбора.ЗагрузитьЗначения(ИсторияПоиска);
//	КонецЕсли;
//	
//КонецПроцедуры // Загрузить()

//// Процедура сохраняет историю поиска контрагентов.
////
//Процедура Сохранить(ИмяНастройки, СписокВыбора)
//	
//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяНастройки, "", СписокВыбора.ВыгрузитьЗначения());
//	
//КонецПроцедуры // Сохранить()

//// Процедура обновляет список выбора поиска.
////
//Процедура ОбновитьСписокВыбора(СписокВыбора, СтрокаПоиска, РазмерСпискаВыбора = 1000)
//	
//	// Удалим элемент из истории поиска если он там был
//	НомерНайденногоЭлементаСписка = СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
//	Пока НомерНайденногоЭлементаСписка <> Неопределено Цикл
//		СписокВыбора.Удалить(НомерНайденногоЭлементаСписка);
//		НомерНайденногоЭлементаСписка = СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
//	КонецЦикла;
//	
//	// И поставим его на первое место
//	СписокВыбора.Вставить(0, СтрокаПоиска);
//	Пока СписокВыбора.Количество() > РазмерСпискаВыбора Цикл
//		СписокВыбора.Удалить(СписокВыбора.Количество() - 1);
//	КонецЦикла;
//	
//КонецПроцедуры // ОбновитьСписокВыбора()

//#КонецОбласти

//#Область УправлениеПроведением

//// Выполняет инициализацию дополнительных свойств для проведения документа.
////
//Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
//	
//	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения", "УчетнаяПолитика".
//	
//	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
//	СтруктураДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
//	
//	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
//	СтруктураДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
//	
//	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
//	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
//	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
//	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента", ДокументСсылка.Метаданные());
//	
//	// "УчетнаяПолитика" - структура, содержащая значения всех параметров учетной политики на момент времени документа
//	// и по выбранной в документе организации или по компании (в случае ведения учета по компании).
//	СтруктураДополнительныеСвойства.Вставить("УчетнаяПолитика", Новый Структура);
//	
//	// Запрос, получающий данные документа.
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ
//	|	_Документ_.Ссылка КАК Ссылка,
//	|	_Документ_.Номер КАК Номер,
//	|	_Документ_.Дата КАК Дата,
//	|   " + ?(СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено, "_Документ_.Организация" , "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)") + " КАК Организация,
//	|	_Документ_.МоментВремени КАК МоментВремени,
//	|	_Документ_.Представление КАК Представление
//	|ИЗ
//	|	Документ." + СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Имя + " КАК _Документ_
//	|ГДЕ
//	|	_Документ_.Ссылка = &ДокументСсылка");
//	
//	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	// Формирование ключей, содержащих данные документа.
//	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
//		
//		СтруктураДополнительныеСвойства.ДляПроведения.Вставить(Колонка.Имя);
//		
//	КонецЦикла;
//	
//	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
//	ВыборкаИзРезультатаЗапроса.Следующий();
//	
//	// Заполнение значений для ключей, содержащих данные документа.
//	ЗаполнитьЗначенияСвойств(СтруктураДополнительныеСвойства.ДляПроведения, ВыборкаИзРезультатаЗапроса);
//	
//	// Определение и установка значения момента, на который должен быть выполнен контроль документа.
//	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МоментКонтроля", Дата('00010101'));
//	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ПериодКонтроля", Дата("39991231"));
//		
//	// Установка организации в случае ведения учета по компании.
//	СтруктураДополнительныеСвойства.ДляПроведения.Организация = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(СтруктураДополнительныеСвойства.ДляПроведения.Организация);
//	
//	// Запрос, получающий данные учетной политики.
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ
//	|	Константы.ФункциональнаяОпцияУчетПоПроектам КАК УчетПоПроектам,
//	|	Константы.ФункциональнаяОпцияУчетПоЯчейкам КАК УчетПоЯчейкам,
//	|	Константы.ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов КАК КассовыйМетодУчетаДоходовИРасходов,
//	|	Константы.ФункциональнаяОпцияИспользоватьПартии КАК ИспользоватьПартии,
//	|	Константы.ФункциональнаяОпцияИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
//	|	Константы.ФункциональнаяОпцияИспользоватьТехоперации КАК ИспользоватьТехоперации,
//	|	Константы.ФункциональнаяОпцияИспользоватьЭтапыПроизводства КАК ИспользоватьЭтапыПроизводства,
//	|	Константы.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
//	|	Константы.КонтрольОстатковСерийныхНомеров КАК ОстаткиСерийныхНомеров,
//	|	Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты КАК ИспользоватьПодарочныеСертификаты,
//	|	Константы.ФункциональнаяОпцияИспользоватьЧастичноеПогашениеСертификатов КАК ИспользоватьЧастичноеПогашениеСертификатов,
//	|	Константы.ФункциональнаяОпцияРазрешитьСкладыВТабличныхЧастях КАК РазрешитьСкладыВТабличныхЧастях
//	|ИЗ
//	|	Константы КАК Константы");
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	// Формирование ключей, содержащих данные учетной политики.
//	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
//		
//		СтруктураДополнительныеСвойства.УчетнаяПолитика.Вставить(Колонка.Имя);
//		
//	КонецЦикла;
//	
//	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
//	ВыборкаИзРезультатаЗапроса.Следующий();
//	
//	// Заполнение значений для ключей, содержащих данные учетной политики.
//	ЗаполнитьЗначенияСвойств(СтруктураДополнительныеСвойства.УчетнаяПолитика, ВыборкаИзРезультатаЗапроса);
//	
//	// Данные по учету подарочных сертификатов
//	СтруктураДополнительныеСвойства.Вставить("ДляСертификатов", Новый Структура);
//	
//	КонтрагентДляПредоплаты = Константы.КонтрагентДляПодарочныхСертификатов.Получить();
//	СтруктураДополнительныеСвойства.ДляСертификатов.Вставить("КонтрагентДляПредоплаты", КонтрагентДляПредоплаты);
//	СтруктураДополнительныеСвойства.ДляСертификатов.Вставить("ДоговорПоУмолчанию", Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(КонтрагентДляПредоплаты));
//	СтруктураДополнительныеСвойства.ДляСертификатов.Вставить("СчетУчетаАвансовПокупателя", КонтрагентДляПредоплаты.СчетУчетаАвансовПокупателя);
//	
//	//Данные по мультивалютному учету
//	СтруктураДополнительныеСвойства.Вставить("УчетВалютныхОпераций", ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций"));
//	СтруктураДополнительныеСвойства.Вставить("ВалютаУчета", Константы.ВалютаУчета.Получить());
//	СтруктураДополнительныеСвойства.Вставить("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
//	
//КонецПроцедуры // ИнициализироватьДополнительныеСвойстваДляПроведения()

//// Формирует массив имен регистров, по которым есть движения документа.
////
//Функция ПолучитьМассивИменИспользуемыхРегистров(Регистратор, МетаданныеДокумента)
//	
//	МассивРегистров = Новый Массив;
//	ТекстЗапроса = "";
//	СчетчикТаблиц = 0;
//	СчетчикЦикла = 0;
//	ВсегоРегистров = МетаданныеДокумента.Движения.Количество();
//	
//	Для каждого Движение из МетаданныеДокумента.Движения Цикл
//		
//		Если СчетчикТаблиц > 0 Тогда
//			
//			ТекстЗапроса = ТекстЗапроса + "
//			|ОБЪЕДИНИТЬ ВСЕ
//			|";
//			
//		КонецЕсли;
//		
//		СчетчикТаблиц = СчетчикТаблиц + 1;
//		СчетчикЦикла = СчетчикЦикла + 1;
//		
//		ТекстЗапроса = ТекстЗапроса + 
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|""" + Движение.Имя + """ КАК ИмяРегистра
//		|
//		|ИЗ " + Движение.ПолноеИмя() + "
//		|
//		|ГДЕ Регистратор = &Регистратор
//		|";
//		
//		Если СчетчикТаблиц = 256 ИЛИ СчетчикЦикла = ВсегоРегистров Тогда
//			
//			Запрос = Новый Запрос(ТекстЗапроса);
//			Запрос.УстановитьПараметр("Регистратор", Регистратор);
//			
//			ТекстЗапроса  = "";
//			СчетчикТаблиц = 0;
//			
//			Если МассивРегистров.Количество() = 0 Тогда
//				
//				МассивРегистров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");
//				
//			Иначе
//				
//				Выборка = Запрос.Выполнить().Выбрать();
//				
//				Пока Выборка.Следующий() Цикл
//					
//					МассивРегистров.Добавить(Выборка.ИмяРегистра);
//					
//				КонецЦикла;
//				
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Возврат МассивРегистров;
//	
//КонецФункции // ПолучитьМассивИменИспользуемыхРегистров()

//// Выполняет подготовку наборов записей документа.
////
//Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(СтруктураОбъект) Экспорт
//	
//	Для каждого НаборЗаписей из СтруктураОбъект.Движения Цикл
//		
//		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
//			
//			НаборЗаписей = НаборЗаписей.Значение;
//			
//		КонецЕсли;
//		
//		Если НаборЗаписей.Количество() > 0 Тогда
//			
//			НаборЗаписей.Очистить();
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	МассивИменРегистров = ПолучитьМассивИменИспользуемыхРегистров(СтруктураОбъект.Ссылка, СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента);
//	
//	Для каждого ИмяРегистра из МассивИменРегистров Цикл
//		
//		СтруктураОбъект.Движения[ИмяРегистра].Записывать = Истина;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//// Записывает наборы записей документа.
////
//Процедура ЗаписатьНаборыЗаписей(СтруктураОбъект) Экспорт
//	
//	Для каждого НаборЗаписей из СтруктураОбъект.Движения Цикл
//		
//		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
//			
//			НаборЗаписей = НаборЗаписей.Значение;
//			
//		КонецЕсли;
//		
//		Если НаборЗаписей.Записывать Тогда
//			
//			Если НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
//				
//				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
//				
//			КонецЕсли;
//			
//			Если НЕ НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
//				
//				НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы);
//				Если СтруктураОбъект.ДополнительныеСвойства.Свойство("РежимЗаписи") Тогда
//					НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Вставить("РежимЗаписи", СтруктураОбъект.ДополнительныеСвойства.РежимЗаписи);
//				КонецЕсли;
//			КонецЕсли;
//			
//			НаборЗаписей.Записать();
//			НаборЗаписей.Записывать = Ложь;
//			
//		Иначе
//				
//			МетаданныеНабора = НаборЗаписей.Метаданные();
//			Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеНабора)
//				И ЕстьПроцедураСоздатьПустуюВременнуюТаблицуИзменение(МетаданныеНабора.ПолноеИмя()) Тогда
//				
//				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеНабора.ПолноеИмя());
//				МенеджерОбъекта.СоздатьПустуюВременнуюТаблицуИзменение(СтруктураОбъект.ДополнительныеСвойства);
//				
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Функция ЕстьПроцедураСоздатьПустуюВременнуюТаблицуИзменение(ПолноеИмяРегистра)
//	
//	РегистрыСПроцедурой = Новый Массив;
//	
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ВнеоборотныеАктивы.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредства.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваВКассахККМ.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваКПоступлению.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ДоходыИРасходыНераспределенные.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ДоходыИРасходыОтложенные.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗаказыНаПроизводство.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗаказыПокупателей.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗаказыПоставщикам.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.Запасы.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗапасыВРазрезеГТД.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗапасыКПоступлениюНаСклады.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗапасыКРасходуСоСкладов.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗапасыНаСкладах.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗапасыПереданные.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗапасыПринятые.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.НДФЛДоходы.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.НДФЛРасчетыНалоговыхАгентовСБюджетом.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ПотребностьВЗапасах.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ПримененныеВычетыПоНДФЛ.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.РазмещениеЗаказов.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.РасчетыПоНалогам.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.РасчетыПоЭквайрингу.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.РасчетыСПерсоналом.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.РасчетыСПодотчетниками.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.РасчетыСПокупателями.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.РасчетыСФондамиПоСтраховымВзносам.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.СтраховыеВзносыДоходы.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.СтраховыеВзносыПереданныеВПФР.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.СуммовойУчетВРознице.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.СерийныеНомера.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗапасыВРемонте.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ЗапасыПереданныеВРемонте.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ПодарочныеСертификаты.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.БонусныеБаллы.ПолноеИмя());
//	РегистрыСПроцедурой.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваВРезерве.ПолноеИмя());
//	
//	Возврат РегистрыСПроцедурой.Найти(ПолноеИмяРегистра) <> Неопределено;
//	
//КонецФункции

//#КонецОбласти

//#Область ПроцедурыФормированияДвиженийРегистров

//// Функция возвращает значение константы КонтролироватьОстаткиПриПроведении.
//// 
//Функция ВыполнитьКонтрольОстатков() Экспорт
//	
//	Возврат Константы.КонтролироватьОстаткиПриПроведении.Получить();
//	
//КонецФункции // ВыполнитьКонтрольОстатков()

//// Выполняет движения регистра накопления ДенежныеСредства.
////
//Процедура ОтразитьДенежныеСредства(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредства;
//	
//	Если Отказ
//	 ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияДенежныеСредства = Движения.ДенежныеСредства;
//	ДвиженияДенежныеСредства.Записывать = Истина;
//	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
//	
//КонецПроцедуры

//// Выполняет движения регистра накопления РасчетыСПодотчетниками.
////
//Процедура ОтразитьРасчетыСПодотчетниками(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаРасчетыСПодотчетниками = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПодотчетниками;
//	
//	Если Отказ
//	 ИЛИ ТаблицаРасчетыСПодотчетниками.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияРасчетыСПодотчетниками = Движения.РасчетыСПодотчетниками;
//	ДвиженияРасчетыСПодотчетниками.Записывать = Истина;
//	ДвиженияРасчетыСПодотчетниками.Загрузить(ТаблицаРасчетыСПодотчетниками);
//	
//КонецПроцедуры // ВыполнитьРасходПоРасчетамСПодотчетнымиЛицами()

//// Выполняет движения регистра накопления РасчетыСКонтрагентами.
////
//Процедура ОтразитьРасчетыСПокупателями(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаРасчетыСПокупателями = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПокупателями;
//	
//	Если Отказ
//	 ИЛИ ТаблицаРасчетыСПокупателями.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияРасчетыСПокупателями = Движения.РасчетыСПокупателями;
//	ДвиженияРасчетыСПокупателями.Записывать = Истина;
//	ДвиженияРасчетыСПокупателями.Загрузить(ТаблицаРасчетыСПокупателями);
//	
//КонецПроцедуры

//// Выполняет движения регистра накопления РасчетыСКонтрагентами.
////
//Процедура ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаРасчетыСПоставщиками = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками;
//	
//	Если Отказ
//	 ИЛИ ТаблицаРасчетыСПоставщиками.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияРасчетыСПоставщиками = Движения.РасчетыСПоставщиками;
//	ДвиженияРасчетыСПоставщиками.Записывать = Истина;
//	ДвиженияРасчетыСПоставщиками.Загрузить(ТаблицаРасчетыСПоставщиками);
//	
//КонецПроцедуры

//// Выполняет движения регистра накопления Платежный календарь.
////
//// Параметры:
////  ДокументОбъект - Текущий документ
////  Отказ - Булево - Флаг отказа проведения документа.
////
//Процедура ОтразитьПлатежныйКалендарь(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаПлатежныйКалендарь = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПлатежныйКалендарь;
//	
//	Если Отказ
//	 ИЛИ ТаблицаПлатежныйКалендарь.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияПлатежныйКалендарь = Движения.ПлатежныйКалендарь;
//	ДвиженияПлатежныйКалендарь.Записывать = Истина;
//	ДвиженияПлатежныйКалендарь.Загрузить(ТаблицаПлатежныйКалендарь);
//	
//КонецПроцедуры // ОтразитьПлатежныйКалендарь()

//// Выполняет движения регистра накопления Денежные средства в резерве.
////
//// Параметры:
////  ДокументОбъект - Текущий документ
////  Отказ - Булево - Флаг отказа проведения документа.
////
//Процедура ОтразитьДенежныеСредстваВРезерве(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаДенежныеСредстваВРезерве = ДополнительныеСвойства.ТаблицыДляДвижений.ДенежныеСредстваВРезерве;
//	
//	Если Отказ
//	 ИЛИ ТаблицаДенежныеСредстваВРезерве.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияДенежныеСредстваВРезерве = Движения.ДенежныеСредстваВРезерве;
//	ДвиженияДенежныеСредстваВРезерве.Записывать = Истина;
//	ДвиженияДенежныеСредстваВРезерве.Загрузить(ТаблицаДенежныеСредстваВРезерве);
//	
//КонецПроцедуры // ОтразитьДенежныеСредстваВРезерве()

//// Выполняет движения регистра накопления Оплата счетов.
////
//// Параметры:
////  ДокументОбъект - Текущий документ
////  Отказ - Булево - Флаг отказа проведения документа.
////
//Процедура ОтразитьОплатаСчетовИЗаказов(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаОплатаСчетовИЗаказов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОплатаСчетовИЗаказов;
//	
//	Если Отказ
//	 ИЛИ ТаблицаОплатаСчетовИЗаказов.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияОплатаСчетовИЗаказов = Движения.ОплатаСчетовИЗаказов;
//	ДвиженияОплатаСчетовИЗаказов.Записывать = Истина;
//	ДвиженияОплатаСчетовИЗаказов.Загрузить(ТаблицаОплатаСчетовИЗаказов);
//	
//КонецПроцедуры // ОтразитьОплатаСчетовИЗаказов()

//// Процедура выполняет движения регистра накопления ДоходыИРасходыКассовыйМетод.
////
//// Параметры:
////	ДокументОбъект - Текущий документ
////	Отказ - Булево - Признак отказа от проведения документа
////
//Процедура ОтразитьДоходыИРасходыКассовыйМетод(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаДоходыИРасходыКассовыйМетод = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходыКассовыйМетод;
//	
//	Если Отказ
//	 ИЛИ ТаблицаДоходыИРасходыКассовыйМетод.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДоходыИРасходыКассовыйМетод = Движения.ДоходыИРасходыКассовыйМетод;
//	ДоходыИРасходыКассовыйМетод.Записывать = Истина;
//	ДоходыИРасходыКассовыйМетод.Загрузить(ТаблицаДоходыИРасходыКассовыйМетод);
//	
//КонецПроцедуры // ОтразитьДоходыИРасходыКассовыйМетод()

//// Процедура выполняет движения регистра накопления ДоходыИРасходыНераспределенные.
////
//// Параметры:
////	ДокументОбъект - Текущий документ
////	Отказ - Булево - Признак отказа от проведения документа
////
//Процедура ОтразитьДоходыИРасходыНераспределенные(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаДоходыИРасходыНераспределенные = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходыНераспределенные;
//	
//	Если Отказ
//	 ИЛИ ТаблицаДоходыИРасходыНераспределенные.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДоходыИРасходыНераспределенные = Движения.ДоходыИРасходыНераспределенные;
//	ДоходыИРасходыНераспределенные.Записывать = Истина;
//	ДоходыИРасходыНераспределенные.Загрузить(ТаблицаДоходыИРасходыНераспределенные);
//	
//КонецПроцедуры // ОтразитьДоходыИРасходыНераспределенные()

//// Процедура выполняет движения регистра накопления ДоходыИРасходыОтложенные.
////
//// Параметры:
////	ДокументОбъект - Текущий документ
////	Отказ - Булево - Признак отказа от проведения документа
////
//Процедура ОтразитьДоходыИРасходыОтложенные(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаДоходыИРасходыОтложенные = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходыОтложенные;
//	
//	Если Отказ
//	 ИЛИ ТаблицаДоходыИРасходыОтложенные.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДоходыИРасходыОтложенные = Движения.ДоходыИРасходыОтложенные;
//	ДоходыИРасходыОтложенные.Записывать = Истина;
//	ДоходыИРасходыОтложенные.Загрузить(ТаблицаДоходыИРасходыОтложенные);
//	
//КонецПроцедуры // ОтразитьДоходыИРасходыОтложенные()

//// Выполняет движения регистра накопления НачисленияИУдержания.
////
//Процедура ОтразитьНачисленияИУдержания(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаНачисленияИУдержания = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНачисленияИУдержания;
//	
//	Если Отказ
//	 ИЛИ ТаблицаНачисленияИУдержания.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияНачисленияИУдержания = Движения.НачисленияИУдержания;
//	ДвиженияНачисленияИУдержания.Записывать = Истина;
//	ДвиженияНачисленияИУдержания.Загрузить(ТаблицаНачисленияИУдержания);
//	
//КонецПроцедуры

//// Выполняет движения регистра накопления РасчетыСПерсоналом.
////
//Процедура ОтразитьРасчетыСПерсоналом(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаРасчетыСПерсоналом = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПерсоналом;
//	
//	Если Отказ
//	 ИЛИ ТаблицаРасчетыСПерсоналом.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияРасчетыСПерсоналом = Движения.РасчетыСПерсоналом;
//	ДвиженияРасчетыСПерсоналом.Записывать = Истина;
//	ДвиженияРасчетыСПерсоналом.Загрузить(ТаблицаРасчетыСПерсоналом);
//	
//КонецПроцедуры

//// Выполняет движения регистра сведений ПлановыеНачисленияИУдержания.
////
//Процедура ОтразитьПлановыеНачисленияИУдержания(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаПлановыеНачисленияИУдержания = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПлановыеНачисленияИУдержания;
//	
//	Если Отказ
//	 ИЛИ ТаблицаПлановыеНачисленияИУдержания.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияПлановыеНачисленияИУдержания = Движения.ПлановыеНачисленияИУдержания;
//	ДвиженияПлановыеНачисленияИУдержания.Записывать = Истина;
//	ДвиженияПлановыеНачисленияИУдержания.Загрузить(ТаблицаПлановыеНачисленияИУдержания);
//	
//КонецПроцедуры

//// Выполняет движения регистра сведений Сотрудники.
////
//Процедура ОтразитьСотрудники(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаСотрудники = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСотрудники;
//	
//	Если Отказ
//	 ИЛИ ТаблицаСотрудники.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияСотрудники = Движения.Сотрудники;
//	ДвиженияСотрудники.Записывать = Истина;
//	ДвиженияСотрудники.Загрузить(ТаблицаСотрудники);
//	
//КонецПроцедуры

//// Выполняет движения регистра накопления Табель.
////
//Процедура ОтразитьТабель(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаТабель = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТабель;
//	
//	Если Отказ
//	 ИЛИ ТаблицаТабель.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияТабель = Движения.Табель;
//	ДвиженияТабель.Записывать = Истина;
//	ДвиженияТабель.Загрузить(ТаблицаТабель);
//	
//КонецПроцедуры

//// Выполняет движения регистра накопления ДоходыИРасходы.
////
//Процедура ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаДоходыИРасходы = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы;
//	
//	Если Отказ
//	 ИЛИ ТаблицаДоходыИРасходы.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияДоходыИРасходы = Движения.ДоходыИРасходы;
//	ДвиженияДоходыИРасходы.Записывать = Истина;
//	ДвиженияДоходыИРасходы.Загрузить(ТаблицаДоходыИРасходы);
//	
//КонецПроцедуры

//// Выполняет движения регистра накопления СуммовойУчетВРознице.
////
//Процедура ОтразитьСуммовойУчетВРознице(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаСуммовойУчетВРознице = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСуммовойУчетВРознице;
//	
//	Если Отказ
//	 ИЛИ ТаблицаСуммовойУчетВРознице.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияСуммовойУчетВРознице = Движения.СуммовойУчетВРознице;
//	ДвиженияСуммовойУчетВРознице.Записывать = Истина;
//	ДвиженияСуммовойУчетВРознице.Загрузить(ТаблицаСуммовойУчетВРознице);
//	
//КонецПроцедуры // ОтразитьСуммовойУчетВРознице()

//// Выполняет движения регистра накопления РасчетыПоНалогам.
////
//Процедура ОтразитьРасчетыПоНалогам(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаРасчетыПоНалогам = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыПоНалогам;
//	
//	Если Отказ
//	 ИЛИ ТаблицаРасчетыПоНалогам.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияРасчетыПоНалогам = Движения.РасчетыПоНалогам;
//	ДвиженияРасчетыПоНалогам.Записывать = Истина;
//	ДвиженияРасчетыПоНалогам.Загрузить(ТаблицаРасчетыПоНалогам);
//	
//КонецПроцедуры

//// Выполняет движения регистра накопления ЗапасыКПоступлениюНаСклады.
////
//Процедура ОтразитьЗапасыКПоступлениюНаСклады(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаЗапасыКПоступлениюНаСклады = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыКПоступлениюНаСклады;
//	
//	Если Отказ
//	 ИЛИ ТаблицаЗапасыКПоступлениюНаСклады.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияЗапасыКПоступлениюНаСклады = Движения.ЗапасыКПоступлениюНаСклады;
//	ДвиженияЗапасыКПоступлениюНаСклады.Записывать = Истина;
//	ДвиженияЗапасыКПоступлениюНаСклады.Загрузить(ТаблицаЗапасыКПоступлениюНаСклады);
//	
//КонецПроцедуры

//// Выполняет движения регистра накопления ЗапасыКРасходуСоСкладов.
////
//Процедура ОтразитьЗапасыКРасходуСоСкладов(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаЗапасыКРасходуСоСкладов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыКРасходуСоСкладов;
//	
//	Если Отказ
//	 ИЛИ ТаблицаЗапасыКРасходуСоСкладов.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияЗапасыКРасходуСоСкладов = Движения.ЗапасыКРасходуСоСкладов;
//	ДвиженияЗапасыКРасходуСоСкладов.Записывать = Истина;
//	ДвиженияЗапасыКРасходуСоСкладов.Загрузить(ТаблицаЗапасыКРасходуСоСкладов);
//	
//КонецПроцедуры

//// Выполняет движения регистра накопления ЗапасыНаСкладах.
////
//Процедура ОтразитьЗапасыНаСкладах(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаЗапасыНаСкладах = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах;
//	
//	Если Отказ
//	 ИЛИ ТаблицаЗапасыНаСкладах.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияЗапасыНаСкладах = Движения.ЗапасыНаСкладах;
//	ДвиженияЗапасыНаСкладах.Записывать = Истина;
//	ДвиженияЗапасыНаСкладах.Загрузить(ТаблицаЗапасыНаСкладах);
//	
//КонецПроцедуры // ОтразитьЗапасыНаСкладах()

//// Выполняет движения регистра накопления ДенежныеСредстваВКассахККМ.
////
//Процедура ОтразитьДенежныеСредстваВКассахККМ(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаДенежныеСредстваВКассахККМ = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваВКассахККМ;
//	
//	Если Отказ
//	 ИЛИ ТаблицаДенежныеСредстваВКассахККМ.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияДенежныеСредстваВКассахККМ = Движения.ДенежныеСредстваВКассахККМ;
//	ДвиженияДенежныеСредстваВКассахККМ.Записывать = Истина;
//	ДвиженияДенежныеСредстваВКассахККМ.Загрузить(ТаблицаДенежныеСредстваВКассахККМ);
//	
//КонецПроцедуры // ОтразитьДенежныеСредстваВКассахККМ()

//// Выполняет движения регистра накопления Запасы.
////
//Процедура ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаЗапасы = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы;
//	
//	Если Отказ
//	 ИЛИ ТаблицаЗапасы.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияЗапасы = Движения.Запасы;
//	ДвиженияЗапасы.Записывать = Истина;
//	ДвиженияЗапасы.Загрузить(ТаблицаЗапасы);
//	
//КонецПроцедуры

//// Выполняет движения по регистру Планы продаж.
////
//Процедура ОтразитьПланыПродаж(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаПланыПродаж = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланыПродаж;
//	
//	Если Отказ
//	 ИЛИ ТаблицаПланыПродаж.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияПланыПродаж = Движения.ПланыПродаж;
//	ДвиженияПланыПродаж.Записывать = Истина;
//	ДвиженияПланыПродаж.Загрузить(ТаблицаПланыПродаж);
//	
//КонецПроцедуры // ОтразитьПланыПродаж()

//// Выполняет движения по регистру ДенежныеСредстваПрогноз.
////
//Процедура ОтразитьДенежныеСредстваПрогноз(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаДенежныеСредстваПрогноз = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваПрогноз;
//	
//	Если Отказ
//	 ИЛИ ТаблицаДенежныеСредстваПрогноз.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияБюджетДенежныеСредстваПрогноз = Движения.ДенежныеСредстваПрогноз;
//	ДвиженияБюджетДенежныеСредстваПрогноз.Записывать = Истина;
//	ДвиженияБюджетДенежныеСредстваПрогноз.Загрузить(ТаблицаДенежныеСредстваПрогноз);
//	
//КонецПроцедуры // ОтразитьДенежныеСредстваПрогноз()

//// Выполняет движения регистра накопления ДоходыИРасходыПрогноз.
////
//Процедура ОтразитьДоходыИРасходыПрогноз(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаДоходыИРасходыПрогноз = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходыПрогноз;
//	
//	Если Отказ
//	 ИЛИ ТаблицаДоходыИРасходыПрогноз.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияДоходыИРасходыПрогноз = Движения.ДоходыИРасходыПрогноз;
//	ДвиженияДоходыИРасходыПрогноз.Записывать = Истина;
//	ДвиженияДоходыИРасходыПрогноз.Загрузить(ТаблицаДоходыИРасходыПрогноз);
//	
//КонецПроцедуры

//// Выполняет движения регистра накопления ДоходыИРасходыПоЗаказамПрогноз.
////
//Процедура ОтразитьДоходыИРасходыПоЗаказамПрогноз(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаДоходыИРасходыПоЗаказамПрогноз = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходыПоЗаказамПрогноз;
//	
//	Если Отказ
//	 ИЛИ ТаблицаДоходыИРасходыПоЗаказамПрогноз.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияДоходыИРасходыПоЗаказамПрогноз = Движения.ДоходыИРасходыПоЗаказамПрогноз;
//	ДвиженияДоходыИРасходыПоЗаказамПрогноз.Записывать = Истина;
//	ДвиженияДоходыИРасходыПоЗаказамПрогноз.Загрузить(ТаблицаДоходыИРасходыПоЗаказамПрогноз);
//	
//КонецПроцедуры

//// Выполняет движения по регистру ФинансовыйРезультатПрогноз.
////
//Процедура ОтразитьФинансовыйРезультатПрогноз(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаФинансовыйРезультатПрогноз = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФинансовыйРезультатПрогноз;
//	
//	Если Отказ
//	 ИЛИ ТаблицаФинансовыйРезультатПрогноз.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияФинансовыйРезультатПрогноз = Движения.ФинансовыйРезультатПрогноз;
//	ДвиженияФинансовыйРезультатПрогноз.Записывать = Истина;
//	ДвиженияФинансовыйРезультатПрогноз.Загрузить(ТаблицаФинансовыйРезультатПрогноз);
//	
//КонецПроцедуры // ОтразитьФинансовыйРезультатПрогноз()

//// Выполняет движения по регистру Закупки.
////
//Процедура ОтразитьЗакупки(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаЗакупки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗакупки;
//	
//	Если Отказ
//	 ИЛИ ТаблицаЗакупки.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияЗакупки = Движения.Закупки;
//	ДвиженияЗакупки.Записывать = Истина;
//	ДвиженияЗакупки.Загрузить(ТаблицаЗакупки);
//	
//КонецПроцедуры // ОтразитьЗакупки()

//// Выполняет движения по регистру Запасы переданные.
////
//Процедура ОтразитьЗапасыПереданные(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаЗапасыПереданные = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПереданные;
//	
//	Если Отказ
//	 ИЛИ ТаблицаЗапасыПереданные.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияЗапасыПереданные = Движения.ЗапасыПереданные;
//	ДвиженияЗапасыПереданные.Записывать = Истина;
//	ДвиженияЗапасыПереданные.Загрузить(ТаблицаЗапасыПереданные);
//	
//КонецПроцедуры // ОтразитьЗапасыПереданные()

//// Выполняет движения по регистру Запасы принятые.
////
//Процедура ОтразитьЗапасыПринятые(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаЗапасыПринятые = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПринятые;
//	
//	Если Отказ
//	 ИЛИ ТаблицаЗапасыПринятые.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияЗапасыПринятые = Движения.ЗапасыПринятые;
//	ДвиженияЗапасыПринятые.Записывать = Истина;
//	ДвиженияЗапасыПринятые.Загрузить(ТаблицаЗапасыПринятые);
//	
//КонецПроцедуры // ОтразитьЗапасыПринятые()

//// Выполняет движения по регистру Размещение заказов.
////
//Процедура ОтразитьРазмещениеЗаказов(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаРазмещениеЗаказов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРазмещениеЗаказов;
//	
//	Если Отказ
//	 ИЛИ ТаблицаРазмещениеЗаказов.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияРазмещениеЗаказов = Движения.РазмещениеЗаказов;
//	ДвиженияРазмещениеЗаказов.Записывать = Истина;
//	ДвиженияРазмещениеЗаказов.Загрузить(ТаблицаРазмещениеЗаказов);
//	
//КонецПроцедуры // ОтразитьРазмещениеЗаказов()

//// Выполняет движения по регистру Продажи.
////
//Процедура ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаПродажи = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи;
//	
//	Если Отказ
//	 ИЛИ ТаблицаПродажи.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияПродажи = Движения.Продажи;
//	ДвиженияПродажи.Записывать = Истина;
//	ДвиженияПродажи.Загрузить(ТаблицаПродажи);
//	
//КонецПроцедуры // ОтразитьПродажи()

//// Выполняет движения по регистру Заказы покупателей.
////
//Процедура ОтразитьЗаказыПокупателей(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаЗаказыПокупателей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыПокупателей;
//	
//	Если Отказ
//	 ИЛИ ТаблицаЗаказыПокупателей.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияЗаказыПокупателей = Движения.ЗаказыПокупателей;
//	ДвиженияЗаказыПокупателей.Записывать = Истина;
//	ДвиженияЗаказыПокупателей.Загрузить(ТаблицаЗаказыПокупателей);
//	
//КонецПроцедуры // ОтразитьЗаказыПокупателей()

//// Выполняет движения по регистру ГрафикДвиженияЗапасов.
////
//Процедура ОтразитьГрафикДвиженияЗапасов(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаГрафикДвиженияЗапасов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГрафикДвиженияЗапасов;
//	
//	Если Отказ
//	 ИЛИ ТаблицаГрафикДвиженияЗапасов.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияГрафикДвиженияЗапасов = Движения.ГрафикДвиженияЗапасов;
//	ДвиженияГрафикДвиженияЗапасов.Записывать = Истина;
//	ДвиженияГрафикДвиженияЗапасов.Загрузить(ТаблицаГрафикДвиженияЗапасов);
//	
//КонецПроцедуры // ОтразитьГрафикДвиженияЗапасов()

//// Выполняет движения по регистру ЗаказыНаПроизводство.
////
//Процедура ОтразитьЗаказыНаПроизводство(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаЗаказыНаПроизводство = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыНаПроизводство;
//	
//	Если Отказ 
//	 ИЛИ ТаблицаЗаказыНаПроизводство.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияЗаказыНаПроизводство = Движения.ЗаказыНаПроизводство;
//	ДвиженияЗаказыНаПроизводство.Записывать = Истина;
//	ДвиженияЗаказыНаПроизводство.Загрузить(ТаблицаЗаказыНаПроизводство);
//	
//КонецПроцедуры // ОтразитьЗаказыНаПроизводство()

//// Выполняет движения по регистру ПотребностьВЗапасах.
////
//Процедура ОтразитьПотребностьВЗапасах(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаПотребностьВЗапасах = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностьВЗапасах;
//	
//	Если Отказ 
//	 ИЛИ ТаблицаПотребностьВЗапасах.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияПотребностьВЗапасах = Движения.ПотребностьВЗапасах;
//	ДвиженияПотребностьВЗапасах.Записывать = Истина;
//	ДвиженияПотребностьВЗапасах.Загрузить(ТаблицаПотребностьВЗапасах);
//	
//КонецПроцедуры // ОтразитьПотребностьВЗапасах()

//// Выполняет движения по регистру Заказы поставщикам.
////
//Процедура ОтразитьЗаказыПоставщикам(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаЗаказыПоставщикам = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыПоставщикам;
//	
//	Если Отказ
//	 ИЛИ ТаблицаЗаказыПоставщикам.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияЗаказыПоставщикам = Движения.ЗаказыПоставщикам;
//	ДвиженияЗаказыПоставщикам.Записывать = Истина;
//	ДвиженияЗаказыПоставщикам.Загрузить(ТаблицаЗаказыПоставщикам);
//	
//КонецПроцедуры // ОтразитьЗаказыПоставщикам()

//// Выполняет движения по регистру Заказы поставщикам.
////
//Процедура ОтразитьВыработкаВнеоборотныхАктивов(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаВыработкаВнеоборотныхАктивов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыработкаВнеоборотныхАктивов;
//	
//	Если Отказ
//	 ИЛИ ТаблицаВыработкаВнеоборотныхАктивов.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияВыработкаВнеоборотныхАктивов = Движения.ВыработкаВнеоборотныхАктивов;
//	ДвиженияВыработкаВнеоборотныхАктивов.Записывать = Истина;
//	ДвиженияВыработкаВнеоборотныхАктивов.Загрузить(ТаблицаВыработкаВнеоборотныхАктивов);
//	
//КонецПроцедуры // ОтразитьВыработкаВнеоборотныхАктивов()

//// Выполняет движения регистра сведений СостоянияВнеоборотныхАктивов.
////
//Процедура ОтразитьСостоянияВнеоборотныхАктивов(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаСостоянияВнеоборотныхАктивов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСостоянияВнеоборотныхАктивов;
//	
//	Если Отказ
//	 ИЛИ ТаблицаСостоянияВнеоборотныхАктивов.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияСостоянияВнеоборотныхАктивов = Движения.СостоянияВнеоборотныхАктивов;
//	ДвиженияСостоянияВнеоборотныхАктивов.Записывать = Истина;
//	ДвиженияСостоянияВнеоборотныхАктивов.Загрузить(ТаблицаСостоянияВнеоборотныхАктивов);
//	
//КонецПроцедуры

//// Выполняет движения регистра сведений ПервоначальныеСведенияПараметрыАмортизации.
////
//Процедура ОтразитьПараметрыВнеоборотныхАктивов(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаПараметрыВнеоборотныхАктивов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПараметрыВнеоборотныхАктивов;
//	
//	Если Отказ
//	 ИЛИ ТаблицаПараметрыВнеоборотныхАктивов.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияПараметрыВнеоборотныхАктивов = Движения.ПараметрыВнеоборотныхАктивов;
//	ДвиженияПараметрыВнеоборотныхАктивов.Записывать = Истина;
//	ДвиженияПараметрыВнеоборотныхАктивов.Загрузить(ТаблицаПараметрыВнеоборотныхАктивов);
//	
//КонецПроцедуры

//// Выполняет движения регистра сведений ОшибкиЗакрытияМесяца.
////
//Процедура ОтразитьОшибкиЗакрытияМесяца(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаОшибкиЗакрытияМесяца = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОшибкиЗакрытияМесяца;
//	
//	Если Отказ
//	 ИЛИ ТаблицаОшибкиЗакрытияМесяца.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияОшибкиЗакрытияМесяца = Движения.ОшибкиЗакрытияМесяца;
//	ДвиженияОшибкиЗакрытияМесяца.Записывать = Истина;
//	ДвиженияОшибкиЗакрытияМесяца.Загрузить(ТаблицаОшибкиЗакрытияМесяца);
//	
//КонецПроцедуры

//// Выполняет движения регистра накопления АмортизацияВнеоборотныхАктивов.
////
//Процедура ОтразитьВнеоборотныеАктивы(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаВнеоборотныеАктивы = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВнеоборотныеАктивы;
//	
//	Если Отказ
//	 ИЛИ ТаблицаВнеоборотныеАктивы.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияВнеоборотныеАктивы = Движения.ВнеоборотныеАктивы;
//	ДвиженияВнеоборотныеАктивы.Записывать = Истина;
//	ДвиженияВнеоборотныеАктивы.Загрузить(ТаблицаВнеоборотныеАктивы);
//	
//КонецПроцедуры

//// Выполняет движения по регистру ЗаданияНаРаботу.
////
//Процедура ОтразитьЗаданияНаРаботу(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаЗаданияНаРаботу = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаданияНаРаботу;
//	
//	Если Отказ
//	 ИЛИ ТаблицаЗаданияНаРаботу.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияЗаданияНаРаботу = Движения.ЗаданияНаРаботу;
//	ДвиженияЗаданияНаРаботу.Записывать = Истина;
//	ДвиженияЗаданияНаРаботу.Загрузить(ТаблицаЗаданияНаРаботу);
//	
//КонецПроцедуры // ОтразитьРабочиеЗадания()

//// Выполняет движения по регистру СдельныеНаряды.
////
//Процедура ОтразитьСдельныеНаряды(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаСдельныеНаряды = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСдельныеНаряды;
//	
//	Если Отказ
//	 ИЛИ ТаблицаСдельныеНаряды.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияСдельныеНаряды = Движения.СдельныеНаряды;
//	ДвиженияСдельныеНаряды.Записывать = Истина;
//	ДвиженияСдельныеНаряды.Загрузить(ТаблицаСдельныеНаряды);
//	
//КонецПроцедуры // ОтразитьРабочиеЗадания()

//// Выполняет движения по регистру ВыпускПродукции.
////
//Процедура ОтразитьВыпускПродукции(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаВыпускПродукции = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыпускПродукции;
//	
//	Если Отказ
//	 ИЛИ ТаблицаВыпускПродукции.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияВыпускПродукции = Движения.ВыпускПродукции;
//	ДвиженияВыпускПродукции.Записывать = Истина;
//	ДвиженияВыпускПродукции.Загрузить(ТаблицаВыпускПродукции);
//	
//КонецПроцедуры // ОтразитьВыпускПродукции()

//// Выполняет движения регистра накопления АмортизацияВнеоборотныхАктивов.
////
//Процедура ОтразитьЗапасыВРазрезеГТД(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаЗапасыВРазрезеГТД = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыВРазрезеГТД;
//	
//	Если Отказ
//	 ИЛИ ТаблицаЗапасыВРазрезеГТД.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияЗапасыВРазрезеГТД = Движения.ЗапасыВРазрезеГТД;
//	ДвиженияЗапасыВРазрезеГТД.Записывать = Истина;
//	ДвиженияЗапасыВРазрезеГТД.Загрузить(ТаблицаЗапасыВРазрезеГТД);
//	
//КонецПроцедуры

//// Выполняет движения регистра бухгалтерии Управленческий.
////
//Процедура ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	Если ВРег(Метаданные.Имя) = ВРег("УправлениеНебольшойФирмойБазовая") Тогда
//		Запрос = Новый Запрос();
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.Ссылка) КАК КоличествоОрганизаций
//		|ИЗ
//		|	Справочник.Организации КАК Организации";
//		Выборка = Запрос.Выполнить().Выбрать();
//		
//		Пока Выборка.Следующий() Цикл
//			Если Выборка.КоличествоОрганизаций > 2 Тогда
//				Отказ = Истина;
//				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Ограничение базовой версии. В информационной базе могут быть введены только две организации.'"));
//				Прервать;
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//	ТаблицаУправленческий = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий;
//	
//	Если Отказ
//	 ИЛИ ТаблицаУправленческий.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияУправленческий = Движения.Управленческий;
//	ДвиженияУправленческий.Записывать = Истина;
//	
//	Для каждого СтрокаТаблицаУправленческий Из ТаблицаУправленческий Цикл
//		ДвижениеУправленческий = ДвиженияУправленческий.Добавить();
//		ЗаполнитьЗначенияСвойств(ДвижениеУправленческий, СтрокаТаблицаУправленческий);
//	КонецЦикла;
//	
//КонецПроцедуры

//// Выполняет движения регистра накопления ЗакупкиДляКУДиР.
////
//Процедура ОтразитьЗакупкиДляКУДиР(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаЗакупкиДляКУДиР = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗакупкиДляКУДиР;
//	
//	Если Отказ
//	 ИЛИ ТаблицаЗакупкиДляКУДиР.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияЗакупкиДляКУДиР = Движения.ЗакупкиДляКУДиР;
//	ДвиженияЗакупкиДляКУДиР.Записывать = Истина;
//	ДвиженияЗакупкиДляКУДиР.Загрузить(ТаблицаЗакупкиДляКУДиР);
//	
//КонецПроцедуры

//// Выполняет движения регистра сведений СуммыДокументовРегламентированныйУчет.
////
//Процедура ОтразитьСуммыДокументовРегламентированныйУчет(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаСуммыДокументовРегламентированныйУчет = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСуммыДокументовРегламентированныйУчет;
//	
//	Если Отказ
//	 ИЛИ ТаблицаСуммыДокументовРегламентированныйУчет.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияСуммыДокументовРегламентированныйУчет = Движения.СуммыДокументовРегламентированныйУчет;
//	ДвиженияСуммыДокументовРегламентированныйУчет.Записывать = Истина;
//	ДвиженияСуммыДокументовРегламентированныйУчет.Загрузить(ТаблицаСуммыДокументовРегламентированныйУчет);
//	
//КонецПроцедуры

//Процедура ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ, ИмяРегистра) Экспорт
//	
//	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений["Таблица" + ИмяРегистра];
//	
//	Если Отказ
//	 ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияПоРегистру = Движения[ИмяРегистра];
//	ДвиженияПоРегистру.Записывать = Истина;
//	ДвиженияПоРегистру.Загрузить(ТаблицаДвижений);
//	
//КонецПроцедуры

//// Выполняет движения по регистру ЭтапыПроизводства.
////
//Процедура ОтразитьЭтапыПроизводства(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаЭтапыПроизводства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЭтапыПроизводства;
//	
//	Если Отказ
//	 ИЛИ ТаблицаЭтапыПроизводства.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияЭтапыПроизводства = Движения.ЭтапыПроизводства;
//	ДвиженияЭтапыПроизводства.Записывать = Истина;
//	ДвиженияЭтапыПроизводства.Загрузить(ТаблицаЭтапыПроизводства);
//	
//КонецПроцедуры // ОтразитьЭтапыПроизводства()

//// Выполняет движения по регистру РасписаниеЗагрузкиРесурсов.
//Процедура ОтразитьРесурсыПредприятия(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаРесурсыПредприятия = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРесурсыПредприятия;
//	
//	Если Отказ
//	 ИЛИ ТаблицаРесурсыПредприятия.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияРесурсыПредприятия = Движения.РасписаниеЗагрузкиРесурсов;
//	ДвиженияРесурсыПредприятия.Записывать = Истина;
//	ДвиженияРесурсыПредприятия.Загрузить(ТаблицаРесурсыПредприятия);
//	
//КонецПроцедуры

//// Выполняет движения регистра накопления ДенежныеСредстваКПоступлению.
////
//Процедура ОтразитьДенежныеСредстваКПоступлению(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаДенежныеСредстваКПоступлению = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваКПоступлению;
//	
//	Если Отказ
//	 ИЛИ ТаблицаДенежныеСредстваКПоступлению.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияДенежныеСредстваКПоступлению = Движения.ДенежныеСредстваКПоступлению;
//	ДвиженияДенежныеСредстваКПоступлению.Записывать = Истина;
//	ДвиженияДенежныеСредстваКПоступлению.Загрузить(ТаблицаДенежныеСредстваКПоступлению);
//	
//КонецПроцедуры

//#КонецОбласти

//#Область ДисконтныеКарты

//// Выполняет движения по регистру ПродажиПоДисконтнымКартам.
////
//Процедура ОтразитьПродажиПоДисконтнойКарте(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаПродажиПоДисконтнойКарте = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажиПоДисконтнойКарте;
//	
//	Если Отказ
//	 ИЛИ ТаблицаПродажиПоДисконтнойКарте.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияПродажиПоДисконтнойКарте = Движения.ПродажиПоДисконтнымКартам;
//	ДвиженияПродажиПоДисконтнойКарте.Записывать = Истина;
//	ДвиженияПродажиПоДисконтнойКарте.Загрузить(ТаблицаПродажиПоДисконтнойКарте);
//	
//КонецПроцедуры // ОтразитьПродажи()

//# КонецОбласти

//#Область РаботаССерийнымиНомерами

//Процедура ОтразитьСерийныеНомераГарантии(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаСерийныеНомераГарантии = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСерийныеНомераГарантии;
//	
//	Если Отказ
//	 ИЛИ ТаблицаСерийныеНомераГарантии.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияСерийныеНомераГарантии = Движения.СерийныеНомераГарантии;
//	ДвиженияСерийныеНомераГарантии.Записывать = Истина;
//	ДвиженияСерийныеНомераГарантии.Загрузить(ТаблицаСерийныеНомераГарантии);
//	
//КонецПроцедуры

//Процедура ОтразитьСерийныеНомераОстатки(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаСерийныеНомераОстатки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСерийныеНомераОстатки;
//	
//	Если Отказ
//	 ИЛИ ТаблицаСерийныеНомераОстатки.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияСерийныеНомераОстатки = Движения.СерийныеНомера;
//	ДвиженияСерийныеНомераОстатки.Записывать = Истина;
//	ДвиженияСерийныеНомераОстатки.Загрузить(ТаблицаСерийныеНомераОстатки);
//	
//КонецПроцедуры // ОтразитьПродажи()

//# КонецОбласти

//#Область АкцизныеМарки

//Процедура ОтразитьОстаткиАлкогольнойПродукцииЕГАИС(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаОстаткиАлкогольнойПродукцииЕГАИС = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОстаткиАлкогольнойПродукцииЕГАИС;
//	
//	Если Отказ
//	 ИЛИ ТаблицаОстаткиАлкогольнойПродукцииЕГАИС.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияОстаткиАлкогольнойПродукцииЕГАИС = Движения.ОстаткиАлкогольнойПродукцииЕГАИС;
//	ДвиженияОстаткиАлкогольнойПродукцииЕГАИС.Записывать = Истина;
//	ДвиженияОстаткиАлкогольнойПродукцииЕГАИС.Загрузить(ТаблицаОстаткиАлкогольнойПродукцииЕГАИС);
//	
//КонецПроцедуры

//# КонецОбласти

//#Область ТоварыВРемонте

//Процедура ОтразитьТоварыВРемонте(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаЗапасыВРемонте = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыВРемонте;
//	
//	Если Отказ
//	 ИЛИ ТаблицаЗапасыВРемонте.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияТаблицаТоварыВРемонте = Движения.ЗапасыВРемонте;
//	ДвиженияТаблицаТоварыВРемонте.Записывать = Истина;
//	ДвиженияТаблицаТоварыВРемонте.Загрузить(ТаблицаЗапасыВРемонте);
//	
//КонецПроцедуры

//Процедура ОтразитьТоварыПереданныеВРемонте(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаЗапасыПереданныеВРемонте = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПереданныеВРемонте;
//	
//	Если Отказ
//	 ИЛИ ТаблицаЗапасыПереданныеВРемонте.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияТаблицаТоварыПереданныеВРемонте = Движения.ЗапасыПереданныеВРемонте;
//	ДвиженияТаблицаТоварыПереданныеВРемонте.Записывать = Истина;
//	ДвиженияТаблицаТоварыПереданныеВРемонте.Загрузить(ТаблицаЗапасыПереданныеВРемонте);
//	
//КонецПроцедуры

//# КонецОбласти

//#Область АвтоматическиеСкидки

//// Выполняет движения по регистру ПредоставленныеСкидки.
////
//Процедура ОтразитьПредоставленныеСкидки(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаПредоставленныеСкидки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПредоставленныеСкидки;
//	
//	Если Отказ
//	 ИЛИ ТаблицаПредоставленныеСкидки.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияПредоставленныеСкидки = Движения.ПредоставленныеСкидки;
//	ДвиженияПредоставленныеСкидки.Записывать = Истина;
//	ДвиженияПредоставленныеСкидки.Загрузить(ТаблицаПредоставленныеСкидки);
//	
//КонецПроцедуры // ОтразитьПродажи()

//#КонецОбласти

//#Область Биллинг

//// Проверяет, возможно ли проведение указанной позиции в рамках договора обслуживания.
////
//// Параметры:
////  Договор						 - СправочникСсылка.ДоговорыКонтрагентов - Договор обслуживания, по которому производится продажа.
////  ОбъектДоговораОбслуживания	 - СправочникСсылка.Номенклатура, ПланСчетовСсылка.Управленческий - Объект договора обслуживания, который проверяется.
////  Характеристика				 - СправочникСсылка.ХарактеристикиНоменклатуры - Характерситика проверяемой номенклатуры.
////                                 (по умолчанию = Неопределено)
//// 
//// Возвращаемое значение:
////   - Булево
////
//Функция РазрешенаПродажаНоменклатурыПоДоговоруОбслуживания(Договор, ОбъектДоговораОбслуживания, Характеристика = Неопределено) Экспорт
//	
//	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг") Тогда
//		Возврат Истина;
//	КонецЕсли;
//	
//	Если НЕ Договор.ЭтоДоговорОбслуживания Тогда
//		Возврат Истина;
//	КонецЕсли;
//	
//	ТарифныйПлан = Договор.ДоговорОбслуживанияТарифныйПлан;
//	
//	Если ТипЗнч(ОбъектДоговораОбслуживания) = Тип("СправочникСсылка.Номенклатура") Тогда
//		
//		Если Характеристика = Неопределено Тогда
//			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
//		КонецЕсли;
//		Строки = ТарифныйПлан.УчетНоменклатуры.НайтиСтроки(
//			Новый Структура("Номенклатура,Характеристика", ОбъектДоговораОбслуживания, Характеристика)
//		);
//		
//		НезапланированныеПозицииЗапрещать = ТарифныйПлан.НезапланированныеПозицииЗапрещать;
//		
//	ИначеЕсли ТипЗнч(ОбъектДоговораОбслуживания) = Тип("ПланСчетовСсылка.Управленческий") Тогда
//		
//		Строки = ТарифныйПлан.УчетЗатрат.НайтиСтроки(
//			Новый Структура("СтатьяЗатрат", ОбъектДоговораОбслуживания)
//		);
//		
//		НезапланированныеПозицииЗапрещать = ТарифныйПлан.НезапланированныеЗатратыЗапрещать;
//		
//	Иначе
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если Строки.Количество() <> 0 Тогда
//		// Позиция явно запланирована к оказанию.
//		Возврат Истина;
//	КонецЕсли;
//	
//	// Это незапланированная позиция.
//	
//	Если НезапланированныеПозицииЗапрещать Тогда
//		// Установлен запрет на проведение незапланированных позиций.
//		Возврат Ложь;
//	КонецЕсли;
//	
//	// Запрет на проведение незапланированных позиций не установлен.
//	Возврат Истина;
//	
//КонецФункции

//// Выполняет движения по регистру ВыполнениеДоговоровОбслуживания.
////
//Процедура ОтразитьВыполнениеДоговораОбслуживания(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	Если НЕ ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаВыполнениеДоговораОбслуживания") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ТаблицаВыполнениеДоговораОбслуживания = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыполнениеДоговораОбслуживания;
//	
//	Если Отказ ИЛИ ТаблицаВыполнениеДоговораОбслуживания.Количество() = 0 Тогда
//		Возврат
//	КонецЕсли;
//	
//	ДвиженияВыполнениеДоговоровОбслуживания = Движения.ВыполнениеДоговоровОбслуживания;
//	ДвиженияВыполнениеДоговоровОбслуживания.Записывать = Истина;
//	ДвиженияВыполнениеДоговоровОбслуживания.Загрузить(ТаблицаВыполнениеДоговораОбслуживания);
//	
//КонецПроцедуры

//#КонецОбласти

//#Область Ценообразование

//Процедура ЗаписатьЦеныХарактеристик(ДеталиЗаписи) Экспорт
//	
//	ТекстЗапроса = 
//	"ВЫБРАТЬ РСЦены.Характеристика, РСЦены.Цена
//	|ПОМЕСТИТЬ РСЦены
//	|	ИЗ РегистрСведений.ЦеныНоменклатуры КАК РСЦены
//	|	ГДЕ РСЦены.Период = &Период И РСЦены.ВидЦен = &ВидЦен И РСЦены.Номенклатура = &Номенклатура
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	Характеристика
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	СпрХарактеристики.Ссылка КАК Характеристика
//	|ПОМЕСТИТЬ НоменклатураХарактеристики
//	|ИЗ
//	|	Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
//	|ГДЕ СпрХарактеристики.Владелец = &Номенклатура
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	СпрХарактеристики.Ссылка КАК Характеристика
//	|ПОМЕСТИТЬ КатегорияНоменклатурыХарактеристики
//	|ИЗ
//	|	Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
//	|ГДЕ СпрХарактеристики.Владелец = &КатегорияНоменклатуры
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	НоменклатураХарактеристики.Характеристика
//	|ПОМЕСТИТЬ ВсеХарактеристики
//	|ИЗ
//	|	НоменклатураХарактеристики КАК НоменклатураХарактеристики
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	КатегорияНоменклатурыХарактеристики.Характеристика
//	|ИЗ
//	|	КатегорияНоменклатурыХарактеристики КАК КатегорияНоменклатурыХарактеристики
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	ВсеХарактеристики.Характеристика КАК Характеристика
//	|	,ЕстьNULL(РСЦены.Цена, 0) КАК Цена
//	|ПОМЕСТИТЬ ВсеХарактеристикиСЦенами
//	|ИЗ
//	|	ВсеХарактеристики КАК ВсеХарактеристики
//	|	ЛЕВОЕ СОЕДИНЕНИЕ РСЦены КАК РСЦены
//	|		ПО ВсеХарактеристики.Характеристика = РСЦены.Характеристика
//	|ИНДЕКСИРОВАТЬ ПО
//	|	Цена
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|Выбрать * Из ВсеХарактеристикиСЦенами КАК ВсеХарактеристикиСЦенами ГДЕ ВсеХарактеристикиСЦенами.Цена = 0";
//	
//	Запрос = Новый Запрос(ТекстЗапроса);
//	Запрос.УстановитьПараметр("Период",					ДеталиЗаписи.Период);
//	Запрос.УстановитьПараметр("ВидЦен", 				ДеталиЗаписи.ВидЦен);
//	Запрос.УстановитьПараметр("Номенклатура",			ДеталиЗаписи.Номенклатура);
//	Запрос.УстановитьПараметр("КатегорияНоменклатуры",	ДеталиЗаписи.Номенклатура.КатегорияНоменклатуры);
//	ВыборкаДанных = Запрос.Выполнить().Выбрать();
//	
//	НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
//	НаборЗаписей.Отбор.Период.Установить(ДеталиЗаписи.Период);
//	НаборЗаписей.Отбор.ВидЦен.Установить(ДеталиЗаписи.ВидЦен);
//	НаборЗаписей.Отбор.Номенклатура.Установить(ДеталиЗаписи.Номенклатура);
//	НаборЗаписей.Прочитать();
//	
//	Пока ВыборкаДанных.Следующий() Цикл
//		
//		НоваяЗапись = НаборЗаписей.Добавить();
//		
//		НоваяЗапись.Актуальность		= Истина;
//		НоваяЗапись.Период				= ДеталиЗаписи.Период;
//		НоваяЗапись.ВидЦен				= ДеталиЗаписи.ВидЦен;
//		НоваяЗапись.Номенклатура		= ДеталиЗаписи.Номенклатура;
//		НоваяЗапись.Характеристика		= ВыборкаДанных.Характеристика;
//		НоваяЗапись.ЕдиницаИзмерения	= ДеталиЗаписи.ЕдиницаИзмерения;
//		НоваяЗапись.Цена				= ДеталиЗаписи.Цена;
//		НоваяЗапись.Автор				= ДеталиЗаписи.Автор;
//		
//	КонецЦикла; 
//	
//	НаборЗаписей.Записать(Истина);
//	
//КонецПроцедуры

//Процедура КопироватьЦеныНоменклатурыВНовуюХарактеристику(ДеталиЗаписи) Экспорт
//	
//	ТекстЗапроса = 
//	"ВЫБРАТЬ &Период КАК Период, РСЦены.ВидЦен, РСЦены.Актуальность, РСЦены.Номенклатура, &Характеристика КАК Характеристика,
//	|	РСЦены.ЕдиницаИзмерения, РСЦены.Цена, РСЦены.Автор, Ложь КАК ВключаяХарактеристики
//	|	ИЗ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период,
//	|		Актуальность И Номенклатура = &Номенклатура И Характеристика = Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК РСЦены";
//	
//	Запрос = Новый Запрос(ТекстЗапроса);
//	Запрос.УстановитьПараметр("Период", ДеталиЗаписи.Период);
//	Запрос.УстановитьПараметр("Номенклатура", ДеталиЗаписи.Номенклатура);
//	Запрос.УстановитьПараметр("Характеристика", ДеталиЗаписи.Характеристика);
//	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
//	
//	НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
//	НаборЗаписей.Отбор.Номенклатура.Установить(ДеталиЗаписи.Номенклатура);
//	НаборЗаписей.Отбор.Характеристика.Установить(ДеталиЗаписи.Характеристика);
//	НаборЗаписей.Прочитать();
//	НаборЗаписей.Загрузить(ТаблицаДанных);
//	НаборЗаписей.Записать(Истина);
//	
//КонецПроцедуры

//// Возвращает курсы валют на дату.
////
//// Параметры:
////  Валюта       - СправочникСсылка.Валюты - Валюта (элемент справочника "Валюты")
////  ДатаКурса    - Дата - дата, на которую следует получить курс.
////
//// Возвращаемое значение: 
////  Структура, содержащая:
////   Курс        - Число - курс валюты,
////   Кратность   - Число - кратность валюты.
////
//Функция ПолучитьКурсыВалют(ВалютаНач, ВалютаКон, ДатаКурса) Экспорт
//	
//	СтруктураНач = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", ВалютаНач));
//	СтруктураКон = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", ВалютаКон));
//	
//	СтруктураКон.Курс = ?(
//		СтруктураКон.Курс = 0,
//		1,
//		СтруктураКон.Курс
//	);
//	СтруктураКон.Кратность = ?(
//		СтруктураКон.Кратность = 0,
//		1,
//		СтруктураКон.Кратность
//	);
//	СтруктураКон.Вставить("КурсНач", ?(СтруктураНач.Курс      = 0, 1, СтруктураНач.Курс));
//	СтруктураКон.Вставить("КратностьНач", ?(СтруктураНач.Кратность = 0, 1, СтруктураНач.Кратность));
//	
//	Возврат СтруктураКон;
//	
//КонецФункции // ПолучитьКурсыВалют()

//// Функция пересчитывает сумму из одной валюты в другую
////
//// Параметры:      
////	Сумма         - Число - сумма, которую следует пересчитать.
//// 	КурсНач       - Число - курс из которого надо пересчитать.
//// 	КурсКон       - Число - курс в который надо пересчитать.
//// 	КратностьНач  - Число - кратность из которого надо пересчитать 
////                  (по умолчанию = 1).
//// 	КратностьКон  - Число - кратность в который надо пересчитать 
////                  (по умолчанию = 1).
////
//// Возвращаемое значение: 
////  Число - сумма, пересчитанная в другую валюту.
////
//Функция ПересчитатьИзВалютыВВалюту(Сумма, КурсНач, КурсКон,	КратностьНач = 1, КратностьКон = 1) Экспорт
//	
//	Если (КурсНач = КурсКон) И (КратностьНач = КратностьКон) Тогда
//		Возврат Сумма;
//	КонецЕсли;
//	
//	Если КурсНач = 0 ИЛИ КурсКон = 0 ИЛИ КратностьНач = 0 ИЛИ КратностьКон = 0 Тогда
//		Сообщение = Новый СообщениеПользователю();
//		Сообщение.Текст = НСтр("ru = 'Обнаружен нулевой курс валюты. Пересчет не выполнен.'");
//		Сообщение.Сообщить();
//		Возврат Сумма;
//	КонецЕсли;
//	
//	СуммаПересчитанная = Окр((Сумма * КурсНач * КратностьКон) / (КурсКон * КратностьНач), 2);
//	
//	Возврат СуммаПересчитанная;
//	
//КонецФункции // ПересчитатьИзВалютыВВалюту()

//// Округляет число по заданному порядку.
////
//// Параметры:
////  Число        - Число, которое необходимо округлить
////  ПорядокОкругления - Перечисления.ПорядкиОкругления - порядок округления
////  ОкруглятьВБольшуюСторону - Булево - округления в большую сторону.
////
//// Возвращаемое значение:
////  Число        - результат округления.
////
//Функция ОкруглитьЦену(Число, ПравилоОкругления, ОкруглятьВБольшуюСторону) Экспорт
//	
//	Перем Результат; // Возвращаемый результат.
//	
//	// Преобразуем порядок округления числа.
//	// Если передали пустое значение порядка, то округлим до копеек. 
//	Если НЕ ЗначениеЗаполнено(ПравилоОкругления) Тогда
//		ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01; 
//	Иначе
//		ПорядокОкругления = ПравилоОкругления;
//	КонецЕсли;
//	Порядок = Число(Строка(ПорядокОкругления));
//	
//	// вычислим количество интервалов, входящих в число
//	КоличествоИнтервал	= Число / Порядок;
//	
//	// вычислим целое количество интервалов.
//	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
//	
//	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
//		
//		// Числа поделились нацело. Округлять не нужно.
//		Результат	= Число;
//	Иначе
//		Если ОкруглятьВБольшуюСторону Тогда
//			
//			// При порядке округления "0.05" 0.371 должно округлиться до 0.4
//			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
//		Иначе
//			
//			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
//			// а 0.376 до 0.4
//			Результат = Порядок * Окр(КоличествоИнтервал, 0, РежимОкругления.Окр15как20);
//		КонецЕсли; 
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции // ОкруглитьЦену()

//// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
////
//// Параметры:
////  Сумма        - Число - сумма НДС
////  СуммаВключаетНДС - Булево - признак включения НДС в сумму
////  СтавкаНДС    - СправочникСсылка.СтавкиНДС - ссылка на ставку НДС.
////
//// Возвращаемое значение:
////  Число        - пересчитанная сумма НДС.
////
//Функция ПересчитатьСуммуПриИзмененииФлаговНДС(Сумма, СуммаВключаетНДС, СтавкаНДС) Экспорт
//	
//	Ставка = СтавкаНДС.Ставка;
//	
//	Если СуммаВключаетНДС Тогда
//		
//		Сумма = (Сумма * (100 + Ставка)) / 100;
//		
//	Иначе
//		
//		Сумма = (Сумма * 100) / (100 + Ставка);
//		
//	КонецЕсли;
//	
//	Возврат Сумма;
//	
//КонецФункции // ПересчитатьСуммуПриИзмененииФлаговНДС()

//// Выполняем пересчет цены табличной части документа после изменений в форме 
//// "Цены и валюта".
////
//// Параметры:
////  СтруктураРеквизитов - Структура реквизитов, необходимых при пересчете
////  ТабличнаяЧастьДокумента - ДанныеФормыСтруктура, содержит табличную часть
////                 документа.
////
//Процедура ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента) Экспорт
//	
//	// Скидки.
//	Если СтруктураДанных.Свойство("ВидСкидкиНаценки") 
//		И ЗначениеЗаполнено(СтруктураДанных.ВидСкидкиНаценки) Тогда
//		
//		СтруктураДанных.ПроцентСкидкиНаценки = СтруктураДанных.ВидСкидкиНаценки.Процент;
//		
//	КонецЕсли;	
//	
//	// Дисконтная карта.
//	Если СтруктураДанных.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
//		И ЗначениеЗаполнено(СтруктураДанных.ПроцентСкидкиПоДисконтнойКарте) Тогда
//		
//		СтруктураДанных.ПроцентСкидкиНаценки = СтруктураДанных.ПроцентСкидкиНаценки + СтруктураДанных.ПроцентСкидкиПоДисконтнойКарте;
//		
//	КонецЕсли;
//	
//	// 1. Сформируем таблицу документа.
//	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//	
//	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
//	
//	Массив = Новый Массив;
//	
//	// Номенклатура.
//	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
//	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
//	Массив.Очистить();
//	
//	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", ОписаниеТипов);
//	ТаблицаНоменклатуры.Колонки.Добавить("НоменклатураНабора", ОписаниеТипов);
//	
//	// Характеристика.
//	Массив.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
//	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
//	Массив.Очистить();
//	
//	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", ОписаниеТипов);
//	ТаблицаНоменклатуры.Колонки.Добавить("ХарактеристикаНабора", ОписаниеТипов);
//	
//	// СтавкиНДС.
//	Массив.Добавить(Тип("СправочникСсылка.СтавкиНДС"));
//	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
//	Массив.Очистить();
//	
//	ТаблицаНоменклатуры.Колонки.Добавить("СтавкаНДС", ОписаниеТипов);	
//	
//	// ЕдиницаИзмерения.
//	Массив.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));
//	Массив.Добавить(Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"));
//	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
//	Массив.Очистить();
//	
//	ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения", ОписаниеТипов);	
//	
//	// Коэффициент.
//	Массив.Добавить(Тип("Число"));
//	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
//	Массив.Очистить();
//	
//	ТаблицаНоменклатуры.Колонки.Добавить("Коэффициент", ОписаниеТипов);
//	ТаблицаНоменклатуры.Колонки.Добавить("ДоляСтоимости", ОписаниеТипов);
//	ТаблицаНоменклатуры.Колонки.Добавить("Количество", ОписаниеТипов);
//	ТаблицаНоменклатуры.Колонки.Добавить("КоличествоНаборов", ОписаниеТипов);
//	ТаблицаНоменклатуры.Колонки.Добавить("НомерВариантаКП", ОписаниеТипов);
//	
//	// Подарочный сертификат
//	Массив.Добавить(Тип("Булево"));
//	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
//	Массив.Очистить();
//	
//	ТаблицаНоменклатуры.Колонки.Добавить("ЭтоСертификат", ОписаниеТипов);
//	
//	// Номинал сертификата
//	Массив.Добавить(Тип("Число"));
//	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
//	Массив.Очистить();
//	
//	ТаблицаНоменклатуры.Колонки.Добавить("Номинал", ОписаниеТипов);
//	
//	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
//		
//		// Наборы
//		Если ТипЗнч(СтрокаТЧ) = Тип("Структура")
//		   И СтрокаТЧ.Свойство("НоменклатураНабора") 
//		   И ЗначениеЗаполнено(СтрокаТЧ.НоменклатураНабора) 
//		   И СтрокаТЧ.ДоляСтоимости=0 Тогда
//			// Строки корректировки стоимости наборов обрабатываются позже
//			Продолжить;
//		КонецЕсли;
//		// Конец Наборы
//		
//		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
//		НоваяСтрока.Номенклатура	 = СтрокаТЧ.Номенклатура;
//		НоваяСтрока.Характеристика	 = СтрокаТЧ.Характеристика;
//		НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
//		Если ТипЗнч(СтрокаТЧ) = Тип("Структура")
//		   И СтрокаТЧ.Свойство("СтавкаНДС") Тогда
//			НоваяСтрока.СтавкаНДС		 = СтрокаТЧ.СтавкаНДС;
//		КонецЕсли;
//		Если ТипЗнч(СтрокаТЧ) = Тип("Структура")
//		   И СтрокаТЧ.Свойство("НоменклатураНабора") Тогда
//			НоваяСтрока.НоменклатураНабора 		= СтрокаТЧ.НоменклатураНабора;
//			НоваяСтрока.ХарактеристикаНабора 	= СтрокаТЧ.ХарактеристикаНабора;
//			НоваяСтрока.ДоляСтоимости 			= СтрокаТЧ.ДоляСтоимости;
//			НоваяСтрока.Количество 				= СтрокаТЧ.Количество;
//			Если СтрокаТЧ.Свойство("КоличествоНаборов") Тогда
//				НоваяСтрока.КоличествоНаборов = СтрокаТЧ.КоличествоНаборов;
//			Иначе
//				НоваяСтрока.КоличествоНаборов = 1;
//			КонецЕсли; 
//			Если СтрокаТЧ.Свойство("НомерВариантаКП") Тогда
//				НоваяСтрока.НомерВариантаКП = СтрокаТЧ.НомерВариантаКП;
//			Иначе
//				НоваяСтрока.НомерВариантаКП = 0;
//			КонецЕсли; 
//		КонецЕсли;
//		
//		Если ТипЗнч(СтрокаТЧ.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
//			НоваяСтрока.Коэффициент = СтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
//		Иначе
//			НоваяСтрока.Коэффициент = 1;
//		КонецЕсли;
//		
//		// Подарочные сертификаты
//		НоваяСтрока.ЭтоСертификат = (СтрокаТЧ.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
//		НоваяСтрока.Номинал = СтрокаТЧ.Номенклатура.Номинал;
//		
//	КонецЦикла;
//	
//	// Наборы
//	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
//		Если НЕ ТипЗнч(СтрокаТЧ) = Тип("Структура") 
//			ИЛИ НЕ СтрокаТЧ.Свойство("НоменклатураНабора") 
//			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.НоменклатураНабора) 
//			ИЛИ СтрокаТЧ.ДоляСтоимости>0 Тогда
//			Продолжить;
//		КонецЕсли; 
//		СтруктураПоиска = Новый Структура("НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, ЕдиницаИзмерения");
//		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
//		Если СтрокаТЧ.Свойство("НомерВариантаКП") Тогда
//			СтруктураПоиска.Вставить("НомерВариантаКП", СтрокаТЧ.НомерВариантаКП);
//		КонецЕсли;
//		СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
//		Если СтрокиНоменклатуры.Количество()>0 Тогда
//			СтрокаНоменклатуры = СтрокиНоменклатуры[0];
//			СтрокаНоменклатуры.Количество = СтрокаНоменклатуры.Количество+СтрокаТЧ.Количество;
//		КонецЕсли; 
//	КонецЦикла;                             
//	ИспользоватьНаборы = Ложь;
//	Если ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
//		Для каждого СтрокаТабличнойЧасти Из ТаблицаНоменклатуры Цикл
//			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
//				ИспользоватьНаборы = Истина;
//				Прервать;
//			КонецЕсли; 
//		КонецЦикла; 
//	КонецЕсли;
//	// Конец Наборы
//	
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
//	
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
//	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
//	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.НоменклатураНабора КАК Справочник.Номенклатура) КАК НоменклатураНабора,
//	|	ТаблицаНоменклатуры.ХарактеристикаНабора КАК ХарактеристикаНабора,
//	|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
//	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
//	|	ТаблицаНоменклатуры.Коэффициент КАК Коэффициент,
//	|	ТаблицаНоменклатуры.ДоляСтоимости КАК ДоляСтоимости,
//	|	ТаблицаНоменклатуры.Количество КАК Количество,
//	|	ТаблицаНоменклатуры.КоличествоНаборов КАК КоличествоНаборов,
//	|	ТаблицаНоменклатуры.НомерВариантаКП КАК НомерВариантаКП,
//	|	ТаблицаНоменклатуры.ЭтоСертификат КАК ЭтоСертификат,
//	|	ТаблицаНоменклатуры.Номинал КАК Номинал
//	|ПОМЕСТИТЬ ВременнаяТаблицаНоменклатуры
//	|ИЗ
//	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВременнаяТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
//	|	ВременнаяТаблицаНоменклатуры.Характеристика КАК Характеристика
//	|ПОМЕСТИТЬ НоменклатураХарактеристикаТЧ
//	|ИЗ
//	|	ВременнаяТаблицаНоменклатуры КАК ВременнаяТаблицаНоменклатуры
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВременнаяТаблицаНоменклатуры.Номенклатура,
//	|	ВременнаяТаблицаНоменклатуры.Характеристика
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВременнаяТаблицаНоменклатуры.НоменклатураНабора КАК НоменклатураНабора,
//	|	ВременнаяТаблицаНоменклатуры.ХарактеристикаНабора КАК ХарактеристикаНабора
//	|ПОМЕСТИТЬ НоменклатураХарактеристикаНабораТЧ
//	|ИЗ
//	|	ВременнаяТаблицаНоменклатуры КАК ВременнаяТаблицаНоменклатуры
//	|ГДЕ
//	|	ВременнаяТаблицаНоменклатуры.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВременнаяТаблицаНоменклатуры.НоменклатураНабора,
//	|	ВременнаяТаблицаНоменклатуры.ХарактеристикаНабора
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВременнаяТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
//	|	ВременнаяТаблицаНоменклатуры.Характеристика КАК Характеристика,
//	|	ВременнаяТаблицаНоменклатуры.НоменклатураНабора КАК НоменклатураНабора,
//	|	ВременнаяТаблицаНоменклатуры.ХарактеристикаНабора КАК ХарактеристикаНабора,
//	|	ВременнаяТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
//	|	ВременнаяТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
//	|	ВременнаяТаблицаНоменклатуры.Коэффициент КАК Коэффициент,
//	|	ВременнаяТаблицаНоменклатуры.ДоляСтоимости КАК ДоляСтоимости,
//	|	ВременнаяТаблицаНоменклатуры.Количество КАК Количество,
//	|	ВременнаяТаблицаНоменклатуры.КоличествоНаборов КАК КоличествоНаборов,
//	|	ВременнаяТаблицаНоменклатуры.НомерВариантаКП КАК НомерВариантаКП,
//	|	ВременнаяТаблицаНоменклатуры.НоменклатураНабора.СпособРасчетаЦеныНабора КАК СпособРасчетаЦеныНабора,
//	|	ВременнаяТаблицаНоменклатуры.ЭтоСертификат КАК ЭтоСертификат,
//	|	ВременнаяТаблицаНоменклатуры.Номинал КАК Номинал
//	|ПОМЕСТИТЬ ТаблицаНоменклатуры
//	|ИЗ
//	|	ВременнаяТаблицаНоменклатуры КАК ВременнаяТаблицаНоменклатуры";
//	
//	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
//	Запрос.Выполнить();
//	
//	// 2. Заполним цены.
//	ВидЦенПараметр = СтруктураДанных.ВидЦен;
//	ВалютаЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидЦенПараметр, "ВалютаЦены");	
//	
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
//	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
//	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
//	|	ВЫБОР
//	|		КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
//	|			ТОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
//	|		ИНАЧЕ 1
//	|	КОНЕЦ КАК Коэффициент
//	|ПОМЕСТИТЬ ЦеныНоменклатуры
//	|ИЗ
//	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
//	|			&ДатаОбработки,
//	|			ВидЦен = &ВидЦен
//	|				И (Номенклатура, Характеристика) В
//	|					(ВЫБРАТЬ
//	|						Товары.Номенклатура,
//	|						Товары.Характеристика
//	|					ИЗ
//	|						НоменклатураХарактеристикаТЧ КАК Товары)) КАК ЦеныНоменклатурыСрезПоследних
//	|ГДЕ
//	|	ЦеныНоменклатурыСрезПоследних.Актуальность
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	Номенклатура,
//	|	Характеристика
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
//	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
//	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
//	|	ВЫБОР
//	|		КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
//	|			ТОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
//	|		ИНАЧЕ 1
//	|	КОНЕЦ КАК Коэффициент
//	|ПОМЕСТИТЬ ЦеныНаборов
//	|ИЗ
//	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
//	|			&ДатаОбработки,
//	|			&ИспользоватьНаборы
//	|				И ВидЦен = &ВидЦен
//	|				И (Номенклатура, Характеристика) В
//	|					(ВЫБРАТЬ
//	|						Наборы.НоменклатураНабора,
//	|						Наборы.ХарактеристикаНабора
//	|					ИЗ
//	|						НоменклатураХарактеристикаНабораТЧ КАК Наборы)) КАК ЦеныНоменклатурыСрезПоследних
//	|ГДЕ
//	|	ЦеныНоменклатурыСрезПоследних.Актуальность
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	Номенклатура,
//	|	Характеристика
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТаблицаНоменклатуры.НоменклатураНабора КАК НоменклатураНабора,
//	|	ТаблицаНоменклатуры.ХарактеристикаНабора КАК ХарактеристикаНабора,
//	|	ТаблицаНоменклатуры.НомерВариантаКП КАК НомерВариантаКП,
//	|	СУММА(ВЫБОР
//	|			КОГДА ТаблицаНоменклатуры.Количество = 0
//	|				ТОГДА 0
//	|			ИНАЧЕ ТаблицаНоменклатуры.ДоляСтоимости
//	|		КОНЕЦ) КАК ДоляСтоимости,
//	|	СУММА(ТаблицаНоменклатуры.Количество) КАК Количество,
//	|	МАКСИМУМ(ТаблицаНоменклатуры.КоличествоНаборов * ЕСТЬNULL(ЦеныНаборов.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) / ЕСТЬNULL(ЦеныНаборов.Коэффициент, 1), 0)) КАК ЦенаНабора,
//	|	СУММА(ЕСТЬNULL(ЦеныНоменклатуры.Цена * ТаблицаНоменклатуры.Количество * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) * ЕСТЬNULL(ТаблицаНоменклатуры.Коэффициент, 1) / ЕСТЬNULL(ЦеныНоменклатуры.Коэффициент, 1), 0)) КАК Цена
//	|ПОМЕСТИТЬ БазаВычисления
//	|ИЗ
//	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
//	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
//	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатуры.Номенклатура
//	|			И ТаблицаНоменклатуры.Характеристика = ЦеныНоменклатуры.Характеристика
//	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНаборов КАК ЦеныНаборов
//	|		ПО ТаблицаНоменклатуры.НоменклатураНабора = ЦеныНаборов.Номенклатура
//	|			И ТаблицаНоменклатуры.ХарактеристикаНабора = ЦеныНаборов.Характеристика,
//	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаЦены) КАК КурсВалютыВидЦен,
//	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
//	|ГДЕ
//	|	&ИспользоватьНаборы
//	|	И ТаблицаНоменклатуры.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
//	|	И ТаблицаНоменклатуры.НоменклатураНабора.СпособРасчетаЦеныНабора <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ТаблицаНоменклатуры.НоменклатураНабора,
//	|	ТаблицаНоменклатуры.ХарактеристикаНабора,
//	|	ТаблицаНоменклатуры.НомерВариантаКП
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	НоменклатураНабора,
//	|	ХарактеристикаНабора,
//	|	НомерВариантаКП
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
//	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
//	|	ТаблицаНоменклатуры.НомерВариантаКП КАК НомерВариантаКП,
//	|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
//	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
//	|	ВЫБОР
//	|		КОГДА ТаблицаНоменклатуры.ЭтоСертификат
//	|			ТОГДА ТаблицаНоменклатуры.Номинал * КурсВалютыДокумента.Кратность / КурсВалютыДокумента.Курс
//	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) * ЕСТЬNULL(ТаблицаНоменклатуры.Коэффициент, 1) / ЕСТЬNULL(ЦеныНоменклатуры.Коэффициент, 1), 0)
//	|	КОНЕЦ КАК Цена,
//	|	ТаблицаНоменклатуры.НоменклатураНабора КАК НоменклатураНабора,
//	|	ТаблицаНоменклатуры.ХарактеристикаНабора КАК ХарактеристикаНабора,
//	|	ТаблицаНоменклатуры.СпособРасчетаЦеныНабора КАК СпособРасчетаЦеныНабора,
//	|	ТаблицаНоменклатуры.Количество КАК Количество
//	|ПОМЕСТИТЬ ТаблицаЦен
//	|ИЗ
//	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
//	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
//	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатуры.Номенклатура
//	|			И ТаблицаНоменклатуры.Характеристика = ЦеныНоменклатуры.Характеристика,
//	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаЦены) КАК КурсВалютыВидЦен,
//	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
//	|ГДЕ
//	|	(ТаблицаНоменклатуры.НоменклатураНабора = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
//	|			ИЛИ ТаблицаНоменклатуры.СпособРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих))
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ТаблицаНоменклатуры.Номенклатура,
//	|	ТаблицаНоменклатуры.Характеристика,
//	|	ТаблицаНоменклатуры.НомерВариантаКП,
//	|	ТаблицаНоменклатуры.ЕдиницаИзмерения,
//	|	ТаблицаНоменклатуры.СтавкаНДС,
//	|	ВЫБОР
//	|		КОГДА ТаблицаНоменклатуры.Количество = 0
//	|			ТОГДА 0
//	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) * ЕСТЬNULL(ТаблицаНоменклатуры.Коэффициент, 1) / ЕСТЬNULL(ЦеныНоменклатуры.Коэффициент, 1) * БазаВычисления.ЦенаНабора / БазаВычисления.Цена, 0) КАК ЧИСЛО(15, 2))
//	|	КОНЕЦ,
//	|	ТаблицаНоменклатуры.НоменклатураНабора,
//	|	ТаблицаНоменклатуры.ХарактеристикаНабора,
//	|	ТаблицаНоменклатуры.СпособРасчетаЦеныНабора,
//	|	ТаблицаНоменклатуры.Количество
//	|ИЗ
//	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
//	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
//	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатуры.Номенклатура
//	|			И ТаблицаНоменклатуры.Характеристика = ЦеныНоменклатуры.Характеристика
//	|		ЛЕВОЕ СОЕДИНЕНИЕ БазаВычисления КАК БазаВычисления
//	|		ПО ТаблицаНоменклатуры.НоменклатураНабора = БазаВычисления.НоменклатураНабора
//	|			И ТаблицаНоменклатуры.ХарактеристикаНабора = БазаВычисления.ХарактеристикаНабора
//	|			И ТаблицаНоменклатуры.НомерВариантаКП = БазаВычисления.НомерВариантаКП,
//	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаЦены) КАК КурсВалютыВидЦен,
//	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
//	|ГДЕ
//	|	&ИспользоватьНаборы
//	|	И ТаблицаНоменклатуры.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
//	|	И ТаблицаНоменклатуры.СпособРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.НазначаетсяИРаспределяетсяПоЦене)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ТаблицаНоменклатуры.Номенклатура,
//	|	ТаблицаНоменклатуры.Характеристика,
//	|	ТаблицаНоменклатуры.НомерВариантаКП,
//	|	ТаблицаНоменклатуры.ЕдиницаИзмерения,
//	|	ТаблицаНоменклатуры.СтавкаНДС,
//	|	ВЫБОР
//	|		КОГДА ТаблицаНоменклатуры.Количество = 0
//	|			ТОГДА 0
//	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаНоменклатуры.ДоляСтоимости / БазаВычисления.ДоляСтоимости * БазаВычисления.ЦенаНабора, 0) / ТаблицаНоменклатуры.Количество КАК ЧИСЛО(15, 2))
//	|	КОНЕЦ,
//	|	ТаблицаНоменклатуры.НоменклатураНабора,
//	|	ТаблицаНоменклатуры.ХарактеристикаНабора,
//	|	ТаблицаНоменклатуры.СпособРасчетаЦеныНабора,
//	|	ТаблицаНоменклатуры.Количество
//	|ИЗ
//	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
//	|		ЛЕВОЕ СОЕДИНЕНИЕ БазаВычисления КАК БазаВычисления
//	|		ПО ТаблицаНоменклатуры.НоменклатураНабора = БазаВычисления.НоменклатураНабора
//	|			И ТаблицаНоменклатуры.ХарактеристикаНабора = БазаВычисления.ХарактеристикаНабора
//	|			И ТаблицаНоменклатуры.НомерВариантаКП = БазаВычисления.НомерВариантаКП
//	|ГДЕ
//	|	&ИспользоватьНаборы
//	|	И ТаблицаНоменклатуры.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
//	|	И ТаблицаНоменклатуры.СпособРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.НазначаетсяИРаспределяетсяПоДолеСтоимости)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВложенныйЗапрос.НоменклатураНабора КАК НоменклатураНабора,
//	|	ВложенныйЗапрос.ХарактеристикаНабора КАК ХарактеристикаНабора,
//	|	ВложенныйЗапрос.НомерВариантаКП КАК НомерВариантаКП,
//	|	СУММА(ВложенныйЗапрос.Цена) КАК Цена
//	|ИЗ
//	|	(ВЫБРАТЬ
//	|		БазаВычисления.НоменклатураНабора КАК НоменклатураНабора,
//	|		БазаВычисления.ХарактеристикаНабора КАК ХарактеристикаНабора,
//	|		БазаВычисления.НомерВариантаКП КАК НомерВариантаКП,
//	|		БазаВычисления.ЦенаНабора КАК Цена
//	|	ИЗ
//	|		БазаВычисления КАК БазаВычисления
//	|	
//	|	ОБЪЕДИНИТЬ ВСЕ
//	|	
//	|	ВЫБРАТЬ
//	|		ТаблицаЦен.НоменклатураНабора,
//	|		ТаблицаЦен.ХарактеристикаНабора,
//	|		ТаблицаЦен.НомерВариантаКП,
//	|		-ТаблицаЦен.Цена * ТаблицаЦен.Количество
//	|	ИЗ
//	|		ТаблицаЦен КАК ТаблицаЦен
//	|	ГДЕ
//	|		ТаблицаЦен.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
//	|		И ТаблицаЦен.СпособРасчетаЦеныНабора <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих)) КАК ВложенныйЗапрос
//	|ГДЕ
//	|	&ИспользоватьНаборы
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВложенныйЗапрос.НоменклатураНабора,
//	|	ВложенныйЗапрос.ХарактеристикаНабора,
//	|	ВложенныйЗапрос.НомерВариантаКП
//	|
//	|ИМЕЮЩИЕ
//	|	СУММА(ВложенныйЗапрос.Цена) <> 0
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТаблицаЦен.Номенклатура КАК Номенклатура,
//	|	ТаблицаЦен.Характеристика КАК Характеристика,
//	|	ТаблицаЦен.НомерВариантаКП КАК НомерВариантаКП,
//	|	ТаблицаЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
//	|	ТаблицаЦен.СтавкаНДС КАК СтавкаНДС,
//	|	&ВалютаЦены КАК Валюта,
//	|	ВЫРАЗИТЬ(&ВидЦен КАК Справочник.ВидыЦен).ЦенаВключаетНДС КАК ЦенаВключаетНДС,
//	|	ВЫРАЗИТЬ(&ВидЦен КАК Справочник.ВидыЦен).ПорядокОкругления КАК ПорядокОкругления,
//	|	ВЫРАЗИТЬ(&ВидЦен КАК Справочник.ВидыЦен).ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
//	|	ТаблицаЦен.Цена КАК Цена,
//	|	ТаблицаЦен.Количество КАК Количество,
//	|	ТаблицаЦен.НоменклатураНабора КАК НоменклатураНабора,
//	|	ТаблицаЦен.ХарактеристикаНабора КАК ХарактеристикаНабора
//	|ИЗ
//	|	ТаблицаЦен КАК ТаблицаЦен";
//		
//	Запрос.УстановитьПараметр("ДатаОбработки",	    СтруктураДанных.Дата);
//	Запрос.УстановитьПараметр("ВидЦен",			    ВидЦенПараметр);
//	Запрос.УстановитьПараметр("ВалютаЦены",		    ВалютаЦены);
//	Запрос.УстановитьПараметр("ВалютаДокумента",    СтруктураДанных.ВалютаДокумента);
//	Запрос.УстановитьПараметр("ИспользоватьНаборы", ИспользоватьНаборы);
//	
//	РезультатЗапроса = Запрос.ВыполнитьПакет();
//	ТаблицаЦен = РезультатЗапроса[5].Выгрузить();
//	ТаблицаОкруглений = РезультатЗапроса[4].Выгрузить();
//	
//	СтруктураДанных.Вставить("ОкругленияНаборов", Новый Массив);
//	Для каждого СтрокаОкругления Из ТаблицаОкруглений Цикл
//		ОписаниеОкругления = Новый Структура;
//		ОписаниеОкругления.Вставить("НоменклатураНабора", СтрокаОкругления.НоменклатураНабора);
//		ОписаниеОкругления.Вставить("ХарактеристикаНабора", СтрокаОкругления.ХарактеристикаНабора);
//		Если СтрокаОкругления.НомерВариантаКП>0 Тогда
//			ОписаниеОкругления.Вставить("НомерВариантаКП", СтрокаОкругления.НомерВариантаКП);
//		КонецЕсли; 
//		ОписаниеОкругления.Вставить("Округление", СтрокаОкругления.Цена);
//		СтруктураДанных.ОкругленияНаборов.Добавить(ОписаниеОкругления);
//	КонецЦикла; 
//	
//	Для каждого СтрокаТабЧасти Из ТабличнаяЧастьДокумента Цикл
//		
//		СтруктураПоиска = Новый Структура;
//		СтруктураПоиска.Вставить("Номенклатура",	 СтрокаТабЧасти.Номенклатура);
//		СтруктураПоиска.Вставить("Характеристика",	 СтрокаТабЧасти.Характеристика);
//		СтруктураПоиска.Вставить("ЕдиницаИзмерения", СтрокаТабЧасти.ЕдиницаИзмерения);
//		Если ТипЗнч(СтрокаТабЧасти) = Тип("Структура")
//			И СтрокаТабЧасти.Свойство("СтавкаНДС") Тогда
//			СтруктураПоиска.Вставить("СтавкаНДС", СтрокаТабЧасти.СтавкаНДС);
//		КонецЕсли;
//		Если ТипЗнч(СтрокаТабЧасти) = Тип("Структура")
//			И СтрокаТабЧасти.Свойство("НоменклатураНабора") Тогда
//			СтруктураПоиска.Вставить("НоменклатураНабора", СтрокаТабЧасти.НоменклатураНабора);
//		КонецЕсли;
//		Если ТипЗнч(СтрокаТабЧасти) = Тип("Структура")
//			И СтрокаТабЧасти.Свойство("ХарактеристикаНабора") Тогда
//			СтруктураПоиска.Вставить("ХарактеристикаНабора", СтрокаТабЧасти.ХарактеристикаНабора);
//		КонецЕсли;
//		Если ТипЗнч(СтрокаТабЧасти) = Тип("Структура")
//			И СтрокаТабЧасти.Свойство("НомерВариантаКП") Тогда
//			СтруктураПоиска.Вставить("НомерВариантаКП", СтрокаТабЧасти.НомерВариантаКП);
//		КонецЕсли;
//		
//		РезультатПоиска = ТаблицаЦен.НайтиСтроки(СтруктураПоиска);
//		Если РезультатПоиска.Количество() > 0 Тогда
//			
//			Цена = РезультатПоиска[0].Цена;
//			Если Цена = 0 Тогда
//				СтрокаТабЧасти.Цена = Цена;
//			Иначе
//				
//				// Динамически рассчитываем цену
//				ПорядокОкругления = РезультатПоиска[0].ПорядокОкругления;
//				ОкруглятьВБольшуюСторону = РезультатПоиска[0].ОкруглятьВБольшуюСторону;
//				
//				Если СтруктураДанных.Свойство("СуммаВключаетНДС")
//					И ((СтруктураДанных.СуммаВключаетНДС И НЕ РезультатПоиска[0].ЦенаВключаетНДС)
//						ИЛИ (НЕ СтруктураДанных.СуммаВключаетНДС И РезультатПоиска[0].ЦенаВключаетНДС)) Тогда
//					
//					Цена = ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанных.СуммаВключаетНДС, СтрокаТабЧасти.СтавкаНДС);
//					
//				КонецЕсли;
//				
//				Если ТипЗнч(СтрокаТабЧасти)<>Тип("Структура")
//		   			ИЛИ НЕ СтрокаТабЧасти.Свойство("НоменклатураНабора")
//					ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабЧасти.НоменклатураНабора) Тогда
//				
//					СтрокаТабЧасти.Цена = ОкруглитьЦену(Цена, ПорядокОкругления, ОкруглятьВБольшуюСторону);
//					
//				Иначе
//					
//					// Для наборов округление не используется
//					СтрокаТабЧасти.Цена = Цена;
//					
//				КонецЕсли;
//				
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	МенеджерВременныхТаблиц.Закрыть();
//	
//КонецПроцедуры // ПолучитьЦеныТабличнойЧастиПоВидуЦен()

//// Выполняем пересчет цены табличной части документа после изменений в форме 
//// "Цены и валюта".
////
//// Параметры:
////  СтруктураРеквизитов - Структура реквизитов, необходимых при пересчете
////  ТабличнаяЧастьДокумента - ДанныеФормыСтруктура, содержит табличную часть
////                 документа.
////
//Процедура ПолучитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(СтруктураДанных, ТабличнаяЧастьДокумента) Экспорт
//	
//	// 1. Сформируем таблицу документа.
//	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//	
//	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
//	
//	Массив = Новый Массив;
//	
//	// Номенклатура.
//	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
//	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
//	Массив.Очистить();
//	
//	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", ОписаниеТипов);
//	
//	// Характеристика.
//	Массив.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
//	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
//	Массив.Очистить();
//	
//	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", ОписаниеТипов);
//	
//	// СтавкиНДС.
//	Массив.Добавить(Тип("СправочникСсылка.СтавкиНДС"));
//	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
//	Массив.Очистить();
//	
//	ТаблицаНоменклатуры.Колонки.Добавить("СтавкаНДС", ОписаниеТипов);	
//	
//	// ЕдиницаИзмерения.
//	Массив.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));
//	Массив.Добавить(Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"));
//	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
//	Массив.Очистить();
//	
//	ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения", ОписаниеТипов);	
//	
//	// Коэффициент.
//	Массив.Добавить(Тип("Число"));
//	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
//	Массив.Очистить();
//	
//	ТаблицаНоменклатуры.Колонки.Добавить("Коэффициент", ОписаниеТипов);
//	
//	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
//		
//		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
//		НоваяСтрока.Номенклатура	 = СтрокаТЧ.Номенклатура;
//		НоваяСтрока.Характеристика	 = СтрокаТЧ.Характеристика;
//		НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
//		НоваяСтрока.СтавкаНДС		 = СтрокаТЧ.СтавкаНДС;
//		
//		Если ТипЗнч(СтрокаТЧ.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
//			НоваяСтрока.Коэффициент = 1;
//		Иначе
//			НоваяСтрока.Коэффициент = СтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
//	
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ТаблицаНоменклатуры.Номенклатура,
//	|	ТаблицаНоменклатуры.Характеристика,
//	|	ТаблицаНоменклатуры.ЕдиницаИзмерения,
//	|	ТаблицаНоменклатуры.СтавкаНДС,
//	|	ТаблицаНоменклатуры.Коэффициент
//	|ПОМЕСТИТЬ ВременнаяТаблицаНоменклатуры
//	|ИЗ
//	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры";
//	
//	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
//	Запрос.Выполнить();
//	
//	// 2. Заполним цены.
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
//	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
//	|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
//	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
//	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены КАК ЦеныНоменклатурыВалюта,
//	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
//	|	ЕСТЬNULL(ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) * ЕСТЬNULL(ТаблицаНоменклатуры.Коэффициент, 1) / ЕСТЬNULL(ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1), 0) КАК Цена
//	|ИЗ
//	|	ВременнаяТаблицаНоменклатуры КАК ТаблицаНоменклатуры
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&ДатаОбработки, ВидЦенКонтрагента = &ВидЦенКонтрагента) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
//	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура
//	|			И ТаблицаНоменклатуры.Характеристика = ЦеныНоменклатурыКонтрагентовСрезПоследних.Характеристика
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыВидЦен
//	|		ПО (ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены = КурсВалютыВидЦен.Валюта),
//	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
//	|ГДЕ
//	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Актуальность";
//		
//	Запрос.УстановитьПараметр("ДатаОбработки", 		СтруктураДанных.Дата);
//	Запрос.УстановитьПараметр("ВидЦенКонтрагента",	СтруктураДанных.ВидЦенКонтрагента);
//	Запрос.УстановитьПараметр("ВалютаДокумента", 	СтруктураДанных.ВалютаДокумента);
//	
//	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
//	Для каждого СтрокаТабЧасти Из ТабличнаяЧастьДокумента Цикл
//		
//		СтруктураПоиска = Новый Структура;
//		СтруктураПоиска.Вставить("Номенклатура",	 СтрокаТабЧасти.Номенклатура);
//		СтруктураПоиска.Вставить("Характеристика",	 СтрокаТабЧасти.Характеристика);
//		СтруктураПоиска.Вставить("ЕдиницаИзмерения", СтрокаТабЧасти.ЕдиницаИзмерения);
//		СтруктураПоиска.Вставить("СтавкаНДС",		 СтрокаТабЧасти.СтавкаНДС);
//		
//		РезультатПоиска = ТаблицаЦен.НайтиСтроки(СтруктураПоиска);
//		Если РезультатПоиска.Количество() > 0 Тогда
//			
//			Цена = РезультатПоиска[0].Цена;
//			Если Цена = 0 Тогда
//				СтрокаТабЧасти.Цена = Цена;
//			Иначе
//				
//				// Учитываем: сумма включает НДС.
//				Если (СтруктураДанных.СуммаВключаетНДС И Не РезультатПоиска[0].ЦенаВключаетНДС) 
//					ИЛИ (Не СтруктураДанных.СуммаВключаетНДС И РезультатПоиска[0].ЦенаВключаетНДС) Тогда
//					Цена = ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанных.СуммаВключаетНДС, СтрокаТабЧасти.СтавкаНДС);
//				КонецЕсли;
//				
//				СтрокаТабЧасти.Цена = Цена;
//				
//			КонецЕсли;
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	МенеджерВременныхТаблиц.Закрыть();
//	
//КонецПроцедуры // ПолучитьЦеныТабличнойЧастиПоВидуЦенКонтрагента()

//// Выполняет пересчет документа после изменений в форме "Цены и валюта".
////
//// Возвращаемое значение:
////  Число        - Полученная цена номенклатуры по прайсу.
////
//Функция ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанных) Экспорт
//	
//	ВидЦенПараметр = СтруктураДанных.ВидЦен;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены КАК ЦеныНоменклатурыВалюта,
//	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
//	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ПорядокОкругления КАК ПорядокОкругления,
//	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
//	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) * ЕСТЬNULL(&Коэффициент, 1) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1), 0) КАК Цена
//	|ИЗ
//	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
//	|			&ДатаОбработки,
//	|			Актуальность
//	|				И Номенклатура = &Номенклатура
//	|				И Характеристика = &Характеристика
//	|				И ВидЦен = &ВидЦен
//	|				И НЕ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)) КАК ЦеныНоменклатурыСрезПоследних
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыВидЦен
//	|		ПО ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены = КурсВалютыВидЦен.Валюта,
//	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	&ВалютаДокумента,
//	|	ИСТИНА,
//	|	ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр0_01),
//	|	ЛОЖЬ,
//	|	Номенклатура.Номинал
//	|ИЗ
//	|	Справочник.Номенклатура КАК Номенклатура
//	|ГДЕ
//	|	Номенклатура.Ссылка = &Номенклатура
//	|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)";
//	
//	Запрос.УстановитьПараметр("ДатаОбработки",	 СтруктураДанных.ДатаОбработки);
//	Запрос.УстановитьПараметр("Номенклатура",	 СтруктураДанных.Номенклатура);
//	Запрос.УстановитьПараметр("Характеристика", ?(СтруктураДанных.Характеристика = Неопределено
//												, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(),СтруктураДанных.Характеристика));
//	Запрос.УстановитьПараметр("Коэффициент",	 СтруктураДанных.Коэффициент);
//	Запрос.УстановитьПараметр("ВалютаДокумента", СтруктураДанных.ВалютаДокумента);
//	Запрос.УстановитьПараметр("ВидЦен",			 ВидЦенПараметр);
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Цена = 0;
//	Пока Выборка.Следующий() Цикл
//		
//		Цена					= Выборка.Цена;
//		ПорядокОкругления		= Выборка.ПорядокОкругления;
//		ОкруглятьВБольшуюСторону= Выборка.ОкруглятьВБольшуюСторону;
//		
//		Если СтруктураДанных.Свойство("СуммаВключаетНДС")
//			И ((СтруктураДанных.СуммаВключаетНДС И НЕ Выборка.ЦенаВключаетНДС)
//				ИЛИ (НЕ СтруктураДанных.СуммаВключаетНДС И Выборка.ЦенаВключаетНДС)) Тогда
//				
//				Цена = ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанных.СуммаВключаетНДС, СтруктураДанных.СтавкаНДС);
//				
//		КонецЕсли;
//		
//		Цена = ОкруглитьЦену(Цена, ПорядокОкругления, ОкруглятьВБольшуюСторону);
//		
//	КонецЦикла;
//	
//	Возврат Цена;
//	
//КонецФункции // ПолучитьЦенуНоменклатурыПоВидуЦен()

//// Выполняет пересчет документа после изменений в форме "Цены и валюта".
////
//// Возвращаемое значение:
////  Число        - Полученная цена номенклатуры по прайсу.
////
//Функция ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураДанных) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены КАК ЦеныНоменклатурыВалюта,
//	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
//	|	ЕСТЬNULL(ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) * ЕСТЬNULL(&Коэффициент, 1) / ЕСТЬNULL(ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1), 0) КАК Цена
//	|ИЗ
//	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
//	|			&ДатаОбработки,
//	|			Номенклатура = &Номенклатура
//	|				И Характеристика = &Характеристика
//	|				И ВидЦенКонтрагента = &ВидЦенКонтрагента) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыВидЦен
//	|		ПО ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены = КурсВалютыВидЦен.Валюта,
//	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
//	|ГДЕ
//	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Актуальность";
//	
//	Запрос.УстановитьПараметр("ДатаОбработки",	 	СтруктураДанных.ДатаОбработки);
//	Запрос.УстановитьПараметр("Номенклатура",	 	СтруктураДанных.Номенклатура);
//	Запрос.УстановитьПараметр("Характеристика",  	СтруктураДанных.Характеристика);
//	Запрос.УстановитьПараметр("Коэффициент",	 	СтруктураДанных.Коэффициент);
//	Запрос.УстановитьПараметр("ВалютаДокумента", 	СтруктураДанных.ВалютаДокумента);
//	Запрос.УстановитьПараметр("ВидЦенКонтрагента",	СтруктураДанных.ВидЦенКонтрагента);
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Цена = 0;
//	Пока Выборка.Следующий() Цикл
//		
//		Цена = Выборка.Цена;
//		
//		// Учитываем: сумма включает НДС.
//		Если (СтруктураДанных.СуммаВключаетНДС И НЕ Выборка.ЦенаВключаетНДС)
//		 ИЛИ (НЕ СтруктураДанных.СуммаВключаетНДС И Выборка.ЦенаВключаетНДС) Тогда
//			Цена = ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанных.СуммаВключаетНДС, СтруктураДанных.СтавкаНДС);
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Возврат Цена;
//	
//КонецФункции // ПолучитьЦенуНоменклатурыПоВидуЦен()

//// Получает норму времени работы.
////
//// Возвращаемое значение:
////  Число        - Полученная цена номенклатуры по прайсу.
////
//Функция ПолучитьНормуВремениРаботы(СтруктураДанных) Экспорт
//	
//	Запрос = Новый Запрос("ВЫБРАТЬ
//						  |	НормыВремениРаботСрезПоследних.Норма
//						  |ИЗ
//						  |	РегистрСведений.НормыВремениРабот.СрезПоследних(
//						  |			&ДатаОбработки,
//						  |			Номенклатура = &Номенклатура
//						  |				И Характеристика = &Характеристика
//						  |				И (НЕ Номенклатура.ФиксированнаяСтоимость)) КАК НормыВремениРаботСрезПоследних");	
//						  
//	Запрос.УстановитьПараметр("Номенклатура", СтруктураДанных.Номенклатура);
//	Запрос.УстановитьПараметр("Характеристика", СтруктураДанных.Характеристика);
//	Запрос.УстановитьПараметр("ДатаОбработки", СтруктураДанных.ДатаОбработки);
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		Возврат Выборка.Норма;		
//	КонецЦикла;
//	
//	Возврат 1;
//	
//КонецФункции // ПолучитьЦенуНоменклатурыПоВидуЦен()

//// Получает набор данных: Сумма, Сумма НДС.
////
//Функция ПолучитьСуммуСтрокиТабличнойЧасти(СтруктураДанных) Экспорт
//	
//	СтруктураДанных.Сумма = СтруктураДанных.Количество * СтруктураДанных.Цена;
//	
//	Если СтруктураДанных.Свойство("СуммаСкидкиНаценки") И СтруктураДанных.СуммаСкидкиНаценки <> 0 Тогда
//		
//		СтруктураДанных.Сумма = СтруктураДанных.Сумма - СтруктураДанных.СуммаСкидкиНаценки;
//		
//	ИначеЕсли СтруктураДанных.Свойство("ПроцентСкидкиНаценки") ИЛИ СтруктураДанных.Свойство("ДисконтнаяКарта") Тогда
//		
//		Если СтруктураДанных.ПроцентСкидкиНаценки = 100 Тогда
//			
//			СтруктураДанных.Сумма = 0;
//			
//		ИначеЕсли СтруктураДанных.ПроцентСкидкиНаценки <> 0 Тогда
//			
//			СтруктураДанных.Сумма = СтруктураДанных.Сумма * (1 - СтруктураДанных.ПроцентСкидкиНаценки / 100);
//			
//			Если СтруктураДанных.Свойство("СуммаСкидкиНаценки") И СтруктураДанных.СуммаСкидкиНаценки = 0 Тогда
//			
//				СтруктураДанных.СуммаСкидкиНаценки = СтруктураДанных.Количество * СтруктураДанных.Цена * СтруктураДанных.ПроцентСкидкиНаценки / 100;
//			
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Если СтруктураДанных.Свойство("СуммаНДС") Тогда
//		
//		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтруктураДанных.СтавкаНДС);
//		СтруктураДанных.СуммаНДС = ?(СтруктураДанных.СуммаВключаетНДС, СтруктураДанных.Сумма - (СтруктураДанных.Сумма) / ((СтавкаНДС + 100) / 100), СтруктураДанных.Сумма * СтавкаНДС / 100);
//		СтруктураДанных.Всего = СтруктураДанных.Сумма + ?(СтруктураДанных.СуммаВключаетНДС, 0, СтруктураДанных.СуммаНДС);
//		
//	КонецЕсли;
//	
//	Возврат СтруктураДанных;
//	
//КонецФункции // ПолучитьСуммуСтрокиТабличнойЧасти()

//// Процедура рассчитывает сумму строки табличной части при заполнение по "Цены и валюта".
////
//Процедура РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабЧасти)
//	
//	Если СтрокаТабЧасти.Свойство("Количество") И СтрокаТабЧасти.Свойство("Цена") Тогда
//		СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Количество * СтрокаТабЧасти.Цена;
//	КонецЕсли;
//	
//	Если СтрокаТабЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
//		Если СтрокаТабЧасти.ПроцентСкидкиНаценки = 100 Тогда
//			СтрокаТабЧасти.Сумма = 0;
//		ИначеЕсли СтрокаТабЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабЧасти.Количество <> 0 Тогда
//			СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Сумма * (1 - СтрокаТабЧасти.ПроцентСкидкиНаценки / 100);
//		КонецЕсли;
//	КонецЕсли;	

//	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабЧасти.СтавкаНДС);
//			
//	Если ФормаДокумента.Объект.Свойство("СуммаВключаетНДС") Тогда
//		СтрокаТабЧасти.СуммаНДС = ?(
//			ФормаДокумента.Объект.СуммаВключаетНДС, 
//			СтрокаТабЧасти.Сумма - (СтрокаТабЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
//			СтрокаТабЧасти.Сумма * СтавкаНДС / 100
//		);
//		СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма + ?(ФормаДокумента.Объект.СуммаВключаетНДС, 0, СтрокаТабЧасти.СуммаНДС);
//	Иначе
//		СтрокаТабЧасти.СуммаНДС = СтрокаТабЧасти.Сумма * СтавкаНДС / 100;
//		СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма + СтрокаТабЧасти.СуммаНДС;
//	КонецЕсли;	
//	
//	// АвтоматическиеСкидки
//	Если СтрокаТабЧасти.Свойство("ПроцентАвтоматическойСкидки") Тогда
//		СтрокаТабЧасти.ПроцентАвтоматическойСкидки = 0;
//		СтрокаТабЧасти.СуммаАвтоматическойСкидки = 0;
//	КонецЕсли;
//	Если СтрокаТабЧасти.Свойство("ОбщаяСуммаСкидкиБольшеСуммы") Тогда
//		СтрокаТабЧасти.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
//	КонецЕсли;
//	// Конец АвтоматическиеСкидки
//	
//КонецПроцедуры // РассчитатьСуммуСтрокиТабличнойЧасти()	

//// Выполняем пересчет цены по валюте табличной части документа после изменений в форме 
//// "Цены и валюта".
////
//// Параметры:
////  ПредыдущаяВалюта - СправочникСсылка.Валюты, содержит ссылку на предыдущую
////                 валюту.
////
//Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ФормаДокумента, ПредыдущаяВалюта, ИмяТабличнойЧасти, БратьКурсНаТекущуюДату = Ложь) Экспорт
//	
//	СтруктураКурсы = УправлениеНебольшойФирмойСервер.ПолучитьКурсыВалют(ПредыдущаяВалюта, 
//		ФормаДокумента.Объект.ВалютаДокумента, 
//		?(БратьКурсНаТекущуюДату, ТекущаяДатаСеанса(), ФормаДокумента.Объект.Дата));
//																   
//	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
//		
//		// Цена.
//		Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
//			
//			СтрокаТабличнойЧасти.Цена = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
//																	СтруктураКурсы.КурсНач, 
//																	СтруктураКурсы.Курс, 
//																	СтруктураКурсы.КратностьНач, 
//																	СтруктураКурсы.Кратность);
//																	
//			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
//			
//		// Сумма.	
//		ИначеЕсли СтрокаТабличнойЧасти.Свойство("Сумма") Тогда
//			
//			СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, 
//																	СтруктураКурсы.КурсНач, 
//																	СтруктураКурсы.Курс, 
//																	СтруктураКурсы.КратностьНач, 
//																	СтруктураКурсы.Кратность);														
//					
//			Если СтрокаТабличнойЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
//				
//				// Скидки.
//				Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
//					СтрокаТабличнойЧасти.Сумма = 0;
//				ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
//					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
//				КонецЕсли;
//								
//			КонецЕсли;														
//			
//			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
//			
//	        СтрокаТабличнойЧасти.СуммаНДС = ?(ФормаДокумента.Объект.СуммаВключаетНДС, 
//								  				СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
//								  				СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
//					        		
//			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ФормаДокумента.Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
//			
//		КонецЕсли;
//        		        
//	КонецЦикла; 

//КонецПроцедуры // ПересчитатьЦеныТабличнойЧастиПоВалюте()

//Функция ТаблицаПорядковОкругления() Экспорт
//	
//	Результат = Новый ТаблицаЗначений;
//	Результат.Колонки.Добавить("Порядок", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядкиОкругления"));
//	Результат.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
//	Для каждого Значение Из Метаданные.Перечисления.ПорядкиОкругления.ЗначенияПеречисления Цикл
//		Стр = Результат.Добавить();
//		Стр.Порядок = Перечисления.ПорядкиОкругления[Значение.Имя];
//		Стр.Значение = Число(Строка(Стр.Порядок));
//	КонецЦикла;
//	Возврат Результат;
//	
//КонецФункции

//#КонецОбласти

//#Область ДисконтныеКарты

//// Функция возвращает структуру с датой начала и окончания периода накопления по дисконтной карте,
//// а также текстовое представление периода.
////
//Функция ПолучитьПериодРасчетаНакопительныхСкидокПоДисконтнойКарте(ДатаСкидки, ДисконтнаяКарта) Экспорт

//	Если Не ЗначениеЗаполнено(ДатаСкидки) Тогда
//		ДатаСкидки = ТекущаяДата();
//	КонецЕсли;
//	
//	ПредставлениеПериода = "";
//	Если ДисконтнаяКарта.Владелец.ВидПериода = Перечисления.ВидыПериодовДляНакопительныхСкидок.ВесьПериод Тогда
//		НачалоПериода = '00010101';
//		КонецПериода = '00010101';
//		ПредставлениеПериода = "за всё время";
//	ИначеЕсли ДисконтнаяКарта.Владелец.ВидПериода = Перечисления.ВидыПериодовДляНакопительныхСкидок.Текущий Тогда
//		Если ДисконтнаяКарта.Владелец.Периодичность = Перечисления.Периодичность.Год Тогда
//			НачалоПериода = НачалоГода(ДатаСкидки);
//			ПредставлениеПериода = "за текущий год";
//		ИначеЕсли ДисконтнаяКарта.Владелец.Периодичность = Перечисления.Периодичность.Квартал Тогда
//			НачалоПериода = НачалоКвартала(ДатаСкидки);
//			ПредставлениеПериода = "за текущий квартал";
//		ИначеЕсли ДисконтнаяКарта.Владелец.Периодичность = Перечисления.Периодичность.Месяц Тогда
//			НачалоПериода = НачалоМесяца(ДатаСкидки);
//			ПредставлениеПериода = "за текущий месяц";
//		КонецЕсли;
//		КонецПериода = КонецДня(ДатаСкидки);
//	ИначеЕсли ДисконтнаяКарта.Владелец.ВидПериода = Перечисления.ВидыПериодовДляНакопительныхСкидок.Прошлый Тогда
//		Если ДисконтнаяКарта.Владелец.Периодичность = Перечисления.Периодичность.Год Тогда
//			ДатаПредПериода = ДобавитьМесяц(ДатаСкидки, -12);
//			НачалоПериода = НачалоГода(ДатаПредПериода);
//			КонецПериода = КонецГода(ДатаПредПериода);
//			ПредставлениеПериода = "за прошлый год";
//		ИначеЕсли ДисконтнаяКарта.Владелец.Периодичность = Перечисления.Периодичность.Квартал Тогда
//			ДатаПредПериода = ДобавитьМесяц(ДатаСкидки, -3);
//			НачалоПериода = НачалоКвартала(ДатаПредПериода);
//			КонецПериода = КонецКвартала(ДатаПредПериода);
//			ПредставлениеПериода = "за прошлый квартал";
//		ИначеЕсли ДисконтнаяКарта.Владелец.Периодичность = Перечисления.Периодичность.Месяц Тогда
//			ДатаПредПериода = ДобавитьМесяц(ДатаСкидки, -1);
//			НачалоПериода = НачалоМесяца(ДатаПредПериода);
//			КонецПериода = КонецМесяца(ДатаПредПериода);
//			ПредставлениеПериода = "за прошлый месяц";
//		КонецЕсли;
//	ИначеЕсли ДисконтнаяКарта.Владелец.ВидПериода = Перечисления.ВидыПериодовДляНакопительныхСкидок.Последний Тогда
//		Если ДисконтнаяКарта.Владелец.Периодичность = Перечисления.Периодичность.Год Тогда
//			ДатаПредПериода = ДобавитьМесяц(ДатаСкидки, -12);
//			ПредставлениеПериода = "за последний год";
//		ИначеЕсли ДисконтнаяКарта.Владелец.Периодичность = Перечисления.Периодичность.Квартал Тогда
//			ДатаПредПериода = ДобавитьМесяц(ДатаСкидки, -3);
//			ПредставлениеПериода = "за последний квартал";
//		ИначеЕсли ДисконтнаяКарта.Владелец.Периодичность = Перечисления.Периодичность.Месяц Тогда
//			ДатаПредПериода = ДобавитьМесяц(ДатаСкидки, -1);
//			ПредставлениеПериода = "за последний месяц";
//		КонецЕсли;		
//		НачалоПериода = НачалоДня(ДатаПредПериода);
//		КонецПериода = НачалоДня(ДатаСкидки) - 1; // Конец предыдущего дня.
//	Иначе
//		НачалоПериода = '00010101';
//		КонецПериода = '00010101';
//		ПредставлениеПериода = "";
//	КонецЕсли;
//	
//	Возврат Новый Структура("НачалоПериода, КонецПериода, ПредставлениеПериода", НачалоПериода, КонецПериода, ПредставлениеПериода);

//КонецФункции // ПолучитьПериодРасчетаНакопительныхСкидокПоДисконтнойКарте()

//// Возвращает процент скидки по дисконтной карте.
////
//// Параметры:
////  ДисконтнаяКарта - СправочникСсылка.ДисконтынеКарты - Ссылка на дисконтную карту.
////
//// Возвращаемое значение: 
////   Число - процент скидки.
////
//Функция ВычислитьПроцентСкидкиПоДисконтнойКарте(Знач ДатаСкидки, ДисконтнаяКарта, ДополнительныеПараметры = Неопределено) Экспорт
//	
//	Перем НачалоПериода, КонецПериода;
//	
//	Если НЕ ЗначениеЗаполнено(ДатаСкидки) Тогда
//		ДатаСкидки = ТекущаяДата();
//	КонецЕсли;
//	
//	Если ДисконтнаяКарта.Владелец.ВидСкидкиВДисконтныхКартах = Перечисления.ВидыСкидокВДисконтныхКартах.ФиксированнаяСкидка Тогда
//		
//		Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.ПолучатьСуммуПродаж Тогда
//			ПериодНакопления = ПолучитьПериодРасчетаНакопительныхСкидокПоДисконтнойКарте(ДатаСкидки, ДисконтнаяКарта.Ссылка);

//			ДополнительныеПараметры.Вставить("ПредставлениеПериода", ПериодНакопления.ПредставлениеПериода);
//			
//			Запрос = Новый Запрос("ВЫБРАТЬ
//			                      |	ЕСТЬNULL(СУММА(РегПродажи.СуммаОборот), 0) КАК СуммаОборот
//			                      |ИЗ
//			                      |	РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, , ДисконтнаяКарта = &ДисконтнаяКарта) КАК РегПродажи");

//			Запрос.УстановитьПараметр("ДатаНач", ПериодНакопления.НачалоПериода);
//			Запрос.УстановитьПараметр("ДатаКон", ПериодНакопления.КонецПериода);
//			Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта.Ссылка);
//	        
//			Выборка = Запрос.Выполнить().Выбрать();
//			Если Выборка.Следующий() Тогда
//				ДополнительныеПараметры.Сумма = Выборка.СуммаОборот;
//			Иначе
//				ДополнительныеПараметры.Сумма = 0;
//			КонецЕсли;		
//		
//		КонецЕсли;
//		
//		Если ДисконтнаяКарта.Владелец.СтарыйМеханизмСкидок Тогда
//			Возврат ДисконтнаяКарта.Владелец.Скидка;
//		Иначе
//			Возврат 0;
//		КонецЕсли;
//		
//	Иначе
//		
//		ПериодНакопления = ПолучитьПериодРасчетаНакопительныхСкидокПоДисконтнойКарте(ДатаСкидки, ДисконтнаяКарта.Ссылка);
//		
//		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		                      |	Пороги.Скидка КАК Скидка,
//		                      |	Пороги.НижняяГраница КАК НижняяГраница
//		                      |ПОМЕСТИТЬ ВТ_Пороги
//		                      |ИЗ
//		                      |	Справочник.ВидыДисконтныхКарт.ПорогиНакопительныхСкидок КАК Пороги
//		                      |ГДЕ
//		                      |	Пороги.Ссылка = &ВидДисконтнойКарты
//		                      |;
//		                      |
//		                      |////////////////////////////////////////////////////////////////////////////////
//		                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		                      |	РегПороги.Скидка КАК Скидка
//		                      |ИЗ
//		                      |	(ВЫБРАТЬ
//		                      |		ЕСТЬNULL(СУММА(РегПродажи.СуммаОборот), 0) КАК СуммаОборот
//		                      |	ИЗ
//		                      |		РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, , ДисконтнаяКарта = &ДисконтнаяКарта) КАК РегПродажи) КАК РегПродажи
//		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//		                      |			Пороги.НижняяГраница КАК НижняяГраница,
//		                      |			Пороги.Скидка КАК Скидка
//		                      |		ИЗ
//		                      |			ВТ_Пороги КАК Пороги) КАК РегПороги
//		                      |		ПО (РегПороги.НижняяГраница <= РегПродажи.СуммаОборот)
//		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//		                      |			МАКСИМУМ(РегПороги.НижняяГраница) КАК НижняяГраница
//		                      |		ИЗ
//		                      |			(ВЫБРАТЬ
//		                      |				ЕСТЬNULL(СУММА(РегПродажи.СуммаОборот), 0) КАК СуммаОборот
//		                      |			ИЗ
//		                      |				РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, , ДисконтнаяКарта = &ДисконтнаяКарта) КАК РегПродажи) КАК РегПродажи
//		                      |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//		                      |					Пороги.НижняяГраница КАК НижняяГраница
//		                      |				ИЗ
//		                      |					ВТ_Пороги КАК Пороги) КАК РегПороги
//		                      |				ПО (РегПороги.НижняяГраница <= РегПродажи.СуммаОборот)) КАК РегПорогиМакс
//		                      |		ПО (РегПорогиМакс.НижняяГраница = РегПороги.НижняяГраница)");

//		Запрос.УстановитьПараметр("ДатаНач", ПериодНакопления.НачалоПериода);
//		Запрос.УстановитьПараметр("ДатаКон", ПериодНакопления.КонецПериода);
//		Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта.Ссылка);
//        Запрос.УстановитьПараметр("ВидДисконтнойКарты", ДисконтнаяКарта.Владелец);

//		Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.ПолучатьСуммуПродаж Тогда
//			ДополнительныеПараметры.Вставить("ПредставлениеПериода", ПериодНакопления.ПредставлениеПериода);
//			
//			Запрос.Текст = Запрос.Текст + ";
//			                              |////////////////////////////////////////////////////////////////////////////////
//			                              |ВЫБРАТЬ
//			                              |	ПродажиПоДисконтнымКартамОбороты.СуммаОборот
//			                              |ИЗ
//			                              |	РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, , ДисконтнаяКарта = &ДисконтнаяКарта) КАК ПродажиПоДисконтнымКартамОбороты";
//			МРезультатов = Запрос.ВыполнитьПакет();
//			
//			Выборка = МРезультатов[1].Выбрать();
//			Если Выборка.Следующий() Тогда
//				ПроцентНакопительнойСкидки = Выборка.Скидка;
//			Иначе
//				ПроцентНакопительнойСкидки = 0;
//			КонецЕсли;		
//			
//			ВыборкаПоСуммеПродаж = МРезультатов[2].Выбрать();
//			Если ВыборкаПоСуммеПродаж.Следующий() Тогда
//				ДополнительныеПараметры.Сумма = ВыборкаПоСуммеПродаж.СуммаОборот;
//			Иначе
//				ДополнительныеПараметры.Сумма = 0;
//			КонецЕсли;
//			
//			Если ДисконтнаяКарта.Владелец.СтарыйМеханизмСкидок Тогда
//				Возврат ПроцентНакопительнойСкидки;
//			Иначе
//				Возврат 0;
//			КонецЕсли;

//		Иначе
//			Выборка = Запрос.Выполнить().Выбрать();
//			Если Выборка.Следующий() Тогда
//				ПроцентНакопительнойСкидки = Выборка.Скидка;
//			Иначе
//				ПроцентНакопительнойСкидки = 0;
//			КонецЕсли;		
//				
//			Если ДисконтнаяКарта.Владелец.СтарыйМеханизмСкидок Тогда
//				Возврат ПроцентНакопительнойСкидки;
//			Иначе
//				Возврат 0;
//			КонецЕсли;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецФункции

//// Возвращает процент скидки по виду скидки / наценки.
////
//// Параметры:
////  СтруктураДанных - Структура - Структура реквизитов, необходимых при пересчете
////
//// Возвращаемое значение: 
////   Число - процент скидки.
////
//Функция ПолучитьПроцентСкдикиПоВидуСкидокНаценок(ВидСкидкиНаценки) Экспорт
//	
//	Возврат ВидСкидкиНаценки.Процент;
//	
//КонецФункции

//#КонецОбласти

//#Область ПроцедурыИФункцииФормирующиеТекстыСообщенийОбОшибкахПроведения

//// Формирует строку представления кассы.
////
//// Параметры:
////  НоменклатураПредставление - Строка - представление номенклатуры.
////  ВидУчетаТовараПредставление - Строка - представление вида номенклатуры.
////  ХарактеристикаПредставление - Строка - представление характеристики.
////  СерияПредставление - Строка - представление серии.
////  СтадияПредставление - Строка - представление захода.
////
//// Возвращаемое значение:
////  Строка - строка с представлением номенклатуры.
////
//Функция ПредставлениеБанковскогоСчетаКассы(БанковскийСчетКассаПредставление,
//										   ТипДенежныхСредствПредставление = "",
//										   ВалютаПредставление = "") Экспорт
//	
//	СтрПредставление = СокрЛП(БанковскийСчетКассаПредставление);
//	
//	Если ЗначениеЗаполнено(ТипДенежныхСредствПредставление)Тогда
//		СтрПредставление = СтрПредставление + ", " + СокрЛП(ТипДенежныхСредствПредставление);
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ВалютаПредставление)Тогда
//		СтрПредставление = СтрПредставление + ", " + СокрЛП(ВалютаПредставление);
//	КонецЕсли;
//	
//	Возврат СтрПредставление;
//	
//КонецФункции // ПредставлениеНоменклатуры()

//// Формирует строку представления номенклатуры с учетом характеристики и серий.
////
//// Параметры:
////  НоменклатураПредставление - Строка - представление номенклатуры.
////  ХарактеристикаПредставление - Строка - представление характеристики.
////  ПартияПредставление - Строка - представление партии.
////
//// Возвращаемое значение:
////  Строка - строка с представлением номенклатуры.
////
//Функция ПредставлениеНоменклатуры(НоменклатураПредставление,
//	                              ХарактеристикаПредставление  = "",
//	                              ПартияПредставление          = "",
//								  ЗаказПокупателяПредставление = "") Экспорт
//	
//	СтрПредставление = СокрЛП(НоменклатураПредставление);
//	
//	Если ЗначениеЗаполнено(ХарактеристикаПредставление)Тогда
//		СтрПредставление = СтрПредставление + " / " + СокрЛП(ХарактеристикаПредставление);
//	КонецЕсли;
//	
//	Если  ЗначениеЗаполнено(ПартияПредставление) Тогда
//		СтрПредставление = СтрПредставление + " / " + СокрЛП(ПартияПредставление);
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ЗаказПокупателяПредставление) Тогда
//		СтрПредставление = СтрПредставление + " / " + СокрЛП(ЗаказПокупателяПредставление);
//	КонецЕсли;
//	
//	Возврат СтрПредставление;
//	
//КонецФункции // ПредставлениеНоменклатуры()

//// Формирует строку представления контрагента.
////
//// Параметры:
////  НоменклатураПредставление - Строка - представление номенклатуры.
////  ВидУчетаТовараПредставление - Строка - представление вида номенклатуры.
////  ХарактеристикаПредставление - Строка - представление характеристики.
////  СерияПредставление - Строка - представление серии.
////  СтадияПредставление - Строка - представление захода.
////
//// Возвращаемое значение:
////  Строка - строка с представлением номенклатуры.
////
//Функция ПредставлениеКонтрагента(КонтрагентПредставление,
//	                             ДоговорПредставление = "",
//	                             ДокументПредставление = "",
//	                             ЗаказПредставление = "",
//	                             ВидРасчетовПредставление = "") Экспорт
//	
//	СтрПредставление = СокрЛП(КонтрагентПредставление);
//	
//	Если ЗначениеЗаполнено(ДоговорПредставление)Тогда
//		СтрПредставление = СтрПредставление + ", " + СокрЛП(ДоговорПредставление);
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ДокументПредставление)Тогда
//		СтрПредставление = СтрПредставление + ", " + СокрЛП(ДокументПредставление);
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ЗаказПредставление)Тогда
//		СтрПредставление = СтрПредставление + ", " + СокрЛП(ЗаказПредставление);
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ВидРасчетовПредставление)Тогда
//		СтрПредставление = СтрПредставление + ", " + СокрЛП(ВидРасчетовПредставление);
//	КонецЕсли;
//	
//	Возврат СтрПредставление;
//	
//КонецФункции // ПредставлениеКонтрагента()

//// Формирует строку представления структурной единицы.
////
//// Параметры:
////  НоменклатураПредставление - Строка - представление номенклатуры.
////  ВидУчетаТовараПредставление - Строка - представление вида номенклатуры.
////  ХарактеристикаПредставление - Строка - представление характеристики.
////  СерияПредставление - Строка - представление серии.
////  СтадияПредставление - Строка - представление захода.
////
//// Возвращаемое значение:
////  Строка - строка с представлением номенклатуры.
////
//Функция ПредставлениеСтруктурнойЕдиницы(СтруктурнаяЕдиницаПредставление,
//	                             ЯчейкаПредставление = "") Экспорт
//	
//	СтрПредставление = СокрЛП(СтруктурнаяЕдиницаПредставление);
//	
//	Если ЗначениеЗаполнено(ЯчейкаПредставление) Тогда
//		СтрПредставление = СтрПредставление + " (" + ЯчейкаПредставление + ")";
//	КонецЕсли;
//	
//	Возврат СтрПредставление;
//	
//КонецФункции // ПредставлениеСтруктурнойЕдиницы()

//// Формирует строку представления кассы.
////
//// Параметры:
////  НоменклатураПредставление - Строка - представление номенклатуры.
////  ВидУчетаТовараПредставление - Строка - представление вида номенклатуры.
////  ХарактеристикаПредставление - Строка - представление характеристики.
////  СерияПредставление - Строка - представление серии.
////  СтадияПредставление - Строка - представление захода.
////
//// Возвращаемое значение:
////  Строка - строка с представлением номенклатуры.
////
//Функция ПредставлениеПодотчетногоЛица(ПодотчетноеЛицоПредставление,
//	                       			  ВалютаПредставление = "",
//									  ДокументПредставление = "") Экспорт
//	
//	СтрПредставление = СокрЛП(ПодотчетноеЛицоПредставление);
//	
//	Если ЗначениеЗаполнено(ВалютаПредставление)Тогда
//		СтрПредставление = СтрПредставление + ", " + СокрЛП(ВалютаПредставление);
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ДокументПредставление)Тогда
//		СтрПредставление = СтрПредставление + ", " + СокрЛП(ДокументПредставление);
//	КонецЕсли;    
//	
//	Возврат СтрПредставление;
//	
//КонецФункции // ПредставлениеНоменклатуры()

//// Функция возвращает паспортные данные физического лица строкой, используемые
//// в печатных формах.
////
//// Параметры
////  СтруктураДанных – Структура – ссылка на ФизЛицо и дата
////                 
//// Возвращаемое значение:
////   Строка      – Строка, содержащая паспортные данные
////
//Функция ПолучитьПаспортныеДанныеСтрокой(СтруктураДанных) Экспорт

//	Если НЕ ЗначениеЗаполнено(СтруктураДанных.ФизЛицо) Тогда
//		Возврат НСтр("ru = 'Отсутствуют данные об удостоверении личности.'");
//	КонецЕсли; 
//	
//	Запрос = Новый Запрос("ВЫБРАТЬ
//	                      |	ДокументыФизическихЛицСрезПоследних.ВидДокумента,
//	                      |	ДокументыФизическихЛицСрезПоследних.Серия,
//	                      |	ДокументыФизическихЛицСрезПоследних.Номер,
//	                      |	ДокументыФизическихЛицСрезПоследних.КемВыдан,
//	                      |	ДокументыФизическихЛицСрезПоследних.КодПодразделения,
//	                      |	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи
//	                      |ИЗ
//	                      |	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
//	                      |			&НаДату,
//	                      |			Физлицо = &Физлицо
//	                      |				И ЯвляетсяДокументомУдостоверяющимЛичность) КАК ДокументыФизическихЛицСрезПоследних");
//	
//	Запрос.УстановитьПараметр("НаДату", СтруктураДанных.Дата);
//	Запрос.УстановитьПараметр("Физлицо", СтруктураДанных.ФизЛицо);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат НСтр("ru = 'Отсутствуют данные об удостоверении личности.'");
//	Иначе
//		ПаспортныеДанные = РезультатЗапроса.Выгрузить()[0];
//		ВидДокумента       = ПаспортныеДанные.ВидДокумента;
//		Серия              = ПаспортныеДанные.Серия;
//		Номер              = ПаспортныеДанные.Номер;
//		ДатаВыдачи         = ПаспортныеДанные.ДатаВыдачи;
//		КемВыдан           = ПаспортныеДанные.КемВыдан;
//		НомерПодразделения = ПаспортныеДанные.КодПодразделения;
//		
//		Если НЕ (НЕ ЗначениеЗаполнено(ДатаВыдачи)
//			И НЕ ЗначениеЗаполнено(ВидДокумента)
//			И НЕ ЗначениеЗаполнено(Серия + Номер + КемВыдан + НомерПодразделения)) Тогда

//			СтрокаПаспортныеДанные = НСтр("ru = '%ВидДокумента% Серия: %Серия%, № %Номер%, Выдан: %ДатаВыдачи% года, %КемВыдан%; № подр. %НомерПодразделения%'");
//			
//			СтрокаПаспортныеДанные = СтрЗаменить(СтрокаПаспортныеДанные, "%ВидДокумента%", ?(ВидДокумента.Пустая(),"","" + ВидДокумента + ", "));
//			СтрокаПаспортныеДанные = СтрЗаменить(СтрокаПаспортныеДанные, "%Серия%", Серия);
//			СтрокаПаспортныеДанные = СтрЗаменить(СтрокаПаспортныеДанные, "%Номер%", Номер);
//			СтрокаПаспортныеДанные = СтрЗаменить(СтрокаПаспортныеДанные, "%ДатаВыдачи%", Формат(ДатаВыдачи,"ДЛФ=DD"));
//			СтрокаПаспортныеДанные = СтрЗаменить(СтрокаПаспортныеДанные, "%КемВыдан%", КемВыдан);
//			СтрокаПаспортныеДанные = СтрЗаменить(СтрокаПаспортныеДанные, "%НомерПодразделения%", НомерПодразделения);
//			
//			Возврат СтрокаПаспортныеДанные;

//		Иначе
//			Возврат НСтр("ru = 'Отсутствуют данные об удостоверении личности.'");
//		КонецЕсли;
//	КонецЕсли;

//КонецФункции // ПолучитьПаспортныеДанныеСтрокой()

//// Функция возвращает представление типа структурных единиц.
////
//Функция ПолучитьПредставлениеТипаСтруктурныхЕдиниц(ТипСтруктурнойЕдиницы)
//	
//	Если ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
//		ПредставлениеТипаСтруктурныхЕдиниц = "в подразделении";
//	ИначеЕсли ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
//		ИЛИ ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет Тогда
//		ПредставлениеТипаСтруктурныхЕдиниц = "на розничном складе";
//	Иначе
//		ПредставлениеТипаСтруктурныхЕдиниц = "на складе";
//	КонецЕсли;
//	
//	Возврат ПредставлениеТипаСтруктурныхЕдиниц
//	
//КонецФункции // ПолучитьПредставлениеТипаСтруктурныхЕдиниц()

//#КонецОбласти

//#Область ПроцедурыВыдачиСообщенийОбОшибкахПроведения

//// Процедура сообщает об ошибках проведения по регистру Запасы на складах.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструЗапасыНаСкладах(ДокОбъект, ВыборкаЗаписей, Отказ, МассивСообщений = Неопределено) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	
//	ШаблонЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает запасов %ТипСтруктурнойЕдиницы% %СтруктурнаяЕдиницаПредставление%'");
//	
//	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристикаПартия%,
//		|остаток %КоличествоОстаток% %ЕдиницаИзмерения%,
//		|недостаточно %Количество% %ЕдиницаИзмерения%'");
//		
//	ВыводитьВЗаголовокРасшифровку = Истина;
//	УчетПоНесколькимСкладам = Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить();
//	УчетПоНесколькимПодразделениям = Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить();
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		Если ВыводитьВЗаголовокРасшифровку Тогда
//			Если (НЕ УчетПоНесколькимСкладам И ВыборкаЗаписей.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад)
//				ИЛИ (НЕ УчетПоНесколькимПодразделениям И ВыборкаЗаписей.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение)Тогда
//				ПредставлениеСтруктурнойЕдиницы = "";
//			Иначе
//				ПредставлениеСтруктурнойЕдиницы = ПредставлениеСтруктурнойЕдиницы(ВыборкаЗаписей.СтруктурнаяЕдиницаПредставление, ВыборкаЗаписей.ЯчейкаПредставление);
//			КонецЕсли;
//			ТекстЗаголовкаСообщения = СтрЗаменить(ШаблонЗаголовкаСообщения, "%СтруктурнаяЕдиницаПредставление%", ПредставлениеСтруктурнойЕдиницы);
//			ТекстЗаголовкаСообщения = СтрЗаменить(ТекстЗаголовкаСообщения, "%ТипСтруктурнойЕдиницы%", ПолучитьПредставлениеТипаСтруктурныхЕдиниц(ВыборкаЗаписей.ТипСтруктурнойЕдиницы));
//			СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ, МассивСообщений);
//			ВыводитьВЗаголовокРасшифровку = Ложь;
//		КонецЕсли;
//		
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(ВыборкаЗаписей.НоменклатураПредставление, ВыборкаЗаписей.ХарактеристикаПредставление, ВыборкаЗаписей.ПартияПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", ПредставлениеНоменклатуры);
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокЗапасыНаСкладах));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-ВыборкаЗаписей.КоличествоОстатокЗапасыНаСкладах));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", СокрЛП(ВыборкаЗаписей.ЕдиницаИзмеренияПредставление));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ, МассивСообщений);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструЗапасыНаСкладах()

//// Процедура сообщает об ошибках проведения по регистру Запасы на складах
//// для списка стурктурных единиц.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструЗапасыНаСкладахСписком(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает запасов'");
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//	
//	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристикаПартия%,
//		|%ТипСтруктурнойЕдиницы% %СтруктурнаяЕдиницаПредставление%
//		|остаток %КоличествоОстаток% %ЕдиницаИзмерения%,
//		|недостаточно %Количество% %ЕдиницаИзмерения%'");
//		
//	УчетПоНесколькимСкладам = Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить();
//	УчетПоНесколькимПодразделениям = Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить();
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		Если (НЕ УчетПоНесколькимСкладам И ВыборкаЗаписей.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад)
//			ИЛИ (НЕ УчетПоНесколькимПодразделениям И ВыборкаЗаписей.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение)Тогда
//			ПредставлениеСтруктурнойЕдиницы = "";
//		Иначе
//			ПредставлениеСтруктурнойЕдиницы = ПредставлениеСтруктурнойЕдиницы(ВыборкаЗаписей.СтруктурнаяЕдиницаПредставление, ВыборкаЗаписей.ЯчейкаПредставление);
//		КонецЕсли;
//		
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(ВыборкаЗаписей.НоменклатураПредставление, ВыборкаЗаписей.ХарактеристикаПредставление, ВыборкаЗаписей.ПартияПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", ПредставлениеНоменклатуры);
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТипСтруктурнойЕдиницы%", ПолучитьПредставлениеТипаСтруктурныхЕдиниц(ВыборкаЗаписей.ТипСтруктурнойЕдиницы));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтруктурнаяЕдиницаПредставление%", ПредставлениеСтруктурнойЕдиницы);
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокЗапасыНаСкладах));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-ВыборкаЗаписей.КоличествоОстатокЗапасыНаСкладах));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", СокрЛП(ВыборкаЗаписей.ЕдиницаИзмеренияПредставление));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструЗапасыНаСкладахСписком()

//// Процедура сообщает об ошибках проведения по регистру Запасы.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструЗапасы(ДокОбъект, ВыборкаЗаписей, Отказ, МассивСообщений = Неопределено) Экспорт
//	
//	Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах")
//		И НЕ Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить() Тогда
//		ЗаголовокОшибки = НСтр("ru = 'Внимание:'");
//	Иначе
//		ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	КонецЕсли;
//	
//	ШаблонЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает остатка по учету запасов и затрат %ТипСтруктурнойЕдиницы% %СтруктурнаяЕдиницаПредставление%'");
//	
//	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристикаПартия%,
//		|остаток %КоличествоОстаток% %ЕдиницаИзмерения%,
//		|недостаточно %КоличествоИРезерв% %ЕдиницаИзмерения%'");
//	
//	ВыводитьВЗаголовокРасшифровку = Истина;
//	УчетПоНесколькимСкладам = Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить();
//	УчетПоНесколькимПодразделениям = Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить();
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		Если ВыводитьВЗаголовокРасшифровку Тогда
//			Если (НЕ УчетПоНесколькимСкладам И ВыборкаЗаписей.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад)
//				ИЛИ (НЕ УчетПоНесколькимПодразделениям И ВыборкаЗаписей.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение)Тогда
//				ПредставлениеСтруктурнойЕдиницы = "";
//			Иначе
//				ПредставлениеСтруктурнойЕдиницы = СокрЛП(ВыборкаЗаписей.СтруктурнаяЕдиницаПредставление);
//			КонецЕсли;
//			ТекстЗаголовкаСообщения = СтрЗаменить(ШаблонЗаголовкаСообщения, "%СтруктурнаяЕдиницаПредставление%", ПредставлениеСтруктурнойЕдиницы);
//			ТекстЗаголовкаСообщения = СтрЗаменить(ТекстЗаголовкаСообщения, "%ТипСтруктурнойЕдиницы%", ПолучитьПредставлениеТипаСтруктурныхЕдиниц(ВыборкаЗаписей.ТипСтруктурнойЕдиницы));
//			СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ, МассивСообщений);
//			ВыводитьВЗаголовокРасшифровку = Ложь;
//		КонецЕсли;
//		
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(ВыборкаЗаписей.НоменклатураПредставление, ВыборкаЗаписей.ХарактеристикаПредставление, ВыборкаЗаписей.ПартияПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", ПредставлениеНоменклатуры);
//		
//		Если ПустаяСтрока(ВыборкаЗаписей.ЗаказПокупателяПредставление) Тогда
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокЗапасы));
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоИРезерв%", Строка(-ВыборкаЗаписей.КоличествоОстатокЗапасы));
//		Иначе
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", "резерва " + Строка(ВыборкаЗаписей.ОстатокЗапасы));
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоИРезерв%", "резерва " + Строка(-ВыборкаЗаписей.КоличествоОстатокЗапасы));
//		КонецЕсли;
//		
//		// Заказы покупателей в Рознице
//		Если ЗначениеЗаполнено(ВыборкаЗаписей.ЗаказПокупателяПредставление) Тогда
//			ТекстСообщения = ТекстСообщения + ". " + ВыборкаЗаписей.ЗаказПокупателяПредставление;
//		КонецЕсли;
//		// Конец Заказы покупателей в Рознице
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", СокрЛП(ВыборкаЗаписей.ЕдиницаИзмеренияПредставление));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ, МассивСообщений);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструЗапасы()

//// Процедура сообщает об ошибках проведения по регистру Запасы
//// для списка стурктурных единиц.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструЗапасыСписком(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает остатка по учету запасов и затрат'");
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//	
//	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристикаПартия%,
//		|%ТипСтруктурнойЕдиницы% %СтруктурнаяЕдиницаПредставление%,
//		|остаток %КоличествоОстаток% %ЕдиницаИзмерения%,
//		|недостаточно %КоличествоИРезерв% %ЕдиницаИзмерения%'");
//		
//	УчетПоНесколькимСкладам = Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить();
//	УчетПоНесколькимПодразделениям = Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить();
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		Если (НЕ УчетПоНесколькимСкладам И ВыборкаЗаписей.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад)
//			ИЛИ (НЕ УчетПоНесколькимПодразделениям И ВыборкаЗаписей.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение)Тогда
//			ПредставлениеСтруктурнойЕдиницы = "";
//		Иначе
//			ПредставлениеСтруктурнойЕдиницы = СокрЛП(ВыборкаЗаписей.СтруктурнаяЕдиницаПредставление);
//		КонецЕсли;
//		
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(ВыборкаЗаписей.НоменклатураПредставление, ВыборкаЗаписей.ХарактеристикаПредставление, ВыборкаЗаписей.ПартияПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", ПредставлениеНоменклатуры);
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтруктурнаяЕдиницаПредставление%", ПредставлениеСтруктурнойЕдиницы);
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТипСтруктурнойЕдиницы%", ПолучитьПредставлениеТипаСтруктурныхЕдиниц(ВыборкаЗаписей.ТипСтруктурнойЕдиницы));
//		
//		Если ПустаяСтрока(ВыборкаЗаписей.ЗаказПокупателяПредставление) Тогда
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокЗапасы));
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоИРезерв%", Строка(-ВыборкаЗаписей.КоличествоОстатокЗапасы));
//		Иначе
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", "резерва " + Строка(ВыборкаЗаписей.ОстатокЗапасы));
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоИРезерв%", "резерва " + Строка(-ВыборкаЗаписей.КоличествоОстатокЗапасы));
//		КонецЕсли;
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", СокрЛП(ВыборкаЗаписей.ЕдиницаИзмеренияПредставление));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструЗапасыСписком()

//// Процедура сообщает об ошибках проведения по регистру Запасы переданные.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструЗапасыПереданные(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ШаблонЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает запасов, переданных стороннему контрагенту %КонтрагентПредставление%'");
//	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристикаПартия%,'");
//	
//	ВыводитьВЗаголовокРасшифровку = Истина;
//	ВалютаУчета = Константы.ВалютаУчета.Получить();
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		Если ВыводитьВЗаголовокРасшифровку Тогда
//			ТекстЗаголовкаСообщения = СтрЗаменить(ШаблонЗаголовкаСообщения, "%КонтрагентПредставление%", СокрЛП(ВыборкаЗаписей.КонтрагентПредставление));
//			СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//			ВыводитьВЗаголовокРасшифровку = Ложь;
//		КонецЕсли;
//		
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(ВыборкаЗаписей.НоменклатураПредставление, ВыборкаЗаписей.ХарактеристикаПредставление, ВыборкаЗаписей.ПартияПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", ПредставлениеНоменклатуры);
//		
//		Если ВыборкаЗаписей.КоличествоОстатокЗапасыПереданные <> 0 Тогда
//			
//			ТекстСообщенияКоличество = НСтр("ru = 'остаток %КоличествоОстаток% %ЕдиницаИзмерения%,
//				|недостаточно %Количество% %ЕдиницаИзмерения%'");
//			
//			ТекстСообщенияКоличество = СтрЗаменить(ТекстСообщенияКоличество, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокЗапасыПереданные));
//			ТекстСообщенияКоличество = СтрЗаменить(ТекстСообщенияКоличество, "%Количество%", Строка(-ВыборкаЗаписей.КоличествоОстатокЗапасыПереданные));
//			ТекстСообщенияКоличество = СтрЗаменить(ТекстСообщенияКоличество, "%ЕдиницаИзмерения%", СокрЛП(ВыборкаЗаписей.ЕдиницаИзмеренияПредставление));
//			
//			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстСообщенияКоличество;
//			
//		КонецЕсли;
//		
//		Если ВыборкаЗаписей.СуммаРасчетовОстатокЗапасыПереданные <> 0 Тогда
//			
//			ТекстСообщенияСумма = НСтр("ru = 'Сумма расчетов:
//				|остаток %СуммаОстаток% %Валюта%,
//				|недостаточно %Сумма% %Валюта%'");
//			
//			ТекстСообщенияСумма = СтрЗаменить(ТекстСообщенияСумма, "%СуммаОстаток%", Строка(ВыборкаЗаписей.СуммаРасчетовЗапасыПереданные));
//			ТекстСообщенияСумма = СтрЗаменить(ТекстСообщенияСумма, "%Сумма%", Строка(-ВыборкаЗаписей.СуммаРасчетовОстатокЗапасыПереданные));
//			ТекстСообщенияСумма = СтрЗаменить(ТекстСообщенияСумма, "%Валюта%", Строка(ВалютаУчета));
//			
//			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстСообщенияСумма;
//			
//		КонецЕсли;
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструЗапасыПереданные()

//// Процедура сообщает об ошибках проведения по регистру Запасы переданные
//// для списка сторонних контрагентов.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструЗапасыПереданныеСписком(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает запасов, переданных стороннему контрагенту'");
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//	
//	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристикаПартия%,
//		|контрагент %КонтрагентПредставление%'");
//	ВалютаУчета = Константы.ВалютаУчета.Получить();
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(ВыборкаЗаписей.НоменклатураПредставление, ВыборкаЗаписей.ХарактеристикаПредставление, ВыборкаЗаписей.ПартияПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", ПредставлениеНоменклатуры);
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КонтрагентПредставление%", СокрЛП(ВыборкаЗаписей.КонтрагентПредставление));
//		
//		Если ВыборкаЗаписей.КоличествоОстатокЗапасыПереданные <> 0 Тогда
//			
//			ТекстСообщенияКоличество = НСтр("ru = 'остаток %КоличествоОстаток% %ЕдиницаИзмерения%,
//				|недостаточно %Количество% %ЕдиницаИзмерения%'");
//			
//			ТекстСообщенияКоличество = СтрЗаменить(ТекстСообщенияКоличество, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокЗапасыПереданные));
//			ТекстСообщенияКоличество = СтрЗаменить(ТекстСообщенияКоличество, "%Количество%", Строка(-ВыборкаЗаписей.КоличествоОстатокЗапасыПереданные));
//			ТекстСообщенияКоличество = СтрЗаменить(ТекстСообщенияКоличество, "%ЕдиницаИзмерения%", СокрЛП(ВыборкаЗаписей.ЕдиницаИзмеренияПредставление));
//			
//			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстСообщенияКоличество;
//			
//		КонецЕсли;
//		
//		Если ВыборкаЗаписей.СуммаРасчетовОстатокЗапасыПереданные <> 0 Тогда
//			
//			ТекстСообщенияСумма = НСтр("ru = 'Сумма расчетов:
//				|остаток %СуммаОстаток% %Валюта%,
//				|недостаточно %Сумма% %Валюта%'");
//			
//			ТекстСообщенияСумма = СтрЗаменить(ТекстСообщенияСумма, "%СуммаОстаток%", Строка(ВыборкаЗаписей.СуммаРасчетовЗапасыПереданные));
//			ТекстСообщенияСумма = СтрЗаменить(ТекстСообщенияСумма, "%Сумма%", Строка(-ВыборкаЗаписей.СуммаРасчетовОстатокЗапасыПереданные));
//			ТекстСообщенияСумма = СтрЗаменить(ТекстСообщенияСумма, "%Валюта%", Строка(ВалютаУчета));
//			
//			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстСообщенияСумма;
//			
//		КонецЕсли;
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструЗапасыПереданныеСписком()

//// Процедура сообщает об ошибках проведения по регистру Запасы принятые.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструЗапасыПринятые(ДокОбъект, ВыборкаЗаписей, Отказ, МассивСообщений = Неопределено) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ШаблонЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает запасов, поступивших от стороннего контрагента %КонтрагентПредставление%'");
//	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристикаПартия%,'");
//	
//	ВыводитьВЗаголовокРасшифровку = Истина;
//	ВалютаУчета = Константы.ВалютаУчета.Получить();
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		Если ВыводитьВЗаголовокРасшифровку Тогда
//			ТекстЗаголовкаСообщения = СтрЗаменить(ШаблонЗаголовкаСообщения, "%КонтрагентПредставление%", СокрЛП(ВыборкаЗаписей.КонтрагентПредставление));
//			СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ, МассивСообщений);
//			ВыводитьВЗаголовокРасшифровку = Ложь;
//		КонецЕсли;
//		
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(ВыборкаЗаписей.НоменклатураПредставление, ВыборкаЗаписей.ХарактеристикаПредставление, ВыборкаЗаписей.ПартияПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", ПредставлениеНоменклатуры);
//		
//		Если ВыборкаЗаписей.КоличествоОстатокЗапасыПринятые <> 0 Тогда
//			
//			ТекстСообщенияКоличество = НСтр("ru = 'остаток %КоличествоОстаток% %ЕдиницаИзмерения%,
//				|недостаточно %Количество% %ЕдиницаИзмерения%'");
//			
//			ТекстСообщенияКоличество = СтрЗаменить(ТекстСообщенияКоличество, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокЗапасыПринятые));
//			ТекстСообщенияКоличество = СтрЗаменить(ТекстСообщенияКоличество, "%Количество%", Строка(-ВыборкаЗаписей.КоличествоОстатокЗапасыПринятые));
//			ТекстСообщенияКоличество = СтрЗаменить(ТекстСообщенияКоличество, "%ЕдиницаИзмерения%", СокрЛП(ВыборкаЗаписей.ЕдиницаИзмеренияПредставление));
//			
//			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстСообщенияКоличество;
//			
//		КонецЕсли;
//		
//		Если ВыборкаЗаписей.СуммаРасчетовОстатокЗапасыПринятые <> 0 Тогда
//			
//			ТекстСообщенияСумма = НСтр("ru = 'Сумма расчетов:
//				|остаток %СуммаОстаток% %Валюта%,
//				|недостаточно %Сумма% %Валюта%'");
//			
//			ТекстСообщенияСумма = СтрЗаменить(ТекстСообщенияСумма, "%СуммаОстаток%", Строка(ВыборкаЗаписей.СуммаРасчетовЗапасыПринятые));
//			ТекстСообщенияСумма = СтрЗаменить(ТекстСообщенияСумма, "%Сумма%", Строка(-ВыборкаЗаписей.СуммаРасчетовОстатокЗапасыПринятые));
//			ТекстСообщенияСумма = СтрЗаменить(ТекстСообщенияСумма, "%Валюта%", Строка(ВалютаУчета));
//			
//			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстСообщенияСумма;
//			
//		КонецЕсли;
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ, МассивСообщений);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструЗапасыПринятые()

//// Процедура сообщает об ошибках проведения по регистру Запасы принятые.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструЗапасыПринятыеСписком(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает запасов, поступивших от стороннего контрагента'");
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристикаПартия%,
//		|контрагент %КонтрагентПредставление%'");
//		
//	ВалютаУчета = Константы.ВалютаУчета.Получить();
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(ВыборкаЗаписей.НоменклатураПредставление, ВыборкаЗаписей.ХарактеристикаПредставление, ВыборкаЗаписей.ПартияПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", ПредставлениеНоменклатуры);
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КонтрагентПредставление%", СокрЛП(ВыборкаЗаписей.КонтрагентПредставление));
//		
//		Если ВыборкаЗаписей.КоличествоОстатокЗапасыПринятые <> 0 Тогда
//			
//			ТекстСообщенияКоличество = НСтр("ru = 'остаток %КоличествоОстаток% %ЕдиницаИзмерения%,
//				|недостаточно %Количество% %ЕдиницаИзмерения%'");
//			
//			ТекстСообщенияКоличество = СтрЗаменить(ТекстСообщенияКоличество, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокЗапасыПринятые));
//			ТекстСообщенияКоличество = СтрЗаменить(ТекстСообщенияКоличество, "%Количество%", Строка(-ВыборкаЗаписей.КоличествоОстатокЗапасыПринятые));
//			ТекстСообщенияКоличество = СтрЗаменить(ТекстСообщенияКоличество, "%ЕдиницаИзмерения%", СокрЛП(ВыборкаЗаписей.ЕдиницаИзмеренияПредставление));
//			
//			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстСообщенияКоличество;
//			
//		КонецЕсли;
//		
//		Если ВыборкаЗаписей.СуммаРасчетовОстатокЗапасыПринятые <> 0 Тогда
//			
//			ТекстСообщенияСумма = НСтр("ru = 'Сумма расчетов:
//				|остаток %СуммаОстаток% %Валюта%,
//				|недостаточно %Сумма% %Валюта%'");
//			
//			ТекстСообщенияСумма = СтрЗаменить(ТекстСообщенияСумма, "%СуммаОстаток%", Строка(ВыборкаЗаписей.СуммаРасчетовЗапасыПринятые));
//			ТекстСообщенияСумма = СтрЗаменить(ТекстСообщенияСумма, "%Сумма%", Строка(-ВыборкаЗаписей.СуммаРасчетовОстатокЗапасыПринятые));
//			ТекстСообщенияСумма = СтрЗаменить(ТекстСообщенияСумма, "%Валюта%", Строка(ВалютаУчета));
//			
//			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстСообщенияСумма;
//			
//		КонецЕсли;
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструЗапасыПринятыеСписком()

//// Процедура сообщает об ошибках проведения по регистру Запасы в разрезе ГТД.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструЗапасыВРазрезеГТД(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает запасов в разрезе ГТД'");
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//		
//	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристикаПартия%,
//		|остаток %КоличествоОстаток% %ЕдиницаИзмерения%,
//		|недостаточно %Количество% %ЕдиницаИзмерения%'");
//		
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(ВыборкаЗаписей.НоменклатураПредставление, ВыборкаЗаписей.ХарактеристикаПредставление, ВыборкаЗаписей.ПартияПредставление);
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры + " / """ + СокрЛП(ВыборкаЗаписей.НомерГТДПредставление) + """";
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры + " / """ + СокрЛП(ВыборкаЗаписей.СтранаПроисхожденияПредставление) + """";
//		
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", ПредставлениеНоменклатуры);
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокЗапасыВРазрезеГТД));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-ВыборкаЗаписей.КоличествоОстатокЗапасыВРазрезеГТД));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", СокрЛП(ВыборкаЗаписей.ЕдиницаИзмеренияПредставление));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструЗапасыВРазрезеГТД()

//// Процедура сообщает об ошибках проведения по регистру Заказы покупателей.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструЗаказыПокупателей(ДокОбъект, ВыборкаЗаписей, Отказ, МассивСообщений = Неопределено) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Оформлено больше, чем указано в заказе покупателя'");
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ, МассивСообщений);
//	
//	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристикаПартия%,
//		|остаток по заказу %КоличествоОстаток% %ЕдиницаИзмерения%,
//		|превышает на %Количество% %ЕдиницаИзмерения%. %ЗаказПокупателя%'");
//		
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(ВыборкаЗаписей.НоменклатураПредставление, ВыборкаЗаписей.ХарактеристикаПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", ПредставлениеНоменклатуры);
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокЗаказыПокупателей));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-ВыборкаЗаписей.КоличествоОстатокЗаказыПокупателей));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", СокрЛП(ВыборкаЗаписей.ЕдиницаИзмеренияПредставление));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗаказПокупателя%", СокрЛП(ВыборкаЗаписей.ЗаказПредставление));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ, МассивСообщений);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструЗаказыПокупателей()

//// Процедура сообщает об ошибках проведения по регистру Заказы поставщикам.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструЗаказыПоставщикам(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Оформлено больше, чем указано в заказе поставщику'");
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//		
//	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристикаПартия%,
//		|остаток по заказу %КоличествоОстаток% %ЕдиницаИзмерения%,
//		|превышает на %Количество% %ЕдиницаИзмерения%
//		|%ЗаказПоставщику%'");
//		
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(ВыборкаЗаписей.НоменклатураПредставление, ВыборкаЗаписей.ХарактеристикаПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", ПредставлениеНоменклатуры);
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокЗаказыПоставщикам));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-ВыборкаЗаписей.КоличествоОстатокЗаказыПоставщикам));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", СокрЛП(ВыборкаЗаписей.ЕдиницаИзмеренияПредставление));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗаказПоставщику%", СокрЛП(ВыборкаЗаписей.ЗаказПоставщикуПредставление));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструЗаказыПоставщикам()

//// Процедура сообщает об ошибках проведения по регистру Заказы на производство.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструЗаказыНаПроизводство(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Оформлено больше, чем указано в заказе на производство'");
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//		
//	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристикаПартия%,
//		|остаток по заказу %КоличествоОстаток% %ЕдиницаИзмерения%,
//		|превышает на %Количество% %ЕдиницаИзмерения%
//		|%ЗаказНаПроизводство%'");
//		
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(ВыборкаЗаписей.НоменклатураПредставление, ВыборкаЗаписей.ХарактеристикаПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", ПредставлениеНоменклатуры);
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокЗаказыНаПроизводство));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-ВыборкаЗаписей.КоличествоОстатокЗаказыНаПроизводство));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", СокрЛП(ВыборкаЗаписей.ЕдиницаИзмеренияПредставление));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗаказНаПроизводство%", СокрЛП(ВыборкаЗаписей.ЗаказНаПроизводствоПредставление));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструЗаказыНаПроизводство()

//// Процедура сообщает об ошибках проведения по регистру Потребность в запасах.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструПотребностьВЗапасах(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Оформлено больше, чем есть потребность в запасах'");
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//	
//	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристикаПартия%,
//		|потребность %КоличествоОстаток% %ЕдиницаИзмерения%,
//		|превышает на %Количество% %ЕдиницаИзмерения%
//		|%ЗаказПокупателя%'");
//		
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(ВыборкаЗаписей.НоменклатураПредставление, ВыборкаЗаписей.ХарактеристикаПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", ПредставлениеНоменклатуры);
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокПотребностьВЗапасах));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-ВыборкаЗаписей.КоличествоОстатокПотребностьВЗапасах));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", СокрЛП(ВыборкаЗаписей.ЕдиницаИзмеренияПредставление));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗаказПокупателя%", СокрЛП(ВыборкаЗаписей.ЗаказПокупателяПредставление));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструПотребностьВЗапасах()

//// Процедура сообщает об ошибках проведения по регистру Размещение заказов.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструРазмещениеЗаказов(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Оформлено больше, чем размещено запасов в заказах'");
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//		
//	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристикаПартия%,
//		|размещено %КоличествоОстаток% %ЕдиницаИзмерения%
//		|в %ИсточникОбеспечения%,
//		|превышает на %Количество% %ЕдиницаИзмерения%
//		|по %ЗаказПокупателя%'");
//		
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(ВыборкаЗаписей.НоменклатураПредставление, ВыборкаЗаписей.ХарактеристикаПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", ПредставлениеНоменклатуры);
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокРазмещениеЗаказов));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-ВыборкаЗаписей.КоличествоОстатокРазмещениеЗаказов));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", СокрЛП(ВыборкаЗаписей.ЕдиницаИзмеренияПредставление));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗаказПокупателя%", СокрЛП(ВыборкаЗаписей.ЗаказПокупателяПредставление));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИсточникОбеспечения%", СокрЛП(ВыборкаЗаписей.ИсточникОбеспеченияПредставление));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструРазмещениеЗаказов()

//// Процедура сообщает об ошибках проведения по регистру Денежные средства.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредства(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает денежных средств'");
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//	
//	ШаблонСообщения = НСтр("ru = '%СчетКасса%: %ПредставлениеСчетаКассы%,
//		|остаток %СуммаОстаток% %Валюта%,
//		|недостаточно %Сумма% %Валюта%'");
//		
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		ПредставлениеСчетаКассы = ПредставлениеБанковскогоСчетаКассы(ВыборкаЗаписей.БанковскийСчетКассаПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%ПредставлениеСчетаКассы%", ПредставлениеСчетаКассы);
//		
//		Если ВыборкаЗаписей.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
//			
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетКасса%", "Счет");
//			
//		Иначе
//			
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетКасса%", "Касса");
//			
//		КонецЕсли;
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаОстаток%", Строка(ВыборкаЗаписей.ОстатокДенежныхСредств));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сумма%", Строка(-ВыборкаЗаписей.СуммаВалОстаток));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СокрЛП(ВыборкаЗаписей.ВалютаПредставление));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредства()

//// Процедура сообщает об ошибках проведения по регистру Денежные средства с учетом резервов.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваСУчетомРезервов(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ПроведениеСверхРезерваРазрешено = РольДоступна("ПроведениеДенежныхДокументовСверхРезерва");
//	
//	Если ПроведениеСверхРезерваРазрешено Тогда
//		ЗаголовокОшибки = НСтр("ru = 'Внимание:'");
//		ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Превышен остаток денег с учетом резервов'");
//		СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения);
//	Иначе
//		ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//		ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает свободных денежных средств'");
//		СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//	КонецЕсли;
//	
//	ШаблонСообщения = НСтр("ru = '%СчетКасса%: %ПредставлениеСчетаКассы%,
//		|в резерве %ВРезерве% %Валюта%,
//		|недостаточно свободного остатка %СвободныйОстаток% %Валюта%'");
//		
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		ПредставлениеСчетаКассы = ПредставлениеБанковскогоСчетаКассы(ВыборкаЗаписей.БанковскийСчетКассаПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%ПредставлениеСчетаКассы%", ПредставлениеСчетаКассы);
//		
//		Если ВыборкаЗаписей.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетКасса%", "Счет");
//		Иначе
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетКасса%", "Касса");
//		КонецЕсли;
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВРезерве%", Строка(ВыборкаЗаписей.ВРезерве));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СвободныйОстаток%", Строка(ВыборкаЗаписей.ВРезерве - ВыборкаЗаписей.ОстатокДенежныхСредств));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СокрЛП(ВыборкаЗаписей.ВалютаПредставление));
//		
//		Если ПроведениеСверхРезерваРазрешено Тогда
//			СообщитьОбОшибке(ДокОбъект, ТекстСообщения);
//		Иначе
//			СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредства()

//Процедура СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваВРезерве(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'По документу %Документ% имеется израсходованый резерв денег'");
//	ТекстЗаголовкаСообщения = СтрЗаменить(ТекстЗаголовкаСообщения, "%Документ%", Строка(ДокОбъект));
//	
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//	
//	ШаблонСообщения = НСтр("ru = '%СчетКасса%: %ПредставлениеСчетаКассы%,
//		|отрицательный остаток резерва: %ВРезерве% %Валюта%'");
//		
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		ПредставлениеСчетаКассы = ПредставлениеБанковскогоСчетаКассы(ВыборкаЗаписей.БанковскийСчетКассаПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%ПредставлениеСчетаКассы%", ПредставлениеСчетаКассы);
//		
//		Если ВыборкаЗаписей.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
//			
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетКасса%", "Счет");
//			
//		Иначе
//			
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетКасса%", "Касса");
//			
//		КонецЕсли;
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВРезерве%", Строка(ВыборкаЗаписей.ВРезерве));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СокрЛП(ВыборкаЗаписей.Валюта));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредства()


//// Процедура сообщает об ошибках проведения по регистру Денежные средства в кассах ККМ.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваВКассахККМ(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает денежных средств в кассе ККМ'");
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//	
//	ШаблонСообщения = НСтр("ru = 'Касса ККМ: %ПредставлениеКассыККМ%,
//		|остаток %СуммаОстаток% %Валюта%,
//		|недостаточно %Сумма% %Валюта%'"
//	);
//		
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		ПредставлениеКассыККМ = ПредставлениеБанковскогоСчетаКассы(ВыборкаЗаписей.КассаККМПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%ПредставлениеКассыККМ%", ПредставлениеКассыККМ);
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаОстаток%", Строка(ВыборкаЗаписей.ОстатокДенежныхСредств));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сумма%", Строка(-ВыборкаЗаписей.СуммаВалОстаток));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СокрЛП(ВыборкаЗаписей.ВалютаПредставление));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваВКассахККМ()

//// Процедура сообщает об ошибках проведения по регистру Расчеты с подотчетниками.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПодотчетниками(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Расчеты с подотчетным лицом станут отрицательными'");
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//	
//	ШаблонСообщения = НСтр("ru = '%ПредставлениеПодотчетногоЛица%,
//		|Остаток выданных подотчетному лицу денежных средств: %ОстатокУПодотчетногоЛица% %ВалютаПредставление%'");
//		
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		ПредставлениеПодотчетногоЛица = ПредставлениеПодотчетногоЛица(ВыборкаЗаписей.СотрудникПредставление, ВыборкаЗаписей.ВалютаПредставление, ВыборкаЗаписей.ДокументПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%ПредставлениеПодотчетногоЛица%", ПредставлениеПодотчетногоЛица);
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОстатокУПодотчетногоЛица%", Строка(ВыборкаЗаписей.ОстатокУПодотчетногоЛица));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВалютаПредставление%", СокрЛП(ВыборкаЗаписей.ВалютаПредставление));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПодотчетниками()

//// Процедура сообщает об ошибках проведения по регистру Расчеты с поставщиками.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПоставщиками(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Нет возможности зафиксировать расчеты с поставщиками'");
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//	
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		Если ВыборкаЗаписей.ДвиженияДенежныхДокументов Тогда
//			
//			Если ВыборкаЗаписей.ТипРасчетов = Перечисления.ТипыРасчетов.Долг Тогда
//				ТекстСообщения = НСтр(
//					"ru = '%ПредставлениеКонтрагента% - остаток задолженности перед поставщиком по документу расчетов меньше оплаченной суммы.
//					|Разнесенная сумма платежа: %СуммаВалПриЗаписи% %ВалютаПредставление%.
//					|Остаток задолженности перед поставщиком: %СуммаОстаткаЗадолженности% %ВалютаПредставление%.'"
//				);
//				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаВалПриЗаписи%", Строка(ВыборкаЗаписей.СуммаВалПриЗаписи));
//				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаОстаткаЗадолженности%", Строка(ВыборкаЗаписей.СуммаОстаткаЗадолженности));
//			КонецЕсли;
//			
//			Если ВыборкаЗаписей.ТипРасчетов = Перечисления.ТипыРасчетов.Аванс Тогда
//				Если ВыборкаЗаписей.СуммаНепогашенныхАвансов = 0 Тогда
//					ТекстСообщения = НСтр(
//						"ru = '%ПредставлениеКонтрагента% - выданные по документу авансы поставщику уже полностью зачтены в товарных документах.'"
//					);
//				Иначе
//					ТекстСообщения = НСтр(
//						"ru = '%ПредставлениеКонтрагента% - выданные по документу авансы поставщику уже частично зачтены в товарных документах.
//						|Остаток незачтенных авансов: %СуммаНепогашенныхАвансов% %ВалютаПредставление%.'"
//					);
//					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаНепогашенныхАвансов%", Строка(ВыборкаЗаписей.СуммаНепогашенныхАвансов));
//				КонецЕсли;
//			КонецЕсли;
//			
//		Иначе
//			
//			Если ВыборкаЗаписей.ТипРасчетов = Перечисления.ТипыРасчетов.Долг Тогда
//				Если ВыборкаЗаписей.СуммаНепогашеннойЗадолженности = 0 Тогда
//					ТекстСообщения = НСтр(
//						"ru = '%ПредставлениеКонтрагента% - задолженность перед поставщиком по документу уже полностью оплачена.'"
//					);
//				Иначе
//					ТекстСообщения = НСтр(
//						"ru = '%ПредставлениеКонтрагента% - задолженность перед поставщиком по документу уже частично оплачена.
//						|Остаток непогашенной суммы задолженности: %СуммаНепогашеннойЗадолженности% %ВалютаПредставление%.'"
//					);
//					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаНепогашеннойЗадолженности%", Строка(ВыборкаЗаписей.СуммаНепогашеннойЗадолженности));
//				КонецЕсли;
//			КонецЕсли;
//			Если ВыборкаЗаписей.ТипРасчетов = Перечисления.ТипыРасчетов.Аванс Тогда
//				ТекстСообщения = НСтр(
//					"ru = '%ПредставлениеКонтрагента% - зачитываемая сумма авансов не может быть больше остатка выданных авансов поставщику.
//					|Зачитываемая сумма: %СуммаВалПриЗаписи% %ВалютаПредставление%
//					|Остаток выданных авансов: %СуммаВыданныхАвансов% %ВалютаПредставление%.'"
//				);
//				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаВалПриЗаписи%", Строка(ВыборкаЗаписей.СуммаВалПриЗаписи));
//				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаВыданныхАвансов%", Строка(ВыборкаЗаписей.СуммаВыданныхАвансов));
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеКонтрагента%", ПредставлениеКонтрагента(ВыборкаЗаписей.КонтрагентПредставление, ВыборкаЗаписей.ДоговорПредставление, ВыборкаЗаписей.ДокументПредставление, ВыборкаЗаписей.ЗаказПредставление, ВыборкаЗаписей.ТипРасчетовПредставление));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВалютаПредставление%", СокрЛП(ВыборкаЗаписей.ВалютаПредставление));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПоставщиками()

//// Процедура сообщает об ошибках проведения по регистру Расчеты с покупателями.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПокупателями(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Нет возможности зафиксировать расчеты с покупателями'");
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//		
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		Если ВыборкаЗаписей.ДвиженияДенежныхДокументов Тогда
//			
//			Если ВыборкаЗаписей.ТипРасчетов = Перечисления.ТипыРасчетов.Долг Тогда
//				ТекстСообщения = НСтр(
//					"ru = '%ПредставлениеКонтрагента% - остаток задолженность покупателя по документу расчетов меньше разнесенной суммы платежа.
//					|Разнесенная сумма платежа: %СуммаВалПриЗаписи% %ВалютаПредставление%.
//					|Остаток задолженности покупателя: %СуммаОстаткаЗадолженности% %ВалютаПредставление%.'"
//				);
//				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаВалПриЗаписи%", Строка(ВыборкаЗаписей.СуммаВалПриЗаписи));
//				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаОстаткаЗадолженности%", Строка(ВыборкаЗаписей.СуммаОстаткаЗадолженности));
//			КонецЕсли;
//			
//			Если ВыборкаЗаписей.ТипРасчетов = Перечисления.ТипыРасчетов.Аванс Тогда
//				Если ВыборкаЗаписей.СуммаНепогашенныхАвансов = 0 Тогда
//					ТекстСообщения = НСтр(
//						"ru = '%ПредставлениеКонтрагента% - полученные по документу авансы от покупателя уже полностью зачтены в товарных документах.'"
//					);
//				Иначе
//					ТекстСообщения = НСтр(
//						"ru = '%ПредставлениеКонтрагента% - полученные по документу авансы от покупателя уже частично зачтены в товарных документах.
//						|Остаток незачтенных авансов: %СуммаНепогашенныхАвансов% %ВалютаПредставление%.'"
//					);
//					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаНепогашенныхАвансов%", Строка(ВыборкаЗаписей.СуммаНепогашенныхАвансов));
//				КонецЕсли;
//			КонецЕсли;
//			
//		Иначе
//			
//			Если ВыборкаЗаписей.ТипРасчетов = Перечисления.ТипыРасчетов.Долг Тогда
//				Если ВыборкаЗаписей.СуммаНепогашеннойЗадолженности = 0 Тогда
//					ТекстСообщения = НСтр(
//						"ru = '%ПредставлениеКонтрагента% - задолженность покупателя по документу уже полностью оплачена.'"
//					);
//				Иначе
//					ТекстСообщения = НСтр(
//						"ru = '%ПредставлениеКонтрагента% - задолженность покупателя по документу уже частично оплачена.
//						|Остаток непогашенной суммы задолженности: %СуммаНепогашеннойЗадолженности% %ВалютаПредставление%.'"
//					);
//					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаНепогашеннойЗадолженности%", Строка(ВыборкаЗаписей.СуммаНепогашеннойЗадолженности));
//				КонецЕсли;
//			КонецЕсли;
//			
//			Если ВыборкаЗаписей.ТипРасчетов = Перечисления.ТипыРасчетов.Аванс Тогда
//				ТекстСообщения = НСтр(
//					"ru = '%ПредставлениеКонтрагента% - зачитываемая сумма авансов не может быть больше остатка полученных авансов от покупателя.
//					|Зачитываемая сумма: %СуммаВалПриЗаписи% %ВалютаПредставление%
//					|Остаток полученных авансов: %СуммаПолученныхАвансов% %ВалютаПредставление%.'"
//				);
//				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаВалПриЗаписи%", Строка(ВыборкаЗаписей.СуммаВалПриЗаписи));
//				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаПолученныхАвансов%", Строка(ВыборкаЗаписей.СуммаПолученныхАвансов));
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеКонтрагента%", ПредставлениеКонтрагента(ВыборкаЗаписей.КонтрагентПредставление, ВыборкаЗаписей.ДоговорПредставление, ВыборкаЗаписей.ДокументПредставление, ВыборкаЗаписей.ЗаказПредставление, ВыборкаЗаписей.ТипРасчетовПредставление));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВалютаПредставление%", СокрЛП(ВыборкаЗаписей.ВалютаПредставление));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПокупателями()

//// Процедура сообщает об ошибках проведения по регистру Внеоборотные активы.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструВнеоборотныеАктивы(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Возможно имущество уже списано или передано'");
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//		
//	ШаблонСообщения = НСтр("ru = 'Имущество: %НоменклатураХарактеристикаПартия%,
//		|остаточная стоимость имущества: %Стоимость%'");
//		
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", СокрЛП(ВыборкаЗаписей.ВнеоборотныйАктивПредставление));
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Стоимость%", Строка(ВыборкаЗаписей.ОстаточнаяСтоимость));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструВнеоборотныеАктивы()

//// Процедура сообщает об ошибках проведения по регистру Суммовой учет в рознице.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструСуммовойУчетВРознице(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ШаблонЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Задолженность розничной точки %СтруктурнаяЕдиницаПредставление% уже погашена'");
//	
//	ШаблонСообщения = НСтр("ru = 'Остаток задолженности (суммовой учет): %ОстатокВРознице% %ВалютаПредставление%'");
//	
//	ВыводитьВЗаголовокРасшифровку = Истина;
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		Если ВыводитьВЗаголовокРасшифровку Тогда
//			ТекстЗаголовкаСообщения = СтрЗаменить(ШаблонЗаголовкаСообщения, "%СтруктурнаяЕдиницаПредставление%", СокрЛП(ВыборкаЗаписей.СтруктурнаяЕдиницаПредставление));
//			СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//			ВыводитьВЗаголовокРасшифровку = Ложь;
//		КонецЕсли;
//		
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%ОстатокВРознице%", Строка(ВыборкаЗаписей.ОстатокВРознице)); 
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВалютаПредставление%", СокрЛП(ВыборкаЗаписей.ВалютаПредставление)); 
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструСуммовойУчетВРознице()

//// Процедура сообщает об ошибках проведения по регистру Серийные номера.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструСерийныеНомера(ДокОбъект, ВыборкаЗаписей, Отказ, МассивСообщений = Неопределено) Экспорт
//	
//	Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах")
//		И НЕ Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить() Тогда
//		ЗаголовокОшибки = НСтр("ru = 'Внимание:'");
//	Иначе
//		ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	КонецЕсли;
//	
//	ШаблонЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает серийных номеров %ТипСтруктурнойЕдиницы% %СтруктурнаяЕдиницаПредставление%'");
//	
//	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристикаПартия%,
//		|серийный номер %СерийныйНомер%'");
//		
//	ВыводитьВЗаголовокРасшифровку = Истина;
//	УчетПоНесколькимСкладам = Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить();
//	УчетПоНесколькимПодразделениям = Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить();
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		Если ВыводитьВЗаголовокРасшифровку Тогда
//			Если (НЕ УчетПоНесколькимСкладам И ВыборкаЗаписей.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад)
//				ИЛИ (НЕ УчетПоНесколькимПодразделениям И ВыборкаЗаписей.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение)Тогда
//				ПредставлениеСтруктурнойЕдиницы = "";
//			Иначе
//				Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ЯчейкаПредставление",ВыборкаЗаписей) Тогда
//					ПредставлениеСтруктурнойЕдиницы = ПредставлениеСтруктурнойЕдиницы(ВыборкаЗаписей.СтруктурнаяЕдиницаПредставление, ВыборкаЗаписей.ЯчейкаПредставление);
//				Иначе
//					ПредставлениеСтруктурнойЕдиницы = ПредставлениеСтруктурнойЕдиницы(ВыборкаЗаписей.СтруктурнаяЕдиницаПредставление);
//				КонецЕсли; 
//				
//			КонецЕсли;
//			ТекстЗаголовкаСообщения = СтрЗаменить(ШаблонЗаголовкаСообщения, "%СтруктурнаяЕдиницаПредставление%", ПредставлениеСтруктурнойЕдиницы);
//			ТекстЗаголовкаСообщения = СтрЗаменить(ТекстЗаголовкаСообщения, "%ТипСтруктурнойЕдиницы%", ПолучитьПредставлениеТипаСтруктурныхЕдиниц(ВыборкаЗаписей.ТипСтруктурнойЕдиницы));
//			СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ, МассивСообщений);
//			ВыводитьВЗаголовокРасшифровку = Ложь;
//		КонецЕсли;
//		
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(ВыборкаЗаписей.НоменклатураПредставление, ВыборкаЗаписей.ХарактеристикаПредставление, ВыборкаЗаписей.ПартияПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", ПредставлениеНоменклатуры);
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СерийныйНомер%", Строка(ВыборкаЗаписей.СерийныйНомерПредставление));
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ, МассивСообщений);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструСерийныеНомера()

//// Процедура сообщает об ошибках проведения по регистру Товары в ремонте.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыВРемонте(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ШаблонЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Нет в наличии %ТипСтруктурнойЕдиницы% %СтруктурнаяЕдиницаПредставление%'");
//	
//	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристика%'");
//		
//	ВыводитьВЗаголовокРасшифровку = Истина;
//	УчетПоНесколькимСкладам = Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить();
//	УчетПоНесколькимПодразделениям = Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить();
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		Если ВыводитьВЗаголовокРасшифровку Тогда
//			Если (НЕ УчетПоНесколькимСкладам И ВыборкаЗаписей.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад)
//				ИЛИ (НЕ УчетПоНесколькимПодразделениям И ВыборкаЗаписей.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение)Тогда
//				ПредставлениеСтруктурнойЕдиницы = "";
//			Иначе
//				ПредставлениеСтруктурнойЕдиницы = ПредставлениеСтруктурнойЕдиницы(ВыборкаЗаписей.СтруктурнаяЕдиницаПредставление);
//			КонецЕсли;
//			ТекстЗаголовкаСообщения = СтрЗаменить(ШаблонЗаголовкаСообщения, "%СтруктурнаяЕдиницаПредставление%", ПредставлениеСтруктурнойЕдиницы);
//			ТекстЗаголовкаСообщения = СтрЗаменить(ТекстЗаголовкаСообщения, "%ТипСтруктурнойЕдиницы%", ПолучитьПредставлениеТипаСтруктурныхЕдиниц(ВыборкаЗаписей.ТипСтруктурнойЕдиницы));
//			СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//			ВыводитьВЗаголовокРасшифровку = Ложь;
//		КонецЕсли;
//		
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(ВыборкаЗаписей.НоменклатураПредставление, ВыборкаЗаписей.ХарактеристикаПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%", ПредставлениеНоменклатуры);
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструСерийныеНомера()

//// Процедура сообщает об ошибках проведения по регистру Товары в ремонте.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыПереданныеВРемонте(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ШаблонЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'В сервисном центре %СервисныйЦентрПредставление% нет в наличии '");
//	
//	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристика%'");
//		
//	ВыводитьВЗаголовокРасшифровку = Истина;
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		Если ВыводитьВЗаголовокРасшифровку Тогда

//			ТекстЗаголовкаСообщения = СтрЗаменить(ШаблонЗаголовкаСообщения, "%СервисныйЦентрПредставление%", ВыборкаЗаписей.СервисныйЦентрПредставление);
//			СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//			ВыводитьВЗаголовокРасшифровку = Ложь;
//		КонецЕсли;
//		
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(ВыборкаЗаписей.НоменклатураПредставление, ВыборкаЗаписей.ХарактеристикаПредставление);
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%", ПредставлениеНоменклатуры);
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструСерийныеНомера()

//// Процедура сообщает об ошибках проведения по регистру Запасы.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструЗапасыОприходование(ДокОбъект, ВыборкаЗаписей, Отказ, МассивСообщений = Неопределено) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ШаблонЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Попытка оприходовать номенклатуру с нулевой стоимостью.'");
//	
//	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристикаПартия%'");
//	
//	ВыводитьВЗаголовокРасшифровку = Истина;
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(ВыборкаЗаписей.НоменклатураПредставление, ВыборкаЗаписей.ХарактеристикаПредставление, ВыборкаЗаписей.ПартияПредставление);
//		ТекстСообщения = ШаблонЗаголовкаСообщения + Символы.ПС + СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", ПредставлениеНоменклатуры);
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ, МассивСообщений);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструЗапасы()

//// Процедура сообщает об ошибках проведения по регистру Подарочные сертификаты.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструПодарочныеСертификаты(ДокОбъект, ВыборкаЗаписей, Отказ, МассивСообщений = Неопределено) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	
//	ШаблонЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает остатка по подарочным сертификатам'");
//	
//	ШаблонСообщения = НСтр("ru = 'Вид сертификата: %ПодарочныйСертификат%,
//		|номер сертификата %НомерСертификата%'");
//		
//	ВыводитьВЗаголовокРасшифровку = Истина;
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		Если ВыводитьВЗаголовокРасшифровку Тогда
//			ТекстЗаголовкаСообщения = ШаблонЗаголовкаСообщения;
//			СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ, МассивСообщений);
//			ВыводитьВЗаголовокРасшифровку = Ложь;
//		КонецЕсли;
//		
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%ПодарочныйСертификат%", Строка(ВыборкаЗаписей.ПодарочныйСертификат));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСертификата%", Строка(ВыборкаЗаписей.НомерСертификата));
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ, МассивСообщений);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//// Процедура сообщает об ошибках проведения по регистру Бонусные баллы.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструБонусныеБаллы(ДокОбъект, ВыборкаЗаписей, Отказ, МассивСообщений = Неопределено) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	
//	ШаблонЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает остатка по бонусным баллам'");
//	
//	ШаблонСообщения = НСтр("ru = 'Бонусная карта: %БонуснаяКарта%'");
//		
//	ВыводитьВЗаголовокРасшифровку = Истина;
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		Если ВыводитьВЗаголовокРасшифровку Тогда
//			ТекстЗаголовкаСообщения = ШаблонЗаголовкаСообщения;
//			СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ, МассивСообщений);
//			ВыводитьВЗаголовокРасшифровку = Ложь;
//		КонецЕсли;
//		
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%БонуснаяКарта%", Строка(ВыборкаЗаписей.БонуснаяКарта));
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ, МассивСообщений);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//// Процедура сообщает об ошибках проведения по регистру Денежные средства к поступлению.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваКПоступлению(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает денежных средств к поступлению'");
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//	
//	ШаблонСообщения = НСтр("ru = 'По документу %ДокументПередачиПредставление%,
//		|передано %СуммаОстаток% %Валюта%,
//		|недостаточно %Сумма% %Валюта%'"
//	);
//		
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%ДокументПередачиПредставление%", ВыборкаЗаписей.ДокументПередачиПредставление);
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаОстаток%", Строка(ВыборкаЗаписей.ОстатокДенежныхСредств));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сумма%", Строка(-ВыборкаЗаписей.СуммаВалОстаток));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СокрЛП(ВыборкаЗаписей.ВалютаПредставление));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваВКассахККМ()

//#КонецОбласти

//#Область ПроцедурыИФункцииПодсистемыЗУП

//&НаСервере
//// Процедура добавляет в структуру параметры формулы.
////
//Процедура ДобавитьПараметрыВСтруктуру(СтрокаФормулы, СтруктураПараметров, Отказ = Ложь) Экспорт

//	Формула = СтрокаФормулы;
//	
//	НачОперанда = СтрНайти(Формула, "[");
//	КонОперанда = СтрНайти(Формула, "]");
//     
//	ЕстьОперанд = Истина;
//	Пока ЕстьОперанд Цикл
//     
//		Если НачОперанда <> 0 И КонОперанда <> 0 Тогда
//			
//            Идентификатор = СокрЛП(Сред(Формула, НачОперанда+1, КонОперанда - НачОперанда - 1));
//            Формула = Прав(Формула, СтрДлина(Формула) - КонОперанда);   
//			
//			Попытка
//				Если НЕ СтруктураПараметров.Свойство(Идентификатор) Тогда
//					СтруктураПараметров.Вставить(Идентификатор);
//				КонецЕсли;
//			Исключение
//				Отказ = Истина;
//			    Прервать;
//			КонецПопытки 
//			 
//		КонецЕсли;     
//          
//		НачОперанда = СтрНайти(Формула, "[");
//		КонОперанда = СтрНайти(Формула, "]");
//          
//		Если НЕ (НачОперанда <> 0 И КонОперанда <> 0) Тогда
//			ЕстьОперанд = Ложь;
//        КонецЕсли;     
//               
//	КонецЦикла;	

//КонецПроцедуры

//// Функция возвращает значение параметра
////
//Функция РассчитатьЗначениеПараметра(СтруктураПараметров, ПараметрРасчета, ТекстОшибки = "") Экспорт
//	
//	// 1. Создание запроса
//	Запрос = Новый Запрос;
//	Запрос.Текст = ПараметрРасчета.Запрос;
//	
//	// 2. Контроль заполнения всех параметров запроса
//	Для каждого ПараметрЗапроса Из ПараметрРасчета.ПараметрыЗапроса Цикл
//		
//		Если ЗначениеЗаполнено(ПараметрЗапроса.Значение) Тогда
//			
//			Запрос.УстановитьПараметр(СтрЗаменить(ПараметрЗапроса.Имя, ".", ""), ПараметрЗапроса.Значение);
//			
//		Иначе
//			
//			Если СтруктураПараметров.Свойство(СтрЗаменить(ПараметрЗапроса.Имя, ".", "")) Тогда
//				
//				СтрокаПериод = ПараметрРасчета.ПериодыОтбораДанных.Найти(СтрЗаменить(ПараметрЗапроса.Имя, ".", ""), "ИмяДатаГраницы");
//				Если СтрокаПериод <> Неопределено  Тогда
//					
//					Если СтрокаПериод.ПериодСдвиг <> 0 Тогда
//						НовыйПериод = ДобавитьИнтервал(СтруктураПараметров[СтрЗаменить(ПараметрЗапроса.Имя, ".", "")], СтрокаПериод.ПериодСмещения, СтрокаПериод.ПериодСдвиг);
//						Запрос.УстановитьПараметр(СтрЗаменить(ПараметрЗапроса.Имя, ".", ""), НовыйПериод);
//					Иначе
//						Запрос.УстановитьПараметр(СтрЗаменить(ПараметрЗапроса.Имя, ".", ""), СтруктураПараметров[СтрЗаменить(ПараметрЗапроса.Имя, ".", "")]);
//					КонецЕсли;
//					
//				Иначе
//					
//					Запрос.УстановитьПараметр(СтрЗаменить(ПараметрЗапроса.Имя, ".", ""), СтруктураПараметров[СтрЗаменить(ПараметрЗапроса.Имя, ".", "")]);
//					
//				КонецЕсли; 
//				
//			ИначеЕсли ЗначениеЗаполнено(ТипЗнч(ПараметрЗапроса.Значение)) Тогда
//				
//				Запрос.УстановитьПараметр(СтрЗаменить(ПараметрЗапроса.Имя, ".", ""), ПараметрЗапроса.Значение);
//				
//			Иначе
//				
//				Сообщение = Новый СообщениеПользователю();
//				Сообщение.Текст = НСтр("ru = 'Не задано значение параметра запроса '") + ПараметрЗапроса.Имя + ТекстОшибки;
//				Сообщение.Сообщить();
//				
//				Возврат 0;
//			КонецЕсли;
//			
//		КонецЕсли; 
//		
//	КонецЦикла; 
//	
//	// 4. Выполнение запроса
//	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
//	Если РезультатЗапроса.Количество() = 0 Тогда
//		
//		Возврат 0;
//		
//	Иначе
//		
//		Возврат РезультатЗапроса[0][0];
//		
//	КонецЕсли;
//	
//КонецФункции // РассчитатьЗначениеПараметра()

//// Функция добавляет интервал к дате
////
//// Параметры:
////     Периодичность (Перечисления.Периодичность)     - периодичность планирования по сценарию.
////     ДатаВПериоде (Дата)                                   - произвольная дата
////     Смещение (число)                                   - определяет направление и количество периодов, в котором сдвигается дата
////
//// Возвращаемое значение:
////     Дата, отстоящая от исходной на заданное количество периодов 
////
//Функция ДобавитьИнтервал(ДатаПериода, Периодичность, Смещение) Экспорт

//     Если Смещение = 0 Тогда
//          НоваяДатаПериода = ДатаПериода;
//          
//     ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
//          НоваяДатаПериода = НачалоДня(ДатаПериода + Смещение * 24 * 3600);
//          
//     ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
//          НоваяДатаПериода = НачалоНедели(ДатаПериода + Смещение * 7 * 24 * 3600);
//          
//     ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
//          НоваяДатаПериода = ДобавитьМесяц(ДатаПериода, Смещение);
//          
//     ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
//          НоваяДатаПериода = ДобавитьМесяц(ДатаПериода, Смещение * 3);
//          
//     ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
//          НоваяДатаПериода = ДобавитьМесяц(ДатаПериода, Смещение * 12);
//          
//     Иначе
//          НоваяДатаПериода=НачалоДня(ДатаПериода) + Смещение * 24 * 3600;
//          
//     КонецЕсли;

//     Возврат НоваяДатаПериода;

//КонецФункции // ДобавитьИнтервал()

//// Получает счет затрат по умолчанию вида начисления.
////
//// Параметры:
////  СтруктураДанных - Структура, содержащая реквизиты объекта, которые требуется
////                 получить и заполненная реквизитами, которые требуются для
////                 получения.
////
//Процедура ПолучитьСчетЗатратВидаНачисления(СтруктураДанных) Экспорт
//	
//	ВидНачисленияУдержания = СтруктураДанных.ВидНачисленияУдержания;
//	СчетЗатрат = ВидНачисленияУдержания.СчетЗатрат;
//	
//	Если ВидНачисленияУдержания.Тип = Перечисления.ТипыНачисленийИУдержаний.Налог Тогда
//		
//		СчетЗатрат = ВидНачисленияУдержания.ВидНалога.СчетУчета;
//		
//		Если СчетЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Кредиторы Тогда
//			
//			СчетЗатрат = ПланыСчетов.Управленческий.ПустаяСсылка();
//			
//		КонецЕсли;
//		
//	ИначеЕсли ВидНачисленияУдержания.Тип = Перечисления.ТипыНачисленийИУдержаний.Начисление Тогда
//		
//		Если ЗначениеЗаполнено(СтруктураДанных.СтруктурнаяЕдиница) Тогда
//			
//			ТипСчета = СчетЗатрат.ТипСчета;
//			Если СтруктураДанных.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение
//				И НЕ (ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты
//					ИЛИ ТипСчета = Перечисления.ТипыСчетов.Расходы
//					ИЛИ ТипСчета = Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы
//					ИЛИ ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты
//					ИЛИ ТипСчета = Перечисления.ТипыСчетов.НезавершенноеПроизводство
//					ИЛИ ТипСчета = Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы) Тогда
//				
//				СчетЗатрат = ПланыСчетов.Управленческий.ПустаяСсылка();
//				
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//	ИначеЕсли ВидНачисленияУдержания.Тип = Перечисления.ТипыНачисленийИУдержаний.Удержание Тогда
//		
//		СчетЗатрат = ПланыСчетов.Управленческий.ПрочиеДоходы;
//		
//	КонецЕсли;
//	
//	СтруктураДанных.СчетЗатрат = СчетЗатрат;
//	СтруктураДанных.ТипСчета = СчетЗатрат.ТипСчета;
//	
//КонецПроцедуры

//// Функция формирует фамилию, имя и отчество одной строкой.
////
//// Параметры
////  Фамилия      - фамилия физ. лица
////  Имя          - имя физ. лица
////  Отчество     - отчество физ. лица
////  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица
////                 включает фамилию и инициалы, если Ложь - фамилию и полностью
////                 имя и отчество.
////
//// Возвращаемое значение 
////  Фамилия, имя, отчество одной строкой.
////
//Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ", ФИОКратко = Истина) Экспорт
//	
//	Если ФИОКратко Тогда
//		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + 
//				?(НЕ ПустаяСтрока(Отчество) , 
//				Лев(Отчество,1)+".", ""), ""), "");
//	Иначе
//		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Имя + 
//				?(НЕ ПустаяСтрока(Отчество) , " " + Отчество, ""), ""), "");
//	КонецЕсли;

//КонецФункции // ПолучитьФамилиюИмяОтчество()

//// Функция выделяет первое слово в предложении
//Функция ВыделитьСлово(ИсходнаяСтрока) Экспорт
//	
//	Буфер = СокрЛ(ИсходнаяСтрока);
//	ПозицияПослПробела = СтрНайти(Буфер, " ");

//	Если ПозицияПослПробела = 0 Тогда
//		ИсходнаяСтрока = "";
//		Возврат Буфер;
//	КонецЕсли;
//	
//	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
//	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
//	
//	Возврат ВыделенноеСлово;
//	
//КонецФункции

//// Функция определяет вводился ли раннее элемент расчета или вид начисления
////
//// ЗначениеИдентификатора (Строка) - значение реквизита Идентификатор элемента справочника ПараметрыРасчетов
////
//Функция ПараметрРасчетаСуществует(ЗначениеИдентификатора) Экспорт
//	
//	Если ПустаяСтрока(ЗначениеИдентификатора)Тогда
//		
//		Возврат Ложь;
//		
//	КонецЕсли;
//	
//	Возврат НЕ Справочники.ПараметрыРасчетов.НайтиПоРеквизиту("Идентификатор", ЗначениеИдентификатора) = Справочники.ПараметрыРасчетов.ПустаяСсылка();
//	
//КонецФункции // ПараметрРасчетаСуществует()

////Функция определяет производилось ли первоначальное заполнение справочника ВидыНачисленийИУдержаний
////
////
//Функция НачальноеЗаполнениеВидовНачисленийУдержанийПроизводилось() Экспорт
//	
//	Запрос = Новый Запрос("Выбрать * Из Справочник.ВидыНачисленийИУдержаний КАК ВидыНиУ ГДЕ НЕ ВидыНиУ.Предопределенный");
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Возврат НЕ РезультатЗапроса.Пустой();
//	
//КонецФункции // НачальноеЗаполнениеВидовНачисленийУдержанийПроизводилось()

//#КонецОбласти

//#Область ПроцедурыИФункцииОтраженияПроводок

//// Формирует структуру таблицы проводок.
////
//Процедура СформироватьТаблицуПроводок(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
//	
//	ТаблицаУправленческий = Новый ТаблицаЗначений;
//	
//	ТаблицаУправленческий.Колонки.Добавить("НомерСтроки");
//	ТаблицаУправленческий.Колонки.Добавить("Период");
//	ТаблицаУправленческий.Колонки.Добавить("Организация");
//	ТаблицаУправленческий.Колонки.Добавить("СценарийПланирования");
//	ТаблицаУправленческий.Колонки.Добавить("СчетДт");
//	ТаблицаУправленческий.Колонки.Добавить("ВалютаДт");
//	ТаблицаУправленческий.Колонки.Добавить("СуммаВалДт");
//	ТаблицаУправленческий.Колонки.Добавить("СчетКт");
//	ТаблицаУправленческий.Колонки.Добавить("ВалютаКт");
//	ТаблицаУправленческий.Колонки.Добавить("СуммаВалКт");
//	ТаблицаУправленческий.Колонки.Добавить("Сумма");
//	ТаблицаУправленческий.Колонки.Добавить("Содержание");
//	
//	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаУправленческий", ТаблицаУправленческий);
//	
//КонецПроцедуры // СформироватьТаблицуПроводок()

//#КонецОбласти

//#Область ПроцедурыИФункцииФормированияПечатныхФорм

//// Процедура заполняет ФИО по наименованию сотрудника
////
//Процедура ФамилияИнициалыПоНаименованию(ФИО, Наименование) Экспорт
//	
//	Если ПустаяСтрока(Наименование) Тогда
//		
//		Возврат;
//		
//	КонецЕсли;
//	
//	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Наименование, " ");
//	Фамилия		= МассивПодстрок[0];
//	Имя 		= ?(МассивПодстрок.Количество() > 1, МассивПодстрок[1], "");
//	Отчество	= ?(МассивПодстрок.Количество() > 2, МассивПодстрок[2], "");
//	
//	ФИО = УправлениеНебольшойФирмойСервер.ПолучитьФамилиюИмяОтчество(Фамилия, Имя, Отчество, Истина);
//	
//КонецПроцедуры // ФИОНаименованиеСотрудника()

//// Устарела. Функция возвращает представление номенклатуры для печати.
////
//Функция ПолучитьПредставлениеНоменклатурыДляПечати(Номенклатура, Характеристика = Неопределено, Артикул = "", СерийныеНомера="")  Экспорт

//	ДопХарактеристики = "";
//	Если Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить() И ЗначениеЗаполнено(Характеристика) Тогда
//		Если ТипЗнч(Характеристика) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
//			ПредставлениеХарактеристики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Характеристика, "НаименованиеДляПечати");
//		Иначе
//			ПредставлениеХарактеристики = СокрЛП(Характеристика);
//		КонецЕсли;
//		ДопХарактеристики = ДопХарактеристики + ПредставлениеХарактеристики;
//	КонецЕсли;
//	
//	ТекстВСкобках = "";
//	Если ДопХарактеристики <> "" И СерийныеНомера<>"" Тогда
//		ТекстВСкобках =  " (" + ДопХарактеристики + " "+СерийныеНомера + ")";
//	ИначеЕсли ДопХарактеристики <> "" Тогда
//		ТекстВСкобках =  " (" + ДопХарактеристики + ")";
//	ИначеЕсли СерийныеНомера<>"" Тогда
//		ТекстВСкобках =  " (" + СерийныеНомера + ")";
//	КонецЕсли;
//	
//	Если ТекстВСкобках<>"" Тогда
//		Возврат СокрЛП(Номенклатура) + ТекстВСкобках;
//	Иначе
//    	Возврат СокрЛП(Номенклатура);
//	КонецЕсли;	 

//КонецФункции // ПолучитьПредставлениеНоменклатурыДляПечати()

//// Процедура предназначена для преобразования номера документа.
////
//// Параметры:
////  Документ     - (ДокументСсылка), документ, чей номер надо получить для
////                 печати.
////
//// Возвращаемое значение.
////  Строка       - номер документа для печати
////
//Функция ПолучитьНомерНаПечать(НомерДокумента, Префикс) Экспорт

//	Если НЕ ЗначениеЗаполнено(НомерДокумента) Тогда 
//		Возврат 0;
//	КонецЕсли;

//	Номер = СокрЛП(НомерДокумента);
//	
//	// удаление префикса из номера документа
//	Если СтрНайти(Номер, Префикс)=1 Тогда 
//		Номер = Сред(Номер, СтрДлина(Префикс)+1);
//	КонецЕсли;
//	
//	ПрефиксОбмен = "";
//			
//	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных")
//		И ЗначениеЗаполнено(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить()) Тогда		
//		ПрефиксОбмен = СокрЛП(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить());		
//	КонецЕсли;
//	
//	// удаление префикса из номера документа
//	Если СтрНайти(Номер, ПрефиксОбмен)=1 Тогда 
//		Номер = Сред(Номер, СтрДлина(ПрефиксОбмен)+1);
//	КонецЕсли;
//	
//	// так же, может остаться "минус" впереди
//	Если Лев(Номер, 1) = "-" Тогда
//		Номер = Сред(Номер, 2);
//	КонецЕсли;
//	
//	// удаление ведущих нулей
//	Пока Лев(Номер, 1)="0" Цикл
//		Номер = Сред(Номер, 2);
//	КонецЦикла;

//	Возврат Номер;

//КонецФункции // ПолучитьНомерНаПечать()

//// Возвращает структуру данных со сводным описанием контрагента.
////
//// Параметры: 
////  СписокСведений - список значений со значениями параметров организации
////   СписокСведений формируется функцией СведенияОЮрФизЛице
////  Список         - список запрашиваемых параметров организации
////  СПрефиксом     - Признак выводить или нет префикс параметра организации
////
//// Возвращаемое значение:
////  Строка - описатель организации / контрагента / физ.лица.
////
//Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт

//	Если ПустаяСтрока(Список) Тогда
//		Список = "ПолноеНаименование,ИНН,Свидетельство,ЮридическийАдрес,Телефоны,Факс,НомерСчета,Банк,БИК,КоррСчет";
//	КонецЕсли; 

//	Результат = "";

//	СоответствиеПараметров = Новый Соответствие();
//	СоответствиеПараметров.Вставить("ПолноеНаименование",		" ");
//	СоответствиеПараметров.Вставить("ИНН",						" ИНН ");
//	СоответствиеПараметров.Вставить("КПП",						" КПП ");
//	СоответствиеПараметров.Вставить("РегистрационныйНомер",		" ");
//	СоответствиеПараметров.Вставить("Свидетельство",			" ");
//	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",	" от ");
//	СоответствиеПараметров.Вставить("ЮридическийАдрес",			" ");
//	СоответствиеПараметров.Вставить("ПочтовыйАдрес",			" ");
//	СоответствиеПараметров.Вставить("Телефоны",					" тел.: ");
//	СоответствиеПараметров.Вставить("Факс",						" факс: ");
//	СоответствиеПараметров.Вставить("НомерСчета",				" р/с ");
//	СоответствиеПараметров.Вставить("Банк",						" в банке ");
//	СоответствиеПараметров.Вставить("БИК",						" БИК ");
//	СоответствиеПараметров.Вставить("КоррСчет",					" к/с ");
//	СоответствиеПараметров.Вставить("КодПоОКПО",				" Код по ОКПО ");

//	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
//	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

//	Для Счетчик = 1 по ЧислоПараметров Цикл

//		ПозЗапятой = СтрНайти(Список, ",");

//		Если ПозЗапятой > 0  Тогда
//			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
//			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
//			
//			Попытка
//				СтрокаДополнения = "";
//				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);
//				
//				Если ТипЗнч(СтрокаДополнения) = Тип("СправочникСсылка.Банки") Тогда
//					СтрокаДополнения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДополнения, "Наименование");
//				КонецЕсли;
//				
//				Если ПустаяСтрока(СтрокаДополнения) Тогда
//					Продолжить;
//				КонецЕсли;
//				
//				Префикс = СоответствиеПараметров[СокрЛП(ИмяПараметра)];
//				Если Не ПустаяСтрока(Результат)  Тогда
//					Результат = Результат + ", ";
//				КонецЕсли; 

//				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;

//			Исключение

//				Сообщение = Новый СообщениеПользователю();
//				Сообщение.Текст = НСтр("ru = 'Не удалось определить значение параметра организации: '") + ИмяПараметра;
//				Сообщение.Сообщить();

//			КонецПопытки;

//		КонецЕсли; 

//	КонецЦикла;

//	Возврат СокрЛП(Результат);

//КонецФункции // ОписаниеОрганизации()

//// Стандартная функция форматирования прописи количества.
////
//// Параметры:
////  Количество   - число, которое мы хотим форматировать.
////
//// Возвращаемое значение:
////  Отформатированная должным образом строковое представление количества.
////
//Функция КоличествоПрописью(Количество) Экспорт

//	ЦелаяЧасть   = Цел(Количество);
//	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

//	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
//		ПараметрыПрописи = ", , , , , , , , 0";
//   	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
//		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";
//   	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
//		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";
//   	Иначе
//		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";
//    КонецЕсли;

//	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);

//КонецФункции // КоличествоПрописью()

//// Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
//// наименование, адрес, номер телефона, банковские реквизиты.
////
//// Параметры: 
////  ЮрФизЛицо    - организация или физическое лицо, о котором собираются
////                 сведения
////  ДатаПериода  - дата, на которую выбираются сведения о ЮрФизЛице
////  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и
////                 отчества.
////
//// Возвращаемое значение:
////  Сведения - собранные сведения.
////
//Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина, БанковскийСчет = Неопределено) Экспорт
//	
//	Сведения = Новый Структура("Представление, ПолноеНаименование, КодПоОКПО, ИНН, КПП, Телефоны, Факс, ЮридическийАдрес, Банк, БИК, КоррСчет, ТекстКорреспондента, НомерСчета, АдресБанка, ЭлектроннаяПочта");
//	Запрос   = Новый Запрос;
//	Данные   = Неопределено;
//	
//	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
//		Возврат Сведения;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
//		
//		ТекБанковскийСчет = БанковскийСчет;
//		
//	Иначе
//		
//		ТекБанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
//		
//		ДопустимыеТипы = Новый Массив;
//		ДопустимыеТипы.Добавить(Тип("СправочникСсылка.Организации"));
//		ДопустимыеТипы.Добавить(Тип("СправочникСсылка.Контрагенты"));
//		
//		Если ДопустимыеТипы.Найти(ТипЗнч(ЮрФизЛицо)) <> Неопределено Тогда
//			
//			ТекБанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "БанковскийСчетПоУмолчанию", Истина);
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	// Выберем основные сведения о контрагентеЮрФизЛицо.ОсновнойБанковскийСчет.БанкДляРасчетов.Пустая
//	ИмяРеквизитаБанка = "Банк";
//	
//	Если ЗначениеЗаполнено(ТекБанковскийСчет) Тогда 
//		
//		БанкРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекБанковскийСчет, "БанкРасчетов", Истина);
//		Если ЗначениеЗаполнено(БанкРасчетов) Тогда
//			
//			ИмяРеквизитаБанка = "БанкРасчетов";
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
//		
//		ИмяСправочника = "Организации";
//		
//	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
//		
//		ИмяСправочника = "Контрагенты";
//		
//	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
//		
//		ИмяСправочника = "СтруктурныеЕдиницы";
//		
//	Иначе
//		
//		Возврат Сведения;
//		
//	КонецЕсли;
//	
//	Запрос.УстановитьПараметр("ПарЮрФизЛицо",      ЮрФизЛицо);
//	Запрос.УстановитьПараметр("ПарБанковскийСчет", ТекБанковскийСчет);
//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	Организации.Представление КАК Наименование,
//	|	Организации.НаименованиеПолное КАК ПолноеНаименование,
//	|	Организации.ИНН,
//	|	Организации.КПП,
//	|	Организации.КодПоОКПО КАК КодПоОКПО,";
//	
//	Если ИмяСправочника = "Организации" Тогда
//		
//		Запрос.Текст = Запрос.Текст + "
//		|	Организации.СвидетельствоСерияНомер,
//		|	Организации.СвидетельствоДатаВыдачи,";
//		
//	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда	
//		
//		Запрос.Текст = Запрос.Текст + "
//		|	Организации.РегистрационныйНомер,
//		|	Организации.СтранаРегистрации,";
//		
//	ИначеЕсли ИмяСправочника = "СтруктурныеЕдиницы" Тогда	
//	
//		Запрос.Текст = 
//		"Выбрать разрешенные
//		|	Организации.Представление КАК Наименование
//		|	,Организации.НаименованиеПолное КАК ПолноеНаименование
//		|	,Неопределено КАК ИНН
//		|	,Неопределено КАК КПП
//		|	,Неопределено КАК КодПоОКПО
//		|	,Неопределено КАК РегистрационныйНомер
//		|	,Неопределено КАК СтранаРегистрации,";
//	
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
//		
//		Запрос.Текст = Запрос.Текст + "
//		|	БанковскиеСчета.НомерСчета                     КАК НомерСчета,
//		|	БанковскиеСчета.ТекстКорреспондента КАК ТекстКорреспондента,
//		|	БанковскиеСчета."+ИмяРеквизитаБанка+"          КАК Банк,
//		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Код      КАК БИК,
//		|	БанковскиеСчета."+ИмяРеквизитаБанка+".КоррСчет КАК КоррСчет,
//		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Адрес    КАК АдресБанка
//		|ИЗ
//		|	Справочник."+ИмяСправочника+" КАК Организации,
//		|	Справочник.БанковскиеСчета    КАК БанковскиеСчета
//		|
//		|ГДЕ
//		|	Организации.Ссылка       = &ПарЮрФизЛицо
//		|	И БанковскиеСчета.Ссылка = &ПарБанковскийСчет";
//		
//	Иначе
//		
//		Запрос.Текст = Запрос.Текст + "
//		|	""""                          КАК НомерСчета,
//		|	""""                          КАК ТекстКорреспондента,
//		|	""""                          КАК Банк,
//		|	""""                          КАК БИК,
//		|	""""                          КАК КоррСчет,
//		|	""""                          КАК АдресБанка
//		|ИЗ
//		|	Справочник."+ИмяСправочника+" КАК Организации
//		|
//		|ГДЕ
//		|	Организации.Ссылка = &ПарЮрФизЛицо";
//		
//	КонецЕсли;
//	
//	Результат = Запрос.Выполнить();
//	Если Результат.Пустой() Тогда
//		Возврат Сведения;
//	КонецЕсли;
//	
//	Данные = Результат.Выбрать();
//	Данные.Следующий();
//	
//	Сведения.Вставить("КодПоОКПО", 		"");
//	Сведения.Вставить("КПП",       		"");
//	Сведения.Вставить("Свидетельство",	"");
//	
//	Если НЕ (ЮрФизЛицо.Метаданные().Реквизиты.Найти("ЮридическоеФизическоеЛицо") = Неопределено) Тогда
//		
//		Сведения.КодПоОКПО = Данные.КодПоОКПО;
//		
//		Если ЮрФизЛицо.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
//			
//			Сведения.КПП = Данные.КПП;
//			
//		ИначеЕсли ИмяСправочника = "Организации" Тогда
//			
//			Сведения.Свидетельство = НСтр("ru='свидетельство'") + " " + Данные.СвидетельствоСерияНомер + " " + НСтр("ru='от'") + " " + Формат(Данные.СвидетельствоДатаВыдачи, "ДЛФ=D");
//			Сведения.Вставить("СвидетельствоСерияНомер", Данные.СвидетельствоСерияНомер);
//			Сведения.Вставить("СвидетельствоДатаВыдачи", Данные.СвидетельствоДатаВыдачи);
//			
//		КонецЕсли;
//		
//	ИначеЕсли ИмяСправочника = "Организации" Или ИмяСправочника = "Контрагенты" Тогда
//		
//		Сведения.КодПоОКПО = Данные.КодПоОКПО;
//		Сведения.КПП       = Данные.КПП;
//		
//	КонецЕсли;
//	
//	Сведения.Вставить("ПолноеНаименование", Данные.ПолноеНаименование);
//	
//	Если Данные <> Неопределено Тогда
//		
//		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
//			
//			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
//			Факс = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
//			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
//			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
//			ПочтАдрес = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
//			ЭлПочта = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
//			
//		ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
//			
//			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица;
//			Факс = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
//			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке;
//			ФактАдрес = Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке;
//			ПочтАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
//			ЭлПочта = Неопределено;
//			
//		ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
//			
//			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
//			Факс = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента;
//			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
//			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
//			ПочтАдрес = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
//			ЭлПочта = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
//			
//		ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
//			
//			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонСтруктурнойЕдиницы;
//			Факс = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
//			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
//			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы;
//			ПочтАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
//			ЭлПочта = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
//			
//		Иначе
//			
//			Телефон = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
//			Факс = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
//			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
//			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
//			ПочтАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
//			ЭлПочта = Неопределено;
//			
//		КонецЕсли;
//		
//		Сведения.Вставить("Представление",	Данные.Наименование);
//		Сведения.Вставить("ИНН",			Данные.ИНН);
//		Сведения.Вставить("Телефоны",		ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, Телефон));
//		Сведения.Вставить("Факс", 			ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, Факс));
//		Сведения.Вставить("НомерСчета",		Данные.НомерСчета);
//		Сведения.Вставить("Банк",			Данные.Банк);
//		Сведения.Вставить("БИК",			Данные.БИК);
//		Сведения.Вставить("АдресБанка",		Данные.АдресБанка);
//		Сведения.Вставить("КоррСчет",		Данные.КоррСчет);
//		Сведения.Вставить("ТекстКорреспондента", Данные.ТекстКорреспондента);
//		Сведения.Вставить("ЮридическийАдрес", ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, ЮрАдрес));
//		Сведения.Вставить("ФактическийАдрес", ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, ФактАдрес));
//		Сведения.Вставить("ПочтовыйАдрес",	ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, ПочтАдрес));
//		
//		Если ЗначениеЗаполнено(ЭлПочта) Тогда
//			
//			Сведения.Вставить("ЭлектроннаяПочта", ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, ЭлПочта));
//			
//		КонецЕсли;
//		
//		Если ИмяСправочника = "Контрагенты" Тогда
//			
//			Сведения.Вставить("СтранаРегистрации",	Данные.СтранаРегистрации);
//			Если ЗначениеЗаполнено(Данные.СтранаРегистрации) 
//				И Данные.СтранаРегистрации<>Справочники.СтраныМира.Россия Тогда
//				
//				Сведения.Вставить("РегистрационныйНомер", Данные.РегистрационныйНомер);
//				
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//		Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
//			
//			Сведения.ПолноеНаименование = Сведения.Представление;
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Возврат Сведения;
//	
//КонецФункции // СведенияОЮрФизЛице()

//// Функция находит актуальное значение адреса в контакной информации.
////
//// Параметры:
////  Объект       - СправочникСсылка, объект контактной информации
////  ТипАдреса    - тип контактной информации.
////
//// Возвращаемое значение
////  Строка - представление найденного адреса.
////                                          
//Функция ПолучитьКонтактнуюИнформацию(ОбъектКонтактнойИнформации, ВидИнформации) Экспорт
//	
//	Если ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Организации") Тогда
//		
//		ТаблицаИсточник = "Организации";
//		
//	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
//		
//		ТаблицаИсточник = "ФизическиеЛица";
//		
//	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Контрагенты") Тогда
//		
//		ТаблицаИсточник = "Контрагенты";
//		
//	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
//		
//		ТаблицаИсточник = "СтруктурныеЕдиницы";
//		
//	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Пользователи") Тогда
//		
//		ТаблицаИсточник = "Пользователи";
//		
//	Иначе 
//		
//		Возврат "";
//		
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	
//	Запрос.УстановитьПараметр("Объект", ОбъектКонтактнойИнформации);
//	Запрос.УстановитьПараметр("Вид",	ВидИнформации);
//	
//	Запрос.Текст = "ВЫБРАТЬ 
//	|	КонтактнаяИнформация.Представление
//	|ИЗ
//	|	Справочник." + ТаблицаИсточник + ".КонтактнаяИнформация КАК КонтактнаяИнформация
//	|ГДЕ
//	|	КонтактнаяИнформация.Вид = &Вид
//	|	И КонтактнаяИнформация.Ссылка = &Объект";

//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Возврат ?(РезультатЗапроса.Пустой(), "", РезультатЗапроса.Выгрузить()[0].Представление);

//КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

//// Стандартная для данной конфигурации функция форматирования сумм.
////
//// Параметры: 
////  Сумма        - число, которое мы хотим форматировать 
////  Валюта       - ссылка на элемент справочника валют, если задан, то к в
////                 результирующую строку будет добавлено представление валюты
////  ЧН           - строка, представляющая нулевое значение числа
////  ЧРГ          - символ-разделитель групп целой части числа.
////
//// Возвращаемое значение:
////  Отформатированная должным образом строковое представление суммы.
////
//Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт

//	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
//					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
//					?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);

//	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
//	
//	Если ЗначениеЗаполнено(Валюта) Тогда
//		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
//	КонецЕсли;

//	Возврат РезультирующаяСтрока;

//КонецФункции // ФорматСумм()

//// Функция формирует представление суммы прописью в указанной валюте.
////
//// Возвращаемое значение:
////  Строка - сумма прописью.
////
//Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт

//	Если Валюта.ПараметрыПрописи = "" Тогда
//		Возврат ФорматСумм(Сумма);
//	Иначе
//		Возврат ЧислоПрописью(Сумма, , Валюта.ПараметрыПрописи);
//	КонецЕсли;

//КонецФункции // СформироватьСуммуПрописью()

//// Форматирует сумму банковского платежного документа.
////
//// Параметры:
////  Сумма        - число - реквизит, который надо отформатировать
////  ВыводитьСуммуБезКопеек - булево - флаг представления суммы без копеек.
////
//// Возвращаемое значение
////  Отформатированная строка.
////
//Функция ФорматироватьСуммуПлатежногоДокумента(Сумма, ВыводитьСуммуБезКопеек = Ложь) Экспорт
//	
//	Результат  = Сумма;
//	ЦелаяЧасть = Цел(Сумма);
//	
//	Если Результат = ЦелаяЧасть Тогда
//		Если ВыводитьСуммуБезКопеек Тогда
//			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='='; ЧГ=0");
//			Результат = Лев(Результат, СтрНайти(Результат, "="));
//		Иначе
//			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
//		КонецЕсли;
//	Иначе
//		Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции // ФорматироватьСуммуПлатежногоДокумента()

//// Форматирует сумму прописью банковского платежного документа.
////
//// Параметры:
////  Сумма        - число - реквизит, который надо представить прописью 
////  Валюта       - СправочникСсылка.Валюты - валюта, в которой нужно представить
////                 сумму
////  ВыводитьСуммуБезКопеек - булево - флаг представления суммы без копеек.
////
//// Возвращаемое значение
////  Отформатированная строка.
////
//Функция ФорматироватьСуммуПрописьюПлатежногоДокумента(Сумма, Валюта, ВыводитьСуммуБезКопеек = Ложь) Экспорт
//	
//	Результат     = Сумма;
//	ЦелаяЧасть    = Цел(Сумма);
//	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
//	ПарамПредмета = Валюта.ПараметрыПрописи;
//	
//	Если Результат = ЦелаяЧасть Тогда
//		Если ВыводитьСуммуБезКопеек Тогда
//			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
//			Результат = Лев(Результат, СтрНайти(Результат, "0") - 1);
//		Иначе
//			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
//		КонецЕсли;
//	Иначе
//		Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции // ФорматироватьСуммуПрописьюПлатежногоДокумента()

//// Устанавливает для элемента формы с типом табличный документ состояние Длительная операция
////
//Процедура СостояниеТабличногоДокументаДлительнаяОперация(ЭлементФормы, ТекстСостояния = "") Экспорт
//	
//	ОтображениеСостояния = ЭлементФормы.ОтображениеСостояния;
//	ОтображениеСостояния.Видимость = Истина;
//	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
//	ОтображениеСостояния.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
//	ОтображениеСостояния.Текст = ТекстСостояния;
//	
//КонецПроцедуры // СостояниеТабличногоДокументаДлительнаяОперация()

//// Устанавливает для элемента формы с типом табличный документ состояние Длительная операция
////
//Процедура СостояниеТабличногоДокументаНеактуален(ЭлементФормы, ТекстСостояния = "") Экспорт
//	
//	ОтображениеСостояния = ЭлементФормы.ОтображениеСостояния;
//	ОтображениеСостояния.Видимость = Истина;
//	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
//	ОтображениеСостояния.Картинка = Новый Картинка;
//	ОтображениеСостояния.Текст = ТекстСостояния;
//	
//КонецПроцедуры // СостояниеТабличногоДокументаДлительнаяОперация()

//// Устанавливает для элемента формы с типом табличный документ состояние Длительная операция
////
//Процедура СостояниеТабличногоДокументаАктуален(ЭлементФормы) Экспорт
//	
//	ОтображениеСостояния = ЭлементФормы.ОтображениеСостояния;
//	ОтображениеСостояния.Видимость = Ложь;
//	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
//	ОтображениеСостояния.Картинка = Новый Картинка;
//	ОтображениеСостояния.Текст = "";
//	
//КонецПроцедуры // СостояниеТабличногоДокументаДлительнаяОперация()

//Процедура ПроверитьВыводКорректировочногоСчетаФактурыНаСтраницу(ТабДокумент, ОбластьТекСтроки, ЭтоПоследняяСтрока, Макет, НомерЛиста, НомерСчетаФактуры, ДатаСчетаФактуры, ЭтоУниверсальныйКорректировочныйДокумент = Ложь) Экспорт
//	
//	// Проверим возможность вывода табличного документа
//	СтрокаСПодвалом = Новый Массив;
//	СтрокаСПодвалом.Добавить(ОбластьТекСтроки);
//	
//	Если ЭтоПоследняяСтрока Тогда
//		// Если последняя строка, то должен поместиться еще итог
//		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Подвал"));
//		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Итого"));
//		Если ЭтоУниверсальныйКорректировочныйДокумент Тогда
//			СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("ПодвалНакладной"));
//		КонецЕсли;
//	КонецЕсли;
//	
//	РезультатПроверки = ПечатьДокументовУНФ.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом, Неопределено);
//	
//	Если НЕ РезультатПроверки Тогда
//		// Вывод разделителя и заголовка таблицы на новой странице
//		
//		НомерЛиста = НомерЛиста + 1;
//		
//		ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
//		ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактуры;
//		ОбластьНумерацияЛистов.Параметры.Дата = ДатаСчетаФактуры;
//		ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерЛиста;
//		
//		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
//		
//		ТабДокумент.Вывести(ОбластьНумерацияЛистов);
//		ТабДокумент.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицы"));
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ПроверитьВозможностьПечатиУКД(ПараметрКоманды, Ошибки) Экспорт
//	
//	Счетчик = 0;
//	
//	Пока Счетчик <= ПараметрКоманды.Количество()-1 Цикл
//		
//		ДокументСсылка = ПараметрКоманды[Счетчик];
//		
//		Если ДокументСсылка.Дата < Дата('20130101') Тогда 
//			
//			ТекстСообщения = Нстр("ru = '__________________
//										|Печать универсального корректировочного документа доступна c 1 января 2013. 
//										|Для документа %1 печатная форма не сформирована.'");
//			
//			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументСсылка);
//			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
//			
//			ПараметрКоманды.Удалить(Счетчик);
//			
//		ИначеЕсли НЕ ЗначениеЗаполнено(ДокументСсылка.Контрагент) Тогда 
//			
//			ТекстСообщения = Нстр("ru = '__________________
//										|Для печати универсального корректировочного документа необходимо заполнить контрагента. 
//										|Для документа %1 печатная форма не сформирована.'");
//			
//			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументСсылка);
//			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
//			
//			ПараметрКоманды.Удалить(Счетчик);
//			
//		Иначе
//			
//			Счетчик = Счетчик + 1;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры // ПроверитьВозможностьПечатиУКД()

//// Функция подготовки данных для печати этикетов и ценников.
////
//// Возвращаемое значение:
////   Адрес   - адрес структуры данных во временном хранилище
////
//Функция ПодготовитьСтруктуруДанныхПечатиЭтикетокИЦенниковИзДокументов(МассивДокументов, ЭтоЦенники) Экспорт
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
//	|	ПоступлениеТоваровУслугТовары.Характеристика КАК Характеристика,
//	|	ПоступлениеТоваровУслугТовары.Партия КАК Партия,
//	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
//	|	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество,
//	|	ПоступлениеТоваровУслугТовары.Ссылка.Организация КАК Организация
//	|ИЗ
//	|	Документ.ПриходнаяНакладная.Запасы КАК ПоступлениеТоваровУслугТовары
//	|ГДЕ
//	|	ПоступлениеТоваровУслугТовары.Ссылка В(&МассивДокументов)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ПоступлениеТоваровУслугТовары.Номенклатура,
//	|	ПоступлениеТоваровУслугТовары.Характеристика,
//	|	ПоступлениеТоваровУслугТовары.Партия,
//	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
//	|	ПоступлениеТоваровУслугТовары.Ссылка.Организация
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	РасходнаяНакладнаяЗапасы.Номенклатура,
//	|	РасходнаяНакладнаяЗапасы.Характеристика,
//	|	РасходнаяНакладнаяЗапасы.Партия,
//	|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
//	|	СУММА(РасходнаяНакладнаяЗапасы.Количество),
//	|	РасходнаяНакладнаяЗапасы.Ссылка.Организация
//	|ИЗ
//	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
//	|ГДЕ
//	|	РасходнаяНакладнаяЗапасы.Ссылка В(&МассивДокументов)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	РасходнаяНакладнаяЗапасы.Номенклатура,
//	|	РасходнаяНакладнаяЗапасы.Характеристика,
//	|	РасходнаяНакладнаяЗапасы.Партия,
//	|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
//	|	РасходнаяНакладнаяЗапасы.Ссылка.Организация
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ЗаказПокупателя.Номенклатура,
//	|	ЗаказПокупателя.Характеристика,
//	|	ЗаказПокупателя.Партия,
//	|	ЗаказПокупателя.ЕдиницаИзмерения,
//	|	СУММА(ЗаказПокупателя.Количество),
//	|	ЗаказПокупателя.Ссылка.Организация
//	|ИЗ
//	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателя
//	|ГДЕ
//	|	ЗаказПокупателя.Ссылка В(&МассивДокументов)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ЗаказПокупателя.Номенклатура,
//	|	ЗаказПокупателя.Характеристика,
//	|	ЗаказПокупателя.Партия,
//	|	ЗаказПокупателя.ЕдиницаИзмерения,
//	|	ЗаказПокупателя.Ссылка.Организация
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ЗаказНаПроизводствоПродукция.Номенклатура,
//	|	ЗаказНаПроизводствоПродукция.Характеристика,
//	|	ЗаказНаПроизводствопродукция.Партия,
//	|	ЗаказНаПроизводствоПродукция.ЕдиницаИзмерения,
//	|	СУММА(ЗаказНаПроизводствоПродукция.Количество),
//	|	ЗаказНаПроизводствоПродукция.Ссылка.Организация
//	|ИЗ
//	|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
//	|ГДЕ
//	|	ЗаказНаПроизводствоПродукция.Ссылка В(&МассивДокументов)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ЗаказНаПроизводствоПродукция.Номенклатура,
//	|	ЗаказНаПроизводствоПродукция.Характеристика,
//	|	ЗаказНаПроизводствопродукция.Партия,
//	|	ЗаказНаПроизводствоПродукция.ЕдиницаИзмерения,
//	|	ЗаказНаПроизводствоПродукция.Ссылка.Организация
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ПеремещениеЗапасовЗапасы.Номенклатура,
//	|	ПеремещениеЗапасовЗапасы.Характеристика,
//	|	ПеремещениеЗапасовЗапасы.Партия,
//	|	ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения,
//	|	СУММА(ПеремещениеЗапасовЗапасы.Количество),
//	|	ПеремещениеЗапасовЗапасы.Ссылка.Организация
//	|ИЗ
//	|	Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
//	|ГДЕ
//	|	ПеремещениеЗапасовЗапасы.Ссылка В(&МассивДокументов)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ПеремещениеЗапасовЗапасы.Номенклатура,
//	|	ПеремещениеЗапасовЗапасы.Характеристика,
//	|	ПеремещениеЗапасовЗапасы.Партия,
//	|	ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения,
//	|	ПеремещениеЗапасовЗапасы.Ссылка.Организация
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ОприходованиеЗапасовЗапасы.Номенклатура,
//	|	ОприходованиеЗапасовЗапасы.Характеристика,
//	|	ОприходованиеЗапасовЗапасы.Партия,
//	|	ОприходованиеЗапасовЗапасы.ЕдиницаИзмерения,
//	|	СУММА(ОприходованиеЗапасовЗапасы.Количество),
//	|	ОприходованиеЗапасовЗапасы.Ссылка.Организация
//	|ИЗ
//	|	Документ.ОприходованиеЗапасов.Запасы КАК ОприходованиеЗапасовЗапасы
//	|ГДЕ
//	|	ОприходованиеЗапасовЗапасы.Ссылка В(&МассивДокументов)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ОприходованиеЗапасовЗапасы.Номенклатура,
//	|	ОприходованиеЗапасовЗапасы.Характеристика,
//	|	ОприходованиеЗапасовЗапасы.Партия,
//	|	ОприходованиеЗапасовЗапасы.ЕдиницаИзмерения,
//	|	ОприходованиеЗапасовЗапасы.Ссылка.Организация
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	СборкаЗапасовПродукция.Номенклатура,
//	|	СборкаЗапасовПродукция.Характеристика,
//	|	СборкаЗапасовПродукция.Партия,
//	|	СборкаЗапасовПродукция.ЕдиницаИзмерения,
//	|	СУММА(СборкаЗапасовПродукция.Количество),
//	|	СборкаЗапасовПродукция.Ссылка.Организация
//	|ИЗ
//	|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
//	|ГДЕ
//	|	СборкаЗапасовПродукция.Ссылка В(&МассивДокументов)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	СборкаЗапасовПродукция.Номенклатура,
//	|	СборкаЗапасовПродукция.Характеристика,
//	|	СборкаЗапасовПродукция.Партия,
//	|	СборкаЗапасовПродукция.ЕдиницаИзмерения,
//	|	СборкаЗапасовПродукция.Ссылка.Организация
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ИсходныеДанные.Номенклатура,
//	|	ИсходныеДанные.Характеристика,
//	|	ИсходныеДанные.Партия,
//	|	ИсходныеДанные.ЕдиницаИзмерения,
//	|	1,
//	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
//	|ИЗ
//	|	(ВЫБРАТЬ
//	|		ИсходныеДанныеБезПартий.Номенклатура КАК Номенклатура,
//	|		ИсходныеДанныеБезПартий.Характеристика КАК Характеристика,
//	|		ИсходныеДанныеБезПартий.Партия КАК Партия,
//	|		ИсходныеДанныеБезПартий.ЕдиницаИзмерения КАК ЕдиницаИзмерения
//	|	ИЗ
//	|		(ВЫБРАТЬ
//	|			НоменклатураБезХарактеристик.Ссылка КАК Номенклатура,
//	|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
//	|			ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
//	|			ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения
//	|		ИЗ
//	|			Справочник.Номенклатура КАК НоменклатураБезХарактеристик
//	|		ГДЕ
//	|			НоменклатураБезХарактеристик.Ссылка В(&МассивДокументов)
//	|			И НЕ НоменклатураБезХарактеристик.ЭтоГруппа
//	|		
//	|		ОБЪЕДИНИТЬ
//	|		
//	|		ВЫБРАТЬ
//	|			НоменклатураСоСвоейХарактеристикой.Ссылка,
//	|			ХарактеристикиНоменклатуры.Ссылка,
//	|			ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка),
//	|			ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
//	|		ИЗ
//	|			Справочник.Номенклатура КАК НоменклатураСоСвоейХарактеристикой
//	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
//	|				ПО (ХарактеристикиНоменклатуры.Владелец = НоменклатураСоСвоейХарактеристикой.Ссылка)
//	|		ГДЕ
//	|			НоменклатураСоСвоейХарактеристикой.Ссылка В(&МассивДокументов)
//	|			И НЕ НоменклатураСоСвоейХарактеристикой.ЭтоГруппа
//	|			И НоменклатураСоСвоейХарактеристикой.ИспользоватьХарактеристики
//	|		
//	|		ОБЪЕДИНИТЬ
//	|		
//	|		ВЫБРАТЬ
//	|			НоменклатураСХарактеристикойКатегории.Ссылка,
//	|			ХарактеристикиНоменклатуры.Ссылка,
//	|			ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка),
//	|			ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
//	|		ИЗ
//	|			Справочник.Номенклатура КАК НоменклатураСХарактеристикойКатегории
//	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
//	|				ПО (ХарактеристикиНоменклатуры.Владелец = НоменклатураСХарактеристикойКатегории.КатегорияНоменклатуры)
//	|		ГДЕ
//	|			НоменклатураСХарактеристикойКатегории.Ссылка В(&МассивДокументов)
//	|			И НЕ НоменклатураСХарактеристикойКатегории.ЭтоГруппа
//	|			И ЕСТЬNULL(НоменклатураСХарактеристикойКатегории.ИспользоватьХарактеристики, ЛОЖЬ)) КАК ИсходныеДанныеБезПартий
//	|	
//	|	ОБЪЕДИНИТЬ
//	|	
//	|	ВЫБРАТЬ
//	|		ИсходныеДанныеСПартиями.Номенклатура,
//	|		ИсходныеДанныеСПартиями.Характеристика,
//	|		Партии.Ссылка,
//	|		ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
//	|	ИЗ
//	|		(ВЫБРАТЬ
//	|			НоменклатураБезХарактеристик.Ссылка КАК Номенклатура,
//	|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
//	|			ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия
//	|		ИЗ
//	|			Справочник.Номенклатура КАК НоменклатураБезХарактеристик
//	|		ГДЕ
//	|			НоменклатураБезХарактеристик.Ссылка В(&МассивДокументов)
//	|			И НЕ НоменклатураБезХарактеристик.ЭтоГруппа
//	|		
//	|		ОБЪЕДИНИТЬ
//	|		
//	|		ВЫБРАТЬ
//	|			НоменклатураСоСвоейХарактеристикой.Ссылка,
//	|			ХарактеристикиНоменклатуры.Ссылка,
//	|			ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
//	|		ИЗ
//	|			Справочник.Номенклатура КАК НоменклатураСоСвоейХарактеристикой
//	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
//	|				ПО (ХарактеристикиНоменклатуры.Владелец = НоменклатураСоСвоейХарактеристикой.Ссылка)
//	|		ГДЕ
//	|			НоменклатураСоСвоейХарактеристикой.Ссылка В(&МассивДокументов)
//	|			И НЕ НоменклатураСоСвоейХарактеристикой.ЭтоГруппа
//	|			И НоменклатураСоСвоейХарактеристикой.ИспользоватьХарактеристики
//	|		
//	|		ОБЪЕДИНИТЬ
//	|		
//	|		ВЫБРАТЬ
//	|			НоменклатураСХарактеристикойКатегории.Ссылка,
//	|			ХарактеристикиНоменклатуры.Ссылка,
//	|			ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
//	|		ИЗ
//	|			Справочник.Номенклатура КАК НоменклатураСХарактеристикойКатегории
//	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
//	|				ПО (ХарактеристикиНоменклатуры.Владелец = НоменклатураСХарактеристикойКатегории.КатегорияНоменклатуры)
//	|		ГДЕ
//	|			НоменклатураСХарактеристикойКатегории.Ссылка В(&МассивДокументов)
//	|			И НЕ НоменклатураСХарактеристикойКатегории.ЭтоГруппа
//	|			И ЕСТЬNULL(НоменклатураСХарактеристикойКатегории.ИспользоватьХарактеристики, ЛОЖЬ)) КАК ИсходныеДанныеСПартиями
//	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПартииНоменклатуры КАК Партии
//	|			ПО ИсходныеДанныеСПартиями.Номенклатура = Партии.Владелец) КАК ИсходныеДанные
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ИсходныеДанные.Номенклатура,
//	|	ИсходныеДанные.Характеристика,
//	|	ИсходныеДанные.Партия,
//	|	ИсходныеДанные.ЕдиницаИзмерения
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//	|	ПоступлениеТоваровУслуг.Организация КАК Организация,
//	|	ПоступлениеТоваровУслуг.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//	|	ПоступлениеТоваровУслуг.СтруктурнаяЕдиница.РозничныйВидЦен КАК ВидЦен
//	|ИЗ
//	|	Документ.ПриходнаяНакладная КАК ПоступлениеТоваровУслуг
//	|ГДЕ
//	|	ПоступлениеТоваровУслуг.Ссылка В(&МассивДокументов)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	РасходнаяНакладная.Организация,
//	|	РасходнаяНакладная.СтруктурнаяЕдиница,
//	|	РасходнаяНакладная.СтруктурнаяЕдиница.РозничныйВидЦен
//	|ИЗ
//	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
//	|ГДЕ
//	|	РасходнаяНакладная.Ссылка В(&МассивДокументов)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ЗаказНаПроизводство.Организация,
//	|	ЗаказНаПроизводство.СтруктурнаяЕдиница,
//	|	ЗаказНаПроизводство.СтруктурнаяЕдиница.РозничныйВидЦен
//	|ИЗ
//	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
//	|ГДЕ
//	|	ЗаказНаПроизводство.Ссылка В(&МассивДокументов)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	ПеремещениеЗапасов.Организация,
//	|	ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель,
//	|	ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель.РозничныйВидЦен
//	|ИЗ
//	|	Документ.ПеремещениеЗапасов КАК ПеремещениеЗапасов
//	|ГДЕ
//	|	ПеремещениеЗапасов.Ссылка В(&МассивДокументов)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	ОприходованиеЗапасов.Организация,
//	|	ОприходованиеЗапасов.СтруктурнаяЕдиница,
//	|	ОприходованиеЗапасов.ВидЦен
//	|ИЗ
//	|	Документ.ОприходованиеЗапасов КАК ОприходованиеЗапасов
//	|ГДЕ
//	|	ОприходованиеЗапасов.Ссылка В(&МассивДокументов)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	ЗаказПокупателя.Организация,
//	|	ЗаказПокупателя.СтруктурнаяЕдиницаПродажи,
//	|	ЗаказПокупателя.ВидЦен
//	|ИЗ
//	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
//	|ГДЕ
//	|	ЗаказПокупателя.Ссылка В(&МассивДокументов)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	СборкаЗапасов.Организация,
//	|	СборкаЗапасов.СтруктурнаяЕдиницаПродукции,
//	|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
//	|ИЗ
//	|	Документ.СборкаЗапасов КАК СборкаЗапасов
//	|ГДЕ
//	|	СборкаЗапасов.Ссылка В(&МассивДокументов)");
//	
//	ИсключитьНедоступнуюТаблицуИзТекстаЗапроса(Запрос, "ЗаказНаПроизводство");
//	ИсключитьНедоступнуюТаблицуИзТекстаЗапроса(Запрос, "СборкаЗапасов");
//	ИсключитьНедоступнуюТаблицуИзТекстаЗапроса(Запрос, "ПеремещениеЗапасов");
//	ИсключитьНедоступнуюТаблицуИзТекстаЗапроса(Запрос, "ОприходованиеЗапасов");
//	
//	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
//	
//	МассивРезультатов = Запрос.ВыполнитьПакет();
//	
//	ТаблицаРеквизитыДокументов	= МассивРезультатов[1].Выгрузить();
//	МассивОрганизаций			= Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
//	МассивСкладов				= Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СтруктурнаяЕдиница").ВыгрузитьКолонку(0);
//	МассивВидовЦен				= Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ВидЦен").ВыгрузитьКолонку(0);
//	
//	// Подготовка структуры действий для обработки печати этикеток и ценников
//	СтруктураДействий = Новый Структура;
//	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1,МассивОрганизаций[0],
//		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация")));
//	СтруктураДействий.Вставить("ЗаполнитьСклад", ?(МассивСкладов.Количество() = 1,МассивСкладов[0], МассивСкладов));
//	СтруктураДействий.Вставить("ЗаполнитьВидЦен", ?(МассивВидовЦен.Количество() = 1,МассивВидовЦен[0],
//		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойВидЦенПродажи")));
//	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
//	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
//	Если ЭтоЦенники Тогда
//		
//		СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
//		СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
//		
//	Иначе
//		
//		СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
//		СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
//		
//	КонецЕсли;
//	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
//	
//	// Подготовка данных для заполенения табличной части обработки печати этикеток и ценников
//	СтруктураРезультат = Новый Структура;
//	СтруктураРезультат.Вставить("Запасы", МассивРезультатов[0].Выгрузить());
//	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
//	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
//	
//	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
//	
//КонецФункции // ПодготовитьСтруктуруДанныхПечатиЭтикетокИЦенниковИзДокументов()

//// Функция возвращает договор переданного документа.
////
//Функция ПолучитьДоговорДокумента(Документ) Экспорт
//	
//	Возврат Документ.Договор;
//	
//КонецФункции // ПолучитьДоговорДокумента

//// Функция возвращает список макетов для печати счетов-фактур,
////перечисленных через запятую.
////
//Функция ПолучитьСписокМакетовСчетовФактур(СчетаФактуры) Экспорт
//	
//	СписокМакетов = "";
//	ЕстьСчетФактура = Ложь;
//	ЕстьКорректировочныйСчетФактура = Ложь;
//	
//	Для Каждого Объект Из СчетаФактуры Цикл
//		
//		Если ТипЗнч(Объект) = Тип("ДокументСсылка.СчетФактура") Тогда
//			Если Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Корректировка Тогда
//				Если НЕ ЕстьКорректировочныйСчетФактура Тогда
//					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактураКорректировочный", ",СчетФактураКорректировочный");
//					ЕстьКорректировочныйСчетФактура = Истина;
//				КонецЕсли;
//				
//			Иначе
//				Если НЕ ЕстьСчетФактура Тогда
//					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактура", ",СчетФактура");
//					ЕстьСчетФактура = Истина;
//				КонецЕсли;
//			КонецЕсли;
//		Иначе
//			Если Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда
//				Если НЕ ЕстьКорректировочныйСчетФактура Тогда
//					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактураКорректировочный", ",СчетФактураКорректировочный");
//					ЕстьКорректировочныйСчетФактура = Истина;
//				КонецЕсли;
//				
//			Иначе
//				Если НЕ ЕстьСчетФактура Тогда
//					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактура", ",СчетФактура");
//					ЕстьСчетФактура = Истина;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат СписокМакетов;
//	
//КонецФункции

//// Возвращает ссылку на Организацию, указанную в первом документе параметра команды.
////
//// Параметры:
////  ПараметрКоманды	 - Массив - массив ссылок на документы для печати.
//// 
//// Возвращаемое значение:
////  СправочникСсылка.Организация - организация, для которой вызывается печатная форма.
////  В случае если печать вызывается для форм разных организаций - возвращается пустая ссылка.
////
//Функция ОрганизацияИзПараметраКоманды(ПараметрКоманды) Экспорт
//	
//	Результат = Справочники.Организации.ПустаяСсылка();
//	
//	Если ТипЗнч(ПараметрКоманды) <> Тип("Массив") Тогда
//		Возврат Результат;
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(ПараметрКоманды) Тогда
//		Возврат Результат;
//	КонецЕсли;
//	
//	Для Каждого ТекПараметр Из ПараметрКоманды Цикл
//		
//		Если ТипЗнч(ПараметрКоманды[0]) <> ТипЗнч(ТекПараметр) Тогда
//			Возврат Результат;
//		КонецЕсли;
//		
//		Если Не ОбщегоНазначения.ЗначениеСсылочногоТипа(ТекПараметр) Тогда
//			Возврат Результат;
//		КонецЕсли;
//		
//		Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", ТекПараметр.Метаданные()) Тогда
//			Возврат Результат;
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	ЗначенияРеквизитаОбъектов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПараметрКоманды, "Организация");
//	
//	Для Каждого КлючИЗначение Из ЗначенияРеквизитаОбъектов Цикл
//		Если Не ЗначениеЗаполнено(Результат) Тогда
//			Результат = КлючИЗначение.Значение;
//		КонецЕсли;
//		Если Результат <> КлючИЗначение.Значение Тогда
//			Возврат Справочники.Организации.ПустаяСсылка();
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат Результат;
//	
//КонецФункции

//#КонецОбласти

//#Область ПроцедурыИФункцииДляРаботыСоСчетамиФактурами

//Процедура ПриЗаписиДокументаОснованияСчетаФактуры(ДокументОснованиеСсылка, ДополнительныеСвойства, Полученный) Экспорт
//	
//	ДополнительныеСвойства.Вставить("ВерсияПодчиненногоСчетФактуры", Неопределено);
//	
//	ОписаниеСчетФактуры = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ДокументОснованиеСсылка, Полученный);
//	Если ТипЗнч(ОписаниеСчетФактуры) = Тип("Структура") Тогда
//		
//		Если ОписаниеСчетФактуры.Свойство("Версия", ДополнительныеСвойства.ВерсияПодчиненногоСчетФактуры)
//			И ОписаниеСчетФактуры.Версия = "1.6.12" Тогда
//			
//			УправлениеНебольшойФирмойСервер.ИзменитьПодчиненнуюСчетФактуру(ОписаниеСчетФактуры.Ссылка, Полученный);
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//// Функция возвращает ссылку на подчиненный счет-фактуру
////
//Функция ПолучитьПодчиненныйСчетФактуру(ДокументОснование, Полученный = Ложь) Экспорт

//	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
//		
//		Возврат Неопределено;
//		
//	КонецЕсли;
//	
//	Если Полученный Тогда
//		
//		ТекстЗапроса =
//		"Выбрать
//		|	СчетФактура.Ссылка
//		|	,СчетФактура.НомерВходящегоДокумента КАК Номер
//		|	,СчетФактура.Дата
//		|	,СчетФактура.ДатаВходящегоДокумента
//		|Из Документ.СчетФактураПолученный КАК СчетФактура
//		|Где СчетФактура.ДокументОснование = &ДокументОснование
//		|	И НЕ СчетФактура.ПометкаУдаления
//		|	И СчетФактура.ВидОперации <> Значение(Перечисление.ВидыОперацийСчетФактураПолученный.СуммовыеРазницы)";
//		
//	Иначе
//		
//		ТекстЗапроса =
//		"Выбрать
//		|	СчетФактураДокументыОснования.Ссылка
//		|	,СчетФактураДокументыОснования.Ссылка.Номер
//		|	,СчетФактураДокументыОснования.Ссылка.Дата
//		|	,Неопределено КАК ДатаВходящегоДокумента
//		|Из Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
//		|Где СчетФактураДокументыОснования.ДокументОснование = &ДокументОснование
//		|	И СчетФактураДокументыОснования.Ссылка.ВидОперации <> Значение(Перечисление.ВидыОперацийСчетФактура.СуммовыеРазницы)";
//		
//	КонецЕсли;
//	
//	Запрос = Новый Запрос(ТекстЗапроса);
//	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	Выборка = РезультатЗапроса.Выбрать();
//	Выборка.Следующий();
//	
//	СтруктураВозврата = Новый Структура;
//	СтруктураВозврата.Вставить("Ссылка", Выборка.Ссылка);
//	СтруктураВозврата.Вставить("Номер", Выборка.Номер);
//	СтруктураВозврата.Вставить("Версия", ?(Выборка.Ссылка.УдалитьЗапасы.Количество() > 0, "1.6.11", "1.6.12"));
//	
//	ДатаВПредставление = ?(ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), Выборка.ДатаВходящегоДокумента, Выборка.Дата);
//	СтруктураВозврата.Вставить("Дата", ДатаВПредставление);
//	
//	Возврат СтруктураВозврата;
//	
//КонецФункции // ПолучитьПодчиненныйСчетФактуру()
// 
//// Устанавливает надпись гиперссылки на Счет-фактуру
////
//Процедура УстановитьТекстПроСчетФактуру(ФормаДокумента, Полученный = Ложь) Экспорт

//	НайденныйСчетФактура = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ФормаДокумента.Объект.Ссылка, Полученный);
//	Если ЗначениеЗаполнено(НайденныйСчетФактура) Тогда
//		ТекстПроСчетФактуру = НСтр("ru = '№ %Номер% от %Дата% г.'");
//		ТекстПроСчетФактуру = СтрЗаменить(ТекстПроСчетФактуру, "%Номер%", НайденныйСчетФактура.Номер);
//		ТекстПроСчетФактуру = СтрЗаменить(ТекстПроСчетФактуру, "%Дата%", Формат(НайденныйСчетФактура.Дата, "ДФ=dd.MM.yyyy"));
//		ФормаДокумента.СчетФактураТекст = ТекстПроСчетФактуру;	
//	Иначе
//	    ФормаДокумента.СчетФактураТекст = "Ввести счет-фактуру";
//	КонецЕсли;

//КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

////При изменении документа основания правим подчиненную Счет-фактуру
////
////Параметры:
////  СчетФактураСсылка - документ основания, для которого ищем и правим счет фактуру
////  Полученный - определеяет вид документа (СчетФактура или СчетФактураПолученный)
////
//Процедура ИзменитьПодчиненнуюСчетФактуру(СчетФактураСсылка, Полученный = Ложь) Экспорт
//	
//	Если Полученный
//		И ЗначениеЗаполнено(СчетФактураСсылка.ДокументОснование) Тогда
//		
//		СчетФактураОбъект = СчетФактураСсылка.ПолучитьОбъект();
//		СчетФактураОбъект.ДополнительныеСвойства.Вставить("ЭтоСинхронизация", Истина);
//		СчетФактураОбъект.Заполнить(СчетФактураСсылка.ДокументОснование);
//		СчетФактураОбъект.Записать(?(СчетФактураОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
//		
//	ИначеЕсли СчетФактураСсылка.ДокументыОснования.Количество() > 0 Тогда
//		
//		СчетФактураОбъект = СчетФактураСсылка.ПолучитьОбъект();
//		СчетФактураОбъект.ДополнительныеСвойства.Вставить("ЭтоСинхронизация", Истина);
//		СчетФактураОбъект.Заполнить(СчетФактураСсылка.ДокументыОснования.Выгрузить());
//		СчетФактураОбъект.Записать(?(СчетФактураОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
//		
//	КонецЕсли;	
//КонецПроцедуры

//// Процедура добавляет описание счет фактуры для оповещения открытых форм.
//// 
//// При оповещении будет актуализирована надпись-гиперссылка в подвале формы.
////
//// ДоументОснование - тип ДокументСсылка, используется при идентификации открытый формы;
//// СчетФактура - тип ДокументСсылка, счет-фактура ссылка которого является источником данных для оповещения;
//// Описание - тип Массив. Заполняемый массив с описанием оповещения. Если не передан, создается новый массив;
////
//Процедура ДобавитьОписаниеСозданнойСчетФактуры(ДокументОснование, СчетФактура, Описание)
//	
//	Если ТипЗнч(Описание) <> Тип("Массив") Тогда
//		
//		Описание = Новый Массив;
//		
//	КонецЕсли;
//	
//	ОписаниеНовойСчетФактуры = Новый Массив(3);
//	
//	ОписаниеНовойСчетФактуры[0] = ДокументОснование;
//	ОписаниеНовойСчетФактуры[1] = СчетФактура.Номер;
//	ОписаниеНовойСчетФактуры[2] = СчетФактура.Дата;
//	
//	Описание.Добавить(ОписаниеНовойСчетФактуры);
//	
//КонецПроцедуры // ДобавитьОписаниеСозданнойСчетФактуры()

//// Процедура определяет источники, которые необходимо использовать в качестве менеджера печати
////
//// Если система налогооблажения общая, обязательна необходима счет-фактура, которая будет использоваться в роли источника,
//// иначе можно сформировать макет непосредствено из текущего документа
////
//Процедура ОпределитьИсточникиПечатиУПД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю)
//	
//	МассивСчетФактура = Новый Массив;
//	МассивДокументовРеализаций = Новый Массив;
//	
//	Для каждого ДокументПечати Из ПараметрКоманды Цикл
//		
//		ЕстьНДС = Ложь;
//		
//		// Поскольку в УНФ не ограничевается выписка счетов-фактур для организаций 
//		// с упращенной системой налогооблажения, мы устанавливаем источник печати не только по наличию НДС в документе,
//		// но и по наличию самого документа счет-фактура.
//		СчетФактураВыданный = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ДокументПечати, Ложь);
//		
//		Если ТипЗнч(ДокументПечати) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
//			
//			ИсточникиПечати.ИмяИсточника = "Документ.ЗаказПокупателя";
//			ПодразделениеДокумента = ДокументПечати.СтруктурнаяЕдиницаРезерв;
//			ЕстьНДС = (ДокументПечати.Работы.Итог("СуммаНДС") <> 0) ИЛИ (ДокументПечати.Запасы.Итог("СуммаНДС") <> 0) ИЛИ ЗначениеЗаполнено(СчетФактураВыданный);
//			
//		ИначеЕсли ТипЗнч(ДокументПечати) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
//			
//			ИсточникиПечати.ИмяИсточника = "Документ.РасходнаяНакладная";
//			ПодразделениеДокумента = ДокументПечати.СтруктурнаяЕдиница;
//			ЕстьНДС = (ДокументПечати.Запасы.Итог("СуммаНДС") <> 0) ИЛИ ЗначениеЗаполнено(СчетФактураВыданный)
//				ИЛИ ДокументПечати.СуммаНДСДоставки > 0;
//			
//		ИначеЕсли ТипЗнч(ДокументПечати) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
//			
//			ИсточникиПечати.ИмяИсточника = "Документ.АктВыполненныхРабот";
//			ПодразделениеДокумента = ДокументПечати.Подразделение;
//			ЕстьНДС = (ДокументПечати.РаботыИУслуги.Итог("СуммаНДС") <> 0) ИЛИ ЗначениеЗаполнено(СчетФактураВыданный);
//			
//		ИначеЕсли ТипЗнч(ДокументПечати) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
//			
//			ИсточникиПечати.ИмяИсточника = "Документ.КорректировкаРеализации";
//			ПодразделениеДокумента = ДокументПечати.Подразделение;
//			ЕстьНДС = (ДокументПечати.Запасы.Итог("СуммаНДС") <> 0) ИЛИ ЗначениеЗаполнено(СчетФактураВыданный);
//			
//		КонецЕсли;
//		
//		Если ЕстьНДС Тогда
//			
//			СчетФактура = ПроверитьВыпискуСчетовФактур(ИсточникиПечати, ДокументПечати, СообщенияПользователю);
//			МассивСчетФактура.Добавить(СчетФактура);
//			
//		Иначе
//			
//			МассивДокументовРеализаций.Добавить(ДокументПечати);
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Если МассивСчетФактура.Количество() > 0 Тогда
//		
//		ИсточникиПечати.СчетФактура = МассивСчетФактура;
//		
//	КонецЕсли;
//	
//	Если МассивДокументовРеализаций.Количество() > 0 Тогда
//		
//		ИсточникиПечати.ДокументыРеализации = МассивДокументовРеализаций;
//		
//	КонецЕсли;
//	
//КонецПроцедуры // ОпределитьИсточникиПечатиУПД()

//// Процедура заполняет параметры для формирования печатной формы Универсального передаточного документа
////
//Процедура ЗаполнитьПараметрыПечатиУПД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю) Экспорт
//	
//	ОпределитьИсточникиПечатиУПД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю);
//	
//КонецПроцедуры // ЗаполнитьПараметрыПечатиУПД()

//// Процедура определяет источники, которые необходимо использовать в качестве менеджера печати
////
//// Если система налогооблажения общая, обязательна необходима счет-фактура, которая будет использоваться в роли источника,
//// иначе можно сформировать макет непосредствено из текущего документа
////
//Процедура ОпределитьИсточникиПечатиУКД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю)
//	
//	МассивСчетовФактур = Новый Массив;
//	МассивДокументовРеализаций = Новый Массив;
//	
//	Для каждого ДокументПечати Из ПараметрКоманды Цикл
//		
//		Если ТипЗнч(ДокументПечати) = Тип("ДокументСсылка.СчетФактура") Тогда
//			МассивСчетовФактур.Добавить(ДокументПечати);
//			Продолжить;
//		КонецЕсли;
//		
//		ЕстьНДС = Ложь;
//		
//		// Поскольку в УНФ не ограничивается выписка счетов-фактур для организаций 
//		// с упрощенной системой налогооблажения, мы устанавливаем источник печати не только по наличию НДС в документе,
//		// но и по наличию самого документа счет-фактура.
//		СчетФактураВыданный = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ДокументПечати, Ложь);
//		
//		Если ТипЗнч(ДокументПечати) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
//			
//			ИсточникиПечати.ИмяИсточника = "Документ.КорректировкаРеализации";
//			ЕстьНДС = (ДокументПечати.Запасы.Итог("СуммаНДС") <> 0) ИЛИ ЗначениеЗаполнено(СчетФактураВыданный);
//			
//		КонецЕсли;
//		
//		Если ЕстьНДС Тогда
//			
//			ВидОперацииСФ = Перечисления.ВидыОперацийСчетФактура.Корректировка;
//			СчетФактура = ПроверитьВыпискуСчетовФактур(ИсточникиПечати, ДокументПечати, СообщенияПользователю, ВидОперацииСФ);
//			МассивСчетовФактур.Добавить(СчетФактура);
//			
//		Иначе
//			
//			МассивДокументовРеализаций.Добавить(ДокументПечати);
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Если МассивСчетовФактур.Количество() > 0 Тогда
//		
//		ИсточникиПечати.СчетФактура = МассивСчетовФактур;
//		
//	КонецЕсли;
//	
//	Если МассивДокументовРеализаций.Количество() > 0 Тогда
//		
//		ИсточникиПечати.ДокументыРеализации = МассивДокументовРеализаций;
//		
//	КонецЕсли;
//	
//КонецПроцедуры // ОпределитьИсточникиПечатиУПД()

//// Процедура заполняет параметры для формирования печатной формы Универсального корректировочного документа
////
//Процедура ЗаполнитьПараметрыПечатиУКД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю) Экспорт
//	
//	ОпределитьИсточникиПечатиУКД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю);
//	
//КонецПроцедуры // ЗаполнитьПараметрыПечатиУПД()

//// Функция проверяет наличие счет-фактуры выданной
//// 
//// В случае ее отсутствия документ СФ (выданная) будет создан.
////
//Функция ПроверитьВыпискуСчетовФактур(ИсточникиПечати, ДокументРеализации, СообщенияПользователю, ВидОперации = Неопределено)
//	
//	СчетФактураВыданный = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ДокументРеализации, Ложь);
//	
//	Если СчетФактураВыданный = Неопределено Тогда
//		
//		НовыйСчетФактура = Документы.СчетФактура.СоздатьДокумент();
//		НовыйСчетФактура.Заполнить(ДокументРеализации);
//		НовыйСчетФактура.Дата = ТекущаяДатаСеанса();
//		
//		Если ЗначениеЗаполнено(ВидОперации) Тогда
//			НовыйСчетФактура.ВидОперации = ВидОперации;
//		КонецЕсли;
//		
//		Попытка 
//			
//			// При расчетах в у.е. нужно распределять сумму аванса по ТЧ Запасы. Это выполняется при проведении документа.
//			Если ДокументРеализации.Проведен Тогда
//				НовыйСчетФактура.Записать(РежимЗаписиДокумента.Проведение);
//			Иначе
//				НовыйСчетФактура.Записать(РежимЗаписиДокумента.Запись);
//			КонецЕсли;
//			
//			ТекстСообщения = НСтр("ru = 'Сформирован подчиненный документ Cчет-фактура № %1 от %2.'");
//			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НовыйСчетФактура.Номер, НовыйСчетФактура.Дата);
//			
//			СчетФактураВыданный = НовыйСчетФактура.Ссылка;
//			
//			ДобавитьОписаниеСозданнойСчетФактуры(ДокументРеализации, НовыйСчетФактура.Ссылка, ИсточникиПечати.СозданныеСчетаФактуры);
//			
//		Исключение
//			
//			ТекстСообщения = НСтр("ru = 'Не удалось сформировать подчиненный документ Счет-фактура для документа %1. Для формирования счёт-фактуры нажмите на гиперссылку ""Создать"" внизу.'");
//			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументРеализации);
//			
//		КонецПопытки;
//		
//		// Выводить сообщения сразу неэффективно, так как окно документа прячется за окном ОФ "Печать"
//		СообщенияПользователю.Добавить(ТекстСообщения);
//		
//	Иначе
//		
//		СчетФактураВыданный = СчетФактураВыданный.Ссылка;
//		
//	КонецЕсли;
//	
//	Возврат СчетФактураВыданный;
//	
//КонецФункции // ПроверитьВыпискуСчетовФактур()

//#КонецОбласти

//#Область ПроцедурыИФункцииДляРаботыСРабочимКалендарем

//// Функция возвращает номер строки в поле табличного документа
////  для вывода События по его дате (начала или конца)
////
//// Параметры
////  Часы - Строка, часы даты
////  Минуты - Строка, минуты даты
////  Дата - Дата, текущее значение даты для определения
////  Начало - Булево, признак начала или окончания периода
////  ДатаСравнения - Дата, дата с которой сравнивается значение исходной даты
////
//// Возвращаемое значение:
////   Число - номер строки в поле табличного документа
////
//Функция ВозвратитьНомерСтроки(Часы, Минуты, Дата, Начало, ДатаСравнения) Экспорт
//	
//	Если ПустаяСтрока(Часы) Тогда
//		Часы = 0;
//	Иначе
//		Часы = Число(Часы);
//	КонецЕсли; 
//	
//	Если ПустаяСтрока(Минуты) Тогда
//		Минуты = 0;
//	Иначе
//		Минуты = Число(Минуты);
//	КонецЕсли; 
//	
//	Если Начало Тогда
//		Если Дата < НачалоДня(ДатаСравнения) Тогда
//			Возврат 1;
//		Иначе
//			Если Минуты < 30 Тогда
//				Если Минуты = 0 Тогда
//					Если Часы = 0 Тогда
//						Возврат 1;
//					Иначе
//						Возврат (Часы * 2 + 1);
//					КонецЕсли; 
//				Иначе
//					Возврат (Часы * 2 + 1);
//				КонецЕсли; 
//			Иначе
//				Если Часы = 23 Тогда
//					Возврат 48;
//				Иначе
//					Возврат (Часы * 2 + 2);
//				КонецЕсли; 
//			КонецЕсли;
//		КонецЕсли; 
//	Иначе
//		Если Дата > КонецДня(ДатаСравнения) Тогда
//			Возврат 48;
//		Иначе
//			Если Минуты = 0 Тогда
//				Если Часы = 0 Тогда
//					Возврат 1;
//				Иначе
//					Возврат (Часы * 2);
//				КонецЕсли; 
//			ИначеЕсли Минуты <= 30 Тогда
//				Возврат (Часы * 2 + 1);
//			Иначе
//				Если Часы = 23 Тогда
//					Возврат 48;
//				Иначе
//					Возврат (Часы * 2 + 2);
//				КонецЕсли; 
//			КонецЕсли;
//		КонецЕсли; 
//	КонецЕсли;
//	
//КонецФункции

//// Функция возвращает наименование дня недели по его номеру
////
//// Параметры
////  НомерДняНедели - Число, номер дня недели
////
//// Возвращаемое значение:
////   Строка, наименование дня недели
////
//Функция ОпределитьДеньНедели(НомерДняНедели) Экспорт
//	
//	Если НомерДняНедели = 1 Тогда
//		Возврат "Пн";
//	ИначеЕсли НомерДняНедели = 2 Тогда
//		Возврат "Вт";
//	ИначеЕсли НомерДняНедели = 3 Тогда
//		Возврат "Ср";
//	ИначеЕсли НомерДняНедели = 4 Тогда
//		Возврат "Чт";
//	ИначеЕсли НомерДняНедели = 5 Тогда
//		Возврат "Пт";
//	ИначеЕсли НомерДняНедели = 6 Тогда
//		Возврат "Сб";
//	Иначе
//		Возврат "Вс";
//	КонецЕсли;
//	
//КонецФункции

//// Функция определяет следующую дату за текущей в зависимости от
////  настроенного количества дней в недели для отображения в календаре
////
//// Параметры
////  ТекущаяДата - Дата, текущая дата
////
//// Возвращаемое значение:
////   Дата - следующая дата
////
//Функция ОпределитьСледующуюДата(ТекущаяДата, КоличествоДнейНедели) Экспорт
//	
//	Если КоличествоДнейНедели = "7" Тогда
//		Возврат ТекущаяДата + 60*60*24;
//	ИначеЕсли КоличествоДнейНедели = "6" Тогда
//		Если ДеньНедели(ТекущаяДата) = 6 Тогда
//			Возврат ТекущаяДата + 60*60*24*2;
//		Иначе
//			Возврат ТекущаяДата + 60*60*24;
//		КонецЕсли; 
//	ИначеЕсли КоличествоДнейНедели = "5" Тогда
//		Если ДеньНедели(ТекущаяДата) = 5 Тогда
//			Возврат ТекущаяДата + 60*60*24*3;
//		ИначеЕсли ДеньНедели(ТекущаяДата) = 6 Тогда
//			Возврат ТекущаяДата + 60*60*24*2;
//		Иначе
//			Возврат ТекущаяДата + 60*60*24;
//		КонецЕсли; 
//	КонецЕсли; 
//	
//КонецФункции // ОпределитьСледующуюДата()

//#КонецОбласти

//#Область процедурыИФункцииДляРаботыСПодбором

//// Процедура устанавливает (сбрасывает) настройки подбора для указанного пользователя
//// 
//Процедура УстановитьСтандартныеНастройкиПодбора(ТекущийПользователь) Экспорт
//	
//	Если НЕ ЗначениеЗаполнено(ТекущийПользователь) Тогда
//		
//		ОбщегоНазначения.СообщитьПользователю(
//		Нстр("ru= 'Неуказан пользователь, для которого устанавливаются настройки подбора по умолчанию.'")
//		);
//		
//		Возврат;
//		
//	КонецЕСли;
//	
//	НастройкиПодбораПоУмолчанию = НастройкиПодбораПоУмолчанию();
//	
//	Для каждого Настройка Из НастройкиПодбораПоУмолчанию Цикл
//		
//		УстановитьНастройкуПользователя(Настройка.Значение, Настройка.Ключ, ТекущийПользователь);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // УстановитьСтандартныеНастройкиПодбора()

//// Возвращает соответствие настроек по умолчанию.
////
//Функция НастройкиПодбораПоУмолчанию()
//	
//	НастройкиПодбораПоУмолчанию = Новый Соответствие;
//	
//	НастройкиПодбораПоУмолчанию.Вставить("ГруппаОтбора", 				Справочники.Номенклатура.ПустаяСсылка());
//	НастройкиПодбораПоУмолчанию.Вставить("ЗапоминатьТекущуюИерархию", 	Ложь);
//	НастройкиПодбораПоУмолчанию.Вставить("ЗапрашиватьКоличествоИЦену",	Ложь);
//	НастройкиПодбораПоУмолчанию.Вставить("ПоказыватьОстатки", 			Истина);
//	НастройкиПодбораПоУмолчанию.Вставить("ПоказыватьРезерв", 			Ложь);
//	НастройкиПодбораПоУмолчанию.Вставить("ПоказыватьСвободныйОстаток",	Ложь);
//	НастройкиПодбораПоУмолчанию.Вставить("ПоказыватьЦены", 				Истина);
//	НастройкиПодбораПоУмолчанию.Вставить("СпособВыводаОстатков", 		Перечисления.СпособВыводаОстатковВПодборе.ВТаблице);
//	НастройкиПодбораПоУмолчанию.Вставить("ИспользоватьНовыйМеханизмПодбора", Истина);
//	НастройкиПодбораПоУмолчанию.Вставить("ВыводитьСоветВернутьсяКНоменклатуре", Истина);
//	НастройкиПодбораПоУмолчанию.Вставить("ВыводитьСоветИспользоватьПредыдущийПодбор", Истина);
//	НастройкиПодбораПоУмолчанию.Вставить("ВыводитьСоветУслугиВПриходныхДокументах", Истина);
//	
//	Возврат НастройкиПодбораПоУмолчанию;
//	
//КонецФункции // НастройкиПодбораПоУмолчанию()

//// Процедура инициализирует установку пользовательских настроек подбора
//// Актуальна для новых пользователей
////
//Процедура УстановкаПользовательскихНастроекПодбораПриЗаписи(Источник, Отказ) Экспорт
//	
//	Если Источник.ОбменДанными.Загрузка = Истина Тогда
//		
//		Возврат;
//		
//	КонецЕсли;
//	
//	СсылкаПользователя = Источник.Ссылка;
//	
//	Если НЕ ЗначениеЗаполнено(СсылкаПользователя) Тогда
//		
//		СсылкаПользователя = Источник.ПолучитьСсылкуНового();
//		
//		Если НЕ ЗначениеЗаполнено(СсылкаПользователя) Тогда 
//			
//			СсылкаПользователя = Справочники.Пользователи.ПолучитьСсылку();
//			Источник.УстановитьСсылкуНового(СсылкаПользователя);
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	УстановитьСтандартныеНастройкиПодбора(СсылкаПользователя);
//	
//КонецПроцедуры // УстановкаПользовательскихНастроекПодбораПриЗаписи()

//#КонецОбласти

//#Область ПроцедурыИФункцииОтправкиЭлектронныхПисем

//// Функция исплользуется для заполнения отправителей письма, как с печатными формами, так и без них.
//// Функция возвращает ПодготовитьЭлектронныеАдресаПолучателей.
//Функция ПолучитьПодготовленныеЭлектронныеАдресаПолучателей(МассивОбъектов) Экспорт
//	
//	Получатели = Новый СписокЗначений;
//	
//	Если ТипЗнч(МассивОбъектов) = Тип("Массив") ИЛИ ТипЗнч(МассивОбъектов) = Тип("ФиксированныйМассив") Тогда
//		
//		ТипыМетаданныхСодержащиеПартнерскиеEmail = УправлениеНебольшойФирмойКонтактнаяИнформацияСервер.ПолучитьТипыМетаданныхСодержащиеПартнерскиеEmail();
//		
//		Для каждого ОбъектМассива Из МассивОбъектов Цикл
//			
//			Если НЕ ЗначениеЗаполнено(ОбъектМассива) Тогда 
//				
//				Продолжить; 
//				
//			ИначеЕсли ТипЗнч(ОбъектМассива) = Тип("СправочникСсылка.Контрагенты") Тогда 
//				
//				// Актуально для печати из справочника, например, прайс-лист из Справочники.Контрагенты
//				ЗначенияСтруктурыВСписокЗначений(Получатели, Новый Структура("Контрагент", ОбъектМассива));
//				Продолжить;
//				
//			ИначеЕсли ТипЗнч(ОбъектМассива) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
//				
//				ЗначенияСтруктурыВСписокЗначений(Получатели, Новый Структура("Контрагент", ОбъектМассива.Владелец));
//				Продолжить;
//				
//			КонецЕсли;
//			
//			МатаданныеОбъекта = ОбъектМассива.Метаданные();
//			
//			ИменаРеквизитовСодержащиеEmail = Новый Массив;
//			
//			// Проверим все реквизиты переданного объекта
//			Для каждого ЭлементМетаданных Из МатаданныеОбъекта.Реквизиты Цикл
//				
//				ОбъектСодержитьEmail(ЭлементМетаданных, ТипыМетаданныхСодержащиеПартнерскиеEmail, ИменаРеквизитовСодержащиеEmail);
//				
//			КонецЦикла;
//			
//			Если ИменаРеквизитовСодержащиеEmail.Количество() > 0 Тогда
//				
//				ЗначенияСтруктурыВСписокЗначений(
//					Получатели,
//					ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектМассива, ИменаРеквизитовСодержащиеEmail)
//					);
//				
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//	КонецЕсли;
//	
//	Возврат УправлениеНебольшойФирмойКонтактнаяИнформацияСервер.ПодготовитьЭлектронныеАдресаПолучателей(Получатели, Истина);
//	
//КонецФункции //ПолучитьПодготовленныеЭлектронныеАдресаПолучателей()

//// Процедура заполняет параметры отправки электронного письма при печати документов.
//// Параметры совпадают с параметрами передаваемыми в процедуру Печать() модулей менеджеров документов.
//Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм = Неопределено) Экспорт
//	
//	ПараметрыОтправки.Получатель = ПолучитьПодготовленныеЭлектронныеАдресаПолучателей(МассивОбъектов);
//	
//	ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
//	ПараметрыОтправки.Вставить("Отправитель", ?(ДоступныеУчетныеЗаписи.Количество() > 0, ДоступныеУчетныеЗаписи[0].Ссылка, Неопределено));
//	
//	ЗаполнитьТемуТекстОтправки(ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
//	
//КонецПроцедуры //ЗаполнитьПараметрыОтправки()

//// Иницировать получение доступных учетных записей электронной почты
//// Параметры:
//// ДляОтправки - Булево - Если установлено Истина, то будут выбирать только записи, с которых можно отправлять почту
//// ДляПолучения   - Булево - Если установлено Истина, то будут выбирать только записи, по которым можно получать почту
//// ВключатьСистемнуюУчетнуюЗапись - Булево - включать системную учетную запись, если доступна
////
//// Возвращаемое значение:
//// ДоступныеУчетныеЗаписи - ТаблицаЗначений - С колонками:
////    Ссылка       - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - Ссылка на учетную запись
////    Наименование - Строка - Наименование учетной записи
////    Адрес        - Строка - Адрес электронной почты
////
//Функция ПолучитьДоступнуюУчетнуюЗапись(знач ДляОтправки = Неопределено, знач ДляПолучения  = Неопределено, знач ВключатьСистемнуюУчетнуюЗапись = Истина) Экспорт

//	ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(ДляОтправки, ДляПолучения, ВключатьСистемнуюУчетнуюЗапись);
//	
//	Возврат ?(ДоступныеУчетныеЗаписи.Количество() > 0, ДоступныеУчетныеЗаписи[0].Ссылка, Неопределено);
//	
//КонецФункции

//// Добавляет в массив имя метаданных содержащих e-mail
////
//Процедура ОбъектСодержитьEmail(МатаданныеОбъектаРеквизита, ТипыМетаданныхСодержащиеПартнерскиеEmail, ИменаРеквизитовСодержащиеEmail)
//	
//	Если НЕ ТипыМетаданныхСодержащиеПартнерскиеEmail.НайтиПоЗначению(МатаданныеОбъектаРеквизита.Тип) = Неопределено Тогда
//		
//		ИменаРеквизитовСодержащиеEmail.Добавить(МатаданныеОбъектаРеквизита.Имя);
//		
//	КонецЕсли;
//	
//КонецПроцедуры //ОбъектСодержитьEmail()

//// Процедура заполняет тему и текст параметров отправки электронного письма при печати документов.
//// Параметры совпадают с параметрами передаваемыми в процедуру Печать() модулей менеджеров документов.
//Процедура ЗаполнитьТемуТекстОтправки(ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм)
//	
//	Тема  = "";
//	Текст = "";
//	
//	ПредставлениеЗаголовкаДокумента = "";
//	ПредставлениеДляКого = "";
//	ПредставлениеОтКого = "";
//	
//	ПечатаютсяДокументы = МассивОбъектов.Количество() > 0 И ОбщегоНазначения.ВидОбъектаПоСсылке(МассивОбъектов[0]) = "Документ";
//	
//	Если ПечатаютсяДокументы Тогда
//		Если МассивОбъектов.Количество() = 1 Тогда
//			ПредставлениеЗаголовкаДокумента = СформироватьЗаголовокДокумента(МассивОбъектов[0]);
//		Иначе
//			ПредставлениеЗаголовкаДокумента = "Документы: ";
//			Для Каждого ОбъектДляПечати Из МассивОбъектов Цикл
//				ПредставлениеЗаголовкаДокумента = ПредставлениеЗаголовкаДокумента + ?(ПредставлениеЗаголовкаДокумента = "Документы: ", "", "; ")
//					+ СформироватьЗаголовокДокумента(ОбъектДляПечати);
//			КонецЦикла;
//		КонецЕсли;
//	КонецЕсли;
//	
//	СтруктураТиповОбъектыПечати = РазложитьСписокПоТипамОбъектов(МассивОбъектов);
//	
//	ОрганизацияПоПисьму = ПолучитьЗначениеОбщегоРеквизита(СтруктураТиповОбъектыПечати, "Организация", ОписаниеТиповИзСтроки("Организации"));
//	КонтрагентПоПисьму  = ПолучитьЗначениеОбщегоРеквизита(СтруктураТиповОбъектыПечати, "Контрагент",  ОписаниеТиповИзСтроки("Контрагенты"));
//	
//	Если ЗначениеЗаполнено(КонтрагентПоПисьму) Тогда
//		ПредставлениеДляКого = "для " + ПолучитьПредставлениеУчастника(КонтрагентПоПисьму);
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ОрганизацияПоПисьму) Тогда
//		ПредставлениеОтКого = "от " + ПолучитьПредставлениеУчастника(ОрганизацияПоПисьму);
//	КонецЕсли;
//	
//	ДопустимаяДлинаТемы = Метаданные.Документы.Событие.Реквизиты.Тема.Тип.КвалификаторыСтроки.Длина;
//	Если СтрДлина(ПредставлениеЗаголовкаДокумента + ПредставлениеДляКого + ПредставлениеОтКого) > ДопустимаяДлинаТемы Тогда
//		ПредставлениеОтКого = "";
//	КонецЕсли;
//	Если СтрДлина(ПредставлениеЗаголовкаДокумента + ПредставлениеДляКого + ПредставлениеОтКого) > ДопустимаяДлинаТемы Тогда
//		ПредставлениеДляКого = "";
//	КонецЕсли;
//	Если СтрДлина(ПредставлениеЗаголовкаДокумента + ПредставлениеДляКого + ПредставлениеОтКого) > ДопустимаяДлинаТемы Тогда
//		ПредставлениеЗаголовкаДокумента = "";
//		Если ПечатаютсяДокументы Тогда
//			ПредставлениеЗаголовкаДокумента = "Документы: ";
//			Для каждого КлючИЗначение Из СтруктураТиповОбъектыПечати Цикл
//				ПредставлениеЗаголовкаДокумента = ПредставлениеЗаголовкаДокумента + ?(ПредставлениеЗаголовкаДокумента = "Документы: ", "", "; ")
//					+ ?(ПустаяСтрока(КлючИЗначение.Ключ.ПредставлениеСписка), КлючИЗначение.Ключ.Синоним, КлючИЗначение.Ключ.ПредставлениеСписка);
//			КонецЦикла;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Тема = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2 %3'"),
//		ПредставлениеЗаголовкаДокумента,
//		ПредставлениеДляКого,
//		ПредставлениеОтКого
//		);
//		
//	Если НЕ (ПараметрыОтправки.Свойство("Тема") И ЗначениеЗаполнено(ПараметрыОтправки.Тема)) Тогда
//		ПараметрыОтправки.Вставить("Тема", СократитьДвойныеПробелы(Тема));
//	КонецЕсли;
//	
//	Если НЕ (ПараметрыОтправки.Свойство("Текст") И ЗначениеЗаполнено(ПараметрыОтправки.Текст)) Тогда
//		ПараметрыОтправки.Вставить("Текст", СократитьДвойныеПробелы(Текст));
//	КонецЕсли;
//	
//КонецПроцедуры

//// Функция получает значение основного печатаемого реквизита для участников электронного письма.
////
//// Параметры:
////  Ссылка	 - СправочникСсылка.Контрагенты, СправочникСсылка.Организации	 - Ссылка на участника для которого необходимо получить представление
//// Возвращаемое значение:
////  Строка - значение представления
//Функция ПолучитьПредставлениеУчастника(Ссылка)
//	
//	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
//		Возврат "";
//	КонецЕсли;
//	
//	ИменаРеквизитовОбъекта = Новый Соответствие;
//	
//	ИменаРеквизитовОбъекта.Вставить(Тип("СправочникСсылка.Контрагенты"), "НаименованиеПолное");
//	ИменаРеквизитовОбъекта.Вставить(Тип("СправочникСсылка.Организации"), "Наименование");
//	
//	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИменаРеквизитовОбъекта[ТипЗнч(Ссылка)]);
//	
//КонецФункции 

//// Функция заменяет двойные пробелы одинарными.
////
//// Параметры:
////  ИсходнаяСтрока	 - Строка
//// Возвращаемое значение:
////  Строка - Строка без двойных пробелов
//Функция СократитьДвойныеПробелы(ИсходнаяСтрока)

//	Пока СтрНайти(ИсходнаяСтрока, "  ") > 0  Цикл
//	
//		ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "  ", " ");
//	
//	КонецЦикла; 
//	
//	Возврат СокрП(ИсходнаяСтрока);

//КонецФункции 

//// Функция формирует представление заголовка документа.
////
//// Возвращаемое значение:
////  Строка - представление документа в виде номера и даты в кратком формате
//Функция СформироватьЗаголовокДокумента(ДокументСсылка) Экспорт

//	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
//		Возврат "";
//	Иначе
//		Возврат ДокументСсылка.Метаданные().Синоним + " № "
//			+ ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументСсылка.Номер, Истина, Истина)
//			+ " от " + Формат(ДокументСсылка.Дата, "ДФ='дд ММММ гггг'") + " г.";
//	КонецЕсли;

//КонецФункции // СформироватьЗаголовокДокумента()

//// Функция возвращает описание ссылочных типов по входящей строке.
////
//// Параметры:
////  СтрокаОписанияТипов	 - Строка	 - Строка с именами справочников, разделенных запятыми
//// Возвращаемое значение:
////  ОписаниеТипов
//Функция ОписаниеТиповИзСтроки(СтрокаОписанияТипов)

//	СтруктураДопустимыхТипов 	= Новый Структура(СтрокаОписанияТипов);
//	МассивДопустимыхТипов 		= Новый Массив;
//	
//	Для каждого ЭлементСтруктуры Из СтруктураДопустимыхТипов Цикл
//		
//		МассивДопустимыхТипов.Добавить(Тип("СправочникСсылка."+ЭлементСтруктуры.Ключ));
//		
//	КонецЦикла; 
//	
//	Возврат Новый ОписаниеТипов(МассивДопустимыхТипов);
//	
//КонецФункции 

//// Функция раскладывает список значений на соотвествие по типам значений.
////
//// Параметры:
////  МассивОбъектов - <СписокЗначений> - список объектов различного вида
////
//// Возвращаемое значение:
////   Соответствие   - соответствие в котором Ключ = Метаданные типа, Значение = массив объектов этого типа
//Функция РазложитьСписокПоТипамОбъектов(СписокОбъектов)
//	
//	СтруктураТипов = Новый Соответствие;
//	
//	Для Каждого Объект Из СписокОбъектов Цикл
//		
//		МетаданныеДокумента = Объект.Метаданные();
//		
//		Если СтруктураТипов.Получить(МетаданныеДокумента) = Неопределено Тогда
//			МассивДокументов = Новый Массив;
//			СтруктураТипов.Вставить(МетаданныеДокумента, МассивДокументов);
//		КонецЕсли;
//		
//		СтруктураТипов[МетаданныеДокумента].Добавить(Объект);
//		
//	КонецЦикла;
//	
//	Возврат СтруктураТипов;
//	
//КонецФункции

//Функция ИсключенияПоискаОбщихРеквизитов()
//	
//	СвойстваИсключения = Новый Массив;
//	СвойстваИсключения.Добавить("Организация");
//	
//	Исключения = Новый Соответствие;
//	Исключения.Вставить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка().Метаданные(), СвойстваИсключения);
//	
//	Возврат Исключения;
//	
//КонецФункции

//// Возвращает ссылку на значение реквизита который должен быть одинаков во всех объектах списка. 
//// Если значение реквизита в документах списка различается, то возвращается Неопределено
////
//// Параметры:
////  ОбъектыПечати  - <СписокЗначений> - список объектов, в которых ищем контрагента
////
//// Возвращаемое значение:
////   <СправочникСсылка>, Неопределено - ссылка-значение реквизита, которая содержится во всех объектах, Неопределено - иначе
////
//Функция ПолучитьЗначениеОбщегоРеквизита(СтруктураТипов, ИмяРеквизита, ОписаниеДопустимыхТипов)
//	Перем ТекстЗапроса;
//	
//	Запрос = Новый Запрос;
//	
//	ТекстЗапросаПоОбъекту = "
//	|	%ИмяОбъекта%.%ИмяРеквизита% КАК %ИмяРеквизита%
//	|ИЗ
//	|	%ТипОбъекта%.%ИмяОбъекта% КАК %ИмяОбъекта%
//	|ГДЕ
//	|	%ИмяОбъекта%.Ссылка В(&СписокОбъектов%ИмяОбъекта%)";
//	
//	ТекстЗапросаПоОбъекту = СтрЗаменить(ТекстЗапросаПоОбъекту, "%ИмяРеквизита%", ИмяРеквизита);
//	ИсключенияПоискаОбщихРеквизитов = ИсключенияПоискаОбщихРеквизитов();
//	
//	Для каждого КлючИЗначение Из СтруктураТипов Цикл
//		
//		Если НЕ ЕстьРеквизитДокумента(ИмяРеквизита, КлючИЗначение.Ключ) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		СвойстваИсключения = ИсключенияПоискаОбщихРеквизитов.Получить(КлючИЗначение.Ключ);
//		Если СвойстваИсключения <> Неопределено И СвойстваИсключения.Найти(ИмяРеквизита) <> Неопределено Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если ОбщегоНазначения.ЭтоДокумент(КлючИЗначение.Ключ) Тогда
//			ТипОбъекта = "Документ";
//		ИначеЕсли ОбщегоНазначения.ЭтоСправочник(КлючИЗначение.Ключ) Тогда
//			ТипОбъекта = "Справочник";
//		Иначе
//			Продолжить;
//		КонецЕсли;
//		
//		ИмяОбъекта = КлючИЗначение.Ключ.Имя;
//		
//		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
//			
//			ТекстЗапроса = ТекстЗапроса+"
//			|ОБЪЕДИНИТЬ
//			|
//			|ВЫБРАТЬ РАЗЛИЧНЫЕ";
//			
//		Иначе
//			
//			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ";
//			
//		КонецЕсли;
//		
//		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстЗапросаПоОбъекту, "%ТипОбъекта%", ТипОбъекта);
//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяОбъекта%", ИмяОбъекта);
//		
//		Запрос.УстановитьПараметр("СписокОбъектов" + ИмяОбъекта, КлючИЗначение.Значение);
//		
//	КонецЦикла;
//	
//	Если ПустаяСтрока(ТекстЗапроса) Тогда
//	
//		Возврат Неопределено;
//	
//	КонецЕсли; 
//	
//	Запрос.Текст = ТекстЗапроса;
//	Результат = Запрос.Выполнить();
//	
//	Если НЕ Результат.Пустой() Тогда
//		
//		Выборка = Результат.Выбрать();
//		
//		Если Выборка.Количество() = 1 Тогда
//			
//			Если Выборка.Следующий() Тогда
//				Возврат ОписаниеДопустимыхТипов.ПривестиЗначение(Выборка[ИмяРеквизита]);
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Возврат Неопределено;
//	
//КонецФункции

//#КонецОбласти

//#Область ДелегированиеФункцийМодуляОбщегоНазначенияТребующихВызовСервера

//// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
//// из процедуры ТестНастроекСертификата() формы элемента справочника СертификатыЭП
////
//Функция ПрочитатьЗначениеРеквизита_ПарольПользователя_ЗапомнитьПарольКСертификату_Отпечаток_Ссылка(ОбъектИлиСсылка) Экспорт
//	
//	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
//		ОбъектИлиСсылка, 
//		"ПарольПользователя, ЗапомнитьПарольКСертификату, Отпечаток, Ссылка"
//		);
//	
//КонецФункции // ПрочитатьЗначениеРеквизита_СправочникСертификатыЭПФормаЭлемента()

//// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
//// из процедуры ОбработкаКоманды() команды ТестНастроекСоглашения справочника СоглашенияОбИспользованииЭД
////
//Функция ПрочитатьЗначениеРеквизита_СправочникСоглашенияОбИспользованииЭД_КомандаТестНастроекСоглашения(ОбъектИлиСсылка) Экспорт
//	
//	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
//		ОбъектИлиСсылка,
//		"Ссылка, СтатусСоглашения, СпособОбменаЭД, РесурсВходящихДокументов, СертификатАбонента, СертификатОрганизацииДляРасшифровки"
//		);
//		
//КонецФункции // ПрочитатьЗначениеРеквизита_СправочникСертификатыЭПФормаЭлемента()

//// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
//// из процедуры Добавить() формы обработки Прайс-лист
////
//Функция ПрочитатьЗначениеРеквизита_Владелец(ОбъектИлиСсылка) Экспорт
//	
//	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектИлиСсылка, "Владелец");
//	
//КонецФункции // ПрочитатьЗначениеРеквизита_ОбработкаПрайсЛистФормаОбработки()

//// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
//// из процедуры ДеревоПодчиненныеЭДВыбор() формы ДеревоЭД обработки ЭлектронныеДокументы
////
//Функция ПрочитатьЗначениеРеквизита_Соглашение(ОбъектИлиСсылка) Экспорт
//	
//	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектИлиСсылка, "Соглашение");
//	
//КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

//// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
//// из процедуры ПарольСертификата() формы ФормаЭлементаЧерезОЭДО справочника СоглашенияОбИспользованииЭД
////
//Функция ПрочитатьЗначениеРеквизита_СертификатАбонента(ОбъектИлиСсылка) Экспорт
//	
//	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектИлиСсылка, "СертификатАбонента");
//	
//КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

//// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
//// из процедуры ПарольСертификата() формы ФормаЭлементаЧерезОЭДО справочника СоглашенияОбИспользованииЭД
////
//Функция ПрочитатьЗначениеРеквизита_ЗапомнитьПарольКСертификату(ОбъектИлиСсылка) Экспорт
//	
//	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектИлиСсылка, "ЗапомнитьПарольКСертификату");
//	
//КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

//// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
//// из процедуры ПарольСертификата() формы ФормаЭлементаЧерезОЭДО справочника СоглашенияОбИспользованииЭД
////
//Функция ПрочитатьЗначениеРеквизита_ПарольПользователя(ОбъектИлиСсылка) Экспорт
//	
//	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектИлиСсылка, "ПарольПользователя");
//	
//КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

//// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
//// из процедуры ОбработатьОтклонениеЭД() формы ФормаПросмотраЭД справочника ЭДПрисоединенныеФайлы
////
//Функция ПрочитатьЗначениеРеквизита_СпособОбменаЭД(ОбъектИлиСсылка) Экспорт
//	
//	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектИлиСсылка, "СпособОбменаЭД");
//	
//КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

//#КонецОбласти

//#Область ПроцедурыИФункцииКурсовыеРазницы

//// Функция возвращает признак необходимости расчета курсовых разниц.
////
//Функция ПолучитьНеобходимостьРасчетаКурсовыхРазниц(МенеджерВременныхТаблиц, ИмяВременнойТаблицыРасчетов)
//	
//	РассчитыватьКурсовыеРазницы = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
//	
//	Если РассчитыватьКурсовыеРазницы Тогда
//		ТекстЗапроса =
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	ТаблицаРасчеты.Валюта КАК Валюта
//		|ИЗ
//		|	%ВременнаяТаблицаРасчеты% КАК ТаблицаРасчеты
//		|ГДЕ
//		|	ТаблицаРасчеты.Валюта <> &ВалютаУчета";
//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВременнаяТаблицаРасчеты%", ИмяВременнойТаблицыРасчетов);
//		Запрос = Новый Запрос();
//		Запрос.Текст = ТекстЗапроса;
//		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
//		Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
//		РассчитыватьКурсовыеРазницы = НЕ Запрос.Выполнить().Пустой();
//	КонецЕсли;
//	
//	Если РассчитыватьКурсовыеРазницы Тогда
//		ЧастотаРасчетаКурсовыхРазниц = Константы.ЧастотаРасчетаКурсовыхРазниц.Получить();
//		Если ЧастотаРасчетаКурсовыхРазниц = Перечисления.ЧастотаРасчетаКурсовыхРазниц.ВМоментВыполненияОпераций Тогда
//			РассчитыватьКурсовыеРазницы = Истина;
//		Иначе
//			РассчитыватьКурсовыеРазницы = Ложь;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат РассчитыватьКурсовыеРазницы;
//	
//КонецФункции // ПолучитьНеобходимостьРасчетаКурсовыхРазниц()

//// Функция возвращает текст запроса для расчета курсовых разниц.
////
//Функция ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПоставщиками(МенеджерВременныхТаблиц, СЗачетомАванса, НомерЗапроса, ПолучатьРеквизитыРасчетов = Ложь) Экспорт
//	
//	РассчитыватьКурсовыеРазницы = ПолучитьНеобходимостьРасчетаКурсовыхРазниц(МенеджерВременныхТаблиц, "ВременнаяТаблицаРасчетыСПоставщиками");
//	
//	Если НЕ РассчитыватьКурсовыеРазницы Тогда
//		
//		НомерЗапроса = 1;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаРасчеты.Организация КАК Организация,
//		|	ТаблицаРасчеты.Контрагент КАК Контрагент,
//		|	ТаблицаРасчеты.Договор КАК Договор,
//		|	ТаблицаРасчеты.Документ КАК Документ,
//		|	ТаблицаРасчеты.Заказ КАК Заказ,
//		|	ТаблицаРасчеты.ТипРасчетов КАК ТипРасчетов,
//		|	0 КАК СуммаКурсовойРазницы,
//		|	ТаблицаРасчеты.Валюта КАК Валюта,
//		|	ТаблицаРасчеты.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщиками
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПоставщиками КАК ТаблицаРасчеты
//		|ГДЕ
//		|	ЛОЖЬ
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.Контрагент КАК Контрагент,
//		|	ТаблицаДокумента.Договор КАК Договор,
//		|	ТаблицаДокумента.Документ КАК Документ,
//		|	ТаблицаДокумента.Заказ КАК Заказ,
//		|	ТаблицаДокумента.ТипРасчетов КАК ТипРасчетов,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.СуммаРег КАК СуммаРег,
//		|	ТаблицаДокумента.СчетУчета,
//		|	ТаблицаДокумента.Валюта,
//		|	ТаблицаДокумента.СодержаниеПроводки,
//		|	&РеквизитыРасчетов
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПоставщиками КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ТаблицаДокумента.СодержаниеПроводки,
//		|	Документ,
//		|	Заказ,
//		|	ВидДвижения";
//		
//		РасчетыПроведениеДокументов.ДобавитьТекстЗапросаРеквизитовРасчетов(ТекстЗапроса, ПолучатьРеквизитыРасчетов, Ложь, Истина);
//		
//	ИначеЕсли СЗачетомАванса Тогда
//		
//		НомерЗапроса = 2;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ
//		|	РасчетыОстатки.Организация КАК Организация,
//		|	РасчетыОстатки.Контрагент КАК Контрагент,
//		|	РасчетыОстатки.Договор КАК Договор,
//		|	РасчетыОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
//		|	РасчетыОстатки.Документ КАК Документ,
//		|	РасчетыОстатки.Заказ КАК Заказ,
//		|	РасчетыОстатки.ТипРасчетов КАК ТипРасчетов,
//		|	ВЫБОР
//		|		КОГДА РасчетыОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|			ТОГДА РасчетыОстатки.Контрагент.СчетУчетаРасчетовСПоставщиком
//		|		ИНАЧЕ РасчетыОстатки.Контрагент.СчетУчетаАвансовПоставщику
//		|	КОНЕЦ КАК СчетУчета,
//		|	СУММА(РасчетыОстатки.СуммаОстаток) КАК СуммаОстаток,
//		|	СУММА(РасчетыОстатки.СуммаВалОстаток) КАК СуммаВалОстаток,
//		|	СУММА(РасчетыОстатки.СуммаРегОстаток) КАК СуммаРегОстаток
//		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиПослеПроведения
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ВременнаяТаблица.Организация КАК Организация,
//		|		ВременнаяТаблица.Контрагент КАК Контрагент,
//		|		ВременнаяТаблица.Договор КАК Договор,
//		|		ВременнаяТаблица.Документ КАК Документ,
//		|		ВременнаяТаблица.Заказ КАК Заказ,
//		|		ВременнаяТаблица.ТипРасчетов КАК ТипРасчетов,
//		|		ВЫБОР
//		|			КОГДА ВременнаяТаблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА ВременнаяТаблица.СуммаДляОстатка
//		|			ИНАЧЕ - ВременнаяТаблица.СуммаДляОстатка
//		|		КОНЕЦ КАК СуммаОстаток,
//		|		ВЫБОР
//		|			КОГДА ВременнаяТаблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА ВременнаяТаблица.СуммаВалДляОстатка
//		|			ИНАЧЕ - ВременнаяТаблица.СуммаВалДляОстатка
//		|		КОНЕЦ КАК СуммаВалОстаток,
//		|		ВЫБОР
//		|			КОГДА ВременнаяТаблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА ВременнаяТаблица.СуммаРег
//		|			ИНАЧЕ - ВременнаяТаблица.СуммаРег
//		|		КОНЕЦ КАК СуммаРегОстаток
//		|	ИЗ
//		|		ВременнаяТаблицаРасчетыСПоставщиками КАК ВременнаяТаблица
//		|	ГДЕ
//		|	ВременнаяТаблица.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаОстатки.Организация,
//		|		ТаблицаОстатки.Контрагент,
//		|		ТаблицаОстатки.Договор,
//		|		ТаблицаОстатки.Документ,
//		|		ТаблицаОстатки.Заказ,
//		|		ТаблицаОстатки.ТипРасчетов,
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0)
//		|	ИЗ
//		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(
//		|				&МоментВремени,
//		|				(Организация, Контрагент, Договор, Документ, Заказ, ТипРасчетов) В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаРасчетыСПоставщиками.Организация,
//		|						ВременнаяТаблицаРасчетыСПоставщиками.Контрагент,
//		|						ВременнаяТаблицаРасчетыСПоставщиками.Договор,
//		|						ВременнаяТаблицаРасчетыСПоставщиками.Документ,
//		|						ВременнаяТаблицаРасчетыСПоставщиками.Заказ,
//		|						ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|					ИЗ
//		|						ВременнаяТаблицаРасчетыСПоставщиками)) КАК ТаблицаОстатки
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ДвиженияДокумента.Организация,
//		|		ДвиженияДокумента.Контрагент,
//		|		ДвиженияДокумента.Договор,
//		|		ДвиженияДокумента.Документ,
//		|		ДвиженияДокумента.Заказ,
//		|		ДвиженияДокумента.ТипРасчетов,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.СуммаРег, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.СуммаРег, 0)
//		|		КОНЕЦ
//		|	ИЗ
//		|		РегистрНакопления.РасчетыСПоставщиками КАК ДвиженияДокумента
//		|	ГДЕ
//		|		ДвиженияДокумента.Регистратор = &Ссылка
//		|		И ДвиженияДокумента.Период <= &ПериодКонтроля
//		|		И ДвиженияДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)) КАК РасчетыОстатки
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	РасчетыОстатки.Организация,
//		|	РасчетыОстатки.Контрагент,
//		|	РасчетыОстатки.Договор,
//		|	РасчетыОстатки.Документ,
//		|	РасчетыОстатки.Заказ,
//		|	РасчетыОстатки.ТипРасчетов,
//		|	РасчетыОстатки.Договор.ВалютаРасчетов,
//		|	ВЫБОР
//		|		КОГДА РасчетыОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|			ТОГДА РасчетыОстатки.Контрагент.СчетУчетаРасчетовСПоставщиком
//		|		ИНАЧЕ РасчетыОстатки.Контрагент.СчетУчетаАвансовПоставщику
//		|	КОНЕЦ
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Организация,
//		|	Контрагент,
//		|	Договор,
//		|	ВалютаРасчетов,
//		|	Документ,
//		|	Заказ,
//		|	ТипРасчетов,
//		|	СчетУчета
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаРасчеты.Организация КАК Организация,
//		|	ТаблицаРасчеты.Контрагент КАК Контрагент,
//		|	ТаблицаРасчеты.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
//		|	ТаблицаРасчеты.Договор КАК Договор,
//		|	ТаблицаРасчеты.Документ КАК Документ,
//		|	ТаблицаРасчеты.Заказ КАК Заказ,
//		|	ТаблицаРасчеты.ТипРасчетов КАК ТипРасчетов,
//		|	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) КАК СуммаКурсовойРазницы,
//		|	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс / КурсыВалютРасчетовСрезПоследних.Кратность - ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0) КАК СуммаКурсовойРазницыРег,
//		|	ТаблицаРасчеты.Валюта КАК Валюта,
//		|	ТаблицаРасчеты.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщикамиПредварительная
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПоставщиками КАК ТаблицаРасчеты
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиПослеПроведения КАК ТаблицаОстатки
//		|		ПО ТаблицаРасчеты.Организация = ТаблицаОстатки.Организация
//		|			И ТаблицаРасчеты.Контрагент = ТаблицаОстатки.Контрагент
//		|			И ТаблицаРасчеты.Договор = ТаблицаОстатки.Договор
//		|			И ТаблицаРасчеты.Документ = ТаблицаОстатки.Документ
//		|			И ТаблицаРасчеты.Заказ = ТаблицаОстатки.Заказ
//		|			И ТаблицаРасчеты.ТипРасчетов = ТаблицаОстатки.ТипРасчетов
//		|			И ТаблицаРасчеты.Валюта = ТаблицаОстатки.ВалютаРасчетов
//		|			И ТаблицаРасчеты.СчетУчета = ТаблицаОстатки.СчетУчета
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ
//		|						КонстантаВалютаУчета.Значение
//		|					ИЗ
//		|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыВалютУчетаСрезПоследних
//		|		ПО (ИСТИНА)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаРасчетыСПоставщиками.Договор.ВалютаРасчетов
//		|					ИЗ
//		|						ВременнаяТаблицаРасчетыСПоставщиками)) КАК КурсыВалютРасчетовСрезПоследних
//		|		ПО ТаблицаРасчеты.Валюта = КурсыВалютРасчетовСрезПоследних.Валюта
//		|ГДЕ
//		|	(ТаблицаОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|			ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) = 0)
//		|	И (		ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) >= 0.005
//		|		ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) <= -0.005
//		|		ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс / КурсыВалютРасчетовСрезПоследних.Кратность - ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0) >= 0.005
//		|		ИЛИ	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс / КурсыВалютРасчетовСрезПоследних.Кратность - ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0) <= -0.005 )
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.Контрагент КАК Контрагент,
//		|	ТаблицаДокумента.Договор КАК Договор,
//		|	ТаблицаДокумента.Документ КАК Документ,
//		|	ТаблицаДокумента.Заказ КАК Заказ,
//		|	ТаблицаДокумента.ТипРасчетов КАК ТипРасчетов,
//		|	ТаблицаДокумента.Валюта КАК Валюта,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.СуммаРег КАК СуммаРег,
//		|	ТаблицаДокумента.СодержаниеПроводки КАК СодержаниеПроводки,
//		|	&РеквизитыРасчетов
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПоставщиками КАК ТаблицаДокумента
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	ТаблицаДвижений.Период,
//		|	ТаблицаДвижений.ВидДвижения,
//		|	ТаблицаДвижений.Организация,
//		|	ТаблицаДвижений.Контрагент,
//		|	ТаблицаДвижений.Договор,
//		|	ТаблицаДвижений.Документ,
//		|	ТаблицаДвижений.Заказ,
//		|	ТаблицаДвижений.ТипРасчетов,
//		|	ТаблицаДвижений.Валюта,
//		|	СУММА(ТаблицаДвижений.Сумма),
//		|	СУММА(ТаблицаДвижений.СуммаВал),
//		|	СУММА(ТаблицаДвижений.СуммаРег),
//		|	ТаблицаДвижений.СодержаниеПроводки,
//		|	&РеквизитыРасчетовНеопределено
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата КАК Период,
//		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
//		|		ТаблицаДокумента.Организация КАК Организация,
//		|		ТаблицаДокумента.Контрагент КАК Контрагент,
//		|		ТаблицаДокумента.Договор КАК Договор,
//		|		ТаблицаДокумента.Документ КАК Документ,
//		|		ТаблицаДокумента.Заказ КАК Заказ,
//		|		ТаблицаДокумента.ТипРасчетов КАК ТипРасчетов,
//		|		ТаблицаДокумента.Валюта КАК Валюта,
//		|		ТаблицаДокумента.СуммаКурсовойРазницы КАК Сумма,
//		|		0 КАК СуммаВал,
//		|		ТаблицаДокумента.СуммаКурсовойРазницыРег КАК СуммаРег,
//		|		ВЫРАЗИТЬ(&КурсоваяРазница КАК СТРОКА(100)) КАК СодержаниеПроводки
//		|	ИЗ
//		|		ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщикамиПредварительная КАК ТаблицаДокумента
//		|	ГДЕ
//		|		ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата,
//		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
//		|		ТаблицаДокумента.Организация,
//		|		ТаблицаДокумента.Контрагент,
//		|		ТаблицаДокумента.Договор,
//		|		ТаблицаДокумента.Документ,
//		|		ТаблицаДокумента.Заказ,
//		|		ТаблицаДокумента.ТипРасчетов,
//		|		ТаблицаДокумента.Валюта,
//		|		ТаблицаДокумента.СуммаКурсовойРазницы,
//		|		0,
//		|		ТаблицаДокумента.СуммаКурсовойРазницыРег,
//		|		ВЫРАЗИТЬ(&ЗачетАванса КАК СТРОКА(100))
//		|	ИЗ
//		|		ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщикамиПредварительная КАК ТаблицаДокумента
//		|	ГДЕ
//		|		ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата,
//		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
//		|		ТаблицаДокумента.Организация,
//		|		ТаблицаДокумента.Контрагент,
//		|		ТаблицаДокумента.Договор,
//		|		ВЫБОР
//		|			КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
//		|				ТОГДА &Ссылка
//		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
//		|		КОНЕЦ,
//		|		ТаблицаДокумента.Заказ,
//		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг),
//		|		ТаблицаДокумента.Валюта,
//		|		ТаблицаДокумента.СуммаКурсовойРазницы,
//		|		0,
//		|		ТаблицаДокумента.СуммаКурсовойРазницыРег,
//		|		ВЫРАЗИТЬ(&ЗачетАванса КАК СТРОКА(100))
//		|	ИЗ
//		|		ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщикамиПредварительная КАК ТаблицаДокумента
//		|	ГДЕ
//		|		ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата,
//		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
//		|		ТаблицаДокумента.Организация,
//		|		ТаблицаДокумента.Контрагент,
//		|		ТаблицаДокумента.Договор,
//		|		ВЫБОР
//		|			КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
//		|				ТОГДА &Ссылка
//		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
//		|		КОНЕЦ,
//		|		ТаблицаДокумента.Заказ,
//		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг),
//		|		ТаблицаДокумента.Валюта,
//		|		ТаблицаДокумента.СуммаКурсовойРазницы,
//		|		0,
//		|		ТаблицаДокумента.СуммаКурсовойРазницыРег,
//		|		ВЫРАЗИТЬ(&КурсоваяРазница КАК СТРОКА(100))
//		|	ИЗ
//		|		ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщикамиПредварительная КАК ТаблицаДокумента
//		|	ГДЕ
//		|		ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаДвижений
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ТаблицаДвижений.Период,
//		|	ТаблицаДвижений.Организация,
//		|	ТаблицаДвижений.Контрагент,
//		|	ТаблицаДвижений.Договор,
//		|	ТаблицаДвижений.Документ,
//		|	ТаблицаДвижений.Заказ,
//		|	ТаблицаДвижений.ТипРасчетов,
//		|	ТаблицаДвижений.Валюта,
//		|	ТаблицаДвижений.СодержаниеПроводки,
//		|	ТаблицаДвижений.ВидДвижения
//		|
//		|ИМЕЮЩИЕ
//		|	(СУММА(ТаблицаДвижений.Сумма) >= 0.005
//		|		ИЛИ СУММА(ТаблицаДвижений.Сумма) <= -0.005
//		|		ИЛИ СУММА(ТаблицаДвижений.СуммаВал) >= 0.005
//		|		ИЛИ СУММА(ТаблицаДвижений.СуммаВал) <= -0.005
//		|		ИЛИ СУММА(ТаблицаДвижений.СуммаРег) >= 0.005
//		|		ИЛИ СУММА(ТаблицаДвижений.СуммаРег) <= -0.005)
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	СодержаниеПроводки,
//		|	Документ,
//		|	Заказ,
//		|	ВидДвижения
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаКурсовыхРазниц.Организация КАК Организация,
//		|	ТаблицаКурсовыхРазниц.Контрагент КАК Контрагент,
//		|	ТаблицаКурсовыхРазниц.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
//		|	ТаблицаКурсовыхРазниц.Договор КАК Договор,
//		|	ТаблицаКурсовыхРазниц.Документ КАК Документ,
//		|	ТаблицаКурсовыхРазниц.Заказ КАК Заказ,
//		|	ТаблицаКурсовыхРазниц.ТипРасчетов КАК ТипРасчетов,
//		|	СУММА(ТаблицаКурсовыхРазниц.СуммаКурсовойРазницы) КАК СуммаКурсовойРазницы,
//		|	ТаблицаКурсовыхРазниц.Валюта КАК Валюта,
//		|	ТаблицаКурсовыхРазниц.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщиками
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата КАК Дата,
//		|		ТаблицаДокумента.Организация КАК Организация,
//		|		ТаблицаДокумента.Контрагент КАК Контрагент,
//		|		ТаблицаДокумента.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
//		|		ТаблицаДокумента.Договор КАК Договор,
//		|		ТаблицаДокумента.Документ КАК Документ,
//		|		ТаблицаДокумента.Заказ КАК Заказ,
//		|		ТаблицаДокумента.ТипРасчетов КАК ТипРасчетов,
//		|		ТаблицаДокумента.Валюта КАК Валюта,
//		|		ТаблицаДокумента.СчетУчета КАК СчетУчета,
//		|		ТаблицаДокумента.СуммаКурсовойРазницы КАК СуммаКурсовойРазницы
//		|	ИЗ
//		|		ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщикамиПредварительная КАК ТаблицаДокумента
//		|	ГДЕ
//		|		ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата,
//		|		ТаблицаДокумента.Организация,
//		|		ТаблицаДокумента.Контрагент,
//		|		ТаблицаДокумента.ВестиРасчетыПоДокументам,
//		|		ТаблицаДокумента.Договор,
//		|		ВЫБОР
//		|			КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
//		|				ТОГДА &Ссылка
//		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
//		|		КОНЕЦ,
//		|		ТаблицаДокумента.Заказ,
//		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг),
//		|		ТаблицаДокумента.Валюта,
//		|		ВЫРАЗИТЬ(ТаблицаДокумента.Контрагент КАК Справочник.Контрагенты).СчетУчетаРасчетовСПоставщиком,
//		|		ТаблицаДокумента.СуммаКурсовойРазницы
//		|	ИЗ
//		|		ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщикамиПредварительная КАК ТаблицаДокумента
//		|	ГДЕ
//		|		ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаКурсовыхРазниц
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ТаблицаКурсовыхРазниц.Организация,
//		|	ТаблицаКурсовыхРазниц.Контрагент,
//		|	ТаблицаКурсовыхРазниц.ВестиРасчетыПоДокументам,
//		|	ТаблицаКурсовыхРазниц.Договор,
//		|	ТаблицаКурсовыхРазниц.Документ,
//		|	ТаблицаКурсовыхРазниц.Заказ,
//		|	ТаблицаКурсовыхРазниц.ТипРасчетов,
//		|	ТаблицаКурсовыхРазниц.Валюта,
//		|	ТаблицаКурсовыхРазниц.СчетУчета
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|УНИЧТОЖИТЬ ВременнаяТаблицаОстаткиПослеПроведения
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|УНИЧТОЖИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщикамиПредварительная";
//		
//		РасчетыПроведениеДокументов.ДобавитьТекстЗапросаРеквизитовРасчетов(ТекстЗапроса, ПолучатьРеквизитыРасчетов, Истина, Истина);
//		
//	Иначе
//		
//		НомерЗапроса = 2;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ
//		|	РасчетыОстатки.Организация КАК Организация,
//		|	РасчетыОстатки.Контрагент КАК Контрагент,
//		|	РасчетыОстатки.Договор КАК Договор,
//		|	РасчетыОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
//		|	РасчетыОстатки.Документ КАК Документ,
//		|	РасчетыОстатки.Заказ КАК Заказ,
//		|	РасчетыОстатки.ТипРасчетов КАК ТипРасчетов,
//		|	ВЫБОР
//		|		КОГДА РасчетыОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|			ТОГДА РасчетыОстатки.Контрагент.СчетУчетаРасчетовСПоставщиком
//		|		ИНАЧЕ РасчетыОстатки.Контрагент.СчетУчетаАвансовПоставщику
//		|	КОНЕЦ КАК СчетУчета,
//		|	СУММА(РасчетыОстатки.СуммаОстаток) КАК СуммаОстаток,
//		|	СУММА(РасчетыОстатки.СуммаВалОстаток) КАК СуммаВалОстаток,
//		|	СУММА(РасчетыОстатки.СуммаРегОстаток) КАК СуммаРегОстаток
//		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиПослеПроведения
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ВременнаяТаблица.Организация КАК Организация,
//		|		ВременнаяТаблица.Контрагент КАК Контрагент,
//		|		ВременнаяТаблица.Договор КАК Договор,
//		|		ВременнаяТаблица.Документ КАК Документ,
//		|		ВременнаяТаблица.Заказ КАК Заказ,
//		|		ВременнаяТаблица.ТипРасчетов КАК ТипРасчетов,
//		|		ВременнаяТаблица.СуммаДляОстатка КАК СуммаОстаток,
//		|		ВременнаяТаблица.СуммаВалДляОстатка КАК СуммаВалОстаток,
//		|		ВременнаяТаблица.СуммаРег КАК СуммаРегОстаток 
//		|	ИЗ
//		|		ВременнаяТаблицаРасчетыСПоставщиками КАК ВременнаяТаблица
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаОстатки.Организация,
//		|		ТаблицаОстатки.Контрагент,
//		|		ТаблицаОстатки.Договор,
//		|		ТаблицаОстатки.Документ,
//		|		ТаблицаОстатки.Заказ,
//		|		ТаблицаОстатки.ТипРасчетов,
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0)
//		|	ИЗ
//		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(
//		|				&МоментВремени,
//		|				(Организация, Контрагент, Договор, Документ, Заказ, ТипРасчетов) В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаРасчетыСПоставщиками.Организация,
//		|						ВременнаяТаблицаРасчетыСПоставщиками.Контрагент,
//		|						ВременнаяТаблицаРасчетыСПоставщиками.Договор,
//		|						ВременнаяТаблицаРасчетыСПоставщиками.Документ,
//		|						ВременнаяТаблицаРасчетыСПоставщиками.Заказ,
//		|						ВременнаяТаблицаРасчетыСПоставщиками.ТипРасчетов
//		|					ИЗ
//		|						ВременнаяТаблицаРасчетыСПоставщиками)) КАК ТаблицаОстатки
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ДвиженияДокумента.Организация,
//		|		ДвиженияДокумента.Контрагент,
//		|		ДвиженияДокумента.Договор,
//		|		ДвиженияДокумента.Документ,
//		|		ДвиженияДокумента.Заказ,
//		|		ДвиженияДокумента.ТипРасчетов,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.СуммаРег, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.СуммаРег, 0)
//		|		КОНЕЦ
//		|	ИЗ
//		|		РегистрНакопления.РасчетыСПоставщиками КАК ДвиженияДокумента
//		|	ГДЕ
//		|		ДвиженияДокумента.Регистратор = &Ссылка
//		|		И ДвиженияДокумента.Период <= &ПериодКонтроля) КАК РасчетыОстатки
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	РасчетыОстатки.Организация,
//		|	РасчетыОстатки.Контрагент,
//		|	РасчетыОстатки.Договор,
//		|	РасчетыОстатки.Документ,
//		|	РасчетыОстатки.Заказ,
//		|	РасчетыОстатки.ТипРасчетов,
//		|	РасчетыОстатки.Договор.ВалютаРасчетов,
//		|	ВЫБОР
//		|		КОГДА РасчетыОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|			ТОГДА РасчетыОстатки.Контрагент.СчетУчетаРасчетовСПоставщиком
//		|		ИНАЧЕ РасчетыОстатки.Контрагент.СчетУчетаАвансовПоставщику
//		|	КОНЕЦ
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Организация,
//		|	Контрагент,
//		|	Договор,
//		|	ВалютаРасчетов,
//		|	Документ,
//		|	Заказ,
//		|	ТипРасчетов,
//		|	СчетУчета
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаРасчеты.Организация КАК Организация,
//		|	ТаблицаРасчеты.Контрагент КАК Контрагент,
//		|	ТаблицаРасчеты.Договор КАК Договор,
//		|	ТаблицаРасчеты.Документ КАК Документ,
//		|	ТаблицаРасчеты.Заказ КАК Заказ,
//		|	ТаблицаРасчеты.ТипРасчетов КАК ТипРасчетов,
//		|	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) КАК СуммаКурсовойРазницы,
//		|	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс / КурсыВалютРасчетовСрезПоследних.Кратность - ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0) КАК СуммаКурсовойРазницыРег,
//		|	ТаблицаРасчеты.Валюта КАК Валюта,
//		|	ТаблицаРасчеты.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщиками
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПоставщиками КАК ТаблицаРасчеты
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиПослеПроведения КАК ТаблицаОстатки
//		|		ПО ТаблицаРасчеты.Организация = ТаблицаОстатки.Организация
//		|			И ТаблицаРасчеты.Контрагент = ТаблицаОстатки.Контрагент
//		|			И ТаблицаРасчеты.Договор = ТаблицаОстатки.Договор
//		|			И ТаблицаРасчеты.Документ = ТаблицаОстатки.Документ
//		|			И ТаблицаРасчеты.Заказ = ТаблицаОстатки.Заказ
//		|			И ТаблицаРасчеты.ТипРасчетов = ТаблицаОстатки.ТипРасчетов
//		|			И ТаблицаРасчеты.Валюта = ТаблицаОстатки.ВалютаРасчетов
//		|			И ТаблицаРасчеты.СчетУчета = ТаблицаОстатки.СчетУчета
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ
//		|						КонстантаВалютаУчета.Значение
//		|					ИЗ
//		|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыВалютУчетаСрезПоследних
//		|		ПО (ИСТИНА)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаРасчетыСПоставщиками.Валюта
//		|					ИЗ
//		|						ВременнаяТаблицаРасчетыСПоставщиками)) КАК КурсыВалютРасчетовСрезПоследних
//		|		ПО ТаблицаРасчеты.Валюта = КурсыВалютРасчетовСрезПоследних.Валюта
//		|ГДЕ
//		|	ТаблицаРасчеты.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|	И (		ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) >= 0.005
//		|		ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) <= -0.005
//		|		ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс / КурсыВалютРасчетовСрезПоследних.Кратность - ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0) >= -0.005
//		|		ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс / КурсыВалютРасчетовСрезПоследних.Кратность - ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0) <= -0.005)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК Порядок,
//		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.Контрагент КАК Контрагент,
//		|	ТаблицаДокумента.Договор КАК Договор,
//		|	ТаблицаДокумента.Документ КАК Документ,
//		|	ТаблицаДокумента.Заказ КАК Заказ,
//		|	ТаблицаДокумента.ТипРасчетов КАК ТипРасчетов,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.СуммаРег КАК СуммаРег,
//		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
//		|	ТаблицаДокумента.Валюта КАК Валюта,
//		|	ТаблицаДокумента.СодержаниеПроводки КАК СодержаниеПроводки,
//		|	&РеквизитыРасчетов КАК РеквизитыРасчетов
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПоставщиками КАК ТаблицаДокумента
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	2,
//		|	ТаблицаДокумента.НомерСтроки,
//		|	ТаблицаДокумента.Дата,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//		|	КОНЕЦ,
//		|	ТаблицаДокумента.Организация,
//		|	ТаблицаДокумента.Контрагент,
//		|	ТаблицаДокумента.Договор,
//		|	ТаблицаДокумента.Документ,
//		|	ТаблицаДокумента.Заказ,
//		|	ТаблицаДокумента.ТипРасчетов,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
//		|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
//		|	КОНЕЦ,
//		|	0,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницыРег > 0
//		|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницыРег
//		|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницыРег
//		|	КОНЕЦ,
//		|	ТаблицаДокумента.СчетУчета,
//		|	ТаблицаДокумента.Валюта,
//		|	&КурсоваяРазница,
//		|	&РеквизитыРасчетовНеопределено
//		|ИЗ
//		|	ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщиками КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Порядок,
//		|	НомерСтроки
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|УНИЧТОЖИТЬ ВременнаяТаблицаОстаткиПослеПроведения";
//		
//		РасчетыПроведениеДокументов.ДобавитьТекстЗапросаРеквизитовРасчетов(ТекстЗапроса, ПолучатьРеквизитыРасчетов, Истина, Истина);
//		
//	КонецЕсли;
//	
//	Возврат ТекстЗапроса;
//	
//КонецФункции // ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПоставщиками()

//// Функция возвращает текст запроса для расчета курсовых разниц.
////
//Функция ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПокупателями(МенеджерВременныхТаблиц, СЗачетомАванса, НомерЗапроса, ПолучатьРеквизитыРасчетов = Ложь, РеквизитыРасчетовСоответствие = Неопределено) Экспорт
//	
//	РассчитыватьКурсовыеРазницы = ПолучитьНеобходимостьРасчетаКурсовыхРазниц(МенеджерВременныхТаблиц, "ВременнаяТаблицаРасчетыСПокупателями");
//	
//	Если НЕ РассчитыватьКурсовыеРазницы Тогда
//		
//		НомерЗапроса = 1;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаРасчеты.Организация КАК Организация,
//		|	ТаблицаРасчеты.Контрагент КАК Контрагент,
//		|	ТаблицаРасчеты.Договор КАК Договор,
//		|	ТаблицаРасчеты.Документ КАК Документ,
//		|	ТаблицаРасчеты.Заказ КАК Заказ,
//		|	ТаблицаРасчеты.ТипРасчетов КАК ТипРасчетов,
//		|	0 КАК СуммаКурсовойРазницы,
//		|	ТаблицаРасчеты.Валюта КАК Валюта,
//		|	ТаблицаРасчеты.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПокупателями КАК ТаблицаРасчеты
//		|ГДЕ
//		|	ЛОЖЬ
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.Контрагент КАК Контрагент,
//		|	ТаблицаДокумента.Договор КАК Договор,
//		|	ТаблицаДокумента.Документ КАК Документ,
//		|	ТаблицаДокумента.Заказ КАК Заказ,
//		|	ТаблицаДокумента.ТипРасчетов КАК ТипРасчетов,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.СуммаРег КАК СуммаРег,
//		|	ТаблицаДокумента.СчетУчета,
//		|	ТаблицаДокумента.Валюта,
//		|	ТаблицаДокумента.СодержаниеПроводки,
//		|	&РеквизитыРасчетов
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПокупателями КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ТаблицаДокумента.СодержаниеПроводки,
//		|	Документ,
//		|	Заказ,
//		|	ВидДвижения";
//		
//		РасчетыПроведениеДокументов.ДобавитьТекстЗапросаРеквизитовРасчетов(ТекстЗапроса, ПолучатьРеквизитыРасчетов, Ложь,, РеквизитыРасчетовСоответствие);
//		
//	ИначеЕсли СЗачетомАванса Тогда
//		
//		НомерЗапроса = 2;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ
//		|	РасчетыОстатки.Организация КАК Организация,
//		|	РасчетыОстатки.Контрагент КАК Контрагент,
//		|	РасчетыОстатки.Договор КАК Договор,
//		|	РасчетыОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
//		|	РасчетыОстатки.Документ КАК Документ,
//		|	РасчетыОстатки.Заказ КАК Заказ,
//		|	РасчетыОстатки.ТипРасчетов КАК ТипРасчетов,
//		|	ВЫБОР
//		|		КОГДА РасчетыОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|			ТОГДА РасчетыОстатки.Контрагент.СчетУчетаРасчетовСПокупателем
//		|		ИНАЧЕ РасчетыОстатки.Контрагент.СчетУчетаАвансовПокупателя
//		|	КОНЕЦ КАК СчетУчета,
//		|	СУММА(РасчетыОстатки.СуммаОстаток) КАК СуммаОстаток,
//		|	СУММА(РасчетыОстатки.СуммаВалОстаток) КАК СуммаВалОстаток,
//		|	СУММА(РасчетыОстатки.СуммаРегОстаток) КАК СуммаРегОстаток
//		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиПослеПроведения
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ВременнаяТаблица.Организация КАК Организация,
//		|		ВременнаяТаблица.Контрагент КАК Контрагент,
//		|		ВременнаяТаблица.Договор КАК Договор,
//		|		ВременнаяТаблица.Документ КАК Документ,
//		|		ВременнаяТаблица.Заказ КАК Заказ,
//		|		ВременнаяТаблица.ТипРасчетов КАК ТипРасчетов,
//		|		ВЫБОР
//		|			КОГДА ВременнаяТаблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА ВременнаяТаблица.СуммаДляОстатка
//		|			ИНАЧЕ - ВременнаяТаблица.СуммаДляОстатка
//		|		КОНЕЦ КАК СуммаОстаток,
//		|		ВЫБОР
//		|			КОГДА ВременнаяТаблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА ВременнаяТаблица.СуммаВалДляОстатка
//		|			ИНАЧЕ - ВременнаяТаблица.СуммаВалДляОстатка
//		|		КОНЕЦ КАК СуммаВалОстаток,
//		|		ВЫБОР
//		|			КОГДА ВременнаяТаблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА ВременнаяТаблица.СуммаРег
//		|			ИНАЧЕ - ВременнаяТаблица.СуммаРег
//		|		КОНЕЦ КАК СуммаРегОстаток
//		|	ИЗ
//		|		ВременнаяТаблицаРасчетыСПокупателями КАК ВременнаяТаблица
//		|	ГДЕ
//		|	ВременнаяТаблица.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаОстатки.Организация,
//		|		ТаблицаОстатки.Контрагент,
//		|		ТаблицаОстатки.Договор,
//		|		ТаблицаОстатки.Документ,
//		|		ТаблицаОстатки.Заказ,
//		|		ТаблицаОстатки.ТипРасчетов,
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0)
//		|	ИЗ
//		|		РегистрНакопления.РасчетыСПокупателями.Остатки(
//		|				&МоментВремени,
//		|				(Организация, Контрагент, Договор, Документ, Заказ, ТипРасчетов) В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаРасчетыСПокупателями.Организация,
//		|						ВременнаяТаблицаРасчетыСПокупателями.Контрагент,
//		|						ВременнаяТаблицаРасчетыСПокупателями.Договор,
//		|						ВременнаяТаблицаРасчетыСПокупателями.Документ,
//		|						ВременнаяТаблицаРасчетыСПокупателями.Заказ,
//		|						ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|					ИЗ
//		|						ВременнаяТаблицаРасчетыСПокупателями)) КАК ТаблицаОстатки
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ДвиженияДокумента.Организация,
//		|		ДвиженияДокумента.Контрагент,
//		|		ДвиженияДокумента.Договор,
//		|		ДвиженияДокумента.Документ,
//		|		ДвиженияДокумента.Заказ,
//		|		ДвиженияДокумента.ТипРасчетов,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.СуммаРег, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.СуммаРег, 0)
//		|		КОНЕЦ
//		|	ИЗ
//		|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокумента
//		|	ГДЕ
//		|		ДвиженияДокумента.Регистратор = &Ссылка
//		|		И ДвиженияДокумента.Период <= &ПериодКонтроля
//		|		И ДвиженияДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)) КАК РасчетыОстатки
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	РасчетыОстатки.Организация,
//		|	РасчетыОстатки.Контрагент,
//		|	РасчетыОстатки.Договор,
//		|	РасчетыОстатки.Документ,
//		|	РасчетыОстатки.Заказ,
//		|	РасчетыОстатки.ТипРасчетов,
//		|	РасчетыОстатки.Договор.ВалютаРасчетов,
//		|	ВЫБОР
//		|		КОГДА РасчетыОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|			ТОГДА РасчетыОстатки.Контрагент.СчетУчетаРасчетовСПокупателем
//		|		ИНАЧЕ РасчетыОстатки.Контрагент.СчетУчетаАвансовПокупателя
//		|	КОНЕЦ
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Организация,
//		|	Контрагент,
//		|	Договор,
//		|	ВалютаРасчетов,
//		|	Документ,
//		|	Заказ,
//		|	ТипРасчетов,
//		|	СчетУчета
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаРасчеты.Организация КАК Организация,
//		|	ТаблицаРасчеты.Контрагент КАК Контрагент,
//		|	ТаблицаРасчеты.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
//		|	ТаблицаРасчеты.Договор КАК Договор,
//		|	ТаблицаРасчеты.Документ КАК Документ,
//		|	ТаблицаРасчеты.Заказ КАК Заказ,
//		|	ТаблицаРасчеты.ТипРасчетов КАК ТипРасчетов,
//		|	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) КАК СуммаКурсовойРазницы,
//		|	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс / КурсыВалютРасчетовСрезПоследних.Кратность - ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0) КАК СуммаКурсовойРазницыРег,
//		|	ТаблицаРасчеты.Валюта КАК Валюта,
//		|	ТаблицаРасчеты.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателямиПредварительная
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПокупателями КАК ТаблицаРасчеты
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиПослеПроведения КАК ТаблицаОстатки
//		|		ПО ТаблицаРасчеты.Организация = ТаблицаОстатки.Организация
//		|			И ТаблицаРасчеты.Контрагент = ТаблицаОстатки.Контрагент
//		|			И ТаблицаРасчеты.Договор = ТаблицаОстатки.Договор
//		|			И ТаблицаРасчеты.Документ = ТаблицаОстатки.Документ
//		|			И ТаблицаРасчеты.Заказ = ТаблицаОстатки.Заказ
//		|			И ТаблицаРасчеты.ТипРасчетов = ТаблицаОстатки.ТипРасчетов
//		|			И ТаблицаРасчеты.Валюта = ТаблицаОстатки.ВалютаРасчетов
//		|			И ТаблицаРасчеты.СчетУчета = ТаблицаОстатки.СчетУчета
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ
//		|						КонстантаВалютаУчета.Значение
//		|					ИЗ
//		|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыВалютУчетаСрезПоследних
//		|		ПО (ИСТИНА)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаРасчетыСПокупателями.Договор.ВалютаРасчетов
//		|					ИЗ
//		|						ВременнаяТаблицаРасчетыСПокупателями)) КАК КурсыВалютРасчетовСрезПоследних
//		|		ПО ТаблицаРасчеты.Валюта = КурсыВалютРасчетовСрезПоследних.Валюта
//		|ГДЕ
//		|	(ТаблицаОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|			ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) = 0)
//		|	И (		ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) >= 0.005
//		|		ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) <= -0.005
//		|		ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс / КурсыВалютРасчетовСрезПоследних.Кратность - ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0) >= 0.005
//		|		ИЛИ	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс / КурсыВалютРасчетовСрезПоследних.Кратность - ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0) <= -0.005 ) 
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.Контрагент КАК Контрагент,
//		|	ТаблицаДокумента.Договор КАК Договор,
//		|	ТаблицаДокумента.Документ КАК Документ,
//		|	ТаблицаДокумента.Заказ КАК Заказ,
//		|	ТаблицаДокумента.ТипРасчетов КАК ТипРасчетов,
//		|	ТаблицаДокумента.Валюта КАК Валюта,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.СуммаРег КАК СуммаРег,
//		|	ТаблицаДокумента.СодержаниеПроводки КАК СодержаниеПроводки,
//		|	&РеквизитыРасчетов КАК РеквизитыРасчетов
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПокупателями КАК ТаблицаДокумента
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	ТаблицаДвижений.Период,
//		|	ТаблицаДвижений.ВидДвижения,
//		|	ТаблицаДвижений.Организация,
//		|	ТаблицаДвижений.Контрагент,
//		|	ТаблицаДвижений.Договор,
//		|	ТаблицаДвижений.Документ,
//		|	ТаблицаДвижений.Заказ,
//		|	ТаблицаДвижений.ТипРасчетов,
//		|	ТаблицаДвижений.Валюта,
//		|	СУММА(ТаблицаДвижений.Сумма),
//		|	СУММА(ТаблицаДвижений.СуммаВал),
//		|	СУММА(ТаблицаДвижений.СуммаРег),
//		|	ТаблицаДвижений.СодержаниеПроводки,
//		|	&РеквизитыРасчетовНеопределено
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата КАК Период,
//		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
//		|		ТаблицаДокумента.Организация КАК Организация,
//		|		ТаблицаДокумента.Контрагент КАК Контрагент,
//		|		ТаблицаДокумента.Договор КАК Договор,
//		|		ТаблицаДокумента.Документ КАК Документ,
//		|		ТаблицаДокумента.Заказ КАК Заказ,
//		|		ТаблицаДокумента.ТипРасчетов КАК ТипРасчетов,
//		|		ТаблицаДокумента.Валюта КАК Валюта,
//		|		ТаблицаДокумента.СуммаКурсовойРазницы КАК Сумма,
//		|		0 КАК СуммаВал,
//		|		ТаблицаДокумента.СуммаКурсовойРазницыРег КАК СуммаРег,
//		|		ВЫРАЗИТЬ(&КурсоваяРазница КАК СТРОКА(100)) КАК СодержаниеПроводки
//		|	ИЗ
//		|		ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателямиПредварительная КАК ТаблицаДокумента
//		|	ГДЕ
//		|		ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата,
//		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
//		|		ТаблицаДокумента.Организация,
//		|		ТаблицаДокумента.Контрагент,
//		|		ТаблицаДокумента.Договор,
//		|		ТаблицаДокумента.Документ,
//		|		ТаблицаДокумента.Заказ,
//		|		ТаблицаДокумента.ТипРасчетов,
//		|		ТаблицаДокумента.Валюта,
//		|		ТаблицаДокумента.СуммаКурсовойРазницы,
//		|		0,
//		|		ТаблицаДокумента.СуммаКурсовойРазницыРег,
//		|		ВЫРАЗИТЬ(&ЗачетАванса КАК СТРОКА(100))
//		|	ИЗ
//		|		ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателямиПредварительная КАК ТаблицаДокумента
//		|	ГДЕ
//		|		ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата,
//		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
//		|		ТаблицаДокумента.Организация,
//		|		ТаблицаДокумента.Контрагент,
//		|		ТаблицаДокумента.Договор,
//		|		ВЫБОР
//		|			КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
//		|				ТОГДА &Ссылка
//		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
//		|		КОНЕЦ,
//		|		ТаблицаДокумента.Заказ,
//		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг),
//		|		ТаблицаДокумента.Валюта,
//		|		ТаблицаДокумента.СуммаКурсовойРазницы,
//		|		0,
//		|		ТаблицаДокумента.СуммаКурсовойРазницыРег,
//		|		ВЫРАЗИТЬ(&ЗачетАванса КАК СТРОКА(100))
//		|	ИЗ
//		|		ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателямиПредварительная КАК ТаблицаДокумента
//		|	ГДЕ
//		|		ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата,
//		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
//		|		ТаблицаДокумента.Организация,
//		|		ТаблицаДокумента.Контрагент,
//		|		ТаблицаДокумента.Договор,
//		|		ВЫБОР
//		|			КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
//		|				ТОГДА &Ссылка
//		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
//		|		КОНЕЦ,
//		|		ТаблицаДокумента.Заказ,
//		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг),
//		|		ТаблицаДокумента.Валюта,
//		|		ТаблицаДокумента.СуммаКурсовойРазницы,
//		|		0,
//		|		ТаблицаДокумента.СуммаКурсовойРазницыРег,
//		|		ВЫРАЗИТЬ(&КурсоваяРазница КАК СТРОКА(100))
//		|	ИЗ
//		|		ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателямиПредварительная КАК ТаблицаДокумента
//		|	ГДЕ
//		|		ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаДвижений
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ТаблицаДвижений.Период,
//		|	ТаблицаДвижений.Организация,
//		|	ТаблицаДвижений.Контрагент,
//		|	ТаблицаДвижений.Договор,
//		|	ТаблицаДвижений.Документ,
//		|	ТаблицаДвижений.Заказ,
//		|	ТаблицаДвижений.ТипРасчетов,
//		|	ТаблицаДвижений.Валюта,
//		|	ТаблицаДвижений.СодержаниеПроводки,
//		|	ТаблицаДвижений.ВидДвижения
//		|
//		|ИМЕЮЩИЕ
//		|	(СУММА(ТаблицаДвижений.Сумма) >= 0.005
//		|		ИЛИ СУММА(ТаблицаДвижений.Сумма) <= -0.005
//		|		ИЛИ СУММА(ТаблицаДвижений.СуммаВал) >= 0.005
//		|		ИЛИ СУММА(ТаблицаДвижений.СуммаВал) <= -0.005
//		|		ИЛИ СУММА(ТаблицаДвижений.СуммаРег) >= 0.005
//		|		ИЛИ СУММА(ТаблицаДвижений.СуммаРег) <= -0.005)
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	СодержаниеПроводки,
//		|	Документ,
//		|	Заказ,
//		|	ВидДвижения
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаКурсовыхРазниц.Организация КАК Организация,
//		|	ТаблицаКурсовыхРазниц.Контрагент КАК Контрагент,
//		|	ТаблицаКурсовыхРазниц.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
//		|	ТаблицаКурсовыхРазниц.Договор КАК Договор,
//		|	ТаблицаКурсовыхРазниц.Документ КАК Документ,
//		|	ТаблицаКурсовыхРазниц.Заказ КАК Заказ,
//		|	ТаблицаКурсовыхРазниц.ТипРасчетов КАК ТипРасчетов,
//		|	СУММА(ТаблицаКурсовыхРазниц.СуммаКурсовойРазницы) КАК СуммаКурсовойРазницы,
//		|	ТаблицаКурсовыхРазниц.Валюта КАК Валюта,
//		|	ТаблицаКурсовыхРазниц.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата КАК Дата,
//		|		ТаблицаДокумента.Организация КАК Организация,
//		|		ТаблицаДокумента.Контрагент КАК Контрагент,
//		|		ТаблицаДокумента.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
//		|		ТаблицаДокумента.Договор КАК Договор,
//		|		ТаблицаДокумента.Документ КАК Документ,
//		|		ТаблицаДокумента.Заказ КАК Заказ,
//		|		ТаблицаДокумента.ТипРасчетов КАК ТипРасчетов,
//		|		ТаблицаДокумента.Валюта КАК Валюта,
//		|		ТаблицаДокумента.СчетУчета КАК СчетУчета,
//		|		ТаблицаДокумента.СуммаКурсовойРазницы КАК СуммаКурсовойРазницы,
//		|		ТаблицаДокумента.СуммаКурсовойРазницыРег КАК СуммаКурсовойРазницыРег
//		|	ИЗ
//		|		ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателямиПредварительная КАК ТаблицаДокумента
//		|	ГДЕ
//		|		ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата,
//		|		ТаблицаДокумента.Организация,
//		|		ТаблицаДокумента.Контрагент,
//		|		ТаблицаДокумента.ВестиРасчетыПоДокументам,
//		|		ТаблицаДокумента.Договор,
//		|		ВЫБОР
//		|			КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
//		|				ТОГДА &Ссылка
//		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
//		|		КОНЕЦ,
//		|		ТаблицаДокумента.Заказ,
//		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг),
//		|		ТаблицаДокумента.Валюта,
//		|		ВЫРАЗИТЬ(ТаблицаДокумента.Контрагент КАК Справочник.Контрагенты).СчетУчетаРасчетовСПокупателем,
//		|		ТаблицаДокумента.СуммаКурсовойРазницы,
//		|		ТаблицаДокумента.СуммаКурсовойРазницыРег
//		|	ИЗ
//		|		ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателямиПредварительная КАК ТаблицаДокумента
//		|	ГДЕ
//		|		ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаКурсовыхРазниц
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ТаблицаКурсовыхРазниц.Организация,
//		|	ТаблицаКурсовыхРазниц.Контрагент,
//		|	ТаблицаКурсовыхРазниц.ВестиРасчетыПоДокументам,
//		|	ТаблицаКурсовыхРазниц.Договор,
//		|	ТаблицаКурсовыхРазниц.Документ,
//		|	ТаблицаКурсовыхРазниц.Заказ,
//		|	ТаблицаКурсовыхРазниц.ТипРасчетов,
//		|	ТаблицаКурсовыхРазниц.Валюта,
//		|	ТаблицаКурсовыхРазниц.СчетУчета
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|УНИЧТОЖИТЬ ВременнаяТаблицаОстаткиПослеПроведения
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|УНИЧТОЖИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателямиПредварительная";
//		
//		РасчетыПроведениеДокументов.ДобавитьТекстЗапросаРеквизитовРасчетов(ТекстЗапроса, ПолучатьРеквизитыРасчетов, Истина,, РеквизитыРасчетовСоответствие);
//		
//	Иначе
//		
//		НомерЗапроса = 2;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ
//		|	РасчетыОстатки.Организация КАК Организация,
//		|	РасчетыОстатки.Контрагент КАК Контрагент,
//		|	РасчетыОстатки.Договор КАК Договор,
//		|	РасчетыОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
//		|	РасчетыОстатки.Документ КАК Документ,
//		|	РасчетыОстатки.Заказ КАК Заказ,
//		|	РасчетыОстатки.ТипРасчетов КАК ТипРасчетов,
//		|	ВЫБОР
//		|		КОГДА РасчетыОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|			ТОГДА РасчетыОстатки.Контрагент.СчетУчетаРасчетовСПокупателем
//		|		ИНАЧЕ РасчетыОстатки.Контрагент.СчетУчетаАвансовПокупателя
//		|	КОНЕЦ КАК СчетУчета,
//		|	СУММА(РасчетыОстатки.СуммаОстаток) КАК СуммаОстаток,
//		|	СУММА(РасчетыОстатки.СуммаВалОстаток) КАК СуммаВалОстаток,
//		|	СУММА(РасчетыОстатки.СуммаРегОстаток) КАК СуммаРегОстаток
//		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиПослеПроведения
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ВременнаяТаблица.Организация КАК Организация,
//		|		ВременнаяТаблица.Контрагент КАК Контрагент,
//		|		ВременнаяТаблица.Договор КАК Договор,
//		|		ВременнаяТаблица.Документ КАК Документ,
//		|		ВременнаяТаблица.Заказ КАК Заказ,
//		|		ВременнаяТаблица.ТипРасчетов КАК ТипРасчетов,
//		|		ВременнаяТаблица.СуммаДляОстатка КАК СуммаОстаток,
//		|		ВременнаяТаблица.СуммаВалДляОстатка КАК СуммаВалОстаток,
//		|		ВременнаяТаблица.СуммаРег КАК СуммаРегОстаток 
//		|	ИЗ
//		|		ВременнаяТаблицаРасчетыСПокупателями КАК ВременнаяТаблица
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаОстатки.Организация,
//		|		ТаблицаОстатки.Контрагент,
//		|		ТаблицаОстатки.Договор,
//		|		ТаблицаОстатки.Документ,
//		|		ТаблицаОстатки.Заказ,
//		|		ТаблицаОстатки.ТипРасчетов,
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0)
//		|	ИЗ
//		|		РегистрНакопления.РасчетыСПокупателями.Остатки(
//		|				&МоментВремени,
//		|				(Организация, Контрагент, Договор, Документ, Заказ, ТипРасчетов) В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаРасчетыСПокупателями.Организация,
//		|						ВременнаяТаблицаРасчетыСПокупателями.Контрагент,
//		|						ВременнаяТаблицаРасчетыСПокупателями.Договор,
//		|						ВременнаяТаблицаРасчетыСПокупателями.Документ,
//		|						ВременнаяТаблицаРасчетыСПокупателями.Заказ,
//		|						ВременнаяТаблицаРасчетыСПокупателями.ТипРасчетов
//		|					ИЗ
//		|						ВременнаяТаблицаРасчетыСПокупателями)) КАК ТаблицаОстатки
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ДвиженияДокумента.Организация,
//		|		ДвиженияДокумента.Контрагент,
//		|		ДвиженияДокумента.Договор,
//		|		ДвиженияДокумента.Документ,
//		|		ДвиженияДокумента.Заказ,
//		|		ДвиженияДокумента.ТипРасчетов,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.СуммаРег, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.СуммаРег, 0)
//		|		КОНЕЦ
//		|	ИЗ
//		|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокумента
//		|	ГДЕ
//		|		ДвиженияДокумента.Регистратор = &Ссылка
//		|		И ДвиженияДокумента.Период <= &ПериодКонтроля) КАК РасчетыОстатки
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	РасчетыОстатки.Организация,
//		|	РасчетыОстатки.Контрагент,
//		|	РасчетыОстатки.Договор,
//		|	РасчетыОстатки.Документ,
//		|	РасчетыОстатки.Заказ,
//		|	РасчетыОстатки.ТипРасчетов,
//		|	РасчетыОстатки.Договор.ВалютаРасчетов,
//		|	ВЫБОР
//		|		КОГДА РасчетыОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|			ТОГДА РасчетыОстатки.Контрагент.СчетУчетаРасчетовСПокупателем
//		|		ИНАЧЕ РасчетыОстатки.Контрагент.СчетУчетаАвансовПокупателя
//		|	КОНЕЦ
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Организация,
//		|	Контрагент,
//		|	Договор,
//		|	ВалютаРасчетов,
//		|	Документ,
//		|	Заказ,
//		|	ТипРасчетов,
//		|	СчетУчета
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаРасчеты.Организация КАК Организация,
//		|	ТаблицаРасчеты.Контрагент КАК Контрагент,
//		|	ТаблицаРасчеты.Договор КАК Договор,
//		|	ТаблицаРасчеты.Документ КАК Документ,
//		|	ТаблицаРасчеты.Заказ КАК Заказ,
//		|	ТаблицаРасчеты.ТипРасчетов КАК ТипРасчетов,
//		|	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) КАК СуммаКурсовойРазницы,
//		|	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс / КурсыВалютРасчетовСрезПоследних.Кратность - ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0) КАК СуммаКурсовойРазницыРег,
//		|	ТаблицаРасчеты.Валюта КАК Валюта,
//		|	ТаблицаРасчеты.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПокупателями КАК ТаблицаРасчеты
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиПослеПроведения КАК ТаблицаОстатки
//		|		ПО ТаблицаРасчеты.Организация = ТаблицаОстатки.Организация
//		|			И ТаблицаРасчеты.Контрагент = ТаблицаОстатки.Контрагент
//		|			И ТаблицаРасчеты.Договор = ТаблицаОстатки.Договор
//		|			И ТаблицаРасчеты.Документ = ТаблицаОстатки.Документ
//		|			И ТаблицаРасчеты.Заказ = ТаблицаОстатки.Заказ
//		|			И ТаблицаРасчеты.ТипРасчетов = ТаблицаОстатки.ТипРасчетов
//		|			И ТаблицаРасчеты.Валюта = ТаблицаОстатки.ВалютаРасчетов
//		|			И ТаблицаРасчеты.СчетУчета = ТаблицаОстатки.СчетУчета
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ
//		|						КонстантаВалютаУчета.Значение
//		|					ИЗ
//		|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыВалютУчетаСрезПоследних
//		|		ПО (ИСТИНА)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаРасчетыСПокупателями.Валюта
//		|					ИЗ
//		|						ВременнаяТаблицаРасчетыСПокупателями)) КАК КурсыВалютРасчетовСрезПоследних
//		|		ПО ТаблицаРасчеты.Валюта = КурсыВалютРасчетовСрезПоследних.Валюта
//		|ГДЕ
//		|	ТаблицаРасчеты.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|	И (		ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) >= 0.005
//		|		ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) <= -0.005
//		|		ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс / КурсыВалютРасчетовСрезПоследних.Кратность - ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0) >= 0.005
//		|		ИЛИ	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс / КурсыВалютРасчетовСрезПоследних.Кратность - ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0) <= -0.005)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК Порядок,
//		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.Контрагент КАК Контрагент,
//		|	ТаблицаДокумента.Договор КАК Договор,
//		|	ТаблицаДокумента.Документ КАК Документ,
//		|	ТаблицаДокумента.Заказ КАК Заказ,
//		|	ТаблицаДокумента.ТипРасчетов КАК ТипРасчетов,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.СуммаРег КАК СуммаРег,
//		|	ТаблицаДокумента.СчетУчета,
//		|	ТаблицаДокумента.Валюта,
//		|	ТаблицаДокумента.СодержаниеПроводки,
//		|	&РеквизитыРасчетов
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПокупателями КАК ТаблицаДокумента
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	2,
//		|	ТаблицаДокумента.НомерСтроки,
//		|	ТаблицаДокумента.Дата,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//		|	КОНЕЦ,
//		|	ТаблицаДокумента.Организация,
//		|	ТаблицаДокумента.Контрагент,
//		|	ТаблицаДокумента.Договор,
//		|	ТаблицаДокумента.Документ,
//		|	ТаблицаДокумента.Заказ,
//		|	ТаблицаДокумента.ТипРасчетов,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
//		|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
//		|	КОНЕЦ,
//		|	0,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницыРег > 0
//		|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницыРег
//		|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницыРег
//		|	КОНЕЦ,
//		|	ТаблицаДокумента.СчетУчета,
//		|	ТаблицаДокумента.Валюта,
//		|	&КурсоваяРазница,
//		|	&РеквизитыРасчетовНеопределено
//		|ИЗ
//		|	ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Порядок,
//		|	НомерСтроки
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|УНИЧТОЖИТЬ ВременнаяТаблицаОстаткиПослеПроведения";
//		
//		РасчетыПроведениеДокументов.ДобавитьТекстЗапросаРеквизитовРасчетов(ТекстЗапроса, ПолучатьРеквизитыРасчетов, Истина,, РеквизитыРасчетовСоответствие);
//		
//	КонецЕсли;
//	
//	Возврат ТекстЗапроса;
//	
//КонецФункции // ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПокупателями()

//// Функция возвращает текст запроса для расчета курсовых разниц.
////
//Функция ПолучитьТекстЗапросаКурсовыеРазницыДенежныеСредства(МенеджерВременныхТаблиц, НомерЗапроса) Экспорт
//	
//	РассчитыватьКурсовыеРазницы = ПолучитьНеобходимостьРасчетаКурсовыхРазниц(МенеджерВременныхТаблиц, "ВременнаяТаблицаДенежныеСредства");
//	
//	Если РассчитыватьКурсовыеРазницы Тогда
//		
//		НомерЗапроса = 2;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ
//		|	ДеньгиОстатки.Организация КАК Организация,
//		|	ДеньгиОстатки.ТипДенежныхСредств КАК ТипДенежныхСредств,
//		|	ДеньгиОстатки.БанковскийСчетКасса КАК БанковскийСчетКасса,
//		|	ДеньгиОстатки.Валюта КАК Валюта,
//		|	ДеньгиОстатки.БанковскийСчетКасса.СчетУчета КАК СчетУчета,
//		|	СУММА(ДеньгиОстатки.СуммаОстаток) КАК СуммаОстаток,
//		|	СУММА(ДеньгиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
//		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиПослеПроведения
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ВременнаяТаблица.Организация КАК Организация,
//		|		ВременнаяТаблица.ТипДенежныхСредств КАК ТипДенежныхСредств,
//		|		ВременнаяТаблица.БанковскийСчетКасса КАК БанковскийСчетКасса,
//		|		ВременнаяТаблица.Валюта КАК Валюта,
//		|		ВЫБОР
//		|			КОГДА ВременнаяТаблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА ВременнаяТаблица.СуммаДляОстатка
//		|			ИНАЧЕ - ВременнаяТаблица.СуммаДляОстатка
//		|		КОНЕЦ КАК СуммаОстаток,
//		|		ВЫБОР
//		|			КОГДА ВременнаяТаблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА ВременнаяТаблица.СуммаВалДляОстатка
//		|			ИНАЧЕ - ВременнаяТаблица.СуммаВалДляОстатка
//		|		КОНЕЦ КАК СуммаВалОстаток
//		|	ИЗ
//		|		ВременнаяТаблицаДенежныеСредства КАК ВременнаяТаблица
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаОстатки.Организация,
//		|		ТаблицаОстатки.ТипДенежныхСредств,
//		|		ТаблицаОстатки.БанковскийСчетКасса,
//		|		ТаблицаОстатки.Валюта,
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0)
//		|	ИЗ
//		|		РегистрНакопления.ДенежныеСредства.Остатки(
//		|				&МоментВремени,
//		|				(Организация, ТипДенежныхСредств, БанковскийСчетКасса, Валюта) В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаДенежныеСредства.Организация,
//		|						ВременнаяТаблицаДенежныеСредства.ТипДенежныхСредств,
//		|						ВременнаяТаблицаДенежныеСредства.БанковскийСчетКасса,
//		|						ВременнаяТаблицаДенежныеСредства.Валюта
//		|					ИЗ
//		|						ВременнаяТаблицаДенежныеСредства)) КАК ТаблицаОстатки
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ДвиженияДокумента.Организация,
//		|		ДвиженияДокумента.ТипДенежныхСредств,
//		|		ДвиженияДокумента.БанковскийСчетКасса,
//		|		ДвиженияДокумента.Валюта,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|		КОНЕЦ
//		|	ИЗ
//		|		РегистрНакопления.ДенежныеСредства КАК ДвиженияДокумента
//		|	ГДЕ
//		|		ДвиженияДокумента.Регистратор = &Ссылка
//		|		И ДвиженияДокумента.Период <= &ПериодКонтроля) КАК ДеньгиОстатки
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ДеньгиОстатки.Организация,
//		|	ДеньгиОстатки.ТипДенежныхСредств,
//		|	ДеньгиОстатки.БанковскийСчетКасса,
//		|	ДеньгиОстатки.Валюта,
//		|	ДеньгиОстатки.БанковскийСчетКасса.СчетУчета
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Организация,
//		|	ТипДенежныхСредств,
//		|	БанковскийСчетКасса,
//		|	Валюта,
//		|	СчетУчета
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаДенежныеСредства.Организация КАК Организация,
//		|	ТаблицаДенежныеСредства.ТипДенежныхСредств КАК ТипДенежныхСредств,
//		|	ТаблицаДенежныеСредства.БанковскийСчетКасса КАК БанковскийСчетКасса,
//		|	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) КАК СуммаКурсовойРазницы,
//		|	ТаблицаДенежныеСредства.Валюта КАК Валюта,
//		|	ТаблицаДенежныеСредства.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницДенежныеСредства
//		|ИЗ
//		|	ВременнаяТаблицаДенежныеСредства КАК ТаблицаДенежныеСредства
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиПослеПроведения КАК ТаблицаОстатки
//		|		ПО ТаблицаДенежныеСредства.Организация = ТаблицаОстатки.Организация
//		|			И ТаблицаДенежныеСредства.ТипДенежныхСредств = ТаблицаОстатки.ТипДенежныхСредств
//		|			И ТаблицаДенежныеСредства.БанковскийСчетКасса = ТаблицаОстатки.БанковскийСчетКасса
//		|			И ТаблицаДенежныеСредства.Валюта = ТаблицаОстатки.Валюта
//		|			И ТаблицаДенежныеСредства.СчетУчета = ТаблицаОстатки.СчетУчета
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ
//		|						КонстантаВалютаУчета.Значение
//		|					ИЗ
//		|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыВалютУчетаСрезПоследних
//		|		ПО (ИСТИНА)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаДенежныеСредства.Валюта
//		|					ИЗ
//		|						ВременнаяТаблицаДенежныеСредства)) КАК КурсыВалютБанковскийСчетКассаСрезПоследних
//		|		ПО ТаблицаДенежныеСредства.Валюта = КурсыВалютБанковскийСчетКассаСрезПоследних.Валюта
//		|ГДЕ
//		|	(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) >= 0.005
//		|			ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) <= -0.005)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК Порядок,
//		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.ТипДенежныхСредств КАК ТипДенежныхСредств,
//		|	ТаблицаДокумента.Статья КАК Статья,
//		|	ТаблицаДокумента.БанковскийСчетКасса КАК БанковскийСчетКасса,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
//		|	ТаблицаДокумента.Валюта КАК Валюта,
//		|	ТаблицаДокумента.СодержаниеПроводки КАК СодержаниеПроводки,
//		|	ТаблицаДокумента.Аналитика
//		|ИЗ
//		|	ВременнаяТаблицаДенежныеСредства КАК ТаблицаДокумента
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	2,
//		|	ТаблицаДокумента.НомерСтроки,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//		|	КОНЕЦ,
//		|	ТаблицаДокумента.Дата,
//		|	ТаблицаДокумента.Организация,
//		|	ТаблицаДокумента.ТипДенежныхСредств,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПоложительнаяКурсоваяРазница)
//		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОтрицательнаяКурсоваяРазница)
//		|	КОНЕЦ,
//		|	ТаблицаДокумента.БанковскийСчетКасса,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
//		|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
//		|	КОНЕЦ,
//		|	0,
//		|	ТаблицаДокумента.СчетУчета,
//		|	ТаблицаДокумента.Валюта,
//		|	&КурсоваяРазница,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеДоходы)
//		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы)
//		|	КОНЕЦ
//		|ИЗ
//		|	ВременнаяТаблицаКурсовыхРазницДенежныеСредства КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	СодержаниеПроводки,
//		|	ВидДвижения
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|УНИЧТОЖИТЬ ВременнаяТаблицаОстаткиПослеПроведения";
//		
//	Иначе
//		
//		НомерЗапроса = 1;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаДенежныеСредства.Организация КАК Организация,
//		|	ТаблицаДенежныеСредства.ТипДенежныхСредств КАК ТипДенежныхСредств,
//		|	ТаблицаДенежныеСредства.БанковскийСчетКасса КАК БанковскийСчетКасса,
//		|	0 КАК СуммаКурсовойРазницы,
//		|	ТаблицаДенежныеСредства.Валюта КАК Валюта,
//		|	ТаблицаДенежныеСредства.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницДенежныеСредства
//		|ИЗ
//		|	ВременнаяТаблицаДенежныеСредства КАК ТаблицаДенежныеСредства
//		|ГДЕ
//		|	ЛОЖЬ
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК Порядок,
//		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.ТипДенежныхСредств КАК ТипДенежныхСредств,
//		|	ТаблицаДокумента.Статья КАК Статья,
//		|	ТаблицаДокумента.БанковскийСчетКасса КАК БанковскийСчетКасса,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
//		|	ТаблицаДокумента.Валюта КАК Валюта,
//		|	ТаблицаДокумента.СодержаниеПроводки КАК СодержаниеПроводки,
//		|	ТаблицаДокумента.Аналитика КАК Аналитика
//		|ИЗ
//		|	ВременнаяТаблицаДенежныеСредства КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	СодержаниеПроводки,
//		|	ВидДвижения";
//	
//	КонецЕсли;
//	
//	Возврат ТекстЗапроса;
//	
//КонецФункции // ПолучитьТекстЗапросаКурсовыеРазницыДенежныеСредства()

//// Функция возвращает текст запроса для расчета курсовых разниц.
////
//Функция ПолучитьТекстЗапросаКурсовыеРазницыДенежныеСредстваВКассахККМ(МенеджерВременныхТаблиц, НомерЗапроса) Экспорт
//	
//	РассчитыватьКурсовыеРазницы = ПолучитьНеобходимостьРасчетаКурсовыхРазниц(МенеджерВременныхТаблиц, "ВременнаяТаблицаДенежныеСредстваВКассахККМ");
//	
//	Если РассчитыватьКурсовыеРазницы Тогда
//		
//		НомерЗапроса = 2;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ
//		|	ДеньгиОстатки.Организация КАК Организация,
//		|	ДеньгиОстатки.КассаККМ КАК КассаККМ,
//		|	ДеньгиОстатки.КассаККМ.СчетУчета КАК СчетУчета,
//		|	ДеньгиОстатки.Валюта КАК Валюта,
//		|	СУММА(ДеньгиОстатки.СуммаОстаток) КАК СуммаОстаток,
//		|	СУММА(ДеньгиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
//		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиПослеПроведения
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ВременнаяТаблица.Организация КАК Организация,
//		|		ВременнаяТаблица.КассаККМ КАК КассаККМ,
//		|		ВременнаяТаблица.Валюта КАК Валюта,
//		|		ВременнаяТаблица.СуммаДляОстатка КАК СуммаОстаток,
//		|		ВременнаяТаблица.СуммаВалДляОстатка КАК СуммаВалОстаток
//		|	ИЗ
//		|		ВременнаяТаблицаДенежныеСредстваВКассахККМ КАК ВременнаяТаблица
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаОстатки.Организация,
//		|		ТаблицаОстатки.КассаККМ,
//		|		ТаблицаОстатки.КассаККМ.ВалютаДенежныхСредств,
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0)
//		|	ИЗ
//		|		РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(
//		|				&МоментВремени,
//		|				(Организация, КассаККМ) В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаДенежныеСредстваВКассахККМ.Организация,
//		|						ВременнаяТаблицаДенежныеСредстваВКассахККМ.КассаККМ
//		|					ИЗ
//		|						ВременнаяТаблицаДенежныеСредстваВКассахККМ)) КАК ТаблицаОстатки
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ДвиженияДокумента.Организация,
//		|		ДвиженияДокумента.КассаККМ,
//		|		ДвиженияДокумента.КассаККМ.ВалютаДенежныхСредств,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|		КОНЕЦ
//		|	ИЗ
//		|		РегистрНакопления.ДенежныеСредстваВКассахККМ КАК ДвиженияДокумента
//		|	ГДЕ
//		|		ДвиженияДокумента.Регистратор = &Ссылка
//		|		И ДвиженияДокумента.Период <= &ПериодКонтроля) КАК ДеньгиОстатки
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ДеньгиОстатки.Организация,
//		|	ДеньгиОстатки.КассаККМ,
//		|	ДеньгиОстатки.Валюта,
//		|	ДеньгиОстатки.КассаККМ.СчетУчета
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Организация,
//		|	КассаККМ,
//		|	Валюта,
//		|	СчетУчета
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаДенежныеСредства.Организация КАК Организация,
//		|	ТаблицаДенежныеСредства.КассаККМ КАК КассаККМ,
//		|	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) КАК СуммаКурсовойРазницы,
//		|	ТаблицаДенежныеСредства.Валюта КАК Валюта,
//		|	ТаблицаДенежныеСредства.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницДенежныеСредстваВКассахККМ
//		|ИЗ
//		|	ВременнаяТаблицаДенежныеСредстваВКассахККМ КАК ТаблицаДенежныеСредства
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиПослеПроведения КАК ТаблицаОстатки
//		|		ПО ТаблицаДенежныеСредства.Организация = ТаблицаОстатки.Организация
//		|			И ТаблицаДенежныеСредства.КассаККМ = ТаблицаОстатки.КассаККМ
//		|			И ТаблицаДенежныеСредства.Валюта = ТаблицаОстатки.Валюта
//		|			И ТаблицаДенежныеСредства.СчетУчета = ТаблицаОстатки.СчетУчета
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ
//		|						КонстантаВалютаУчета.Значение
//		|					ИЗ
//		|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыВалютУчетаСрезПоследних
//		|		ПО (ИСТИНА)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаДенежныеСредстваВКассахККМ.Валюта
//		|					ИЗ
//		|						ВременнаяТаблицаДенежныеСредстваВКассахККМ)) КАК КурсыВалютБанковскийСчетКассаСрезПоследних
//		|		ПО ТаблицаДенежныеСредства.Валюта = КурсыВалютБанковскийСчетКассаСрезПоследних.Валюта
//		|ГДЕ
//		|	(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) >= 0.005
//		|			ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) <= -0.005)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК Порядок,
//		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.Валюта КАК Валюта,
//		|	ТаблицаДокумента.КассаККМ КАК КассаККМ,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.СодержаниеПроводки КАК СодержаниеПроводки
//		|ИЗ
//		|	ВременнаяТаблицаДенежныеСредстваВКассахККМ КАК ТаблицаДокумента
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	2,
//		|	ТаблицаДокумента.НомерСтроки,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//		|	КОНЕЦ,
//		|	ТаблицаДокумента.Дата,
//		|	ТаблицаДокумента.Организация,
//		|	ТаблицаДокумента.Валюта,
//		|	ТаблицаДокумента.КассаККМ,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
//		|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
//		|	КОНЕЦ,
//		|	0,
//		|	&КурсоваяРазница
//		|ИЗ
//		|	ВременнаяТаблицаКурсовыхРазницДенежныеСредстваВКассахККМ КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	СодержаниеПроводки,
//		|	ВидДвижения
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|УНИЧТОЖИТЬ ВременнаяТаблицаОстаткиПослеПроведения";
//	
//	Иначе
//		
//		НомерЗапроса = 1;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаДенежныеСредства.Организация КАК Организация,
//		|	ТаблицаДенежныеСредства.КассаККМ КАК КассаККМ,
//		|	0 КАК СуммаКурсовойРазницы,
//		|	ТаблицаДенежныеСредства.Валюта КАК Валюта,
//		|	ТаблицаДенежныеСредства.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницДенежныеСредстваВКассахККМ
//		|ИЗ
//		|	ВременнаяТаблицаДенежныеСредстваВКассахККМ КАК ТаблицаДенежныеСредства
//		|ГДЕ
//		|	ЛОЖЬ
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК Порядок,
//		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.Валюта КАК Валюта,
//		|	ТаблицаДокумента.КассаККМ КАК КассаККМ,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.СодержаниеПроводки КАК СодержаниеПроводки
//		|ИЗ
//		|	ВременнаяТаблицаДенежныеСредстваВКассахККМ КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	СодержаниеПроводки,
//		|	ВидДвижения";
//	
//	КонецЕсли;
//	
//	Возврат ТекстЗапроса;
//	
//КонецФункции // ПолучитьТекстЗапросаКурсовыеРазницыДенежныеСредстваВКассахККМ()

//// Функция возвращает текст запроса для расчета курсовых разниц.
////
//Функция ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПодотчетниками(МенеджерВременныхТаблиц, НомерЗапроса) Экспорт
//	
//	РассчитыватьКурсовыеРазницы = ПолучитьНеобходимостьРасчетаКурсовыхРазниц(МенеджерВременныхТаблиц, "ВременнаяТаблицаРасчетыСПодотчетниками");
//	
//	Если РассчитыватьКурсовыеРазницы Тогда
//		
//		НомерЗапроса = 2;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ
//		|	РасчетыОстатки.Организация КАК Организация,
//		|	РасчетыОстатки.Сотрудник КАК Сотрудник,
//		|	РасчетыОстатки.Валюта КАК Валюта,
//		|	РасчетыОстатки.Документ КАК Документ,
//		|	РасчетыОстатки.Сотрудник.СчетРасчетовСПодотчетниками КАК СчетУчета,
//		|	СУММА(РасчетыОстатки.СуммаОстаток) КАК СуммаОстаток,
//		|	СУММА(РасчетыОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
//		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиПослеПроведения
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ВременнаяТаблица.Организация КАК Организация,
//		|		ВременнаяТаблица.Сотрудник КАК Сотрудник,
//		|		ВременнаяТаблица.Валюта КАК Валюта,
//		|		ВременнаяТаблица.Документ КАК Документ,
//		|		ВременнаяТаблица.СуммаДляОстатка КАК СуммаОстаток,
//		|		ВременнаяТаблица.СуммаВалДляОстатка КАК СуммаВалОстаток
//		|	ИЗ
//		|		ВременнаяТаблицаРасчетыСПодотчетниками КАК ВременнаяТаблица
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаОстатки.Организация,
//		|		ТаблицаОстатки.Сотрудник,
//		|		ТаблицаОстатки.Валюта,
//		|		ТаблицаОстатки.Документ,
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0)
//		|	ИЗ
//		|		РегистрНакопления.РасчетыСПодотчетниками.Остатки(
//		|				&МоментВремени,
//		|				(Организация, Сотрудник, Валюта, Документ) В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаРасчетыСПодотчетниками.Организация,
//		|						ВременнаяТаблицаРасчетыСПодотчетниками.Сотрудник,
//		|						ВременнаяТаблицаРасчетыСПодотчетниками.Валюта,
//		|						ВременнаяТаблицаРасчетыСПодотчетниками.Документ
//		|					ИЗ
//		|						ВременнаяТаблицаРасчетыСПодотчетниками)) КАК ТаблицаОстатки
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ДвиженияДокумента.Организация,
//		|		ДвиженияДокумента.Сотрудник,
//		|		ДвиженияДокумента.Валюта,
//		|		ДвиженияДокумента.Документ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|		КОНЕЦ
//		|	ИЗ
//		|		РегистрНакопления.РасчетыСПодотчетниками КАК ДвиженияДокумента
//		|	ГДЕ
//		|		ДвиженияДокумента.Регистратор = &Ссылка
//		|		И ДвиженияДокумента.Период <= &ПериодКонтроля) КАК РасчетыОстатки
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	РасчетыОстатки.Организация,
//		|	РасчетыОстатки.Сотрудник,
//		|	РасчетыОстатки.Валюта,
//		|	РасчетыОстатки.Документ,
//		|	РасчетыОстатки.Сотрудник.СчетРасчетовСПодотчетниками
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Организация,
//		|	Сотрудник,
//		|	Валюта,
//		|	Документ,
//		|	СчетУчета
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаРасчеты.Организация КАК Организация,
//		|	ТаблицаРасчеты.Сотрудник КАК Сотрудник,
//		|	ТаблицаРасчеты.Валюта КАК Валюта,
//		|	ТаблицаРасчеты.Документ КАК Документ,
//		|	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) КАК СуммаКурсовойРазницы,
//		|	ТаблицаРасчеты.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПодотчетниками
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПодотчетниками КАК ТаблицаРасчеты
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиПослеПроведения КАК ТаблицаОстатки
//		|		ПО ТаблицаРасчеты.Организация = ТаблицаОстатки.Организация
//		|			И ТаблицаРасчеты.Сотрудник = ТаблицаОстатки.Сотрудник
//		|			И ТаблицаРасчеты.Валюта = ТаблицаОстатки.Валюта
//		|			И ТаблицаРасчеты.Документ = ТаблицаОстатки.Документ
//		|			И ТаблицаРасчеты.СчетУчета = ТаблицаОстатки.СчетУчета
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ
//		|						КонстантаВалютаУчета.Значение
//		|					ИЗ
//		|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыВалютУчетаСрезПоследних
//		|		ПО (ИСТИНА)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаРасчетыСПодотчетниками.Валюта
//		|					ИЗ
//		|						ВременнаяТаблицаРасчетыСПодотчетниками)) КАК КурсыВалютРасчетовСрезПоследних
//		|		ПО ТаблицаРасчеты.Валюта = КурсыВалютРасчетовСрезПоследних.Валюта
//		|ГДЕ
//		|	(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) >= 0.005
//		|			ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) <= -0.005)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК Порядок,
//		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Документ КАК Документ,
//		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.Валюта КАК Валюта,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
//		|	ТаблицаДокумента.СодержаниеПроводки КАК СодержаниеПроводки
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПодотчетниками КАК ТаблицаДокумента
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	2,
//		|	ТаблицаДокумента.НомерСтроки,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//		|	КОНЕЦ,
//		|	ТаблицаДокумента.Документ,
//		|	ТаблицаДокумента.Сотрудник,
//		|	ТаблицаДокумента.Дата,
//		|	ТаблицаДокумента.Организация,
//		|	ТаблицаДокумента.Валюта,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
//		|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
//		|	КОНЕЦ,
//		|	0,
//		|	ТаблицаДокумента.СчетУчета,
//		|	&КурсоваяРазница
//		|ИЗ
//		|	ВременнаяТаблицаКурсовыхРазницРасчетыСПодотчетниками КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Порядок,
//		|	НомерСтроки
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|УНИЧТОЖИТЬ ВременнаяТаблицаОстаткиПослеПроведения";
//		
//	Иначе
//		
//		НомерЗапроса = 1;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаРасчеты.Организация КАК Организация,
//		|	ТаблицаРасчеты.Сотрудник КАК Сотрудник,
//		|	ТаблицаРасчеты.Валюта КАК Валюта,
//		|	ТаблицаРасчеты.Документ КАК Документ,
//		|	0 КАК СуммаКурсовойРазницы,
//		|	ТаблицаРасчеты.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПодотчетниками
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПодотчетниками КАК ТаблицаРасчеты
//		|ГДЕ
//		|	ЛОЖЬ
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК Порядок,
//		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Документ КАК Документ,
//		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.Валюта КАК Валюта,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
//		|	ТаблицаДокумента.СодержаниеПроводки КАК СодержаниеПроводки
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПодотчетниками КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Порядок,
//		|	НомерСтроки";
//		
//	КонецЕсли;
//	
//	Возврат ТекстЗапроса;
//	
//КонецФункции // ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПодотчетниками()

//// Функция возвращает текст запроса для расчета курсовых разниц.
////
//Функция ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПерсоналом(МенеджерВременныхТаблиц, НомерЗапроса) Экспорт
//	
//	РассчитыватьКурсовыеРазницы = ПолучитьНеобходимостьРасчетаКурсовыхРазниц(МенеджерВременныхТаблиц, "ВременнаяТаблицаРасчетыСПерсоналом");
//	
//	Если РассчитыватьКурсовыеРазницы Тогда
//		
//		НомерЗапроса = 2;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ
//		|	РасчетыОстатки.Организация КАК Организация,
//		|	РасчетыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//		|	РасчетыОстатки.Сотрудник КАК Сотрудник,
//		|	РасчетыОстатки.Валюта КАК Валюта,
//		|	РасчетыОстатки.ПериодРегистрации КАК ПериодРегистрации,
//		|	РасчетыОстатки.Сотрудник.СчетРасчетовСПерсоналом КАК СчетУчета,
//		|	СУММА(РасчетыОстатки.СуммаОстаток) КАК СуммаОстаток,
//		|	СУММА(РасчетыОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
//		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиПослеПроведения
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ВременнаяТаблица.Организация КАК Организация,
//		|		ВременнаяТаблица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//		|		ВременнаяТаблица.Сотрудник КАК Сотрудник,
//		|		ВременнаяТаблица.Валюта КАК Валюта,
//		|		ВременнаяТаблица.ПериодРегистрации КАК ПериодРегистрации,
//		|		ВременнаяТаблица.СуммаДляОстатка КАК СуммаОстаток,
//		|		ВременнаяТаблица.СуммаВалДляОстатка КАК СуммаВалОстаток
//		|	ИЗ
//		|		ВременнаяТаблицаРасчетыСПерсоналом КАК ВременнаяТаблица
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаОстатки.Организация,
//		|		ТаблицаОстатки.СтруктурнаяЕдиница,
//		|		ТаблицаОстатки.Сотрудник,
//		|		ТаблицаОстатки.Валюта,
//		|		ТаблицаОстатки.ПериодРегистрации,
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0)
//		|	ИЗ
//		|		РегистрНакопления.РасчетыСПерсоналом.Остатки(
//		|				&МоментВремени,
//		|				(Организация, СтруктурнаяЕдиница, Сотрудник, Валюта, ПериодРегистрации) В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаРасчетыСПерсоналом.Организация,
//		|						ВременнаяТаблицаРасчетыСПерсоналом.СтруктурнаяЕдиница,
//		|						ВременнаяТаблицаРасчетыСПерсоналом.Сотрудник,
//		|						ВременнаяТаблицаРасчетыСПерсоналом.Валюта,
//		|						ВременнаяТаблицаРасчетыСПерсоналом.ПериодРегистрации
//		|					ИЗ
//		|						ВременнаяТаблицаРасчетыСПерсоналом)) КАК ТаблицаОстатки
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ДвиженияДокумента.Организация,
//		|		ДвиженияДокумента.СтруктурнаяЕдиница,
//		|		ДвиженияДокумента.Сотрудник,
//		|		ДвиженияДокумента.Валюта,
//		|		ДвиженияДокумента.ПериодРегистрации,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|		КОНЕЦ
//		|	ИЗ
//		|		РегистрНакопления.РасчетыСПерсоналом КАК ДвиженияДокумента
//		|	ГДЕ
//		|		ДвиженияДокумента.Регистратор = &Ссылка
//		|		И ДвиженияДокумента.Период <= &ПериодКонтроля) КАК РасчетыОстатки
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	РасчетыОстатки.Организация,
//		|	РасчетыОстатки.СтруктурнаяЕдиница,
//		|	РасчетыОстатки.Сотрудник,
//		|	РасчетыОстатки.Валюта,
//		|	РасчетыОстатки.ПериодРегистрации,
//		|	РасчетыОстатки.Сотрудник.СчетРасчетовСПерсоналом
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Организация,
//		|	СтруктурнаяЕдиница,
//		|	Сотрудник,
//		|	Валюта,
//		|	ПериодРегистрации,
//		|	СчетУчета
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаРасчеты.Организация КАК Организация,
//		|	ТаблицаРасчеты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//		|	ТаблицаРасчеты.Сотрудник КАК Сотрудник,
//		|	ТаблицаРасчеты.Валюта КАК Валюта,
//		|	ТаблицаРасчеты.ПериодРегистрации КАК ПериодРегистрации,
//		|	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) КАК СуммаКурсовойРазницы,
//		|	ТаблицаРасчеты.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПерсоналом
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПерсоналом КАК ТаблицаРасчеты
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиПослеПроведения КАК ТаблицаОстатки
//		|		ПО ТаблицаРасчеты.Организация = ТаблицаОстатки.Организация
//		|			И ТаблицаРасчеты.СтруктурнаяЕдиница = ТаблицаОстатки.СтруктурнаяЕдиница
//		|			И ТаблицаРасчеты.Сотрудник = ТаблицаОстатки.Сотрудник
//		|			И ТаблицаРасчеты.Валюта = ТаблицаОстатки.Валюта
//		|			И ТаблицаРасчеты.ПериодРегистрации = ТаблицаОстатки.ПериодРегистрации
//		|			И ТаблицаРасчеты.СчетУчета = ТаблицаОстатки.СчетУчета
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ
//		|						КонстантаВалютаУчета.Значение
//		|					ИЗ
//		|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыВалютУчетаСрезПоследних
//		|		ПО (ИСТИНА)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаРасчетыСПерсоналом.Валюта
//		|					ИЗ
//		|						ВременнаяТаблицаРасчетыСПерсоналом)) КАК КурсыВалютРасчетовСрезПоследних
//		|		ПО ТаблицаРасчеты.Валюта = КурсыВалютРасчетовСрезПоследних.Валюта
//		|ГДЕ
//		|	(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) >= 0.005
//		|			ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) <= -0.005)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК Порядок,
//		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
//		|	ТаблицаДокумента.Валюта КАК Валюта,
//		|	ТаблицаДокумента.ПериодРегистрации КАК ПериодРегистрации,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
//		|	ТаблицаДокумента.СодержаниеПроводки КАК СодержаниеПроводки
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПерсоналом КАК ТаблицаДокумента
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	2,
//		|	ТаблицаДокумента.НомерСтроки,
//		|	ТаблицаДокумента.Дата,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//		|	КОНЕЦ,
//		|	ТаблицаДокумента.Организация,
//		|	ТаблицаДокумента.СтруктурнаяЕдиница,
//		|	ТаблицаДокумента.Сотрудник,
//		|	ТаблицаДокумента.Валюта,
//		|	ТаблицаДокумента.ПериодРегистрации,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
//		|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
//		|	КОНЕЦ,
//		|	0,
//		|	ТаблицаДокумента.СчетУчета,
//		|	&КурсоваяРазница
//		|ИЗ
//		|	ВременнаяТаблицаКурсовыхРазницРасчетыСПерсоналом КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Порядок,
//		|	НомерСтроки
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|УНИЧТОЖИТЬ ВременнаяТаблицаОстаткиПослеПроведения";
//	
//	Иначе
//		
//		НомерЗапроса = 1;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаРасчеты.Организация КАК Организация,
//		|	ТаблицаРасчеты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//		|	ТаблицаРасчеты.Сотрудник КАК Сотрудник,
//		|	ТаблицаРасчеты.Валюта КАК Валюта,
//		|	ТаблицаРасчеты.ПериодРегистрации КАК ПериодРегистрации,
//		|	0 КАК СуммаКурсовойРазницы,
//		|	ТаблицаРасчеты.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПерсоналом
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПерсоналом КАК ТаблицаРасчеты
//		|ГДЕ
//		|	ЛОЖЬ
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК Порядок,
//		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
//		|	ТаблицаДокумента.Валюта КАК Валюта,
//		|	ТаблицаДокумента.ПериодРегистрации КАК ПериодРегистрации,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
//		|	ТаблицаДокумента.СодержаниеПроводки КАК СодержаниеПроводки
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПерсоналом КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Порядок,
//		|	НомерСтроки";
//		
//	КонецЕсли;
//	
//	Возврат ТекстЗапроса;
//	
//КонецФункции // ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПерсоналом()

//// Функция возвращает текст запроса для расчета курсовых разниц.
////
//Функция ПолучитьТекстЗапросаКурсовыеРазницыСуммовойУчетВРознице(МенеджерВременныхТаблиц, НомерЗапроса) Экспорт
//	
//	РассчитыватьКурсовыеРазницы = ПолучитьНеобходимостьРасчетаКурсовыхРазниц(МенеджерВременныхТаблиц, "ВременнаяТаблицаСуммовойУчетВРознице");
//	
//	Если РассчитыватьКурсовыеРазницы Тогда
//		
//		НомерЗапроса = 2;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ
//		|	СуммовойУчетВРозницеОстатки.Организация КАК Организация,
//		|	СуммовойУчетВРозницеОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//		|	СуммовойУчетВРозницеОстатки.СчетУчета КАК СчетУчета,
//		|	СуммовойУчетВРозницеОстатки.Валюта КАК Валюта,
//		|	СУММА(СуммовойУчетВРозницеОстатки.СуммаОстаток) КАК СуммаОстаток,
//		|	СУММА(СуммовойУчетВРозницеОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
//		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиПослеПроведения
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ВременнаяТаблица.Организация КАК Организация,
//		|		ВременнаяТаблица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//		|		ВременнаяТаблица.Валюта КАК Валюта,
//		|		ВременнаяТаблица.СчетУчета КАК СчетУчета,
//		|		ВременнаяТаблица.СуммаДляОстатка КАК СуммаОстаток,
//		|		ВременнаяТаблица.СуммаВалДляОстатка КАК СуммаВалОстаток
//		|	ИЗ
//		|		ВременнаяТаблицаСуммовойУчетВРознице КАК ВременнаяТаблица
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаОстатки.Организация,
//		|		ТаблицаОстатки.СтруктурнаяЕдиница,
//		|		ТаблицаОстатки.Валюта,
//		|		ТаблицаОстатки.СтруктурнаяЕдиница.СчетУчетаВРознице,
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0)
//		|	ИЗ
//		|		РегистрНакопления.СуммовойУчетВРознице.Остатки(
//		|				&МоментВремени,
//		|				(Организация, СтруктурнаяЕдиница, Валюта) В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаСуммовойУчетВРознице.Организация,
//		|						ВременнаяТаблицаСуммовойУчетВРознице.СтруктурнаяЕдиница,
//		|						ВременнаяТаблицаСуммовойУчетВРознице.Валюта
//		|					ИЗ
//		|						ВременнаяТаблицаСуммовойУчетВРознице)) КАК ТаблицаОстатки
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ДвиженияДокумента.Организация,
//		|		ДвиженияДокумента.СтруктурнаяЕдиница,
//		|		ДвиженияДокумента.Валюта,
//		|		ДвиженияДокумента.СтруктурнаяЕдиница.СчетУчетаВРознице,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|		КОНЕЦ
//		|	ИЗ
//		|		РегистрНакопления.СуммовойУчетВРознице КАК ДвиженияДокумента
//		|	ГДЕ
//		|		ДвиженияДокумента.Регистратор = &Ссылка
//		|		И ДвиженияДокумента.Период <= &ПериодКонтроля) КАК СуммовойУчетВРозницеОстатки
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	СуммовойУчетВРозницеОстатки.Организация,
//		|	СуммовойУчетВРозницеОстатки.СтруктурнаяЕдиница,
//		|	СуммовойУчетВРозницеОстатки.Валюта,
//		|	СуммовойУчетВРозницеОстатки.СчетУчета
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Организация,
//		|	СтруктурнаяЕдиница,
//		|	Валюта,
//		|	СчетУчета
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаСуммовойУчетВРознице.Организация КАК Организация,
//		|	ТаблицаСуммовойУчетВРознице.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//		|	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) КАК СуммаКурсовойРазницы,
//		|	ТаблицаСуммовойУчетВРознице.Валюта КАК Валюта,
//		|	ТаблицаСуммовойУчетВРознице.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницСуммовойУчетВРознице
//		|ИЗ
//		|	ВременнаяТаблицаСуммовойУчетВРознице КАК ТаблицаСуммовойУчетВРознице
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиПослеПроведения КАК ТаблицаОстатки
//		|		ПО ТаблицаСуммовойУчетВРознице.Организация = ТаблицаОстатки.Организация
//		|			И ТаблицаСуммовойУчетВРознице.СтруктурнаяЕдиница = ТаблицаОстатки.СтруктурнаяЕдиница
//		|			И ТаблицаСуммовойУчетВРознице.Валюта = ТаблицаОстатки.Валюта
//		|			И ТаблицаСуммовойУчетВРознице.СчетУчета = ТаблицаОстатки.СчетУчета
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ
//		|						КонстантаВалютаУчета.Значение
//		|					ИЗ
//		|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыВалютУчетаСрезПоследних
//		|		ПО (ИСТИНА)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаСуммовойУчетВРознице.Валюта
//		|					ИЗ
//		|						ВременнаяТаблицаСуммовойУчетВРознице)) КАК КурсыВалютКассаСрезПоследних
//		|		ПО ТаблицаСуммовойУчетВРознице.Валюта = КурсыВалютКассаСрезПоследних.Валюта
//		|ГДЕ
//		|	(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) >= 0.005
//		|			ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) <= -0.005)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК Порядок,
//		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//		|	ТаблицаДокумента.Валюта КАК Валюта,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.Себестоимость КАК Себестоимость,
//		|	ТаблицаДокумента.СодержаниеПроводки КАК СодержаниеПроводки
//		|ИЗ
//		|	ВременнаяТаблицаСуммовойУчетВРознице КАК ТаблицаДокумента
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	2,
//		|	ТаблицаДокумента.НомерСтроки,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//		|	КОНЕЦ,
//		|	ТаблицаДокумента.Дата,
//		|	ТаблицаДокумента.Организация,
//		|	ТаблицаДокумента.СтруктурнаяЕдиница,
//		|	ТаблицаДокумента.Валюта,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
//		|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
//		|	КОНЕЦ,
//		|	0,
//		|	0,
//		|	&КурсоваяРазница
//		|ИЗ
//		|	ВременнаяТаблицаКурсовыхРазницСуммовойУчетВРознице КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Порядок,
//		|	НомерСтроки
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|УНИЧТОЖИТЬ ВременнаяТаблицаОстаткиПослеПроведения";
//		
//	Иначе
//		
//		НомерЗапроса = 1;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаСуммовойУчетВРознице.Организация КАК Организация,
//		|	ТаблицаСуммовойУчетВРознице.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//		|	0 КАК СуммаКурсовойРазницы,
//		|	ТаблицаСуммовойУчетВРознице.Валюта КАК Валюта,
//		|	ТаблицаСуммовойУчетВРознице.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницСуммовойУчетВРознице
//		|ИЗ
//		|	ВременнаяТаблицаСуммовойУчетВРознице КАК ТаблицаСуммовойУчетВРознице
//		|ГДЕ
//		|	ЛОЖЬ
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК Порядок,
//		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
//		|	ТаблицаДокумента.Валюта КАК Валюта,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.Себестоимость КАК Себестоимость,
//		|	ТаблицаДокумента.СодержаниеПроводки КАК СодержаниеПроводки
//		|ИЗ
//		|	ВременнаяТаблицаСуммовойУчетВРознице КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Порядок,
//		|	НомерСтроки";
//		
//	КонецЕсли;
//	
//	Возврат ТекстЗапроса;
//	
//КонецФункции // ПолучитьТекстЗапросаКурсовыеРазницыСуммовойУчетВРознице()

//Функция ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПрочимиКонтрагентами(МенеджерВременныхТаблиц, СЗачетомАванса, НомерЗапроса) Экспорт
//	
//	РассчитыватьКурсовыеРазницы = ПолучитьНеобходимостьРасчетаКурсовыхРазниц(МенеджерВременныхТаблиц, "ВременнаяТаблицаРасчетыСПрочимиКонтрагентами");
//	
//	Если НЕ РассчитыватьКурсовыеРазницы Тогда
//		
//		НомерЗапроса = 1;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаРасчеты.Организация КАК Организация,
//		|	ТаблицаРасчеты.Контрагент КАК Контрагент,
//		|	ТаблицаРасчеты.Договор КАК Договор,
//		|	ТаблицаРасчеты.Документ КАК Документ,
//		|	ТаблицаРасчеты.Заказ КАК Заказ,
//		|	ТаблицаРасчеты.ТипРасчетов КАК ТипРасчетов,
//		|	0 КАК СуммаКурсовойРазницы,
//		|	ТаблицаРасчеты.Валюта КАК Валюта,
//		|	ТаблицаРасчеты.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПрочимиКонтрагентами
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПрочимиКонтрагентами КАК ТаблицаРасчеты
//		|ГДЕ
//		|	ЛОЖЬ
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.Контрагент КАК Контрагент,
//		|	ТаблицаДокумента.Договор КАК Договор,
//		|	ТаблицаДокумента.Документ КАК Документ,
//		|	ТаблицаДокумента.Заказ КАК Заказ,
//		|	ТаблицаДокумента.ТипРасчетов КАК ТипРасчетов,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.СчетУчета,
//		|	ТаблицаДокумента.Валюта,
//		|	ТаблицаДокумента.СодержаниеПроводки
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПрочимиКонтрагентами КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ТаблицаДокумента.СодержаниеПроводки,
//		|	Документ,
//		|	Заказ,
//		|	ВидДвижения";
//	
//	ИначеЕсли СЗачетомАванса Тогда
//		
//		НомерЗапроса = 2;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ
//		|	РасчетыОстатки.Организация КАК Организация,
//		|	РасчетыОстатки.Контрагент КАК Контрагент,
//		|	РасчетыОстатки.Договор КАК Договор,
//		|	РасчетыОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
//		|	РасчетыОстатки.Документ КАК Документ,
//		|	РасчетыОстатки.Заказ КАК Заказ,
//		|	РасчетыОстатки.ТипРасчетов КАК ТипРасчетов,
//		|	ВЫБОР
//		|		КОГДА РасчетыОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|			ТОГДА РасчетыОстатки.Контрагент.СчетУчетаРасчетовСПоставщиком
//		|		ИНАЧЕ РасчетыОстатки.Контрагент.СчетУчетаАвансовПоставщику
//		|	КОНЕЦ КАК СчетУчета,
//		|	СУММА(РасчетыОстатки.СуммаОстаток) КАК СуммаОстаток,
//		|	СУММА(РасчетыОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
//		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиПослеПроведения
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ВременнаяТаблица.Организация КАК Организация,
//		|		ВременнаяТаблица.Контрагент КАК Контрагент,
//		|		ВременнаяТаблица.Договор КАК Договор,
//		|		ВременнаяТаблица.Документ КАК Документ,
//		|		ВременнаяТаблица.Заказ КАК Заказ,
//		|		ВременнаяТаблица.ТипРасчетов КАК ТипРасчетов,
//		|		ВременнаяТаблица.СуммаДляОстатка КАК СуммаОстаток,
//		|		ВременнаяТаблица.СуммаВалДляОстатка КАК СуммаВалОстаток
//		|	ИЗ
//		|		ВременнаяТаблицаРасчетыСПрочимиКонтрагентами КАК ВременнаяТаблица
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ДвиженияДокумента.Организация,
//		|		ДвиженияДокумента.Контрагент,
//		|		ДвиженияДокумента.Договор,
//		|		ДвиженияДокумента.Документ,
//		|		ДвиженияДокумента.Заказ,
//		|		ДвиженияДокумента.ТипРасчетов,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|		КОНЕЦ
//		|	ИЗ
//		|		РегистрНакопления.РасчетыСПоставщиками КАК ДвиженияДокумента
//		|	ГДЕ
//		|		ДвиженияДокумента.Регистратор = &Ссылка
//		|		И ДвиженияДокумента.Период <= &ПериодКонтроля) КАК РасчетыОстатки
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	РасчетыОстатки.Организация,
//		|	РасчетыОстатки.Контрагент,
//		|	РасчетыОстатки.Договор,
//		|	РасчетыОстатки.Документ,
//		|	РасчетыОстатки.Заказ,
//		|	РасчетыОстатки.ТипРасчетов,
//		|	РасчетыОстатки.Договор.ВалютаРасчетов,
//		|	ВЫБОР
//		|		КОГДА РасчетыОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|			ТОГДА РасчетыОстатки.Контрагент.СчетУчетаРасчетовСПоставщиком
//		|		ИНАЧЕ РасчетыОстатки.Контрагент.СчетУчетаАвансовПоставщику
//		|	КОНЕЦ
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Организация,
//		|	Контрагент,
//		|	Договор,
//		|	ВалютаРасчетов,
//		|	Документ,
//		|	Заказ,
//		|	ТипРасчетов,
//		|	СчетУчета
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаРасчеты.Организация КАК Организация,
//		|	ТаблицаРасчеты.Контрагент КАК Контрагент,
//		|	ТаблицаРасчеты.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
//		|	ТаблицаРасчеты.Договор КАК Договор,
//		|	ТаблицаРасчеты.Документ КАК Документ,
//		|	ТаблицаРасчеты.Заказ КАК Заказ,
//		|	ТаблицаРасчеты.ТипРасчетов КАК ТипРасчетов,
//		|	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) КАК СуммаКурсовойРазницы,
//		|	ТаблицаРасчеты.Валюта КАК Валюта,
//		|	ТаблицаРасчеты.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПрочимиКонтрагентамиПредварительная
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПрочимиКонтрагентами КАК ТаблицаРасчеты
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиПослеПроведения КАК ТаблицаОстатки
//		|		ПО ТаблицаРасчеты.Организация = ТаблицаОстатки.Организация
//		|			И ТаблицаРасчеты.Контрагент = ТаблицаОстатки.Контрагент
//		|			И ТаблицаРасчеты.Договор = ТаблицаОстатки.Договор
//		|			И ТаблицаРасчеты.Документ = ТаблицаОстатки.Документ
//		|			И ТаблицаРасчеты.Заказ = ТаблицаОстатки.Заказ
//		|			И ТаблицаРасчеты.ТипРасчетов = ТаблицаОстатки.ТипРасчетов
//		|			И ТаблицаРасчеты.Валюта = ТаблицаОстатки.ВалютаРасчетов
//		|			И ТаблицаРасчеты.СчетУчета = ТаблицаОстатки.СчетУчета
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ
//		|						КонстантаВалютаУчета.Значение
//		|					ИЗ
//		|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыВалютУчетаСрезПоследних
//		|		ПО (ИСТИНА)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаРасчетыСПрочимиКонтрагентами.Договор.ВалютаРасчетов
//		|					ИЗ
//		|						ВременнаяТаблицаРасчетыСПрочимиКонтрагентами)) КАК КурсыВалютРасчетовСрезПоследних
//		|		ПО ТаблицаРасчеты.Валюта = КурсыВалютРасчетовСрезПоследних.Валюта
//		|ГДЕ
//		|	(ТаблицаОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|			ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) = 0)
//		|	И (ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) >= 0.005
//		|			ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) <= -0.005)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ТаблицаДвижений.Период КАК Период,
//		|	ТаблицаДвижений.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДвижений.Организация КАК Организация,
//		|	ТаблицаДвижений.Контрагент КАК Контрагент,
//		|	ТаблицаДвижений.Договор КАК Договор,
//		|	ТаблицаДвижений.Документ КАК Документ,
//		|	ТаблицаДвижений.Заказ КАК Заказ,
//		|	ТаблицаДвижений.ТипРасчетов КАК ТипРасчетов,
//		|	ТаблицаДвижений.Валюта КАК Валюта,
//		|	СУММА(ТаблицаДвижений.Сумма) КАК Сумма,
//		|	СУММА(ТаблицаДвижений.СуммаВал) КАК СуммаВал,
//		|	ТаблицаДвижений.СодержаниеПроводки КАК СодержаниеПроводки
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата КАК Период,
//		|		ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|		ТаблицаДокумента.Организация КАК Организация,
//		|		ТаблицаДокумента.Контрагент КАК Контрагент,
//		|		ТаблицаДокумента.Договор КАК Договор,
//		|		ТаблицаДокумента.Документ КАК Документ,
//		|		ТаблицаДокумента.Заказ КАК Заказ,
//		|		ТаблицаДокумента.ТипРасчетов КАК ТипРасчетов,
//		|		ТаблицаДокумента.Валюта КАК Валюта,
//		|		ТаблицаДокумента.Сумма КАК Сумма,
//		|		ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|		ТаблицаДокумента.СодержаниеПроводки КАК СодержаниеПроводки
//		|	ИЗ
//		|		ВременнаяТаблицаРасчетыСПрочимиКонтрагентами КАК ТаблицаДокумента
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата,
//		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
//		|		ТаблицаДокумента.Организация,
//		|		ТаблицаДокумента.Контрагент,
//		|		ТаблицаДокумента.Договор,
//		|		ТаблицаДокумента.Документ,
//		|		ТаблицаДокумента.Заказ,
//		|		ТаблицаДокумента.ТипРасчетов,
//		|		ТаблицаДокумента.Валюта,
//		|		ТаблицаДокумента.СуммаКурсовойРазницы,
//		|		0,
//		|		ВЫРАЗИТЬ(&КурсоваяРазница КАК СТРОКА(100))
//		|	ИЗ
//		|		ВременнаяТаблицаКурсовыхРазницРасчетыСПрочимиКонтрагентамиПредварительная КАК ТаблицаДокумента
//		|	ГДЕ
//		|		ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата,
//		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
//		|		ТаблицаДокумента.Организация,
//		|		ТаблицаДокумента.Контрагент,
//		|		ТаблицаДокумента.Договор,
//		|		ТаблицаДокумента.Документ,
//		|		ТаблицаДокумента.Заказ,
//		|		ТаблицаДокумента.ТипРасчетов,
//		|		ТаблицаДокумента.Валюта,
//		|		ТаблицаДокумента.СуммаКурсовойРазницы,
//		|		0,
//		|		ВЫРАЗИТЬ(&ЗачетАванса КАК СТРОКА(100))
//		|	ИЗ
//		|		ВременнаяТаблицаКурсовыхРазницРасчетыСПрочимиКонтрагентамиПредварительная КАК ТаблицаДокумента
//		|	ГДЕ
//		|		ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата,
//		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
//		|		ТаблицаДокумента.Организация,
//		|		ТаблицаДокумента.Контрагент,
//		|		ТаблицаДокумента.Договор,
//		|		ВЫБОР
//		|			КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
//		|				ТОГДА &Ссылка
//		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
//		|		КОНЕЦ,
//		|		ТаблицаДокумента.Заказ,
//		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг),
//		|		ТаблицаДокумента.Валюта,
//		|		ТаблицаДокумента.СуммаКурсовойРазницы,
//		|		0,
//		|		ВЫРАЗИТЬ(&ЗачетАванса КАК СТРОКА(100))
//		|	ИЗ
//		|		ВременнаяТаблицаКурсовыхРазницРасчетыСПрочимиКонтрагентамиПредварительная КАК ТаблицаДокумента
//		|	ГДЕ
//		|		ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата,
//		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
//		|		ТаблицаДокумента.Организация,
//		|		ТаблицаДокумента.Контрагент,
//		|		ТаблицаДокумента.Договор,
//		|		ВЫБОР
//		|			КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
//		|				ТОГДА &Ссылка
//		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
//		|		КОНЕЦ,
//		|		ТаблицаДокумента.Заказ,
//		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг),
//		|		ТаблицаДокумента.Валюта,
//		|		ТаблицаДокумента.СуммаКурсовойРазницы,
//		|		0,
//		|		ВЫРАЗИТЬ(&КурсоваяРазница КАК СТРОКА(100))
//		|	ИЗ
//		|		ВременнаяТаблицаКурсовыхРазницРасчетыСПрочимиКонтрагентамиПредварительная КАК ТаблицаДокумента
//		|	ГДЕ
//		|		ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаДвижений
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ТаблицаДвижений.Период,
//		|	ТаблицаДвижений.Организация,
//		|	ТаблицаДвижений.Контрагент,
//		|	ТаблицаДвижений.Договор,
//		|	ТаблицаДвижений.Документ,
//		|	ТаблицаДвижений.Заказ,
//		|	ТаблицаДвижений.ТипРасчетов,
//		|	ТаблицаДвижений.Валюта,
//		|	ТаблицаДвижений.СодержаниеПроводки,
//		|	ТаблицаДвижений.ВидДвижения
//		|
//		|ИМЕЮЩИЕ
//		|	(СУММА(ТаблицаДвижений.Сумма) >= 0.005
//		|		ИЛИ СУММА(ТаблицаДвижений.Сумма) <= -0.005
//		|		ИЛИ СУММА(ТаблицаДвижений.СуммаВал) >= 0.005
//		|		ИЛИ СУММА(ТаблицаДвижений.СуммаВал) <= -0.005)
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	СодержаниеПроводки,
//		|	Документ,
//		|	Заказ,
//		|	ВидДвижения
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаКурсовыхРазниц.Организация КАК Организация,
//		|	ТаблицаКурсовыхРазниц.Контрагент КАК Контрагент,
//		|	ТаблицаКурсовыхРазниц.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
//		|	ТаблицаКурсовыхРазниц.Договор КАК Договор,
//		|	ТаблицаКурсовыхРазниц.Документ КАК Документ,
//		|	ТаблицаКурсовыхРазниц.Заказ КАК Заказ,
//		|	ТаблицаКурсовыхРазниц.ТипРасчетов КАК ТипРасчетов,
//		|	СУММА(ТаблицаКурсовыхРазниц.СуммаКурсовойРазницы) КАК СуммаКурсовойРазницы,
//		|	ТаблицаКурсовыхРазниц.Валюта КАК Валюта,
//		|	ТаблицаКурсовыхРазниц.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПрочимиКонтрагентами
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата КАК Дата,
//		|		ТаблицаДокумента.Организация КАК Организация,
//		|		ТаблицаДокумента.Контрагент КАК Контрагент,
//		|		ТаблицаДокумента.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
//		|		ТаблицаДокумента.Договор КАК Договор,
//		|		ТаблицаДокумента.Документ КАК Документ,
//		|		ТаблицаДокумента.Заказ КАК Заказ,
//		|		ТаблицаДокумента.ТипРасчетов КАК ТипРасчетов,
//		|		ТаблицаДокумента.Валюта КАК Валюта,
//		|		ТаблицаДокумента.СчетУчета КАК СчетУчета,
//		|		ТаблицаДокумента.СуммаКурсовойРазницы КАК СуммаКурсовойРазницы
//		|	ИЗ
//		|		ВременнаяТаблицаКурсовыхРазницРасчетыСПрочимиКонтрагентамиПредварительная КАК ТаблицаДокумента
//		|	ГДЕ
//		|		ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаДокумента.Дата,
//		|		ТаблицаДокумента.Организация,
//		|		ТаблицаДокумента.Контрагент,
//		|		ТаблицаДокумента.ВестиРасчетыПоДокументам,
//		|		ТаблицаДокумента.Договор,
//		|		ВЫБОР
//		|			КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
//		|				ТОГДА &Ссылка
//		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
//		|		КОНЕЦ,
//		|		ТаблицаДокумента.Заказ,
//		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг),
//		|		ТаблицаДокумента.Валюта,
//		|		ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПоставщиком,
//		|		ТаблицаДокумента.СуммаКурсовойРазницы
//		|	ИЗ
//		|		ВременнаяТаблицаКурсовыхРазницРасчетыСПрочимиКонтрагентамиПредварительная КАК ТаблицаДокумента
//		|	ГДЕ
//		|		ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаКурсовыхРазниц
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ТаблицаКурсовыхРазниц.Организация,
//		|	ТаблицаКурсовыхРазниц.Контрагент,
//		|	ТаблицаКурсовыхРазниц.ВестиРасчетыПоДокументам,
//		|	ТаблицаКурсовыхРазниц.Договор,
//		|	ТаблицаКурсовыхРазниц.Документ,
//		|	ТаблицаКурсовыхРазниц.Заказ,
//		|	ТаблицаКурсовыхРазниц.ТипРасчетов,
//		|	ТаблицаКурсовыхРазниц.Валюта,
//		|	ТаблицаКурсовыхРазниц.СчетУчета
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|УНИЧТОЖИТЬ ВременнаяТаблицаОстаткиПослеПроведения
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|УНИЧТОЖИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПрочимиКонтрагентамиПредварительная";
//		
//	Иначе
//		
//		НомерЗапроса = 2;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ
//		|	РасчетыОстатки.Организация КАК Организация,
//		|	РасчетыОстатки.Контрагент КАК Контрагент,
//		|	РасчетыОстатки.Договор КАК Договор,
//		|	РасчетыОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
//		|	РасчетыОстатки.Документ КАК Документ,
//		|	РасчетыОстатки.Заказ КАК Заказ,
//		|	РасчетыОстатки.ТипРасчетов КАК ТипРасчетов,
//		|	ВЫБОР
//		|		КОГДА РасчетыОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|			ТОГДА РасчетыОстатки.Контрагент.СчетУчетаРасчетовСПоставщиком
//		|		ИНАЧЕ РасчетыОстатки.Контрагент.СчетУчетаАвансовПоставщику
//		|	КОНЕЦ КАК СчетУчета,
//		|	СУММА(РасчетыОстатки.СуммаОстаток) КАК СуммаОстаток,
//		|	СУММА(РасчетыОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
//		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиПослеПроведения
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ВременнаяТаблица.Организация КАК Организация,
//		|		ВременнаяТаблица.Контрагент КАК Контрагент,
//		|		ВременнаяТаблица.Договор КАК Договор,
//		|		ВременнаяТаблица.Документ КАК Документ,
//		|		ВременнаяТаблица.Заказ КАК Заказ,
//		|		ВременнаяТаблица.ТипРасчетов КАК ТипРасчетов,
//		|		ВременнаяТаблица.СуммаДляОстатка КАК СуммаОстаток,
//		|		ВременнаяТаблица.СуммаВалДляОстатка КАК СуммаВалОстаток
//		|	ИЗ
//		|		ВременнаяТаблицаРасчетыСПрочимиКонтрагентами КАК ВременнаяТаблица
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ДвиженияДокумента.Организация,
//		|		ДвиженияДокумента.Контрагент,
//		|		ДвиженияДокумента.Договор,
//		|		ДвиженияДокумента.Документ,
//		|		ДвиженияДокумента.Заказ,
//		|		ДвиженияДокумента.ТипРасчетов,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|		КОНЕЦ
//		|	ИЗ
//		|		РегистрНакопления.РасчетыСПоставщиками КАК ДвиженияДокумента
//		|	ГДЕ
//		|		ДвиженияДокумента.Регистратор = &Ссылка
//		|		И ДвиженияДокумента.Период <= &ПериодКонтроля) КАК РасчетыОстатки
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	РасчетыОстатки.Организация,
//		|	РасчетыОстатки.Контрагент,
//		|	РасчетыОстатки.Договор,
//		|	РасчетыОстатки.Документ,
//		|	РасчетыОстатки.Заказ,
//		|	РасчетыОстатки.ТипРасчетов,
//		|	РасчетыОстатки.Договор.ВалютаРасчетов,
//		|	ВЫБОР
//		|		КОГДА РасчетыОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|			ТОГДА РасчетыОстатки.Контрагент.СчетУчетаРасчетовСПоставщиком
//		|		ИНАЧЕ РасчетыОстатки.Контрагент.СчетУчетаАвансовПоставщику
//		|	КОНЕЦ
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Организация,
//		|	Контрагент,
//		|	Договор,
//		|	ВалютаРасчетов,
//		|	Документ,
//		|	Заказ,
//		|	ТипРасчетов,
//		|	СчетУчета
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаРасчеты.Организация КАК Организация,
//		|	ТаблицаРасчеты.Контрагент КАК Контрагент,
//		|	ТаблицаРасчеты.Договор КАК Договор,
//		|	ТаблицаРасчеты.Документ КАК Документ,
//		|	ТаблицаРасчеты.Заказ КАК Заказ,
//		|	ТаблицаРасчеты.ТипРасчетов КАК ТипРасчетов,
//		|	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) КАК СуммаКурсовойРазницы,
//		|	ТаблицаРасчеты.Валюта КАК Валюта,
//		|	ТаблицаРасчеты.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПрочимиКонтрагентами
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПрочимиКонтрагентами КАК ТаблицаРасчеты
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиПослеПроведения КАК ТаблицаОстатки
//		|		ПО ТаблицаРасчеты.Организация = ТаблицаОстатки.Организация
//		|			И ТаблицаРасчеты.Контрагент = ТаблицаОстатки.Контрагент
//		|			И ТаблицаРасчеты.Договор = ТаблицаОстатки.Договор
//		|			И ТаблицаРасчеты.Документ = ТаблицаОстатки.Документ
//		|			И ТаблицаРасчеты.Заказ = ТаблицаОстатки.Заказ
//		|			И ТаблицаРасчеты.ТипРасчетов = ТаблицаОстатки.ТипРасчетов
//		|			И ТаблицаРасчеты.Валюта = ТаблицаОстатки.ВалютаРасчетов
//		|			И ТаблицаРасчеты.СчетУчета = ТаблицаОстатки.СчетУчета
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ
//		|						КонстантаВалютаУчета.Значение
//		|					ИЗ
//		|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыВалютУчетаСрезПоследних
//		|		ПО (ИСТИНА)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаРасчетыСПрочимиКонтрагентами.Валюта
//		|					ИЗ
//		|						ВременнаяТаблицаРасчетыСПрочимиКонтрагентами)) КАК КурсыВалютРасчетовСрезПоследних
//		|		ПО ТаблицаРасчеты.Валюта = КурсыВалютРасчетовСрезПоследних.Валюта
//		|ГДЕ
//		|	ТаблицаРасчеты.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
//		|	И (ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) >= 0.005
//		|			ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) <= -0.005)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК Порядок,
//		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.Контрагент КАК Контрагент,
//		|	ТаблицаДокумента.Договор КАК Договор,
//		|	ТаблицаДокумента.Документ КАК Документ,
//		|	ТаблицаДокумента.Заказ КАК Заказ,
//		|	ТаблицаДокумента.ТипРасчетов КАК ТипРасчетов,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.СчетУчета,
//		|	ТаблицаДокумента.Валюта,
//		|	ТаблицаДокумента.СодержаниеПроводки
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыСПрочимиКонтрагентами КАК ТаблицаДокумента
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	2,
//		|	ТаблицаДокумента.НомерСтроки,
//		|	ТаблицаДокумента.Дата,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//		|	КОНЕЦ,
//		|	ТаблицаДокумента.Организация,
//		|	ТаблицаДокумента.Контрагент,
//		|	ТаблицаДокумента.Договор,
//		|	ТаблицаДокумента.Документ,
//		|	ТаблицаДокумента.Заказ,
//		|	ТаблицаДокумента.ТипРасчетов,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
//		|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
//		|	КОНЕЦ,
//		|	0,
//		|	ТаблицаДокумента.СчетУчета,
//		|	ТаблицаДокумента.Валюта,
//		|	&КурсоваяРазница
//		|ИЗ
//		|	ВременнаяТаблицаКурсовыхРазницРасчетыСПрочимиКонтрагентами КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Порядок,
//		|	НомерСтроки
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|УНИЧТОЖИТЬ ВременнаяТаблицаОстаткиПослеПроведения";
//		
//	КонецЕсли;
//	
//	Возврат ТекстЗапроса;
//	
//КонецФункции // ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПоставщиками()

//// Функция возвращает текст запроса для расчета курсовых разниц.
////
//Функция ПолучитьТекстЗапросаКурсовыеРазницыДенежныеСредстваКПоступлению(МенеджерВременныхТаблиц, НомерЗапроса) Экспорт
//	
//	РассчитыватьКурсовыеРазницы = ПолучитьНеобходимостьРасчетаКурсовыхРазниц(МенеджерВременныхТаблиц, "ВременнаяТаблицаДенежныеСредстваКПоступлению");
//	
//	Если РассчитыватьКурсовыеРазницы Тогда
//		
//		НомерЗапроса = 2;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ
//		|	ДеньгиОстатки.Организация КАК Организация,
//		|	ДеньгиОстатки.Касса КАК Касса,
//		|	&СчетУчета КАК СчетУчета,
//		|	ДеньгиОстатки.ДокументПередачи КАК ДокументПередачи,
//		|	ДеньгиОстатки.Валюта КАК Валюта,
//		|	СУММА(ДеньгиОстатки.СуммаОстаток) КАК СуммаОстаток,
//		|	СУММА(ДеньгиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
//		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиПослеПроведения
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ВременнаяТаблица.Организация КАК Организация,
//		|		ВременнаяТаблица.Касса КАК Касса,
//		|		ВременнаяТаблица.ДокументПередачи КАК ДокументПередачи,
//		|		ВременнаяТаблица.Валюта КАК Валюта,
//		|		ВременнаяТаблица.СуммаДляОстатка КАК СуммаОстаток,
//		|		ВременнаяТаблица.СуммаВалДляОстатка КАК СуммаВалОстаток
//		|	ИЗ
//		|		ВременнаяТаблицаДенежныеСредстваКПоступлению КАК ВременнаяТаблица
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаОстатки.Организация,
//		|		ТаблицаОстатки.Касса,
//		|		ТаблицаОстатки.ДокументПередачи,
//		|		ТаблицаОстатки.ДокументПередачи.ВалютаДенежныхСредств,
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0)
//		|	ИЗ
//		|		РегистрНакопления.ДенежныеСредстваКПоступлению.Остатки(
//		|				&МоментВремени,
//		|				(Организация, Касса) В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаДенежныеСредстваКПоступлению.Организация,
//		|						ВременнаяТаблицаДенежныеСредстваКПоступлению.Касса
//		|					ИЗ
//		|						ВременнаяТаблицаДенежныеСредстваКПоступлению)) КАК ТаблицаОстатки
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ДвиженияДокумента.Организация,
//		|		ДвиженияДокумента.Касса,
//		|		ДвиженияДокумента.ДокументПередачи,
//		|		ДвиженияДокумента.ДокументПередачи.ВалютаДенежныхСредств,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|		КОНЕЦ
//		|	ИЗ
//		|		РегистрНакопления.ДенежныеСредстваКПоступлению КАК ДвиженияДокумента
//		|	ГДЕ
//		|		ДвиженияДокумента.Регистратор = &Ссылка
//		|		И ДвиженияДокумента.Период <= &ПериодКонтроля) КАК ДеньгиОстатки
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ДеньгиОстатки.Организация,
//		|	ДеньгиОстатки.Касса,
//		|	ДеньгиОстатки.ДокументПередачи,
//		|	ДеньгиОстатки.Валюта
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Организация,
//		|	Касса,
//		|	ДокументПередачи,
//		|	Валюта,
//		|	СчетУчета
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаДенежныеСредства.Организация КАК Организация,
//		|	ТаблицаДенежныеСредства.Касса КАК Касса,
//		|	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) КАК СуммаКурсовойРазницы,
//		|	ТаблицаДенежныеСредства.Валюта КАК Валюта,
//		|	ТаблицаОстатки.ДокументПередачи КАК ДокументПередачи,
//		|	&СчетУчета КАК СчетУчета,
//		|	ТаблицаДенежныеСредства.КассаОтправитель КАК КассаОтправитель
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницДенежныеСредстваКПоступлению
//		|ИЗ
//		|	ВременнаяТаблицаДенежныеСредстваКПоступлению КАК ТаблицаДенежныеСредства
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиПослеПроведения КАК ТаблицаОстатки
//		|		ПО ТаблицаДенежныеСредства.Организация = ТаблицаОстатки.Организация
//		|			И ТаблицаДенежныеСредства.Касса = ТаблицаОстатки.Касса
//		|			И ТаблицаДенежныеСредства.Валюта = ТаблицаОстатки.Валюта
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ
//		|						КонстантаВалютаУчета.Значение
//		|					ИЗ
//		|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыВалютУчетаСрезПоследних
//		|		ПО (ИСТИНА)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаДенежныеСредстваКПоступлению.Валюта
//		|					ИЗ
//		|						ВременнаяТаблицаДенежныеСредстваКПоступлению)) КАК КурсыВалютБанковскийСчетКассаСрезПоследних
//		|		ПО ТаблицаДенежныеСредства.Валюта = КурсыВалютБанковскийСчетКассаСрезПоследних.Валюта
//		|ГДЕ
//		|	(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) >= 0.005
//		|			ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) <= -0.005)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	1 КАК Порядок,
//		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.Валюта КАК Валюта,
//		|	ТаблицаДокумента.Касса КАК Касса,
//		|	ТаблицаДокумента.ДокументПередачи КАК ДокументПередачи,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.СодержаниеПроводки КАК СодержаниеПроводки,
//		|	ТаблицаДокумента.КассаОтправитель КАК КассаОтправитель
//		|ИЗ
//		|	ВременнаяТаблицаДенежныеСредстваКПоступлению КАК ТаблицаДокумента
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	2,
//		|	ТаблицаДокумента.НомерСтроки,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//		|	КОНЕЦ,
//		|	ТаблицаДокумента.Дата,
//		|	ТаблицаДокумента.Организация,
//		|	ТаблицаДокумента.Валюта,
//		|	ТаблицаДокумента.Касса,
//		|	ТаблицаДокумента.ДокументПередачи,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
//		|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
//		|	КОНЕЦ,
//		|	0,
//		|	&КурсоваяРазница,
//		|	ТаблицаДокумента.КассаОтправитель
//		|ИЗ
//		|	ВременнаяТаблицаКурсовыхРазницДенежныеСредстваКПоступлению КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	СодержаниеПроводки,
//		|	ВидДвижения
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|УНИЧТОЖИТЬ ВременнаяТаблицаОстаткиПослеПроведения";
//	
//	Иначе
//		
//		НомерЗапроса = 1;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаДенежныеСредства.Организация КАК Организация,
//		|	ТаблицаДенежныеСредства.Касса КАК Касса,
//		|	ТаблицаДенежныеСредства.ДокументПередачи КАК ДокументПередачи,
//		|	0 КАК СуммаКурсовойРазницы,
//		|	ТаблицаДенежныеСредства.Валюта КАК Валюта,
//		|	&СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницДенежныеСредстваКПоступлению
//		|ИЗ
//		|	ВременнаяТаблицаДенежныеСредстваКПоступлению КАК ТаблицаДенежныеСредства
//		|ГДЕ
//		|	ЛОЖЬ
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	1 КАК Порядок,
//		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.Валюта КАК Валюта,
//		|	ТаблицаДокумента.Касса КАК Касса,
//		|	ТаблицаДокумента.ДокументПередачи КАК ДокументПередачи,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.КассаОтправитель КАК КассаОтправитель,
//		|	ТаблицаДокумента.СодержаниеПроводки КАК СодержаниеПроводки
//		|ИЗ
//		|	ВременнаяТаблицаДенежныеСредстваКПоступлению КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	СодержаниеПроводки,
//		|	ВидДвижения";
//	
//	КонецЕсли;
//	
//	Возврат ТекстЗапроса;
//	
//КонецФункции // ПолучитьТекстЗапросаКурсовыеРазницыДенежныеСредстваКПоступлению()

//#КонецОбласти

//#Область ВспомогательныеПроцедурыИФункцииПодсистемБСП

//// Функция очищает разделенные данные созданные при первом запуске.
//// Используется перед загрузкой данных из сервиса.
////
//Функция ОчиститьДанныеВБазе() Экспорт
//	
//	Если НЕ Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
//		ВызватьИсключение(НСтр("ru = 'Не достаточно прав для выполнения операции'"));
//	КонецЕсли;
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Попытка
//		ОбщегоНазначения.ЗаблокироватьИБ();
//	Исключение
//		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			НСтр("ru = 'Не удалось установить монопольный режим (%1)'"),
//			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
//		Возврат Ложь;
//	КонецПопытки;
//	
//	НачатьТранзакцию();
//	Попытка
//		
//		МДОбщегоРеквизита = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные;
//		
//		// Переберем все метаданные
//		
//		// Константы
//		Для каждого МетаданныеКонстанты Из Метаданные.Константы Цикл
//			Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МетаданныеКонстанты, РаботаВМоделиСервиса.РазделительОсновныхДанных()) Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			МенеджерЗначения = Константы[МетаданныеКонстанты.Имя].СоздатьМенеджерЗначения();
//			МенеджерЗначения.ОбменДанными.Загрузка = Истина;
//			МенеджерЗначения.Значение = МетаданныеКонстанты.Тип.ПривестиЗначение();
//			МенеджерЗначения.Записать();
//		КонецЦикла;
//		
//		// Ссылочные типы
//		
//		ВидыОбъектов = Новый Массив;
//		ВидыОбъектов.Добавить("Справочники");
//		ВидыОбъектов.Добавить("Документы");
//		ВидыОбъектов.Добавить("ПланыВидовХарактеристик");
//		ВидыОбъектов.Добавить("ПланыСчетов");
//		ВидыОбъектов.Добавить("ПланыВидовРасчета");
//		ВидыОбъектов.Добавить("БизнесПроцессы");
//		ВидыОбъектов.Добавить("Задачи");
//		
//		Для каждого ВидОбъекта Из ВидыОбъектов Цикл
//			МетаданныеКоллекция = Метаданные[ВидОбъекта];
//			Для каждого МДОбъекта Из МетаданныеКоллекция Цикл
//				Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МДОбъекта, РаботаВМоделиСервиса.РазделительОсновныхДанных()) Тогда
//					Продолжить;
//				КонецЕсли;
//				
//				Запрос = Новый Запрос;
//				Запрос.Текст =
//				"ВЫБРАТЬ
//				|	_XMLВыгрузка_Таблица.Ссылка КАК Ссылка
//				|ИЗ
//				|	" + МДОбъекта.ПолноеИмя() + " КАК _XMLВыгрузка_Таблица";
//				Если ВидОбъекта = "Справочники"
//					ИЛИ ВидОбъекта = "ПланыВидовХарактеристик"
//					ИЛИ ВидОбъекта = "ПланыСчетов"
//					ИЛИ ВидОбъекта = "ПланыВидовРасчета" Тогда
//					
//					Запрос.Текст = Запрос.Текст + "
//					|ГДЕ
//					|	_XMLВыгрузка_Таблица.Предопределенный = ЛОЖЬ";
//				КонецЕсли;
//				
//				РезультатЗапроса = Запрос.Выполнить();
//				Выборка = РезультатЗапроса.Выбрать();
//				Пока Выборка.Следующий() Цикл
//					Удаление = Новый УдалениеОбъекта(Выборка.Ссылка);
//					Удаление.ОбменДанными.Загрузка = Истина;
//					Удаление.Записать();
//				КонецЦикла;
//			КонецЦикла;
//		КонецЦикла;
//		
//		// Регистры кроме независимых регистров сведений и последовательности
//		ВидыТаблиц = Новый Массив;
//		ВидыТаблиц.Добавить("РегистрыНакопления");
//		ВидыТаблиц.Добавить("РегистрыРасчета");
//		ВидыТаблиц.Добавить("РегистрыБухгалтерии");
//		ВидыТаблиц.Добавить("РегистрыСведений");
//		ВидыТаблиц.Добавить("Последовательности");
//		Для каждого ВидТаблицы Из ВидыТаблиц Цикл
//			МетаданныеКоллекция = Метаданные[ВидТаблицы];
//			МенеджерВида = Вычислить(ВидТаблицы);
//			Для каждого МДРегистра Из МетаданныеКоллекция Цикл
//				
//				Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МДРегистра, РаботаВМоделиСервиса.РазделительОсновныхДанных()) Тогда
//					Продолжить;
//				КонецЕсли;
//				
//				Если ВидТаблицы = "РегистрыСведений"
//					И МДРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
//					
//					Продолжить;
//				КонецЕсли;
//				
//				МенеджерТипа = МенеджерВида[МДРегистра.Имя];
//				
//				Запрос = Новый Запрос;
//				Запрос.Текст =
//				"ВЫБРАТЬ РАЗЛИЧНЫЕ
//				|	_XMLВыгрузка_Таблица.Регистратор КАК Регистратор
//				|ИЗ
//				|	" + МДРегистра.ПолноеИмя() + " КАК _XMLВыгрузка_Таблица";
//				РезультатЗапроса = Запрос.Выполнить();
//				Выборка = РезультатЗапроса.Выбрать();
//				Пока Выборка.Следующий() Цикл
//					НаборЗаписей = МенеджерТипа.СоздатьНаборЗаписей();
//					НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
//					НаборЗаписей.ОбменДанными.Загрузка = Истина;
//					НаборЗаписей.Записать();
//				КонецЦикла;
//			КонецЦикла;
//		КонецЦикла;
//		
//		// Независимые регистры сведений
//		Для каждого МДРегистра Из Метаданные.РегистрыСведений Цикл
//			
//			Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МДРегистра, РаботаВМоделиСервиса.РазделительОсновныхДанных()) Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			Если МДРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
//				
//				Продолжить;
//			КонецЕсли;
//			
//			МенеджерТипа = РегистрыСведений[МДРегистра.Имя];
//			
//			НаборЗаписей = МенеджерТипа.СоздатьНаборЗаписей();
//			НаборЗаписей.ОбменДанными.Загрузка = Истина;
//			НаборЗаписей.Записать();
//		КонецЦикла;
//		
//		// Планы обмена
//		
//		Для каждого МДПланаОбмена Из Метаданные.ПланыОбмена Цикл
//			
//			Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МДПланаОбмена, РаботаВМоделиСервиса.РазделительОсновныхДанных()) Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			МенеджерТипа = ПланыОбмена[МДПланаОбмена.Имя];
//			
//			Запрос = Новый Запрос;
//			Запрос.Текст =
//			"ВЫБРАТЬ
//			|	_XMLВыгрузка_Таблица.Ссылка КАК Ссылка
//			|ИЗ
//			|	" + МДПланаОбмена.ПолноеИмя() + " КАК _XMLВыгрузка_Таблица
//			|ГДЕ
//			|	_XMLВыгрузка_Таблица.Ссылка <> &ЭтотУзел";
//			Запрос.УстановитьПараметр("ЭтотУзел", МенеджерТипа.ЭтотУзел());
//			РезультатЗапроса = Запрос.Выполнить();
//			Выборка = РезультатЗапроса.Выбрать();
//			Пока Выборка.Следующий() Цикл
//				Удаление = Новый УдалениеОбъекта(Выборка.Ссылка);
//				Удаление.ОбменДанными.Загрузка = Истина;
//				Удаление.Записать();
//			КонецЦикла;
//		КонецЦикла;
//		
//		ЗафиксироватьТранзакцию();
//		
//		ОбщегоНазначения.РазблокироватьИБ();
//		
//	Исключение
//		ОтменитьТранзакцию();
//		ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление данных'"), 
//			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//		Возврат Ложь;
//	КонецПопытки;
//	
//	Возврат Истина;
//	
//КонецФункции // ОчиститьДанныеВБазе()

//#КонецОбласти

//#Область ПроцедурыОбменаСБанками

//// Процедура заполняет расшифровку платежа для расхода.
////
//Процедура ЗаполнитьРасшифровкуПлатежаРасход(ТекущийОбъект, Компания = Неопределено, СтавкаНДСПоУмолчанию = Неопределено, Курс = Неопределено, Кратность = Неопределено, Договор = Неопределено) Экспорт
//	
//	Если Компания = Неопределено Тогда
//		Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(ТекущийОбъект.Организация);
//	КонецЕсли;
//	
//	Если Курс = Неопределено
//	   И Кратность = Неопределено Тогда
//		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущийОбъект.Дата, Новый Структура("Валюта", ТекущийОбъект.ВалютаДенежныхСредств));
//		Курс = ?(
//			СтруктураПоВалюте.Курс = 0,
//			1,
//			СтруктураПоВалюте.Курс
//		);
//		Кратность = ?(
//			СтруктураПоВалюте.Курс = 0,
//			1,
//			СтруктураПоВалюте.Кратность
//		);
//	КонецЕсли;
//	
//	Если СтавкаНДСПоУмолчанию = Неопределено Тогда
//		Если ТекущийОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
//			СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(ТекущийОбъект.Организация.ВидСтавкиНДСПоУмолчанию);
//		ИначеЕсли ТекущийОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
//			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
//		Иначе
//			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
//		КонецЕсли;
//	КонецЕсли;
//	
//	// Заполнение расшифровки расчетов по умолчанию.
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	
//	"ВЫБРАТЬ
//	|	РасчетыСПоставщикамиОстатки.Организация КАК Организация,
//	|	РасчетыСПоставщикамиОстатки.Контрагент КАК Контрагент,
//	|	РасчетыСПоставщикамиОстатки.Договор КАК Договор,
//	|	ВЫБОР
//	|		КОГДА РасчетыСПоставщикамиОстатки.Контрагент.ВестиРасчетыПоДокументам
//	|			ТОГДА РасчетыСПоставщикамиОстатки.Документ
//	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
//	|	КОНЕЦ КАК Документ,
//	|	ВЫБОР
//	|		КОГДА РасчетыСПоставщикамиОстатки.Контрагент.ВестиРасчетыПоЗаказам
//	|			ТОГДА РасчетыСПоставщикамиОстатки.Заказ
//	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
//	|	КОНЕЦ КАК Заказ,
//	|	РасчетыСПоставщикамиОстатки.ТипРасчетов КАК ТипРасчетов,
//	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаОстаток) КАК СуммаОстаток,
//	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток,
//	|	РасчетыСПоставщикамиОстатки.Документ.Дата КАК ДокументДата,
//	|	СУММА(ВЫРАЗИТЬ(РасчетыСПоставщикамиОстатки.СуммаВалОстаток * КурсыВалютРасчетов.Курс * КурсыВалютДокумента.Кратность / (КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность) КАК ЧИСЛО(15, 2))) КАК СуммаВалДокумента,
//	|	КурсыВалютДокумента.Курс КАК КурсДенежныхСредств,
//	|	КурсыВалютДокумента.Кратность КАК КратностьДенежныхСредств,
//	|	КурсыВалютРасчетов.Курс КАК Курс,
//	|	КурсыВалютРасчетов.Кратность КАК Кратность
//	|ИЗ
//	|	(ВЫБРАТЬ
//	|		РасчетыСПоставщикамиОстатки.Организация КАК Организация,
//	|		РасчетыСПоставщикамиОстатки.Контрагент КАК Контрагент,
//	|		РасчетыСПоставщикамиОстатки.Договор КАК Договор,
//	|		РасчетыСПоставщикамиОстатки.Документ КАК Документ,
//	|		РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
//	|		РасчетыСПоставщикамиОстатки.ТипРасчетов КАК ТипРасчетов,
//	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
//	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
//	|	ИЗ
//	|		РегистрНакопления.РасчетыСПоставщиками.Остатки(
//	|				,
//	|				Организация = &Организация
//	|					И Контрагент = &Контрагент
//	|					// ТекстДоговорОтбор
//	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)) КАК РасчетыСПоставщикамиОстатки
//	|	
//	|	ОБЪЕДИНИТЬ ВСЕ
//	|	
//	|	ВЫБРАТЬ
//	|		ДвиженияДокументаРасчетыСПоставщиками.Организация,
//	|		ДвиженияДокументаРасчетыСПоставщиками.Контрагент,
//	|		ДвиженияДокументаРасчетыСПоставщиками.Договор,
//	|		ДвиженияДокументаРасчетыСПоставщиками.Документ,
//	|		ДвиженияДокументаРасчетыСПоставщиками.Заказ,
//	|		ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов,
//	|		ВЫБОР
//	|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
//	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
//	|		КОНЕЦ,
//	|		ВЫБОР
//	|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
//	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
//	|		КОНЕЦ
//	|	ИЗ
//	|		РегистрНакопления.РасчетыСПоставщиками КАК ДвиженияДокументаРасчетыСПоставщиками
//	|	ГДЕ
//	|		ДвиженияДокументаРасчетыСПоставщиками.Регистратор = &Ссылка
//	|		И ДвиженияДокументаРасчетыСПоставщиками.Период <= &Период
//	|		И ДвиженияДокументаРасчетыСПоставщиками.Организация = &Организация
//	|		И ДвиженияДокументаРасчетыСПоставщиками.Контрагент = &Контрагент
//	|		И ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)) КАК РасчетыСПоставщикамиОстатки
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютДокумента
//	|		ПО (ИСТИНА)
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютРасчетов
//	|		ПО РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
//	|ГДЕ
//	|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток > 0
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	РасчетыСПоставщикамиОстатки.Организация,
//	|	РасчетыСПоставщикамиОстатки.Контрагент,
//	|	РасчетыСПоставщикамиОстатки.Договор,
//	|	РасчетыСПоставщикамиОстатки.Документ,
//	|	РасчетыСПоставщикамиОстатки.Заказ,
//	|	РасчетыСПоставщикамиОстатки.ТипРасчетов,
//	|	РасчетыСПоставщикамиОстатки.Документ.Дата,
//	|	КурсыВалютДокумента.Курс,
//	|	КурсыВалютДокумента.Кратность,
//	|	КурсыВалютРасчетов.Курс,
//	|	КурсыВалютРасчетов.Кратность,
//	|	ВЫБОР
//	|		КОГДА РасчетыСПоставщикамиОстатки.Контрагент.ВестиРасчетыПоДокументам
//	|			ТОГДА РасчетыСПоставщикамиОстатки.Документ
//	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
//	|	КОНЕЦ,
//	|	ВЫБОР
//	|		КОГДА РасчетыСПоставщикамиОстатки.Контрагент.ВестиРасчетыПоЗаказам
//	|			ТОГДА РасчетыСПоставщикамиОстатки.Заказ
//	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
//	|	КОНЕЦ
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ДокументДата";
//		
//	Запрос.УстановитьПараметр("Организация", Компания);
//	Запрос.УстановитьПараметр("Контрагент", ТекущийОбъект.Контрагент);
//	Запрос.УстановитьПараметр("Период", ТекущийОбъект.Дата);
//	Запрос.УстановитьПараметр("Валюта", ТекущийОбъект.ВалютаДенежныхСредств);
//	Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
//	
//	Если ЗначениеЗаполнено(Договор)
//		И ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ТекстДоговорОтбор", "И Договор = &Договор");
//		Запрос.УстановитьПараметр("Договор", Договор);
//		ДоговорПоУмолчанию = Договор; // если нет долга то аванс будет отнесен на этот договор
//	Иначе
//		НуженОтборПоДоговорам = УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов();
//		СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(ТекущийОбъект.Ссылка, ТекущийОбъект.ВидОперации);
//		Если НуженОтборПоДоговорам
//		   И ТекущийОбъект.Контрагент.ВестиРасчетыПоДоговорам Тогда
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ТекстДоговорОтбор", "И Договор.ВидДоговора В (&СписокВидовДоговоров)");
//			Запрос.УстановитьПараметр("СписокВидовДоговоров", СписокВидовДоговоров);
//		КонецЕсли;
//		ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(
//			ТекущийОбъект.Контрагент,
//			ТекущийОбъект.Организация,
//			СписокВидовДоговоров
//		); // если нет долга то аванс будет отнесен на этот договор
//	КонецЕсли;
//		
//	СтруктураКурсВалютыДоговораПоУмолчанию = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
//		ТекущийОбъект.Дата,
//		Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов)
//	);
//	
//	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
//	
//	ТекущийОбъект.РасшифровкаПлатежа.Очистить();
//	
//	СуммаОсталосьРаспределить = ТекущийОбъект.СуммаДокумента;
//	
//	Пока СуммаОсталосьРаспределить > 0 Цикл
//		
//		НоваяСтрока = ТекущийОбъект.РасшифровкаПлатежа.Добавить();
//		
//		Если ВыборкаРезультатаЗапроса.Следующий() Тогда
//			
//			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
//			
//			Если ?(ЗначениеЗаполнено(ВыборкаРезультатаЗапроса.СуммаВалДокумента), ВыборкаРезультатаЗапроса.СуммаВалДокумента, 0) <= СуммаОсталосьРаспределить Тогда // сумма остатка меньше или равна, чем осталось распределить
//				
//				НоваяСтрока.СуммаРасчетов = ВыборкаРезультатаЗапроса.СуммаВалОстаток;
//				НоваяСтрока.СуммаПлатежа = ВыборкаРезультатаЗапроса.СуммаВалДокумента;
//				НоваяСтрока.СтавкаНДС = СтавкаНДСПоУмолчанию;
//				НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((СтавкаНДСПоУмолчанию.Ставка + 100) / 100);
//				СуммаОсталосьРаспределить = СуммаОсталосьРаспределить - ВыборкаРезультатаЗапроса.СуммаВалДокумента;
//				
//			Иначе // сумма остатка больше чем нужно распределить
//				
//				НоваяСтрока.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
//					СуммаОсталосьРаспределить,
//					ВыборкаРезультатаЗапроса.КурсДенежныхСредств,
//					ВыборкаРезультатаЗапроса.Курс,
//					ВыборкаРезультатаЗапроса.КратностьДенежныхСредств,
//					ВыборкаРезультатаЗапроса.Кратность
//				);
//				НоваяСтрока.СуммаПлатежа = СуммаОсталосьРаспределить;
//				НоваяСтрока.СтавкаНДС = СтавкаНДСПоУмолчанию;
//				НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((СтавкаНДСПоУмолчанию.Ставка + 100) / 100);
//				СуммаОсталосьРаспределить = 0;
//				
//			КонецЕсли;
//			
//		Иначе
//			
//			НоваяСтрока.Договор = ДоговорПоУмолчанию;
//			НоваяСтрока.Курс = ?(
//				СтруктураКурсВалютыДоговораПоУмолчанию.Курс = 0,
//				1,
//				СтруктураКурсВалютыДоговораПоУмолчанию.Курс
//			);
//			НоваяСтрока.Кратность = ?(
//				СтруктураКурсВалютыДоговораПоУмолчанию.Кратность = 0,
//				1,
//				СтруктураКурсВалютыДоговораПоУмолчанию.Кратность
//			);
//			НоваяСтрока.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
//				СуммаОсталосьРаспределить,
//				Курс,
//				НоваяСтрока.Курс,
//				Кратность,
//				НоваяСтрока.Кратность
//			);
//			НоваяСтрока.ПризнакАванса = Истина;
//			НоваяСтрока.СуммаПлатежа = СуммаОсталосьРаспределить;
//			НоваяСтрока.СтавкаНДС = СтавкаНДСПоУмолчанию;
//			НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((СтавкаНДСПоУмолчанию.Ставка + 100) / 100);
//			СуммаОсталосьРаспределить = 0;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Если ТекущийОбъект.РасшифровкаПлатежа.Количество() = 0 Тогда
//		ТекущийОбъект.РасшифровкаПлатежа.Добавить();
//		ТекущийОбъект.РасшифровкаПлатежа[0].СуммаПлатежа = ТекущийОбъект.СуммаДокумента;
//	КонецЕсли;
//	
//	СуммаПлатежа = ТекущийОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
//	
//КонецПроцедуры // ЗаполнитьРасшифровкуПлатежаРасход()

//// Процедура заполняет расшифровку платежа для прихода.
////
//Процедура ЗаполнитьРасшифровкуПлатежаПриход(ТекущийОбъект, Компания = Неопределено, СтавкаНДСПоУмолчанию = Неопределено, Курс = Неопределено, Кратность = Неопределено, Договор = Неопределено) Экспорт
//	
//	Если Компания = Неопределено Тогда
//		Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(ТекущийОбъект.Организация);
//	КонецЕсли;
//	
//	Если Курс = Неопределено
//	   И Кратность = Неопределено Тогда
//		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущийОбъект.Дата, Новый Структура("Валюта", ТекущийОбъект.ВалютаДенежныхСредств));
//		Курс = ?(
//			СтруктураПоВалюте.Курс = 0,
//			1,
//			СтруктураПоВалюте.Курс
//		);
//		Кратность = ?(
//			СтруктураПоВалюте.Курс = 0,
//			1,
//			СтруктураПоВалюте.Кратность
//		);
//	КонецЕсли;
//	
//	Если СтавкаНДСПоУмолчанию = Неопределено Тогда
//		Если ТекущийОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
//			СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(ТекущийОбъект.Организация.ВидСтавкиНДСПоУмолчанию);
//		ИначеЕсли ТекущийОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
//			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
//		Иначе
//			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
//		КонецЕсли;
//	КонецЕсли;
//	
//	// Заполнение расшифровки расчетов по умолчанию.
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	
//	"ВЫБРАТЬ
//	|	РасчетыСПокупателямиОстатки.Организация КАК Организация,
//	|	РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
//	|	РасчетыСПокупателямиОстатки.Договор КАК Договор,
//	|	ВЫБОР
//	|		КОГДА РасчетыСПокупателямиОстатки.Контрагент.ВестиРасчетыПоДокументам
//	|			ТОГДА РасчетыСПокупателямиОстатки.Документ
//	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
//	|	КОНЕЦ КАК Документ,
//	|	ВЫБОР
//	|		КОГДА РасчетыСПокупателямиОстатки.Контрагент.ВестиРасчетыПоЗаказам
//	|			ТОГДА РасчетыСПокупателямиОстатки.Заказ
//	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
//	|	КОНЕЦ КАК Заказ,
//	|	РасчетыСПокупателямиОстатки.ТипРасчетов КАК ТипРасчетов,
//	|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаОстаток,
//	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток,
//	|	РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
//	|	СУММА(ВЫРАЗИТЬ(РасчетыСПокупателямиОстатки.СуммаВалОстаток * КурсыВалютРасчетов.Курс * КурсыВалютДокумента.Кратность / (КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность) КАК ЧИСЛО(15, 2))) КАК СуммаВалДокумента,
//	|	КурсыВалютДокумента.Курс КАК КурсДенежныхСредств,
//	|	КурсыВалютДокумента.Кратность КАК КратностьДенежныхСредств,
//	|	КурсыВалютРасчетов.Курс КАК Курс,
//	|	КурсыВалютРасчетов.Кратность КАК Кратность
//	|ИЗ
//	|	(ВЫБРАТЬ
//	|		РасчетыСПокупателямиОстатки.Организация КАК Организация,
//	|		РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
//	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
//	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
//	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
//	|		РасчетыСПокупателямиОстатки.ТипРасчетов КАК ТипРасчетов,
//	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
//	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
//	|	ИЗ
//	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
//	|				,
//	|				Организация = &Организация
//	|					И Контрагент = &Контрагент
//	|					// ТекстДоговорОтбор
//	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)) КАК РасчетыСПокупателямиОстатки
//	|	
//	|	ОБЪЕДИНИТЬ ВСЕ
//	|	
//	|	ВЫБРАТЬ
//	|		ДвиженияДокументаРасчетыСПокупателями.Организация,
//	|		ДвиженияДокументаРасчетыСПокупателями.Контрагент,
//	|		ДвиженияДокументаРасчетыСПокупателями.Договор,
//	|		ДвиженияДокументаРасчетыСПокупателями.Документ,
//	|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
//	|		ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов,
//	|		ВЫБОР
//	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
//	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
//	|		КОНЕЦ,
//	|		ВЫБОР
//	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
//	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
//	|		КОНЕЦ
//	|	ИЗ
//	|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
//	|	ГДЕ
//	|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
//	|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
//	|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
//	|		И ДвиженияДокументаРасчетыСПокупателями.Контрагент = &Контрагент
//	|		И ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)) КАК РасчетыСПокупателямиОстатки
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютДокумента
//	|		ПО (ИСТИНА)
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютРасчетов
//	|		ПО РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
//	|ГДЕ
//	|	РасчетыСПокупателямиОстатки.СуммаВалОстаток > 0
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	РасчетыСПокупателямиОстатки.Организация,
//	|	РасчетыСПокупателямиОстатки.Контрагент,
//	|	РасчетыСПокупателямиОстатки.Договор,
//	|	РасчетыСПокупателямиОстатки.Документ,
//	|	РасчетыСПокупателямиОстатки.Заказ,
//	|	РасчетыСПокупателямиОстатки.ТипРасчетов,
//	|	РасчетыСПокупателямиОстатки.Документ.Дата,
//	|	КурсыВалютДокумента.Курс,
//	|	КурсыВалютДокумента.Кратность,
//	|	КурсыВалютРасчетов.Курс,
//	|	КурсыВалютРасчетов.Кратность,
//	|	ВЫБОР
//	|		КОГДА РасчетыСПокупателямиОстатки.Контрагент.ВестиРасчетыПоДокументам
//	|			ТОГДА РасчетыСПокупателямиОстатки.Документ
//	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
//	|	КОНЕЦ,
//	|	ВЫБОР
//	|		КОГДА РасчетыСПокупателямиОстатки.Контрагент.ВестиРасчетыПоЗаказам
//	|			ТОГДА РасчетыСПокупателямиОстатки.Заказ
//	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.Заказпокупателя.ПустаяСсылка)
//	|	КОНЕЦ
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ДокументДата";
//		
//	Запрос.УстановитьПараметр("Организация", Компания);
//	Запрос.УстановитьПараметр("Контрагент", ТекущийОбъект.Контрагент);
//	Запрос.УстановитьПараметр("Период", ТекущийОбъект.Дата);
//	Запрос.УстановитьПараметр("Валюта", ТекущийОбъект.ВалютаДенежныхСредств);
//	Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
//	
//	Если ЗначениеЗаполнено(Договор)
//		И ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ТекстДоговорОтбор", "И Договор = &Договор");
//		Запрос.УстановитьПараметр("Договор", Договор);
//		ДоговорПоУмолчанию = Договор;
//	Иначе
//		НуженОтборПоДоговорам = УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов();
//		СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(ТекущийОбъект.Ссылка, ТекущийОбъект.ВидОперации);
//		Если НуженОтборПоДоговорам
//		   И ТекущийОбъект.Контрагент.ВестиРасчетыПоДоговорам Тогда
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ТекстДоговорОтбор", "И Договор.ВидДоговора В (&СписокВидовДоговоров)");
//			Запрос.УстановитьПараметр("СписокВидовДоговоров", СписокВидовДоговоров);
//		КонецЕсли;
//		ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(
//			ТекущийОбъект.Контрагент,
//			ТекущийОбъект.Организация,
//			СписокВидовДоговоров
//		); // если нет долга то аванс будет отнесен на этот договор
//	КонецЕсли;
//	
//	СтруктураКурсВалютыДоговораПоУмолчанию = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
//		ТекущийОбъект.Дата,
//		Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов)
//	);
//	
//	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
//	
//	ТекущийОбъект.РасшифровкаПлатежа.Очистить();
//	
//	СуммаОсталосьРаспределить = ТекущийОбъект.СуммаДокумента;
//	
//	Пока СуммаОсталосьРаспределить > 0 Цикл
//		
//		НоваяСтрока = ТекущийОбъект.РасшифровкаПлатежа.Добавить();
//		
//		Если ВыборкаРезультатаЗапроса.Следующий() Тогда
//			
//			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
//			
//			Если ?(ЗначениеЗаполнено(ВыборкаРезультатаЗапроса.СуммаВалДокумента), ВыборкаРезультатаЗапроса.СуммаВалДокумента, 0) <= СуммаОсталосьРаспределить Тогда // сумма остатка меньше или равна чем осталось распределить
//				
//				НоваяСтрока.СуммаРасчетов = ВыборкаРезультатаЗапроса.СуммаВалОстаток;
//				НоваяСтрока.СуммаПлатежа = ВыборкаРезультатаЗапроса.СуммаВалДокумента;
//				НоваяСтрока.СтавкаНДС = СтавкаНДСПоУмолчанию;
//				НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((СтавкаНДСПоУмолчанию.Ставка + 100) / 100);
//				СуммаОсталосьРаспределить = СуммаОсталосьРаспределить - ВыборкаРезультатаЗапроса.СуммаВалДокумента;
//				
//			Иначе // сумма остатка больше чем нужно распределить
//				
//				НоваяСтрока.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
//					СуммаОсталосьРаспределить,
//					ВыборкаРезультатаЗапроса.КурсДенежныхСредств,
//					ВыборкаРезультатаЗапроса.Курс,
//					ВыборкаРезультатаЗапроса.КратностьДенежныхСредств,
//					ВыборкаРезультатаЗапроса.Кратность
//				);
//				НоваяСтрока.СуммаПлатежа = СуммаОсталосьРаспределить;
//				НоваяСтрока.СтавкаНДС = СтавкаНДСПоУмолчанию;
//				НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((СтавкаНДСПоУмолчанию.Ставка + 100) / 100);
//				СуммаОсталосьРаспределить = 0;
//				
//			КонецЕсли;
//			
//		Иначе
//			
//			НоваяСтрока.Договор = ДоговорПоУмолчанию;
//			НоваяСтрока.Курс = ?(
//				СтруктураКурсВалютыДоговораПоУмолчанию.Курс = 0,
//				1,
//				СтруктураКурсВалютыДоговораПоУмолчанию.Курс
//			);
//			НоваяСтрока.Кратность = ?(
//				СтруктураКурсВалютыДоговораПоУмолчанию.Кратность = 0,
//				1,
//				СтруктураКурсВалютыДоговораПоУмолчанию.Кратность
//			);
//			НоваяСтрока.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
//				СуммаОсталосьРаспределить,
//				Курс,
//				НоваяСтрока.Курс,
//				Кратность,
//				НоваяСтрока.Кратность
//			);
//			НоваяСтрока.ПризнакАванса = Истина;
//			НоваяСтрока.СуммаПлатежа = СуммаОсталосьРаспределить;
//			НоваяСтрока.СтавкаНДС = СтавкаНДСПоУмолчанию;
//			НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((СтавкаНДСПоУмолчанию.Ставка + 100) / 100);
//			СуммаОсталосьРаспределить = 0;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Если ТекущийОбъект.РасшифровкаПлатежа.Количество() = 0 Тогда
//		ТекущийОбъект.РасшифровкаПлатежа.Добавить();
//		ТекущийОбъект.РасшифровкаПлатежа[0].СуммаПлатежа = ТекущийОбъект.СуммаДокумента;
//	КонецЕсли;
//	
//	СуммаПлатежа = ТекущийОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
//	
//КонецПроцедуры // ЗаполнитьРасшифровкуПлатежаПриход()

//// Загружает настройки формы.
////
//&НаСервере
//Функция ЗагрузитьНастройкиРасположенияФайлов(БанковскийСчет = Неопределено) Экспорт
//	
//	Настройки = ХранилищеСистемныхНастроек.Загрузить("Обработка.КлиентБанк.Форма.ОсновнаяФорма/" + ?(ЗначениеЗаполнено(БанковскийСчет), ПолучитьНавигационнуюСсылку(БанковскийСчет), "БанковскийСчетНеУказан") , "ВыгрузкаВСбербанк");
//	
//	Если Настройки <> Неопределено Тогда
//		
//		СтруктураВозврата = Новый Структура("ФайлВыгрузки, ФайлЗагрузки");
//		СтруктураВозврата.ФайлВыгрузки = Настройки.Получить("ФайлВыгрузки");
//		СтруктураВозврата.ФайлЗагрузки = Настройки.Получить("ФайлЗагрузки");
//		Возврат СтруктураВозврата
//		
//	Иначе
//		
//		Возврат Неопределено;
//		
//	КонецЕсли;
//	
//КонецФункции // ЗагрузитьНастройкиФормыОбменаСБанками()

//#КонецОбласти

//#Область ПроцедурыИФункцииПроизводственныхКалендарей

//// Функция возвращает элемент справочника Календари 
//// Если элемент не найден, возвращает Неопределено.
//// 
//Функция ПолучитьКалендарьПоПроизводственномуКалендарюРФ() Экспорт
//	
//	ПроизводственныйКалендарьРФ = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
//	Если ПроизводственныйКалендарьРФ = Неопределено Тогда
//		
//		ЗаписьЖурналаРегистрации(НСтр("ru = 'Неудалось заполнить данные граффиков работы для организации на основании производственного календаря РФ.'"), 
//			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//		
//		Возврат Неопределено;
//		
//	КонецЕсли;
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ
//	|	Календари.Ссылка КАК Калнедарь
//	|ИЗ
//	|	Справочник.Календари КАК Календари
//	|ГДЕ
//	|	Календари.ПроизводственныйКалендарь = &ПроизводственныйКалендарьРФ");
//	
//	Запрос.УстановитьПараметр("ПроизводственныйКалендарьРФ", ПроизводственныйКалендарьРФ);
//	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
//	
//	// Преднамерено отказываемся от рекурсии на случай отсутсвия графика работы
//	Возврат ?(ВыборкаРезультатаЗапроса.Следующий(),
//					ВыборкаРезультатаЗапроса.Калнедарь,
//					Неопределено);
//	
//КонецФункции // ПолучитьКалендарьПоПроизводственномуКалендарюРФ()

//// Старая. Сохранена для поддержки совместимости.
//// Функция читает данные календаря из регистра
////
//// Параметры
////	Календарь		- Ссылка на текущий элемент справочника
////	НомерГода		- Номер года, за который необходимо прочитать календарь
////
//// Возвращаемое значение
////	Массив		- массив, в котором хранятся даты, входящие в календарь
////
//Функция ПрочитатьДанныеГрафикаИзРегистра(Календарь, НомерГода) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Календарь",	Календарь);
//	Запрос.УстановитьПараметр("ТекущийГод",	НомерГода);
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	КалендарныеГрафики.ДатаГрафика КАК ДатаКалендаря
//	|ИЗ
//	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//	|ГДЕ
//	|	КалендарныеГрафики.Календарь = &Календарь
//	|	И КалендарныеГрафики.Год = &ТекущийГод
//	|	И КалендарныеГрафики.ДеньВключенВГрафик";
//	
//	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДатаКалендаря");
//	
//КонецФункции

//#КонецОбласти

//#Область ПроцедурыИФункцииПечатиКонтактнойИнформацииКонтрагентов

//// Функция возвращает результат запроса по видам контактной информации которые могут использоваться при печати
////
//Функция ПолучитьДоступныеДляПечатиВидыКИ() Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ВидыКонтактнойИнформации.Ссылка КАК ВидКИ,
//		|	ВидыКонтактнойИнформации.Наименование КАК Наименование,
//		|	1 КАК ИндексВладельцаКИ,
//		|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
//		|ИЗ
//		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
//		|ГДЕ
//		|	ВидыКонтактнойИнформации.Родитель = &КИСправочникКонтрагенты
//		|	И ВидыКонтактнойИнформации.ЭтоГруппа = ЛОЖЬ
//		|	И ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	ВидыКонтактнойИнформации.Ссылка,
//		|	ВидыКонтактнойИнформации.Наименование,
//		|	2,
//		|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания
//		|ИЗ
//		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
//		|ГДЕ
//		|	ВидыКонтактнойИнформации.Родитель = &КИСправочникКонтактныеЛица
//		|	И ВидыКонтактнойИнформации.ЭтоГруппа = ЛОЖЬ
//		|	И ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	ВидыКонтактнойИнформации.Ссылка,
//		|	ВидыКонтактнойИнформации.Наименование,
//		|	3,
//		|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания
//		|ИЗ
//		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
//		|ГДЕ
//		|	ВидыКонтактнойИнформации.Родитель = &КИСправочникФизическиеЛица
//		|	И ВидыКонтактнойИнформации.ЭтоГруппа = ЛОЖЬ
//		|	И ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
//		|	И ВидыКонтактнойИнформации.Тип = &ТипТелефон
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ИндексВладельцаКИ,
//		|	РеквизитДопУпорядочивания";
//	
//	Запрос.УстановитьПараметр("КИСправочникКонтрагенты", Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты);	
//	Запрос.УстановитьПараметр("КИСправочникКонтактныеЛица", Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛица);	
//	Запрос.УстановитьПараметр("КИСправочникФизическиеЛица", Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);	
//	Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
//	
//	УстановитьПривилегированныйРежим(Истина);
//	РезультатЗапроса = Запрос.Выполнить();
//	УстановитьПривилегированныйРежим(Ложь);
//	
//	Возврат РезультатЗапроса;
//	
//КонецФункции

//// Функция задает начальное значение использования вида контактной информации
////
//// Параметры:
////  ВидКИ	 - Справочник.ВидыКонтактнойИнформации	 - Проверяемый вид контактной информации
//// Возвращаемое значение:
////  Булево - Вид контакной информации печатается по умолчанию
//Функция УстановитьПечатьВидаКИПоУмолчанию(ВидКИ) Экспорт
//	
//	Если ВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента 
//		Или ВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента
//		Или ВидКИ = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента
//		Тогда
//			Возврат Ложь;
//	КонецЕсли;
//	
//	Возврат ВидКИ.Предопределенный;
//	
//КонецФункции

//#КонецОбласти

//#Область ПроцедурыИФункцииМониторовРуководителя

//// Функция создает компоновщик настроек отчета и переопределяет заданные параметры и отборы
////
//// Параметры:
////  СвойстваОтчета			 - Структура	 - ключи: "ИмяОтчета" - имя отчета как задано в конфигураторе, "КлючВарианта" (необязательный) - имя варианта отчета
////  ПараметрыИОтборы	 - Массив - массив структур для задания изменяемых параметров и отборов. Ключи структуры:
////									"ИмяПоля" (обязательный) - имя параметра или поле компоновки данных по которому задается отбор,
////									"ПравоеЗначение" (обязательный) - устанавливаемое значение параметра или отбора,
////									"ВидНастройки" (необязательный) - определяет контейнер для помещения параметра или отбора, варианты: "Настройки", "ФиксированныеНастройки",
////									прочие ключи структуры являются необязательными и задают свойства элемента отбора.
//// Возвращаемое значение:
////  КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек с измененными параметрами и отборами.
//Функция ПолучитьПереопределенныйКомпоновщикНастроек(СвойстваОтчета, ПараметрыИОтборы) Экспорт
//	Перем ИмяОтчета, КлючВарианта;
//	
//	СвойстваОтчета.Свойство("ИмяОтчета", ИмяОтчета);
//	СвойстваОтчета.Свойство("КлючВарианта", КлючВарианта);
//	
//	СхемаКомпоновкиДанных = Отчеты[ИмяОтчета].ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
//	
//	Если КлючВарианта <> Неопределено И НЕ ПустаяСтрока(КлючВарианта) Тогда
//		ИскомыйВариантОтчета = СхемаКомпоновкиДанных.ВариантыНастроек.Найти(КлючВарианта);
//		Если ИскомыйВариантОтчета <> Неопределено Тогда
//			Настройки = ИскомыйВариантОтчета.Настройки;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если Настройки = Неопределено Тогда
//		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
//	КонецЕсли;
//	
//	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
//	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
//	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(Настройки);
//	
//	Для Каждого ПараметрОтбор Из ПараметрыИОтборы Цикл
//		
//		Если ПараметрОтбор.Свойство("ВидНастройки") Тогда
//			Если ПараметрОтбор.ВидНастройки = "Настройки" Тогда
//				Контейнер = КомпоновщикНастроекКомпоновкиДанных.Настройки;
//			ИначеЕсли ПараметрОтбор.ВидНастройки = "ФиксированныеНастройки" Тогда
//				Контейнер = КомпоновщикНастроекКомпоновкиДанных.ФиксированныеНастройки;
//			КонецЕсли;
//		Иначе
//			Контейнер = КомпоновщикНастроекКомпоновкиДанных.Настройки;
//		КонецЕсли;
//		
//		НайденныйПараметр = Контейнер.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ПараметрОтбор.ИмяПоля));
//		Если НайденныйПараметр <> Неопределено Тогда
//			Контейнер.ПараметрыДанных.УстановитьЗначениеПараметра(НайденныйПараметр.Параметр, ПараметрОтбор.ПравоеЗначение);
//		КонецЕсли;
//		
//		НайденныеОтборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Контейнер.Отбор, ПараметрОтбор.ИмяПоля);
//		Для Каждого НайденныйОтбор Из НайденныеОтборы Цикл
//			
//			Если ТипЗнч(НайденныйОтбор) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			ЗаполнитьЗначенияСвойств(НайденныйОтбор, ПараметрОтбор);
//			
//			Если НЕ ПараметрОтбор.Свойство("ВидСравнения") Тогда
//				НайденныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
//			КонецЕсли;
//			Если НЕ ПараметрОтбор.Свойство("Использование") Тогда
//				НайденныйОтбор.Использование = Истина;
//			КонецЕсли;
//			Если НЕ ПараметрОтбор.Свойство("РежимОтображения") Тогда
//				НайденныйОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//		Если НайденныеОтборы.Количество() = 0 И НайденныйПараметр = Неопределено Тогда
//			ДобавленныйЭлемент = ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Контейнер.Отбор, ПараметрОтбор.ИмяПоля, ВидСравненияКомпоновкиДанных.Равно);
//			ЗаполнитьЗначенияСвойств(ДобавленныйЭлемент, ПараметрОтбор);
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Возврат КомпоновщикНастроекКомпоновкиДанных;
//	
//КонецФункции // ПолучитьПользовательскиеНастройки()

//// Функция возвращает используемые для мониторов цвета.
////
//// Параметры:
////  ИмяЦвета - Строка - Название цвета
//Функция ЦветДляМониторов(ИмяЦвета) Экспорт
//	
//	Цвет = Новый Цвет();
//	
//	Если ИмяЦвета = "Зеленый" Тогда
//		Цвет = Новый Цвет(25, 204, 25);
//	ИначеЕсли ИмяЦвета = "Темно-зеленый" Тогда
//		Цвет = Новый Цвет(29, 150, 66);
//	ИначеЕсли ИмяЦвета = "Желтый" Тогда
//		Цвет = Новый Цвет(254, 225, 1);
//	ИначеЕсли ИмяЦвета = "Оранжевый" Тогда
//		Цвет = WebЦвета.Оранжевый;
//	ИначеЕсли ИмяЦвета = "Коралловый" Тогда
//		Цвет = WebЦвета.Коралловый;
//	ИначеЕсли ИмяЦвета = "Красный" Тогда
//		Цвет = Новый Цвет(208, 42, 53);
//	ИначеЕсли ИмяЦвета = "Пурпурный" Тогда
//		Цвет = WebЦвета.Пурпурный;
//	ИначеЕсли ИмяЦвета = "Синий" Тогда
//		Цвет = WebЦвета.НасыщенноНебесноГолубой;
//	ИначеЕсли ИмяЦвета = "Светло-серый" Тогда
//		Цвет = WebЦвета.СеребристоСерый;
//	ИначеЕсли ИмяЦвета = "Серый" Тогда
//		Цвет = WebЦвета.Серый;
//	КонецЕсли;
//	
//	Возврат Цвет;
//	
//КонецФункции

//// Функция возвращает результирующую форматированную строку.
////
//// Параметры:
////  ЭлементыСтроки - Массив структур с ключом "Строка" и значением выводимой строки,
////    остальные ключи соответствуют параметрам конструктора форматированной строки
////
//Функция СкомпоноватьФорматированнуюСтроку(ЭлементыСтроки) Экспорт
//	
//	Строка = "";
//	Шрифт = Неопределено;
//	ЦветТекста = Неопределено;
//	ЦветФона = Неопределено;
//	МассивФорматированныхСтрок = Новый Массив;
//	
//	Для Каждого Элемент Из ЭлементыСтроки Цикл
//		Элемент.Свойство("Строка", Строка);
//		Элемент.Свойство("Шрифт", Шрифт);
//		Элемент.Свойство("ЦветТекста", ЦветТекста);
//		Элемент.Свойство("ЦветФона", ЦветФона);
//		МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(Строка, Шрифт, ЦветТекста, ЦветФона)); 
//	КонецЦикла;
//	
//	Возврат Новый ФорматированнаяСтрока(МассивФорматированныхСтрок);
//	
//КонецФункции

//// Функция формирует заголовок в виде форматированной строки для элементов в шапке виджетов.
////
//// Параметры:
////  ИсходнаяСумма - Число - значение из которого формируется заголовок
//// Возвращаемое значение:
////  ФорматированнаяСтрока - Строка заголовка
//Функция СформироватьЗаголовок(знач ИсходнаяСумма) Экспорт
//	
//	ФорматированнаяСумма = Формат(ИсходнаяСумма, "ЧДЦ=2; ЧРГ=' '; ЧН=—; ЧГ=3,0");
//	Разделитель = СтрНайти(ФорматированнаяСумма, ",");
//	СтрокаРазрядТысячи = Лев(ФорматированнаяСумма, Разделитель-4);
//	СтрокаРазрядЕдиницы = Сред(ФорматированнаяСумма, Разделитель-3);
//	
//	ЭлементыСтроки = Новый Массив;
//	ЭлементыСтроки.Добавить(Новый Структура("Строка, Шрифт", СтрокаРазрядТысячи, Новый Шрифт(ШрифтыСтиля.ОченьКрупныйШрифтТекста)));
//	ЭлементыСтроки.Добавить(Новый Структура("Строка, Шрифт", СтрокаРазрядЕдиницы, Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста)));
//	
//	Возврат СкомпоноватьФорматированнуюСтроку(ЭлементыСтроки);
//	
//КонецФункции

//#КонецОбласти

//#Область ПроцедурыФункцииУправленияРабочимСтолом

//// Определяет состав форм рабочего стола в зависимости от прав доступа пользователя.
////
//Процедура УстановитьРабочийСтолПользователя(СоставФормИзменен = Ложь) Экспорт
//	
//	Если ОбщегоНазначения.РазделениеВключено()
//		И Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	НастройкиНачальнойСтраницы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить("Общее/НастройкиНачальнойСтраницы", "");
//	
//	Если НастройкиНачальнойСтраницы = Неопределено Тогда
//		
//		УстановитьСоставФорм(СоставФормИзменен);
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//// Определяет состав форм рабочего стола в зависимости от прав доступа пользователя.
////
//Процедура УстановитьСоставФорм(СоставФормИзменен = Ложь, ИмяПользователя = "") Экспорт
//	
//	НастройкиНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
//	СоставФорм = НастройкиНачальнойСтраницы.ПолучитьСоставФорм();
//	СоставФорм.ЛеваяКолонка.Очистить();
//	
//	// МобильноеПриложение
//	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
//		СоставФорм.ЛеваяКолонка.Добавить("ОбщаяФорма.ВиджетНаНачальнойСтранице");
//	ИначеЕсли МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность20() Тогда
//		СоставФорм.ЛеваяКолонка.Добавить("ПланОбмена.СинхронизацияМП.Форма.ФормаПодключения");
//	// Конец МобильноеПриложение
//	ИначеЕсли РольДоступна("ПолныеПрава") Тогда
//		СоставФорм.ЛеваяКолонка.Добавить("Обработка.БыстрыеДействия.Форма.БыстрыеДействия");
//		СоставФорм.ЛеваяКолонка.Добавить("Обработка.ПульсБизнеса.Форма.ПульсБизнеса");
//	ИначеЕсли РольДоступна("ДобавлениеИзменениеПодсистемыПродажи") Тогда
//		СоставФорм.ЛеваяКолонка.Добавить("ЖурналДокументов.ДокументыПоПродажам.ФормаСписка");
//	ИначеЕсли РольДоступна("ДобавлениеИзменениеПодсистемыЗакупки") Тогда
//		СоставФорм.ЛеваяКолонка.Добавить("ЖурналДокументов.ДокументыПоЗакупкам.ФормаСписка");
//	ИначеЕсли РольДоступна("ДобавлениеИзменениеПодсистемыПроизводство") Тогда
//		СоставФорм.ЛеваяКолонка.Добавить("ЖурналДокументов.ДокументыПоПроизводству.ФормаСписка");
//	ИначеЕсли РольДоступна("ДобавлениеИзменениеПодсистемыЗарплата") Тогда
//		СоставФорм.ЛеваяКолонка.Добавить("ЖурналДокументов.ДокументыПоЗарплате.ФормаСписка");
//	ИначеЕсли РольДоступна("ДобавлениеИзменениеПодсистемыБанк") Тогда
//		СоставФорм.ЛеваяКолонка.Добавить("ЖурналДокументов.ДокументыПоБанку.ФормаСписка");
//	ИначеЕсли РольДоступна("ДобавлениеИзменениеПодсистемыНалоги") Тогда
//		СоставФорм.ЛеваяКолонка.Добавить("Справочник.ЗаписиКалендаряПодготовкиОтчетности.Форма.КалендарьНалоговИОтчетности");
//	КонецЕсли;
//	
//	НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
//	Если ЗначениеЗаполнено(ИмяПользователя) Тогда
//		ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить("Общее/НастройкиНачальнойСтраницы", "", НастройкиНачальнойСтраницы,, ИмяПользователя);
//	Иначе
//		ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить("Общее/НастройкиНачальнойСтраницы", "", НастройкиНачальнойСтраницы);
//	КонецЕсли;
//	
//	СоставФормИзменен = Истина;

//КонецПроцедуры

//#КонецОбласти

//#Область РаботаСОбъектомСхемаЗапроса

//// Функция - Найти поле доступной таблицы схемы запроса
////
//// Параметры:
////  ДоступнаяТаблица - ДоступнаяТаблицаСхемыЗапроса	 - таблица в которой выполняется поиск
////  ИмяПоля			 - Строка - имя искомого поля
////  ТипПоля			 - Тип - возможные значения "ДоступноеПолеСхемыЗапроса", "ДоступнаяВложеннаяТаблицаСхемыЗапроса".
////  					Если параметр задан, то поиск выполняется только по полям указанного типа
//// Возвращаемое значение:
////  ДоступноеПолеСхемыЗапроса,ДоступнаяВложеннаяТаблицаСхемыЗапроса - найденное поле
//Функция НайтиПолеДоступнойТаблицыСхемыЗапроса(ДоступнаяТаблица, ИмяПоля, ТипПоля = Неопределено) Экспорт
//	
//	Результат = Неопределено;
//	
//	Для Каждого Поле Из ДоступнаяТаблица.Поля Цикл
//		Если Поле.Имя = ИмяПоля И (ТипПоля = Неопределено Или (ТипЗнч(Поле) = ТипПоля)) Тогда
//			Результат = Поле;
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат Результат;
//	
//КонецФункции

//// Функция - Найти источник схемы запроса
////
//// Параметры:
////  Источники		 - ИсточникиСхемыЗапроса 	 - источники в которых выполняется поиск
////  ПсевдонимТаблицы - Строка	 - псевдоним искомой таблицы
////  ТипТаблицы		 - Тип - возможные значения "ТаблицаСхемыЗапроса", "ВложенныйЗапросСхемыЗапроса", "ОписаниеВременнойТаблицыСхемыЗапроса".
////  					Если параметр задан, то поиск выполняется только по источникам указанного типа
//// Возвращаемое значение:
////  ИсточникСхемыЗапроса - найденный источник
//Функция НайтиИсточникСхемыЗапроса(Источники, ПсевдонимТаблицы, ТипТаблицы = Неопределено) Экспорт
//	
//	Результат = Неопределено;
//	
//	Для Каждого Источник Из Источники Цикл
//		Если Источник.Источник.Псевдоним = ПсевдонимТаблицы И (ТипТаблицы = Неопределено Или (ТипЗнч(Источник.Источник) = ТипТаблицы)) Тогда
//			Результат = Источник;
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат Результат;
//	
//КонецФункции

//#КонецОбласти

//#Область РаботаСФоновымиЗаданиями

//// Запускает выполнение процедуры в фоновом задании.
//// По аналогии с ДлительныеОперации.ЗапуститьВыполнениеВФоне() БСП 2.2.5. Добавлен параметр "ОжидатьЗавершения".
//// 
//// Параметры:
////  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
////                           из которой выполняется запуск длительной операции. 
////  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
////                           которую необходимо выполнить в фоне.
////  Параметры              - Структура - все необходимые параметры для 
////                           выполнения процедуры ИмяЭкспортнойПроцедуры.
////  НаименованиеЗадания    - Строка - наименование фонового задания. 
////                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
////  ИспользоватьДополнительноеВременноеХранилище - Булево - признак использования
////                           дополнительного временного хранилища для передачи данных
////                           в родительский сеанс из фонового задания. По умолчанию - Ложь.
////  ОжидатьЗавершения       - Булево - признак ожидания завершения задания за время вызова 
////                           (2 сек. для обычной скорости клиентского соединения, 4 сек. для низкой)
////
//// Возвращаемое значение:
////  Структура              - параметры выполнения задания: 
////   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
////                                    помещен результат работы задания;
////   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
////                                    в которое будет помещен результат работы задания (доступно только если 
////                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
////   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
////   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
//// 
//Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, 
//	Знач Параметры, Знач НаименованиеЗадания = "", ИспользоватьДополнительноеВременноеХранилище = Ложь, ОжидатьЗавершения = Истина) Экспорт
//	
//	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
//	
//	Результат = Новый Структура;
//	Результат.Вставить("АдресХранилища",       АдресХранилища);
//	Результат.Вставить("ЗаданиеВыполнено",     Ложь);
//	Результат.Вставить("ИдентификаторЗадания", Неопределено);
//	
//	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
//		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
//	КонецЕсли;
//	
//	ПараметрыЭкспортнойПроцедуры = Новый Массив;
//	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
//	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
//	
//	Если ИспользоватьДополнительноеВременноеХранилище Тогда
//		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
//		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
//	КонецЕсли;
//	
//	Если ОбщегоНазначения.РежимОтладки() Тогда
//		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
//		Результат.ЗаданиеВыполнено = Истина;
//	Иначе
//		ПараметрыЗадания = Новый Массив;
//		ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
//		ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
//		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
//		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
//		Задание = ДлительныеОперации.ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяЭкспортнойПроцедуры,
//			ПараметрыВыполнения, ПараметрыЭкспортнойПроцедуры);
//		
//		Если ОжидатьЗавершения Тогда
//			ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
//			Попытка
//				Задание.ОжидатьЗавершения(ВремяОжидания);
//			Исключение
//				// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
//			КонецПопытки;
//		КонецЕсли;
//		
//		Результат.ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор);
//		Результат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
//	КонецЕсли;
//	
//	Если ИспользоватьДополнительноеВременноеХранилище Тогда
//		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

//#КонецОбласти

//#Область Эквайринг

//// Процедура выполняет движения регистра накопления ДоходыИРасходыКассовыйМетод.
////
//// Параметры:
////	ДокументОбъект - Текущий документ
////	Отказ - Булево - Признак отказа от проведения документа
////
//Процедура ОтразитьДоходыИРасходыКассовыйМетодЭквайринг(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаДоходыИРасходыКассовыйМетодЭквайринг = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходыКассовыйМетодЭквайринг;
//	
//	Если Отказ
//	 ИЛИ ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДоходыИРасходыКассовыйМетодЭквайринг = Движения.ДоходыИРасходыКассовыйМетодЭквайринг;
//	ДоходыИРасходыКассовыйМетодЭквайринг.Записывать = Истина;
//	ДоходыИРасходыКассовыйМетодЭквайринг.Загрузить(ТаблицаДоходыИРасходыКассовыйМетодЭквайринг);
//	
//КонецПроцедуры // ОтразитьДоходыИРасходыКассовыйМетод()

//// Выполняет движения регистра накопления КонтрольОперацийЭквайринга.
////
//Процедура ОтразитьКонтрольОперацийЭквайринга(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаКонтрольОперацийЭквайринга = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаКонтрольОперацийЭквайринга;
//	
//	Если Отказ
//	 ИЛИ ТаблицаКонтрольОперацийЭквайринга.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияКонтрольОперацийЭквайринга = Движения.КонтрольОперацийЭквайринга;
//	ДвиженияКонтрольОперацийЭквайринга.Записывать = Истина;
//	ДвиженияКонтрольОперацийЭквайринга.Загрузить(ТаблицаКонтрольОперацийЭквайринга);
//	
//КонецПроцедуры

//// Выполняет движения регистра накопления ОплатаПлатежнымиКартами.
////
//Процедура ОтразитьОплатаПлатежнымиКартами(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаОплатаПлатежнымиКартами = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОплатаПлатежнымиКартами;
//	
//	Если Отказ
//	 ИЛИ ТаблицаОплатаПлатежнымиКартами.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияОплатаПлатежнымиКартами = Движения.ОплатаПлатежнымиКартами;
//	ДвиженияОплатаПлатежнымиКартами.Записывать = Истина;
//	ДвиженияОплатаПлатежнымиКартами.Загрузить(ТаблицаОплатаПлатежнымиКартами);
//	
//КонецПроцедуры

//// Выполняет движения регистра накопления РасчетыПоЭквайрингу.
////
//Процедура ОтразитьРасчетыПоЭквайрингу(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаРасчетыПоЭквайрингу = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыПоЭквайрингу;
//	
//	Если Отказ
//	 ИЛИ ТаблицаРасчетыПоЭквайрингу.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияРасчетыПоЭквайрингу = Движения.РасчетыПоЭквайрингу;
//	ДвиженияРасчетыПоЭквайрингу.Записывать = Истина;
//	ДвиженияРасчетыПоЭквайрингу.Загрузить(ТаблицаРасчетыПоЭквайрингу);
//	
//КонецПроцедуры

//// Выполняет движения регистра накопления ОперацииЭквайрингаОжидающиеОплаты.
////
//Процедура ОтразитьОперацииЭквайрингаОжидающиеОплаты(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаОперацииЭквайрингаОжидающиеОплаты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОперацииЭквайрингаОжидающиеОплаты;
//	
//	Если Отказ
//	 ИЛИ ТаблицаОперацииЭквайрингаОжидающиеОплаты.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияОперацииЭквайрингаОжидающиеОплаты = Движения.ОперацииЭквайрингаОжидающиеОплаты;
//	ДвиженияОперацииЭквайрингаОжидающиеОплаты.Записывать = Истина;
//	ДвиженияОперацииЭквайрингаОжидающиеОплаты.Загрузить(ТаблицаОперацииЭквайрингаОжидающиеОплаты);
//	
//КонецПроцедуры

//// Процедура сообщает об ошибках проведения по регистру Расчеты по эквайрингу.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструРасчетыПоЭквайрингу(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ПараметрыЭквайринга = ЭквайринговыеОперацииСервер.ПолучитьПараметрыЭквайрингаДляДокумента(ДокОбъект);
//	
//	Если ПараметрыЭквайринга.КонтрольВзаиморасчетовЭквайринг Тогда
//		ПоказатьСообщениеОбОшибки = Истина;
//		ПоказатьИнформационноеСообщение = Истина;
//	Иначе
//		ЗаголовокОшибки = НСтр("ru = 'Информация:'");
//		Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ОперацияПоПлатежнымКартам") Тогда
//			ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Обнаружен отрицательный остаток в расчетах по платежным картам'");
//		Иначе
//			ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Есть остаток в расчетах по платежным картам'");
//		КОнецЕсли;
//		СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , );
//		
//		ПоказатьСообщениеОбОшибки = Ложь;
//		ПоказатьИнформационноеСообщение = Ложь;
//	КонецЕсли;
//		
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		Если ВыборкаЗаписей.СуммаВалОстаток < 0 Или ВыборкаЗаписей.КомиссияВалОстаток < 0 Тогда
//			Если ПоказатьСообщениеОбОшибки Тогда
//				ПоказатьСообщениеОбОшибки = Ложь;
//				
//				ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//				ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Нет возможности зафиксировать расчеты по платежным картам'");
//				СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//			КонецЕсли;
//			
//			ТекстСообщения = НСтр(
//				"ru = '%ПредставлениеОперацииОплаты%
//				|Разнесенная сумма платежа: %СуммаВалПриЗаписи% %ВалютаПредставление% (комиссия %КомиссияВалПриЗаписи%).
//				|Остаток суммы операции оплаты: %СуммаОстаткаЗадолженности% %ВалютаПредставление% (комиссия %СуммаОстаткаКомиссии%).'"
//			);
//			
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаВалПриЗаписи%", Строка(ВыборкаЗаписей.СуммаВалПриЗаписи));
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаОстаткаЗадолженности%", Строка(ВыборкаЗаписей.СуммаОстаткаЗадолженности));
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КомиссияВалПриЗаписи%", Строка(ВыборкаЗаписей.КомиссияВалПриЗаписи));
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаОстаткаКомиссии%", Строка(ВыборкаЗаписей.СуммаОстаткаКомиссии));
//			
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВалютаПредставление%", СокрЛП(ВыборкаЗаписей.ВалютаПредставление));
//			
//			Если ПараметрыЭквайринга.КонтрольВзаиморасчетовЭквайринг Тогда
//				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеОперацииОплаты%", ""+ВыборкаЗаписей.ДокументПредставление+". "+
//									ВыборкаЗаписей.ВидПлатежнойКартыПредставление+" "+ВыборкаЗаписей.НомерПлатежнойКартыПредставление+
//									" - остаток суммы по операции оплаты меньше разнесенной суммы платежа.");
//									
//				СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//			Иначе
//				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеОперацииОплаты%", "Остаток суммы по операции оплаты меньше разнесенной суммы платежа.");
//				СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , );
//			КонецЕсли;
//			
//		ИначеЕсли ВыборкаЗаписей.СуммаВалОстаток > 0 Или ВыборкаЗаписей.КомиссияВалОстаток > 0 Тогда
//			Если ПоказатьИнформационноеСообщение Тогда
//				ПоказатьИнформационноеСообщение = Ложь;
//				
//				ЗаголовокОшибки = НСтр("ru = 'Информация:'");
//				Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ОперацияПоПлатежнымКартам") Тогда
//					ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Обнаружен отрицательный остаток в расчетах по платежным картам'");
//				Иначе
//					ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Есть остаток в расчетах по платежным картам'");
//				КОнецЕсли;
//				СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , );
//			КонецЕсли;
//			
//			ТекстСообщения = НСтр(
//				"ru = '%ПредставлениеОперацииОплаты%
//				|После проведения остаток долга банка составил: %СуммаВалОстаток% %ВалютаПредставление%.
//				|Остаток суммы операции оплаты: %КомиссияВалОстаток% %ВалютаПредставление%.'"
//			);
//			
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаВалОстаток%", Строка(ВыборкаЗаписей.СуммаВалОстаток));
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КомиссияВалОстаток%", Строка(ВыборкаЗаписей.КомиссияВалОстаток));
//			
//			Если ПараметрыЭквайринга.КонтрольВзаиморасчетовЭквайринг Тогда
//				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеОперацииОплаты%", "Информация. "+ВыборкаЗаписей.ДокументПредставление+". "+
//									ВыборкаЗаписей.ВидПлатежнойКартыПредставление+" "+ВыборкаЗаписей.НомерПлатежнойКартыПредставление+
//									" - остаток взаиморасчетов после проведения отличен от 0.");
//			Иначе
//				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеОперацииОплаты%", "Информация. Остаток взаиморасчетов после проведения отличен от 0.");
//			КонецЕсли;
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВалютаПредставление%", СокрЛП(ВыборкаЗаписей.ВалютаПредставление));
//			
//			СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , );
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПокупателями()

//// Процедура сообщает об ошибках проведения по регистру Контроль операций эквайринга.
////
//Процедура СообщитьОбОшибкахПроведенияПоРегиструКонтрольОперацийЭквайринга(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
//	
//	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
//	ТекстЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Нет возможности зафиксировать расчеты по платежным картам'");
//	СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
//		
//	Пока ВыборкаЗаписей.Следующий() Цикл
//		
//		ТекстСообщения = НСтр(
//			"ru = '%ВидПлатежнойКартыПредставление% %НомерПлатежнойКартыПредставление% (%ДатаПлатежаПредставление%) - остаток суммы по карте меньше разнесенной суммы платежа.
//			|Разнесенная сумма платежа: %СуммаВалПриЗаписи% %ВалютаПредставление%.
//			|Остаток суммы по карте: %СуммаОстаткаЗадолженности% %ВалютаПредставление%.'"
//		);
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаВалПриЗаписи%", Строка(-ВыборкаЗаписей.СуммаВалПриЗаписи));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаОстаткаЗадолженности%", Строка(ВыборкаЗаписей.СуммаОстаткаЗадолженности));
//		
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидПлатежнойКартыПредставление%", СокрЛП(ВыборкаЗаписей.ВидПлатежнойКартыПредставление));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерПлатежнойКартыПредставление%", СокрЛП(ВыборкаЗаписей.НомерПлатежнойКартыПредставление));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаПлатежаПредставление%", СокрЛП(ВыборкаЗаписей.ДатаПлатежаПредставление));
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВалютаПредставление%", СокрЛП(ВыборкаЗаписей.ВалютаПредставление));
//		
//		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
//		
//	КонецЦикла;
//	
//КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПокупателями()

//#КонецОбласти

//#Область ЧекККМ

//Функция ПодготовкаДанныхДляПробитияЧекаККМ(ДокументОбъект, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС) Экспорт
//	
//	ТаблицаТовары = ДокументОбъект.Запасы.Выгрузить();
//	НаборыСервер.ПодготовитьНаборыДляПробитияЧекаККМ(ТаблицаТовары, ДокументОбъект);
//	
//	ТаблицаАкцизы = ДокументОбъект.АкцизныеМарки.Выгрузить();
//	
//	ЕстьАлкогольнаяПродукцияЕГАИС = ИнтеграцияЕГАИСУНФ.ЕстьАлкогольнаяПродукцияЕГАИС(ДокументОбъект.Запасы);
//	
//	Если ЕстьАлкогольнаяПродукцияЕГАИС Тогда
//		ПродажаСПроверкойЕГАИС = ИнтеграцияЕГАИСУНФВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(ДокументОбъект.Дата);
//	Иначе
//		ПродажаСПроверкойЕГАИС = Ложь;
//	КонецЕсли;
//	
//	Если ТаблицаТовары.Колонки.Найти("ПроцентАвтоматическойСкидки") = Неопределено Тогда
//		ТаблицаТовары.Колонки.Добавить("ПроцентАвтоматическойСкидки", Новый ОписаниеТипов("Число"));
//		ТаблицаТовары.Колонки.Добавить("СуммаАвтоматическойСкидки", Новый ОписаниеТипов("Число"));
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ТаблицаДокумента.НомерСтроки,
//	|	ТаблицаДокумента.Номенклатура,
//	|	ТаблицаДокумента.Характеристика,
//	|	ТаблицаДокумента.Партия,
//	|	ТаблицаДокумента.Количество,
//	|	ТаблицаДокумента.ЕдиницаИзмерения,
//	|	ТаблицаДокумента.Цена,
//	|	ТаблицаДокумента.ПроцентСкидкиНаценки,
//	|	ТаблицаДокумента.Сумма,
//	|	ТаблицаДокумента.СтавкаНДС,
//	|	ТаблицаДокумента.СуммаНДС,
//	|	ТаблицаДокумента.Всего,
//	|	ТаблицаДокумента.ПроцентАвтоматическойСкидки,
//	|	ТаблицаДокумента.СуммаАвтоматическойСкидки,
//	|	ТаблицаДокумента.КлючСвязи,
//	|	ТаблицаДокумента.НеобходимостьВводаАкцизнойМарки,
//	|	ТаблицаДокумента.КодМаркировки
//	|ПОМЕСТИТЬ ТаблицаДокумента
//	|ИЗ
//	|	&ТаблицаТовары КАК ТаблицаДокумента
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТаблицаТовары.НомерСтроки,
//	|	ТаблицаТовары.Номенклатура,
//	|	ТаблицаТовары.Характеристика,
//	|	ТаблицаТовары.Партия,
//	|	ТаблицаТовары.Количество,
//	|	ТаблицаТовары.Цена,
//	|	ТаблицаТовары.Сумма,
//	|	ТаблицаТовары.СтавкаНДС,
//	|	ТаблицаТовары.СуммаНДС,
//	|	ТаблицаТовары.Всего,
//	|	ТаблицаТовары.ПроцентАвтоматическойСкидки,
//	|	ТаблицаТовары.ЕдиницаИзмерения,
//	|	ТаблицаТовары.КлючСвязи,
//	|	ТаблицаТовары.СуммаАвтоматическойСкидки,
//	|	ТаблицаТовары.Номенклатура.ОбъемДАЛ КАК ОбъемДАЛ,
//	|	ТаблицаТовары.Номенклатура.ВидАлкогольнойПродукции.Маркируемый КАК Маркируемый,
//	|	ТаблицаТовары.Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
//	|	ТаблицаТовары.Номенклатура.Крепость КАК Крепость,
//	|	ТаблицаТовары.Номенклатура.ВидАлкогольнойПродукции.Код КАК КодВидаПродукции,
//	|	ТаблицаТовары.Всего,
//	|	ТаблицаТовары.НеобходимостьВводаАкцизнойМарки,
//	|	ТаблицаТовары.КодМаркировки
//	|ПОМЕСТИТЬ ТаблицаТовары
//	|ИЗ
//	|	ТаблицаДокумента КАК ТаблицаТовары
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ЧекККМАкцизныеМарки.НомерСтроки,
//	|	ЧекККМАкцизныеМарки.КлючСвязи,
//	|	ЧекККМАкцизныеМарки.КодАкцизнойМарки
//	|ПОМЕСТИТЬ ТаблицаАкцизныхМарок
//	|ИЗ
//	|	&ТаблицаАкцизы КАК ЧекККМАкцизныеМарки
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод,
//	|	ТаблицаТовары.Номенклатура,
//	|	ТаблицаТовары.Характеристика,
//	|	ТаблицаТовары.Партия,
//	|	ТаблицаТовары.ЕдиницаИзмерения
//	|ПОМЕСТИТЬ ТаблицаШтрихкоды
//	|ИЗ
//	|	ТаблицаТовары КАК ТаблицаТовары
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
//	|		ПО ТаблицаТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
//	|			И ТаблицаТовары.Характеристика = ШтрихкодыНоменклатуры.Характеристика
//	|			И ТаблицаТовары.Партия = ШтрихкодыНоменклатуры.Партия
//	|			И (ТИПЗНАЧЕНИЯ(ТаблицаТовары.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
//	|				ИЛИ ТаблицаТовары.ЕдиницаИзмерения = ШтрихкодыНоменклатуры.Номенклатура)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ТаблицаТовары.Номенклатура,
//	|	ТаблицаТовары.Характеристика,
//	|	ТаблицаТовары.Партия,
//	|	ТаблицаТовары.ЕдиницаИзмерения
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТаблицаТовары.НомерСтроки,
//	|	ТаблицаТовары.Номенклатура,
//	|	ТаблицаТовары.Характеристика,
//	|	ТаблицаТовары.Партия,
//	|	ТаблицаТовары.Количество,
//	|	ТаблицаТовары.Цена,
//	|	ТаблицаТовары.Сумма,
//	|	ТаблицаТовары.СтавкаНДС,
//	|	ТаблицаТовары.СуммаНДС,
//	|	ТаблицаТовары.Всего,
//	|	ТаблицаТовары.ПроцентАвтоматическойСкидки,
//	|	ТаблицаТовары.ЕдиницаИзмерения,
//	|	ТаблицаТовары.КлючСвязи,
//	|	ТаблицаТовары.СуммаАвтоматическойСкидки,
//	|	ТаблицаТовары.КодМаркировки,
//	|	ВЫБОР
//	|		КОГДА &ПродажаСПроверкойЕГАИС
//	|			ТОГДА ВЫБОР
//	|					КОГДА ТаблицаТовары.Маркируемый
//	|							И НЕ ТаблицаАкцизныхМарок.КодАкцизнойМарки ЕСТЬ NULL 
//	|						ТОГДА ТаблицаАкцизныхМарок.КодАкцизнойМарки
//	|					ИНАЧЕ """"
//	|				КОНЕЦ
//	|		ИНАЧЕ ЛОЖЬ
//	|	КОНЕЦ КАК КодАкцизнойМарки,
//	|	ВЫБОР
//	|		КОГДА &ПродажаСПроверкойЕГАИС
//	|			ТОГДА ТаблицаТовары.Маркируемый
//	|		ИНАЧЕ ЛОЖЬ
//	|	КОНЕЦ КАК Маркируемый,
//	|	ВЫБОР
//	|		КОГДА &ПродажаСПроверкойЕГАИС
//	|				И ТаблицаТовары.АлкогольнаяПродукция
//	|			ТОГДА ТаблицаТовары.ОбъемДАЛ
//	|		ИНАЧЕ 0
//	|	КОНЕЦ КАК ОбъемДАЛ,
//	|	ВЫБОР
//	|		КОГДА &ПродажаСПроверкойЕГАИС
//	|				И ТаблицаТовары.АлкогольнаяПродукция
//	|			ТОГДА ТаблицаТовары.Крепость
//	|		ИНАЧЕ 0
//	|	КОНЕЦ КАК Крепость,
//	|	ВЫБОР
//	|		КОГДА &ПродажаСПроверкойЕГАИС
//	|			ТОГДА ТаблицаТовары.АлкогольнаяПродукция
//	|		ИНАЧЕ ЛОЖЬ
//	|	КОНЕЦ КАК АлкогольнаяПродукция,
//	|	ВЫБОР
//	|		КОГДА &ПродажаСПроверкойЕГАИС
//	|				И ТаблицаТовары.АлкогольнаяПродукция
//	|			ТОГДА ТаблицаТовары.КодВидаПродукции
//	|		ИНАЧЕ 0
//	|	КОНЕЦ КАК КодВидаПродукции,
//	|	ТаблицаШтрихкоды.Штрихкод
//	|ИЗ
//	|	ТаблицаТовары КАК ТаблицаТовары
//	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАкцизныхМарок КАК ТаблицаАкцизныхМарок
//	|		ПО ТаблицаТовары.КлючСвязи = ТаблицаАкцизныхМарок.КлючСвязи
//	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаШтрихкоды КАК ТаблицаШтрихкоды
//	|		ПО ТаблицаТовары.Номенклатура = ТаблицаШтрихкоды.Номенклатура
//	|			И ТаблицаТовары.Характеристика = ТаблицаШтрихкоды.Характеристика
//	|			И ТаблицаТовары.Партия = ТаблицаШтрихкоды.Партия";
//	
//	Запрос.УстановитьПараметр("ПродажаСПроверкойЕГАИС", ПродажаСПроверкойЕГАИС);
//	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
//	Запрос.УстановитьПараметр("ТаблицаАкцизы", ТаблицаАкцизы);
//	
//	Результат = Запрос.Выполнить();
//	
//	ТаблицаТоваровЧека = Результат.Выгрузить();
//		
//	Если ПродажаСПроверкойЕГАИС Тогда
//		ИнтеграцияЕГАИСУНФ.ПроверитьДанныеЕГАИС(ТаблицаТоваровЧека, ДанныеЕГАИСДостаточны, ДокументОбъект);
//	Иначе
//		ДанныеЕГАИСДостаточны = Истина;
//	КонецЕсли;
//		
//	Возврат ТаблицаТоваровЧека;
//	
//КонецФункции

//Функция СерийныйНомерККМ(КассаККМ) Экспорт
//	
//	СерийныйНомер = "";
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	ВЫБОР
//	|		КОГДА КассыККМ.СерийныйНомер <> """"
//	|			ТОГДА КассыККМ.СерийныйНомер
//	|		ИНАЧЕ КассыККМ.ПодключаемоеОборудование.СерийныйНомер
//	|	КОНЕЦ КАК СерийныйНомер
//	|ИЗ
//	|	Справочник.КассыККМ КАК КассыККМ
//	|ГДЕ
//	|	КассыККМ.Ссылка = &КассаККМ";
//	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Выборка = РезультатЗапроса.Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.СерийныйНомер;
//	КонецЕсли;
//	
//КонецФункции

//#КонецОбласти

//#Область ПрочиеРасчеты

//// Выполняет движения регистра накопления РасчетыСПрочимиКонтрагентами.
////
//Процедура ОтразитьРасчетыСПрочимиКонтрагентами(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаРасчетыСПрочимиКонтрагентами = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПрочимиКонтрагентами;
//	
//	Если Отказ
//	 ИЛИ ТаблицаРасчетыСПрочимиКонтрагентами.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияРасчетыСПрочимиКонтрагентами = Движения.РасчетыСПрочимиКонтрагентами;
//	ДвиженияРасчетыСПрочимиКонтрагентами.Записывать = Истина;
//	ДвиженияРасчетыСПрочимиКонтрагентами.Загрузить(ТаблицаРасчетыСПрочимиКонтрагентами);
//	
//КонецПроцедуры

//// Выполняет движения регистра накопления РасчетыПоКредитамИЗаймам.
////
//Процедура ОтразитьРасчетыПоКредитамИЗаймам(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаРасчетыПоКредитамИЗаймам = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыПоКредитамИЗаймам;
//	
//	Если Отказ
//	 ИЛИ ТаблицаРасчетыПоКредитамИЗаймам.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияРасчетыПоКредитамИЗаймам = Движения.РасчетыПоКредитамИЗаймам;
//	ДвиженияРасчетыПоКредитамИЗаймам.Записывать = Истина;
//	ДвиженияРасчетыПоКредитамИЗаймам.Загрузить(ТаблицаРасчетыПоКредитамИЗаймам);
//	
//КонецПроцедуры

//// Выполняет движения регистра сведений ГрафикПогашенияКредитовИЗаймов.
////
//Процедура ОтразитьГрафикПогашенияКредитовИЗаймов(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаГрафикПогашенияКредитовИЗаймов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГрафикПогашенияКредитовИЗаймов;
//	
//	Если Отказ
//	 ИЛИ ТаблицаГрафикПогашенияКредитовИЗаймов.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияГрафикПогашенияКредитовИЗаймов = Движения.ГрафикПогашенияКредитовИЗаймов;
//	ДвиженияГрафикПогашенияКредитовИЗаймов.Записывать = Истина;
//	ДвиженияГрафикПогашенияКредитовИЗаймов.Загрузить(ТаблицаГрафикПогашенияКредитовИЗаймов);
//	
//КонецПроцедуры

//// Функция возвращает текст запроса для расчета курсовых разниц.
////
//Функция ПолучитьТекстЗапросаКурсовыеРазницыРасчетыПоКредитамИЗаймам(МенеджерВременныхТаблиц, НомерЗапроса, ЕстьСтруктурнаяЕдиница = Ложь) Экспорт
//	
//	РассчитыватьКурсовыеРазницы = ПолучитьНеобходимостьРасчетаКурсовыхРазниц(МенеджерВременныхТаблиц, "ВременнаяТаблицаРасчетыПоКредитамИЗаймам");
//	
//	Если РассчитыватьКурсовыеРазницы Тогда
//		
//		НомерЗапроса = 3;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ
//		|	РасчетыОстатки.ВидДоговора КАК ВидДоговора,
//		|	РасчетыОстатки.Контрагент КАК Контрагент,
//		|	РасчетыОстатки.Организация КАК Организация,
//		|	РасчетыОстатки.ДоговорКредитаЗайма КАК ДоговорКредитаЗайма,
//		|	СУММА(РасчетыОстатки.ОсновнойДолгОстаток) КАК ОсновнойДолгОстаток,
//		|	СУММА(РасчетыОстатки.ОсновнойДолгВалОстаток) КАК ОсновнойДолгВалОстаток,
//		|	СУММА(РасчетыОстатки.ПроцентыОстаток) КАК ПроцентыОстаток,
//		|	СУММА(РасчетыОстатки.ПроцентыВалОстаток) КАК ПроцентыВалОстаток,
//		|	СУММА(РасчетыОстатки.КомиссияОстаток) КАК КомиссияОстаток,
//		|	СУММА(РасчетыОстатки.КомиссияВалОстаток) КАК КомиссияВалОстаток
//		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиПослеПроведения
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ВременнаяТаблица.ВидДоговора КАК ВидДоговора,
//		|		ВременнаяТаблица.Контрагент КАК Контрагент,
//		|		ВременнаяТаблица.Организация КАК Организация,
//		|		ВременнаяТаблица.ДоговорКредитаЗайма КАК ДоговорКредитаЗайма,
//		|		ВременнаяТаблица.ОсновнойДолгДляОстатка КАК ОсновнойДолгОстаток,
//		|		ВременнаяТаблица.ОсновнойДолгВалДляОстатка КАК ОсновнойДолгВалОстаток,
//		|		ВременнаяТаблица.ПроцентыДляОстатка КАК ПроцентыОстаток,
//		|		ВременнаяТаблица.ПроцентыВалДляОстатка КАК ПроцентыВалОстаток,
//		|		ВременнаяТаблица.КомиссияДляОстатка КАК КомиссияОстаток,
//		|		ВременнаяТаблица.КомиссияВалДляОстатка КАК КомиссияВалОстаток
//		|	ИЗ
//		|		ВременнаяТаблицаРасчетыПоКредитамИЗаймам КАК ВременнаяТаблица
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаОстатки.ВидДоговора,
//		|		ТаблицаОстатки.Контрагент,
//		|		ТаблицаОстатки.Организация,
//		|		ТаблицаОстатки.ДоговорКредитаЗайма,
//		|		ЕСТЬNULL(ТаблицаОстатки.ОсновнойДолгОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.ОсновнойДолгВалОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.ПроцентыОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.ПроцентыВалОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.КомиссияОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.КомиссияВалОстаток, 0)
//		|	ИЗ
//		|		РегистрНакопления.РасчетыПоКредитамИЗаймам.Остатки(
//		|				&МоментВремени,
//		|				(Организация, Контрагент, ДоговорКредитаЗайма, ВидДоговора) В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаРасчетыПоКредитамИЗаймам.Организация,
//		|						ВременнаяТаблицаРасчетыПоКредитамИЗаймам.Контрагент,
//		|						ВременнаяТаблицаРасчетыПоКредитамИЗаймам.ДоговорКредитаЗайма,
//		|						ВременнаяТаблицаРасчетыПоКредитамИЗаймам.ВидДоговора
//		|					ИЗ
//		|						ВременнаяТаблицаРасчетыПоКредитамИЗаймам)) КАК ТаблицаОстатки
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ДвиженияДокумента.ВидДоговора,
//		|		ДвиженияДокумента.Контрагент,
//		|		ДвиженияДокумента.Организация,
//		|		ДвиженияДокумента.ДоговорКредитаЗайма,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.ОсновнойДолг, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.ОсновнойДолг, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.ОсновнойДолгВал, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.ОсновнойДолгВал, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.Проценты, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.Проценты, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.ПроцентыВал, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.ПроцентыВал, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.Комиссия, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.Комиссия, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.КомиссияВал, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.КомиссияВал, 0)
//		|		КОНЕЦ
//		|	ИЗ
//		|		РегистрНакопления.РасчетыПоКредитамИЗаймам КАК ДвиженияДокумента
//		|	ГДЕ
//		|		ДвиженияДокумента.Регистратор = &Ссылка
//		|		И ДвиженияДокумента.Период <= &ПериодКонтроля) КАК РасчетыОстатки
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	РасчетыОстатки.Организация,
//		|	РасчетыОстатки.Контрагент,
//		|	РасчетыОстатки.ВидДоговора,
//		|	РасчетыОстатки.ДоговорКредитаЗайма
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Организация,
//		|	Контрагент,
//		|	ВидДоговора,
//		|	ДоговорКредитаЗайма
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаРасчеты.Организация КАК Организация,
//		|	ТаблицаРасчеты.Контрагент КАК Контрагент,
//		|	ТаблицаРасчеты.ВидДоговора КАК ВидДоговора,
//		|	ТаблицаРасчеты.Валюта КАК Валюта,
//		|	ВЫРАЗИТЬ(ТаблицаРасчеты.ДоговорКредитаЗайма КАК Документ.ДоговорКредитаИЗайма) КАК ДоговорКредитаЗайма,
//		|	ТаблицаРасчеты.СчетУчета КАК СчетУчета,
//		|	ЕСТЬNULL(ТаблицаОстатки.ОсновнойДолгВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.ОсновнойДолгОстаток, 0) КАК СуммаКурсовойРазницыОсновнойДолг,
//		|	ЕСТЬNULL(ТаблицаОстатки.ПроцентыВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.ПроцентыОстаток, 0) КАК СуммаКурсовойРазницыПроценты,
//		|	ЕСТЬNULL(ТаблицаОстатки.КомиссияВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.КомиссияОстаток, 0) КАК СуммаКурсовойРазницыКомиссия
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазниц
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыПоКредитамИЗаймам КАК ТаблицаРасчеты
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиПослеПроведения КАК ТаблицаОстатки
//		|		ПО ТаблицаРасчеты.Организация = ТаблицаОстатки.Организация
//		|			И ТаблицаРасчеты.Контрагент = ТаблицаОстатки.Контрагент
//		|			И ТаблицаРасчеты.ВидДоговора = ТаблицаОстатки.ВидДоговора
//		|			И ТаблицаРасчеты.ДоговорКредитаЗайма = ТаблицаОстатки.ДоговорКредитаЗайма
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ
//		|						КонстантаВалютаУчета.Значение
//		|					ИЗ
//		|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыВалютУчетаСрезПоследних
//		|		ПО (ИСТИНА)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаРасчетыПоКредитамИЗаймам.Валюта
//		|					ИЗ
//		|						ВременнаяТаблицаРасчетыПоКредитамИЗаймам)) КАК КурсыВалютРасчетовСрезПоследних
//		|		ПО ТаблицаРасчеты.ДоговорКредитаЗайма.ВалютаРасчетов = КурсыВалютРасчетовСрезПоследних.Валюта
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВременнаяТаблицаКурсовыхРазниц.НомерСтроки КАК НомерСтроки,
//		|	ВременнаяТаблицаКурсовыхРазниц.Дата КАК Дата,
//		|	ВременнаяТаблицаКурсовыхРазниц.Организация КАК Организация,
//		|	ВременнаяТаблицаКурсовыхРазниц.Контрагент КАК Контрагент,
//		|	ВременнаяТаблицаКурсовыхРазниц.ВидДоговора КАК ВидДоговора,
//		|	ВременнаяТаблицаКурсовыхРазниц.Валюта КАК Валюта,
//		|	ВременнаяТаблицаКурсовыхРазниц.ДоговорКредитаЗайма КАК ДоговорКредитаЗайма,
//		|	ВременнаяТаблицаКурсовыхРазниц.СчетУчета КАК СчетУчета,
//		|	ВременнаяТаблицаКурсовыхРазниц.СуммаКурсовойРазницыОсновнойДолг КАК СуммаКурсовойРазницыОсновнойДолг,
//		|	0 КАК СуммаКурсовойРазницыПроценты,
//		|	0 КАК СуммаКурсовойРазницыКомиссия,
//		|	ВременнаяТаблицаКурсовыхРазниц.СуммаКурсовойРазницыОсновнойДолг КАК СуммаКурсовойРазницы
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыПоКредитамИЗаймам
//		|ИЗ
//		|	ВременнаяТаблицаКурсовыхРазниц КАК ВременнаяТаблицаКурсовыхРазниц
//		|ГДЕ
//		|	(ВременнаяТаблицаКурсовыхРазниц.СуммаКурсовойРазницыОсновнойДолг >= 0.005
//		|			ИЛИ ВременнаяТаблицаКурсовыхРазниц.СуммаКурсовойРазницыОсновнойДолг <= -0.005)
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	ВременнаяТаблицаКурсовыхРазниц.НомерСтроки,
//		|	ВременнаяТаблицаКурсовыхРазниц.Дата,
//		|	ВременнаяТаблицаКурсовыхРазниц.Организация,
//		|	ВременнаяТаблицаКурсовыхРазниц.Контрагент,
//		|	ВременнаяТаблицаКурсовыхРазниц.ВидДоговора,
//		|	ВременнаяТаблицаКурсовыхРазниц.Валюта,
//		|	ВременнаяТаблицаКурсовыхРазниц.ДоговорКредитаЗайма,
//		|	ВременнаяТаблицаКурсовыхРазниц.СчетУчета,
//		|	0,
//		|	ВременнаяТаблицаКурсовыхРазниц.СуммаКурсовойРазницыПроценты,
//		|	0,
//		|	ВременнаяТаблицаКурсовыхРазниц.СуммаКурсовойРазницыПроценты
//		|ИЗ
//		|	ВременнаяТаблицаКурсовыхРазниц КАК ВременнаяТаблицаКурсовыхРазниц
//		|ГДЕ
//		|	(ВременнаяТаблицаКурсовыхРазниц.СуммаКурсовойРазницыПроценты >= 0.005
//		|			ИЛИ ВременнаяТаблицаКурсовыхРазниц.СуммаКурсовойРазницыПроценты <= -0.005)
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	ВременнаяТаблицаКурсовыхРазниц.НомерСтроки,
//		|	ВременнаяТаблицаКурсовыхРазниц.Дата,
//		|	ВременнаяТаблицаКурсовыхРазниц.Организация,
//		|	ВременнаяТаблицаКурсовыхРазниц.Контрагент,
//		|	ВременнаяТаблицаКурсовыхРазниц.ВидДоговора,
//		|	ВременнаяТаблицаКурсовыхРазниц.Валюта,
//		|	ВременнаяТаблицаКурсовыхРазниц.ДоговорКредитаЗайма,
//		|	ВременнаяТаблицаКурсовыхРазниц.СчетУчета,
//		|	0,
//		|	0,
//		|	ВременнаяТаблицаКурсовыхРазниц.СуммаКурсовойРазницыКомиссия,
//		|	ВременнаяТаблицаКурсовыхРазниц.СуммаКурсовойРазницыКомиссия
//		|ИЗ
//		|	ВременнаяТаблицаКурсовыхРазниц КАК ВременнаяТаблицаКурсовыхРазниц
//		|ГДЕ
//		|	(ВременнаяТаблицаКурсовыхРазниц.СуммаКурсовойРазницыКомиссия >= 0.005
//		|			ИЛИ ВременнаяТаблицаКурсовыхРазниц.СуммаКурсовойРазницыКомиссия <= -0.005)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК Порядок,
//		|	1 КАК НомерСтроки,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.ДоговорКредитаЗайма КАК ДоговорКредитаЗайма,
//		|	ТаблицаДокумента.ВидДоговора КАК ВидДоговора,
//		|	ТаблицаДокумента.Контрагент КАК Контрагент,
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.ДоговорКредитаЗайма.ВалютаРасчетов КАК Валюта,
//		|	ТаблицаДокумента.ОсновнойДолг КАК ОсновнойДолг,
//		|	ТаблицаДокумента.ОсновнойДолгВал КАК ОсновнойДолгВал,
//		|	ТаблицаДокумента.Проценты КАК Проценты,
//		|	ТаблицаДокумента.ПроцентыВал КАК ПроцентыВал,
//		|	ТаблицаДокумента.Комиссия КАК Комиссия,
//		|	ТаблицаДокумента.КомиссияВал КАК КомиссияВал,
//		|	ТаблицаДокумента.ОсновнойДолг + ТаблицаДокумента.Проценты + ТаблицаДокумента.Комиссия КАК Сумма,
//		|	ТаблицаДокумента.ОсновнойДолгВал + ТаблицаДокумента.ПроцентыВал + ТаблицаДокумента.КомиссияВал КАК СуммаВал,
//		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
//		|	ТаблицаДокумента.СодержаниеПроводки КАК СодержаниеПроводки,
//		|	ТаблицаДокумента.УдержаноИзЗарплаты КАК УдержаноИзЗарплаты,
//		|	"""" КАК СтруктурнаяЕдиница
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыПоКредитамИЗаймам КАК ТаблицаДокумента
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	2,
//		|	1,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницыОсновнойДолг > 0
//		|				ИЛИ ТаблицаДокумента.СуммаКурсовойРазницыПроценты > 0
//		|				ИЛИ ТаблицаДокумента.СуммаКурсовойРазницыКомиссия > 0
//		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//		|	КОНЕЦ,
//		|	ТаблицаДокумента.ДоговорКредитаЗайма,
//		|	ТаблицаДокумента.ВидДоговора,
//		|	ТаблицаДокумента.Контрагент,
//		|	ТаблицаДокумента.Дата,
//		|	ТаблицаДокумента.Организация,
//		|	ТаблицаДокумента.ДоговорКредитаЗайма.ВалютаРасчетов,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницыОсновнойДолг > 0
//		|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницыОсновнойДолг
//		|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницыОсновнойДолг
//		|	КОНЕЦ,
//		|	0,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницыПроценты > 0
//		|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницыПроценты
//		|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницыПроценты
//		|	КОНЕЦ,
//		|	0,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницыКомиссия > 0
//		|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницыКомиссия
//		|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницыКомиссия
//		|	КОНЕЦ,
//		|	0,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницыОсновнойДолг > 0
//		|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницыОсновнойДолг
//		|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницыОсновнойДолг
//		|	КОНЕЦ + ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницыПроценты > 0
//		|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницыПроценты
//		|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницыПроценты
//		|	КОНЕЦ + ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницыКомиссия > 0
//		|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницыКомиссия
//		|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницыКомиссия
//		|	КОНЕЦ,
//		|	0,
//		|	ТаблицаДокумента.СчетУчета,
//		|	&КурсоваяРазница,
//		|	ЛОЖЬ,
//		|	НЕОПРЕДЕЛЕНО
//		|ИЗ
//		|	ВременнаяТаблицаКурсовыхРазницРасчетыПоКредитамИЗаймам КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Порядок,
//		|	НомерСтроки
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|УНИЧТОЖИТЬ ВременнаяТаблицаОстаткиПослеПроведения";
//		
//	Иначе
//		
//		НомерЗапроса = 1;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаРасчеты.Организация КАК Организация,
//		|	ТаблицаРасчеты.Контрагент КАК Контрагент,
//		|	ТаблицаРасчеты.ВидДоговора КАК ВидДоговора,
//		|	ТаблицаРасчеты.ДоговорКредитаЗайма КАК ДоговорКредитаЗайма,
//		|	0 КАК СуммаКурсовойРазницы,
//		|	ТаблицаРасчеты.Валюта КАК Валюта,
//		|	ТаблицаРасчеты.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыПоКредитамИЗаймам
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыПоКредитамИЗаймам КАК ТаблицаРасчеты
//		|ГДЕ
//		|	ЛОЖЬ
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК Порядок,
//		|	1 КАК НомерСтроки,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.ДоговорКредитаЗайма КАК ДоговорКредитаЗайма,
//		|	ТаблицаДокумента.ВидДоговора КАК ВидДоговора,
//		|	ТаблицаДокумента.Контрагент КАК Контрагент,
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.Валюта КАК Валюта,
//		|	ТаблицаДокумента.ОсновнойДолг КАК ОсновнойДолг,
//		|	ТаблицаДокумента.ОсновнойДолгВал КАК ОсновнойДолгВал,
//		|	ТаблицаДокумента.Проценты КАК Проценты,
//		|	ТаблицаДокумента.ПроцентыВал КАК ПроцентыВал,
//		|	ТаблицаДокумента.Комиссия КАК Комиссия,
//		|	ТаблицаДокумента.КомиссияВал КАК КомиссияВал,
//		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
//		|	ТаблицаДокумента.СодержаниеПроводки КАК СодержаниеПроводки,
//		|	ТаблицаДокумента.УдержаноИзЗарплаты КАК УдержаноИзЗарплаты,
//		|	ТаблицаДокумента.ОсновнойДолгВал + ТаблицаДокумента.ПроцентыВал + ТаблицаДокумента.КомиссияВал КАК СуммаВал,
//		|	ТаблицаДокумента.ОсновнойДолг + ТаблицаДокумента.Проценты + ТаблицаДокумента.Комиссия КАК Сумма,
//		|	"""" КАК СтруктурнаяЕдиница
//		|ИЗ
//		|	ВременнаяТаблицаРасчетыПоКредитамИЗаймам КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Порядок,
//		|	НомерСтроки";
//		
//	КонецЕсли;
//	
//	Если ЕстьСтруктурнаяЕдиница Тогда
//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """"" КАК СтруктурнаяЕдиница", "ТаблицаДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница");
//	КонецЕсли;
//	
//	Возврат ТекстЗапроса;
//	
//КонецФункции // ПолучитьТекстЗапросаКурсовыеРазницыРасчетыПоКредитамИЗаймам()

//// Функция возвращает текст запроса для расчета курсовых разниц.
////
//Функция ПолучитьТекстЗапросаКурсовыеРазницыРасчетыПоПрочимОперациям(МенеджерВременныхТаблиц, НомерЗапроса) Экспорт
//	
//	РассчитыватьКурсовыеРазницы = ПолучитьНеобходимостьРасчетаКурсовыхРазниц(МенеджерВременныхТаблиц, "ВременнаяТаблицаПрочиеРасчеты");
//	
//	Если НЕ РассчитыватьКурсовыеРазницы Тогда
//		
//		НомерЗапроса = 1;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаРасчеты.Организация КАК Организация,
//		|	ТаблицаРасчеты.Контрагент КАК Контрагент,
//		|	ТаблицаРасчеты.Договор КАК Договор,
//		|	0 КАК СуммаКурсовойРазницы,
//		|	ТаблицаРасчеты.Валюта КАК Валюта,
//		|	ТаблицаРасчеты.СчетУчета КАК СчетУчета
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницПрочиеРасчеты
//		|ИЗ
//		|	ВременнаяТаблицаПрочиеРасчеты КАК ТаблицаРасчеты
//		|ГДЕ
//		|	ЛОЖЬ
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.Контрагент КАК Контрагент,
//		|	ТаблицаДокумента.Договор КАК Договор,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.Валюта,
//		|	ТаблицаДокумента.СодержаниеПроводки,
//		|	ТаблицаДокумента.СчетУчета,
//		|	ТаблицаДокумента.Комментарий
//		|ИЗ
//		|	ВременнаяТаблицаПрочиеРасчеты КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ТаблицаДокумента.СодержаниеПроводки,
//		|	ВидДвижения";
//	
//	Иначе
//		
//		НомерЗапроса = 2;
//		
//		ТекстЗапроса =
//		"ВЫБРАТЬ
//		|	РасчетыОстатки.Организация КАК Организация,
//		|	РасчетыОстатки.Контрагент КАК Контрагент,
//		|	РасчетыОстатки.Договор КАК Договор,
//		|	РасчетыОстатки.СчетУчета КАК СчетУчета,
//		|	СУММА(РасчетыОстатки.СуммаОстаток) КАК СуммаОстаток,
//		|	СУММА(РасчетыОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
//		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиПослеПроведения
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ВременнаяТаблица.Организация КАК Организация,
//		|		ВременнаяТаблица.Контрагент КАК Контрагент,
//		|		ВременнаяТаблица.Договор КАК Договор,
//		|		ВременнаяТаблица.СчетУчета КАК СчетУчета,
//		|		ВременнаяТаблица.СуммаДляОстатка КАК СуммаОстаток,
//		|		ВременнаяТаблица.СуммаВалДляОстатка КАК СуммаВалОстаток
//		|	ИЗ
//		|		ВременнаяТаблицаПрочиеРасчеты КАК ВременнаяТаблица
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ТаблицаОстатки.Организация,
//		|		ТаблицаОстатки.Контрагент,
//		|		ТаблицаОстатки.Договор,
//		|		ТаблицаОстатки.СчетУчета,
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0),
//		|		ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0)
//		|	ИЗ
//		|		РегистрНакопления.РасчетыСПрочимиКонтрагентами.Остатки(
//		|				&МоментВремени,
//		|				(Организация, Контрагент, Договор, СчетУчета) В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаПрочиеРасчеты.Организация,
//		|						ВременнаяТаблицаПрочиеРасчеты.Контрагент,
//		|						ВременнаяТаблицаПрочиеРасчеты.Договор,
//		|						ВременнаяТаблицаПрочиеРасчеты.СчетУчета
//		|					ИЗ
//		|						ВременнаяТаблицаПрочиеРасчеты)) КАК ТаблицаОстатки
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ДвиженияДокумента.Организация,
//		|		ДвиженияДокумента.Контрагент,
//		|		ДвиженияДокумента.Договор,
//		|		ДвиженияДокумента.СчетУчета,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.Сумма, 0)
//		|		КОНЕЦ,
//		|		ВЫБОР
//		|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|				ТОГДА -ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокумента.СуммаВал, 0)
//		|		КОНЕЦ
//		|	ИЗ
//		|		РегистрНакопления.РасчетыСПрочимиКонтрагентами КАК ДвиженияДокумента
//		|	ГДЕ
//		|		ДвиженияДокумента.Регистратор = &Ссылка
//		|		И ДвиженияДокумента.Период <= &ПериодКонтроля) КАК РасчетыОстатки
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	РасчетыОстатки.Организация,
//		|	РасчетыОстатки.Контрагент,
//		|	РасчетыОстатки.Договор,
//		|	РасчетыОстатки.СчетУчета
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Организация,
//		|	Контрагент,
//		|	Договор,
//		|	СчетУчета
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	1 КАК НомерСтроки,
//		|	&ПериодКонтроля КАК Дата,
//		|	ТаблицаРасчеты.Организация КАК Организация,
//		|	ТаблицаРасчеты.Контрагент КАК Контрагент,
//		|	ТаблицаРасчеты.Договор КАК Договор,
//		|	ТаблицаРасчеты.СчетУчета КАК СчетУчета,
//		|	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) КАК СуммаКурсовойРазницы,
//		|	ТаблицаРасчеты.Валюта КАК Валюта
//		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницПрочиеРасчеты
//		|ИЗ
//		|	ВременнаяТаблицаПрочиеРасчеты КАК ТаблицаРасчеты
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиПослеПроведения КАК ТаблицаОстатки
//		|		ПО ТаблицаРасчеты.Организация = ТаблицаОстатки.Организация
//		|			И ТаблицаРасчеты.Контрагент = ТаблицаОстатки.Контрагент
//		|			И ТаблицаРасчеты.Договор = ТаблицаОстатки.Договор
//		|			И ТаблицаРасчеты.СчетУчета = ТаблицаОстатки.СчетУчета
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ
//		|						КонстантаВалютаУчета.Значение
//		|					ИЗ
//		|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыВалютУчетаСрезПоследних
//		|		ПО (ИСТИНА)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
//		|				&МоментВремени,
//		|				Валюта В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВременнаяТаблицаПрочиеРасчеты.Валюта
//		|					ИЗ
//		|						ВременнаяТаблицаПрочиеРасчеты)) КАК КурсыВалютРасчетовСрезПоследних
//		|		ПО ТаблицаРасчеты.Договор.ВалютаРасчетов = КурсыВалютРасчетовСрезПоследних.Валюта
//		|ГДЕ
//		|	ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) >= 0
//		|	И (ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) >= 0.005
//		|			ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютРасчетовСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютРасчетовСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) <= -0.005)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	1 КАК Порядок,
//		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
//		|	ТаблицаДокумента.Дата КАК Период,
//		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
//		|	ТаблицаДокумента.Организация КАК Организация,
//		|	ТаблицаДокумента.Контрагент КАК Контрагент,
//		|	ТаблицаДокумента.Договор КАК Договор,
//		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
//		|	ТаблицаДокумента.Сумма КАК Сумма,
//		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
//		|	ТаблицаДокумента.Валюта,
//		|	ТаблицаДокумента.СодержаниеПроводки,
//		|	ТаблицаДокумента.Комментарий
//		|ИЗ
//		|	ВременнаяТаблицаПрочиеРасчеты КАК ТаблицаДокумента
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	2,
//		|	ТаблицаДокумента.НомерСтроки,
//		|	ТаблицаДокумента.Дата,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//		|	КОНЕЦ,
//		|	ТаблицаДокумента.Организация,
//		|	ТаблицаДокумента.Контрагент,
//		|	ТаблицаДокумента.Договор,
//		|	ТаблицаДокумента.СчетУчета,
//		|	ВЫБОР
//		|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
//		|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
//		|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
//		|	КОНЕЦ,
//		|	0,
//		|	ТаблицаДокумента.Валюта,
//		|	&КурсоваяРазница,
//		|	""""
//		|ИЗ
//		|	ВременнаяТаблицаКурсовыхРазницПрочиеРасчеты КАК ТаблицаДокумента
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Порядок,
//		|	НомерСтроки
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|УНИЧТОЖИТЬ ВременнаяТаблицаОстаткиПослеПроведения";
//		
//	КонецЕсли;
//	
//	Возврат ТекстЗапроса;
//	
//КонецФункции // ПолучитьТекстЗапросаКурсовыеРазницыРасчетыПоПрочимОперациям()

//#КонецОбласти

//#Область УстановкаКурсовВалютВЗаголовокФормы

//// Добавляет в конец заголовка приложения текущие курсы валют.
////
//// Параметры:
////  ЗаголовокПриложения - Строка - текст заголовка приложения;
////  ПриЗапуске          - Булево - Истина, если вызывается при начале работы программы.
////
//Процедура ПриУстановкеЗаголовкаКлиентскогоПриложения(ЗаголовокПриложения, ПриЗапуске) Экспорт
//	
//	Если ОбщегоНазначения.РазделениеВключено()
//		И НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
//		
//		Возврат;
//		
//	КонецЕсли;
//	
//	КурсыВалютЗаголовок = "";
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ ПЕРВЫЕ 3
//	|	КурсыВалютСрезПоследних.Период КАК Период,
//	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
//	|	КурсыВалютСрезПоследних.Курс КАК Курс,
//	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
//	|ИЗ
//	|	РегистрСведений.КурсыВалют.СрезПоследних(
//	|			&Период,
//	|			НЕ Валюта.ПометкаУдаления
//	|				И Валюта <> &НациональнаяВалюта) КАК КурсыВалютСрезПоследних";
//	
//	Запрос.УстановитьПараметр("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
//	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДатаСеанса()));
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		
//		Если ЗначениеЗаполнено(КурсыВалютЗаголовок) Тогда
//			КурсыВалютЗаголовок = КурсыВалютЗаголовок + " / ";
//		КонецЕсли;
//		КурсыВалютЗаголовок = КурсыВалютЗаголовок + Выборка.Валюта.Наименование + " " + Формат(Выборка.Курс/Выборка.Кратность, "ЧДЦ=2");
//		
//	КонецЦикла;
//	
//	Если ЗначениеЗаполнено(КурсыВалютЗаголовок) Тогда
//		
//		ЗаголовокПриложения = ЗаголовокПриложения + " / " + КурсыВалютЗаголовок;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//#КонецОбласти

//#Область ПроверкаВозможностиИзмененияНастроек

//// Проверка на возможность снятия опции УчетВалютныхОпераций.
////
//Функция ОтказСнятьФункциональнаяУчетВалютныхОпераций() Экспорт
//	
//	ТекстСообщения = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	Валюты.Ссылка
//		|ИЗ
//		|	Справочник.Валюты КАК Валюты
//		|ГДЕ
//		|	Валюты.Ссылка <> &НациональнаяВалюта"
//	);
//	
//	Запрос.УстановитьПараметр("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		ТекстСообщения = НСтр("ru = 'В базе заведены валюты, отличные от национальной. Изменение настройки невозможно!'");
//	КонецЕсли;
//	
//	Возврат ТекстСообщения;
//	
//КонецФункции // ОтказСнятьФункциональнаяУчетВалютныхОпераций()

//// Проверка на возможность снятия опции ИспользоватьОбменССайтом.
////
//Функция ОтказСнятьИспользоватьОбменССайтом() Экспорт
//	
//	ТекстСообщения = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ДанныеСайта.СайтСоздан
//		|ИЗ
//		|	РегистрСведений.ДанныеСайта КАК ДанныеСайта
//		|ГДЕ
//		|	ДанныеСайта.СайтСоздан"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		ТекстСообщения = НСтр("ru = 'В программе настроен и используется обмен с сайтами! Отключение настройки невозможно!'");
//	КонецЕсли;
//	
//	Возврат ТекстСообщения;
//	
//КонецФункции // ОтказСнятьФункциональнаяУчетВалютныхОпераций()

//// Проверка на возможность изменения установленной валюты учета.
////
//Функция ОтказИзменитьВалютаУчета() Экспорт
//	
//	ТекстСообщения = "";
//	
//	СписокРегистров = Новый СписокЗначений;
//	СписокРегистров.Добавить("ВнеоборотныеАктивы");
//	СписокРегистров.Добавить("ДенежныеСредства");
//	СписокРегистров.Добавить("ДоходыИРасходы");
//	СписокРегистров.Добавить("ДоходыИРасходыКассовыйМетод");
//	СписокРегистров.Добавить("ДоходыИРасходыНераспределенные");
//	СписокРегистров.Добавить("ДоходыИРасходыОтложенные");
//	СписокРегистров.Добавить("Закупки");
//	СписокРегистров.Добавить("ЗапасыПереданные");
//	СписокРегистров.Добавить("ЗапасыПринятые");
//	СписокРегистров.Добавить("НачисленияИУдержания");
//	СписокРегистров.Добавить("ПланыПродаж");
//	СписокРегистров.Добавить("ПлатежныйКалендарь");
//	СписокРегистров.Добавить("Продажи");
//	СписокРегистров.Добавить("РасчетыПоНалогам");
//	СписокРегистров.Добавить("РасчетыСПерсоналом");
//	СписокРегистров.Добавить("РасчетыСПодотчетниками");
//	СписокРегистров.Добавить("РасчетыСПокупателями");
//	СписокРегистров.Добавить("РасчетыСПоставщиками");
//	СписокРегистров.Добавить("ФинансовыйРезультат");
//	
//	СчетчикРегистровНакопления = 0;
//	Запрос = Новый Запрос;
//	Для каждого РегистрНакопления Из СписокРегистров Цикл
//		
//		Запрос.Текст = Запрос.Текст + 
//			?(Запрос.Текст = "",
//				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1", 
//				" 
//				|
//				|ОБЪЕДИНИТЬ ВСЕ 
//				|
//				|ВЫБРАТЬ ПЕРВЫЕ 1 ") + "
//				|
//				|	РегистрНакопления" + РегистрНакопления.Значение + ".Организация
//				|ИЗ
//				|	РегистрНакопления." + РегистрНакопления.Значение + " КАК РегистрНакопления" + РегистрНакопления.Значение;
//		
//		СчетчикРегистровНакопления = СчетчикРегистровНакопления + 1;
//		
//		Если СчетчикРегистровНакопления > 3 Тогда
//			СчетчикРегистровНакопления = 0;
//			Попытка
//				РезультатЗапроса = Запрос.Выполнить();
//				ЕстьДвижения = НЕ РезультатЗапроса.Пустой();
//			Исключение
//				
//			КонецПопытки;
//			
//			Если ЕстьДвижения Тогда
//				Прервать;
//			КонецЕсли; 
//			Запрос.Текст = "";
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Если СчетчикРегистровНакопления > 0 Тогда
//		Попытка
//			РезультатЗапроса = Запрос.Выполнить();
//			Если НЕ РезультатЗапроса.Пустой() Тогда
//				ЕстьДвижения = Истина;
//			КонецЕсли;
//		Исключение
//			
//		КонецПопытки;
//	КонецЕсли;
//	
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	Запасы.Организация
//	|ИЗ
//	|	РегистрНакопления.Запасы КАК Запасы";
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		ЕстьДвижения = Истина;
//	КонецЕсли;
//	
//	Если ЕстьДвижения Тогда
//		
//		ТекстСообщения = НСтр("ru = 'В базе есть движения по ""суммовым"" регистрам накопления! Изменение валюты учета запрещено!'");	
//		
//	КонецЕсли;
//	
//	Возврат ТекстСообщения;
//	
//КонецФункции // ОтказИзменитьВалютаУчета()

//// Проверка на возможность снятия опции УчетПоНесколькимСкладам.
////
//Функция ОтказСнятиеУчетПоНесколькимСкладам() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	СтруктурныеЕдиницы.Ссылка
//		|ИЗ
//		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
//		|ГДЕ
//		|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = &ТипСтруктурнойЕдиницы
//		|	И СтруктурныеЕдиницы.Ссылка <> &ОсновнойСклад"
//	);
//	
//	Запрос.УстановитьПараметр("ТипСтруктурнойЕдиницы", Перечисления.ТипыСтруктурныхЕдиниц.Склад);
//	Запрос.УстановитьПараметр("ОсновнойСклад", Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В базе используются склады, отличные от основного! Снятие опции запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции  // ОтказСнятиеУчетПоНесколькимСкладам()

//// Проверка на возможность снятия опции УчетВРазличныхЕдиницахИзмерения.
////
//Функция ОтказСнятьФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения() Экспорт
//	
//	ТекстОшибки = "";
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Отказ = Ложь;
//	
//	ВыборкаЕдиницыИзмерения = Справочники.ЕдиницыИзмерения.Выбрать();
//	Пока ВыборкаЕдиницыИзмерения.Следующий() Цикл
//		
//		МассивСсылок = Новый Массив;
//		МассивСсылок.Добавить(ВыборкаЕдиницыИзмерения.Ссылка);
//		ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
//		
//		Если ТаблицаСсылок.Количество() > 0 Тогда
//			
//			ТекстОшибки = НСтр("ru = 'В приложении введены документы в пользовательских единицах измерения! Снятие опции запрещено!'");
//			Прервать;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	УстановитьПривилегированныйРежим(Ложь);
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения()

//// Проверка на возможность снятия опции ПередачаЗапасовНаОтветхранение.
////
//Функция ОтказСнятьФункциональнаяОпцияПередачаЗапасовНаОтветхранение() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ЗапасыПереданные.Организация
//		|ИЗ
//		|	РегистрНакопления.ЗапасыПереданные КАК ЗапасыПереданные
//		|ГДЕ
//		|	ЗапасыПереданные.ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтветственноеХранение)"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'Регистр накопления ""Запасы переданные"" содержит информацию о передаче на ответхранение! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияПередачаЗапасовНаОтветхранение()

//// Проверка на возможность снятия опции ПриемЗапасовНаОтветхранение.
////
//Функция ОтказСнятьФункциональнаяОпцияПриемЗапасовНаОтветхранение() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ЗапасыПринятые.Организация
//		|ИЗ
//		|	РегистрНакопления.ЗапасыПринятые КАК ЗапасыПринятые
//		|ГДЕ
//		|	ЗапасыПринятые.ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтветственноеХранение)"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'Регистр накопления ""Запасы принятые"" содержит информацию о приеме на ответхранение! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияПриемЗапасовНаОтветхранение()

//// Проверка на возможность снятия опции ИспользоватьОрдерныйСклад.
////
//Функция ОтказСнятьФункциональнаяОпцияИспользоватьОрдерныйСклад() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	СтруктурныеЕдиницы.Ссылка
//		|ИЗ
//		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
//		|ГДЕ
//		|	СтруктурныеЕдиницы.ОрдерныйСклад"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В базе присутствуют ордерные склады! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ЗапасыКПоступлениюНаСклады.Организация
//		|ИЗ
//		|	РегистрНакопления.ЗапасыКПоступлениюНаСклады КАК ЗапасыКПоступлениюНаСклады"
//	);
//	
//	РезультатЗапросаЗапасыКПоступлениюНаСклады = Запрос.Выполнить();
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ЗапасыКРасходуСоСкладов.Организация
//		|ИЗ
//		|	РегистрНакопления.ЗапасыКРасходуСоСкладов КАК ЗапасыКРасходуСоСкладов"
//		);
//		
//	РезультатЗапросаЗапасыКРасходуСоСкладов = Запрос.Выполнить();
//	
//	Если НЕ РезультатЗапросаЗапасыКПоступлениюНаСклады.Пустой()
//		ИЛИ НЕ РезультатЗапросаЗапасыКРасходуСоСкладов.Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В базе присутствуют движения по ордерному складу! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьОрдерныйСклад()

//// Проверка на возможность снятия опции РезервированиеЗапасов.
////
//Функция ОтказСнятьФункциональнаяОпцияРезервированиеЗапасов() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства") Тогда
//		
//		ТекстОшибки = НСтр("ru = 'Используется поэтапное производство! Снятие флага запрещено!'");
//		
//	Иначе
//		
//		Запрос = Новый Запрос(
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Запасы.ЗаказПокупателя
//			|ИЗ
//			|	РегистрНакопления.Запасы КАК Запасы
//			|ГДЕ
//			|	Запасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)"
//		);
//		
//		РезультатЗапроса = Запрос.Выполнить();
//		Если НЕ РезультатЗапроса.Пустой() Тогда
//			
//			ТекстОшибки = НСтр("ru = 'В базе содержится информация о резервах! Снятие флага запрещено!'");
//			
//		КонецЕсли;
//		
//	КонецЕсли; 
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияРезервированиеЗапасов()

//// Проверка на возможность снятия опции УчетЦенКонтрагентов
////
//Функция ОтказСнятьФункциональнаяОпцияУчетЦенКонтрагентов() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос("Выбрать Справочник.ДоговорыКонтрагентов.Ссылка Где Справочник.ДоговорыКонтрагентов.ВидЦенКонтрагента <> Значение(Справочник.ВидыЦенКонтрагентов.ПустаяСсылка)");
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В базе содержатся договоры контрагентов с установленными видами входящих цен! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияУчетЦенКонтрагентов()

//// Проверка на возможность снятия опции УчетПоЯчейкам.
////
//Функция ОтказСнятьФункциональнаяОпцияУчетПоЯчейкам() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ЗапасыНаСкладах.Организация
//		|ИЗ
//		|	РегистрНакопления.ЗапасыНаСкладах КАК ЗапасыНаСкладах
//		|ГДЕ
//		|	ЗапасыНаСкладах.Ячейка <> ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В базе содержатся движения по ячейкам! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияУчетПоЯчейкам()

//// Проверка на возможность снятия опции ИспользоватьХарактеристики.
////
//Функция ОтказСнятьФункциональнаяОпцияИспользоватьХарактеристики() Экспорт
//	
//	ТекстОшибки = "";
//	
//	СписокРегистров = Новый СписокЗначений;
//	СписокРегистров.Добавить("ВыпускПродукции");
//	СписокРегистров.Добавить("ГрафикДвиженияЗапасов");
//	СписокРегистров.Добавить("ЗаданияНаРаботу");
//	СписокРегистров.Добавить("ЗаказыНаПроизводство");
//	СписокРегистров.Добавить("ЗаказыПокупателей");
//	СписокРегистров.Добавить("ЗаказыПоставщикам");
//	СписокРегистров.Добавить("Закупки");
//	СписокРегистров.Добавить("ЗапасыВРазрезеГТД");
//	СписокРегистров.Добавить("ЗапасыКПоступлениюНаСклады");
//	СписокРегистров.Добавить("ЗапасыКРасходуСоСкладов");
//	СписокРегистров.Добавить("ЗапасыНаСкладах");
//	СписокРегистров.Добавить("ЗапасыПереданные");
//	СписокРегистров.Добавить("ЗапасыПринятые");
//	СписокРегистров.Добавить("ПланыПродаж");
//	СписокРегистров.Добавить("ПотребностьВЗапасах");
//	СписокРегистров.Добавить("Продажи");
//	СписокРегистров.Добавить("РазмещениеЗаказов");
//	СписокРегистров.Добавить("СдельныеНаряды");
//	
//	СчетчикРегистровНакопления = 0;
//	Запрос = Новый Запрос;
//	Для каждого РегистрНакопления из СписокРегистров Цикл
//		Запрос.Текст = Запрос.Текст + 
//			?(Запрос.Текст = "",
//				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1", 
//				" 
//				|
//				|ОБЪЕДИНИТЬ ВСЕ 
//				|
//				|ВЫБРАТЬ ПЕРВЫЕ 1 ") + "
//				|
//				|	РегистрНакопления" + РегистрНакопления.Значение + ".Характеристика
//				|ИЗ
//				|	РегистрНакопления." + РегистрНакопления.Значение + " КАК РегистрНакопления" + РегистрНакопления.Значение + "
//				|ГДЕ
//				|	РегистрНакопления" + РегистрНакопления.Значение + ".Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
//		
//		СчетчикРегистровНакопления = СчетчикРегистровНакопления + 1;
//		
//		Если СчетчикРегистровНакопления > 3 Тогда
//			СчетчикРегистровНакопления = 0;
//			Попытка
//				РезультатЗапроса = Запрос.Выполнить();
//				ЕстьДвижения = НЕ РезультатЗапроса.Пустой();
//			Исключение
//				
//			КонецПопытки;
//			
//			Если ЕстьДвижения Тогда
//				Прервать;
//			КонецЕсли; 
//			Запрос.Текст = "";
//		КонецЕсли;
//	КонецЦикла;
//	
//	Если СчетчикРегистровНакопления > 0 Тогда
//		Попытка
//			РезультатЗапроса = Запрос.Выполнить();
//			Если НЕ РезультатЗапроса.Пустой() Тогда
//				ЕстьДвижения = Истина;
//			КонецЕсли;
//		Исключение
//			
//		КонецПопытки;
//	КонецЕсли;
//	
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	Запасы.Характеристика
//	|ИЗ
//	|	РегистрНакопления.Запасы КАК Запасы
//	|ГДЕ
//	|	Запасы.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		ЕстьДвижения = Истина;
//	КонецЕсли;
//	
//	Если НЕ ЕстьДвижения Тогда
//		
//		Запрос.Текст		= "Выбрать первые 1 * Из РегистрСведений.ЦеныНоменклатуры КАК РСЦены Где РСЦены.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
//		РезультатЗапроса	= Запрос.Выполнить();
//		ЕстьДвижения		= НЕ РезультатЗапроса.Пустой();
//		
//	КонецЕсли;
//	
//	Если ЕстьДвижения Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В базе есть движения по характеристикам! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьХарактеристики()

//// Проверка на возможность снятия опции ИспользоватьПартии.
////
//Функция ОтказСнятьФункциональнаяОпцияИспользоватьПартии() Экспорт
//	
//	ТекстОшибки = "";
//	
//	СписокРегистров = Новый СписокЗначений;
//	СписокРегистров.Добавить("ВыпускПродукции");
//	СписокРегистров.Добавить("Закупки");
//	СписокРегистров.Добавить("ЗапасыВРазрезеГТД");
//	СписокРегистров.Добавить("ЗапасыКПоступлениюНаСклады");
//	СписокРегистров.Добавить("ЗапасыКРасходуСоСкладов");
//	СписокРегистров.Добавить("ЗапасыНаСкладах");
//	СписокРегистров.Добавить("ЗапасыПереданные");
//	СписокРегистров.Добавить("ЗапасыПринятые");
//	СписокРегистров.Добавить("Продажи");
//	
//	СчетчикРегистровНакопления = 0;
//	Запрос = Новый Запрос;
//	Для каждого РегистрНакопления из СписокРегистров Цикл
//		Запрос.Текст = Запрос.Текст + 
//			?(Запрос.Текст = "",
//				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1", 
//				" 
//				|
//				|ОБЪЕДИНИТЬ ВСЕ 
//				|
//				|ВЫБРАТЬ ПЕРВЫЕ 1 ") + "
//				|
//				|	РегистрНакопления" + РегистрНакопления.Значение + ".Партия
//				|ИЗ
//				|	РегистрНакопления." + РегистрНакопления.Значение + " КАК РегистрНакопления" + РегистрНакопления.Значение + "
//				|ГДЕ
//				|	РегистрНакопления" + РегистрНакопления.Значение + ".Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)";
//		
//		СчетчикРегистровНакопления = СчетчикРегистровНакопления + 1;
//		
//		Если СчетчикРегистровНакопления > 3 Тогда
//			СчетчикРегистровНакопления = 0;
//			Попытка
//				РезультатЗапроса = Запрос.Выполнить();
//				ЕстьДвижения = НЕ РезультатЗапроса.Пустой();
//			Исключение
//				
//			КонецПопытки;
//			
//			Если ЕстьДвижения Тогда
//				Прервать;
//			КонецЕсли; 
//			Запрос.Текст = "";
//		КонецЕсли;
//	КонецЦикла;
//	
//	Если СчетчикРегистровНакопления > 0 Тогда
//		Попытка
//			РезультатЗапроса = Запрос.Выполнить();
//			Если НЕ РезультатЗапроса.Пустой() Тогда
//				ЕстьДвижения = Истина;
//			КонецЕсли;
//		Исключение
//			
//		КонецПопытки;
//	КонецЕсли;
//	
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	Запасы.Партия
//	|ИЗ
//	|	РегистрНакопления.Запасы КАК Запасы
//	|ГДЕ
//	|	Запасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)";
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		ЕстьДвижения = Истина;
//	КонецЕсли;
//	
//	Если ЕстьДвижения Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В базе есть движения по партиям! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Если ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + 
//			НСтр("ru = 'Включена опция ""Прием товаров на комиссию"" (раздел Продажи)! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Если ПолучитьФункциональнуюОпцию("ПереработкаДавальческогоСырья") Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + 
//			НСтр("ru = 'Включена опция ""Переработка давальческого сырья"" (раздел Производство)! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьПартии()

//// Проверка на возможность снятия опции ИспользоватьСерийныеНомера.
////
//Функция ОтказСнятьФункциональнаяОпцияИспользоватьСерийныеНомера() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	СерийныеНомера.СерийныйНомер
//	|ИЗ
//	|	РегистрНакопления.СерийныеНомера КАК СерийныеНомера
//	|ГДЕ
//	|	СерийныеНомера.СерийныйНомер <> ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)";
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		ТекстОшибки = НСтр("ru = 'В базе есть остатки по серийным номерам! Снятие флага запрещено!'");
//	КонецЕсли;
//	
//	Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
//		ТекстОшибки = НСтр("ru='Включен учет маркировки продукции в государственной информационной системе маркировки (ГИСМ). Снятие флага запрещено.'");
//	КонецЕсли;
//	
//	Если ПолучитьФункциональнуюОпцию("ИспользоватьЧастичноеПогашениеСертификатов") Тогда
//		ТекстОшибки = НСтр("ru='Включено частичное погашение подарочных сертификатов. Снятие флага запрещено.'");
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьСерийныеНомера()

//// Проверка на возможность снятия опции ПередачаСырьяВПереработку.
////
//Функция ОтказСнятьФункциональнаяОпцияПередачаСырьяВПереработку() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ЗапасыПереданные.Организация
//		|ИЗ
//		|	РегистрНакопления.ЗапасыПереданные КАК ЗапасыПереданные
//		|ГДЕ
//		|	ЗапасыПереданные.ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаВПереработку)"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'Регистр накопления ""Запасы переданные"" содержит информацию о передаче в переработку! Снятие флага запрещено!'");	
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияПередачаСырьяВПереработку()

//// Проверка на возможность снятия опции ИспользоватьСкидкиНаценки.
////
//Функция ОтказСнятьФункциональнаяОпцияИспользоватьСкидкиНаценки() Экспорт
//	
//	ТекстОшибки = "";
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	ВыборкаВидыСкидокНаценок = Справочники.ВидыСкидокНаценок.Выбрать();
//	Пока ВыборкаВидыСкидокНаценок.Следующий() Цикл
//		
//		МассивСсылок = Новый Массив;
//		МассивСсылок.Добавить(ВыборкаВидыСкидокНаценок.Ссылка);
//		ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
//		
//		Если ТаблицаСсылок.Количество() > 0 Тогда
//			
//			ТекстОшибки = НСтр("ru = 'В базе используются виды скидок, наценок! Снятие опции запрещено!'");
//			Прервать;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	УстановитьПривилегированныйРежим(Ложь);
//	
//	МассивВидовДокументов = Новый Массив;
//	МассивВидовДокументов.Добавить("Документ.АктВыполненныхРабот.РаботыИУслуги");
//	МассивВидовДокументов.Добавить("Документ.ЗаказПокупателя.Запасы");
//	МассивВидовДокументов.Добавить("Документ.ЗаказПокупателя.Работы");
//	МассивВидовДокументов.Добавить("Документ.ОтчетОПереработке.Продукция");
//	МассивВидовДокументов.Добавить("Документ.ОтчетОРозничныхПродажах.Запасы");
//	МассивВидовДокументов.Добавить("Документ.РасходнаяНакладная.Запасы");
//	МассивВидовДокументов.Добавить("Документ.СчетНаОплату.Запасы");
//	МассивВидовДокументов.Добавить("Документ.ЧекККМ.Запасы");
//	МассивВидовДокументов.Добавить("Документ.ЧекККМВозврат.Запасы");
//	
//	ШаблонЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1 ТЧ_Документа.Ссылка ИЗ &ТабличнаяЧастьДокумента КАК ТЧ_Документа ГДЕ ТЧ_Документа.ПроцентСкидкиНаценки <> 0";
//	
//	Запрос = Новый Запрос;
//	
//	Для каждого ЭлементМассива Из МассивВидовДокументов Цикл
//		
//		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
//			
//			Запрос.Текст = Запрос.Текст + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
//			
//		КонецЕсли;
//		
//		Запрос.Текст = Запрос.Текст + СтрЗаменить(ШаблонЗапроса, "&ТабличнаяЧастьДокумента", ЭлементМассива);
//		
//	КонецЦикла;
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В документах используются скидки и наценки! Снятие опции запрещено!'");
//		
//	КонецЕсли;
//	
//	// ДисконтныеКарты
//	Если ПолучитьФункциональнуюОпцию("ИспользоватьДисконтныеКарты") Тогда
//		
//		ВыборкаВидыДисконтныхКарт = Справочники.ВидыДисконтныхКарт.Выбрать();
//		Пока ВыборкаВидыДисконтныхКарт.Следующий() Цикл
//			
//			Если Не ВыборкаВидыДисконтныхКарт.СтарыйМеханизмСкидок Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			МассивСсылок = Новый Массив;
//			МассивСсылок.Добавить(ВыборкаВидыДисконтныхКарт.Ссылка);
//			ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
//			
//			Если ТаблицаСсылок.Количество() > 0 Тогда
//				
//				ТекстОшибки = НСтр("ru = 'В базе используются виды дисконтных карт старого образца! Снятие флага запрещено!'");
//				Прервать;
//				
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//	КонецЕсли;
//	// Конец ДисконтныеКарты
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьСкидкиНаценки()

//// Проверка на возможность снятия опции ПередачаТоваровНаКомиссию.
////
//Функция ОтказСнятьФункциональнаяОпцияПередачаТоваровНаКомиссию() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ЗапасыПереданные.Организация
//		|ИЗ
//		|	РегистрНакопления.ЗапасыПереданные КАК ЗапасыПереданные
//		|ГДЕ
//		|	ЗапасыПереданные.ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаКомиссионеру)"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'Регистр накопления ""Запасы переданные"" содержит информацию о передаче на комиссию! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияПередачаТоваровНаКомиссию()

//// Проверка на возможность снятия опции ПриемТоваровНаКомиссию.
////
//Функция ОтказСнятьФункциональнаяОпцияПриемТоваровНаКомиссию() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ЗапасыПринятые.Организация
//		|ИЗ
//		|	РегистрНакопления.ЗапасыПринятые КАК ЗапасыПринятые
//		|ГДЕ
//		|	ЗапасыПринятые.ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеОтКомитента)"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'Регистр накопления ""Запасы принятые"" содержит информацию о приеме на комиссию! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияПриемТоваровНаКомиссию()

//// Проверка на возможность снятия опции УчетРозничныхПродаж.
////
//Функция ОтказСнятьФункциональнаяОпцияУчетРозничныхПродаж() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос;
//	
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	СУММА(ЕСТЬNULL(РегистрыНакопления.КоличествоРегистраторов, 0)) КАК КоличествоРегистраторов
//	|ИЗ
//	|	(ВЫБРАТЬ
//	|		КОЛИЧЕСТВО(РегистрНакопления.Регистратор) КАК КоличествоРегистраторов
//	|	ИЗ
//	|		РегистрНакопления.ВыпускПродукции КАК РегистрНакопления
//	|	ГДЕ
//	|		РегистрНакопления.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
//	|	
//	|	ОБЪЕДИНИТЬ ВСЕ
//	|	
//	|	ВЫБРАТЬ
//	|		КОЛИЧЕСТВО(РегистрНакопления.Регистратор)
//	|	ИЗ
//	|		РегистрНакопления.ДоходыИРасходы КАК РегистрНакопления
//	|	ГДЕ
//	|		РегистрНакопления.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
//	|	
//	|	ОБЪЕДИНИТЬ ВСЕ
//	|	
//	|	ВЫБРАТЬ
//	|		КОЛИЧЕСТВО(РегистрНакопления.Регистратор)
//	|	ИЗ
//	|		РегистрНакопления.Запасы КАК РегистрНакопления
//	|	ГДЕ
//	|		РегистрНакопления.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
//	|	
//	|	ОБЪЕДИНИТЬ ВСЕ
//	|	
//	|	ВЫБРАТЬ
//	|		КОЛИЧЕСТВО(РегистрНакопления.Регистратор)
//	|	ИЗ
//	|		РегистрНакопления.ЗапасыНаСкладах КАК РегистрНакопления
//	|	ГДЕ
//	|		РегистрНакопления.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
//	|	
//	|	ОБЪЕДИНИТЬ ВСЕ
//	|	
//	|	ВЫБРАТЬ
//	|		КОЛИЧЕСТВО(РегистрНакопления.Регистратор)
//	|	ИЗ
//	|		РегистрНакопления.ДенежныеСредстваВКассахККМ КАК РегистрНакопления
//	|	
//	|	ОБЪЕДИНИТЬ ВСЕ
//	|	
//	|	ВЫБРАТЬ
//	|		КОЛИЧЕСТВО(РегистрНакопления.Регистратор)
//	|	ИЗ
//	|		РегистрНакопления.СуммовойУчетВРознице КАК РегистрНакопления
//	|	
//	|	ОБЪЕДИНИТЬ ВСЕ
//	|	
//	|	ВЫБРАТЬ
//	|		КОЛИЧЕСТВО(Справочник.Ссылка)
//	|	ИЗ
//	|		Справочник.СтруктурныеЕдиницы КАК Справочник
//	|	ГДЕ
//	|		(Справочник.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
//	|				ИЛИ Справочник.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет))) КАК РегистрыНакопления";
//	
//	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
//	
//	Если ВыборкаЗапроса.Следующий()
//		И ВыборкаЗапроса.КоличествоРегистраторов > 0 Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В базе есть движения или объекты, относящиеся к учету операций розничных продаж! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияУчетРозничныхПродаж()

//// Проверка на возможность снятия опции УчетПоНесколькимНаправлениямДеятельности.
////
//Функция ОтказСнятиеУчетПоНесколькимНаправлениямДеятельности() Экспорт
//	
//	ТекстОшибки = "";
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	ПрочееНаправление = Справочники.НаправленияДеятельности.Прочее;
//	ВыборкаНаправленияДеятельности = Справочники.НаправленияДеятельности.Выбрать();
//	Пока ВыборкаНаправленияДеятельности.Следующий() Цикл
//		
//		Если ВыборкаНаправленияДеятельности.Ссылка <> Справочники.НаправленияДеятельности.ОсновноеНаправление
//			И ВыборкаНаправленияДеятельности.Ссылка <> ПрочееНаправление Тогда
//			
//			МассивСсылок = Новый Массив;
//			МассивСсылок.Добавить(ВыборкаНаправленияДеятельности.Ссылка);
//			ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
//			
//			Если ТаблицаСсылок.Количество() > 0 Тогда
//				
//				ТекстОшибки = НСтр("ru = 'В базе используются направления деятельности, отличные от основного! Снятие опции запрещено!'");
//				Прервать;
//				
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	УстановитьПривилегированныйРежим(Ложь);
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятиеУчетПоНесколькимНаправлениямДеятельности()

//// Проверка на возможность снятия опции УчетПоНесколькимПодразделениям.
////
//Функция ОтказСнятиеУчетПоНесколькимПодразделениям() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	СтруктурныеЕдиницы.Ссылка
//		|ИЗ
//		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
//		|ГДЕ
//		|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = &ТипСтруктурнойЕдиницы
//		|	И СтруктурныеЕдиницы.Ссылка <> &ОсновноеПодразделение"
//	);
//	
//	Запрос.УстановитьПараметр("ТипСтруктурнойЕдиницы", Перечисления.ТипыСтруктурныхЕдиниц.Подразделение);
//	Запрос.УстановитьПараметр("ОсновноеПодразделение", Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В базе используются подразделения, отличные от основного! Снятие опции запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятиеУчетПоНесколькимПодразделениям()

//// Проверка на возможность снятия опции УчетВнеоборотныхАктивов.
////
//Функция ОтказСнятьФункциональнаяОпцияУчетВнеоборотныхАктивов() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ВнеоборотныеАктивы.Организация
//		|ИЗ
//		|	РегистрНакопления.ВнеоборотныеАктивы КАК ВнеоборотныеАктивы"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Отказ = НЕ РезультатЗапроса.Пустой();
//	
//	Если НЕ Отказ Тогда
//	
//		Запрос = Новый Запрос(
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	ВыработкаВнеоборотныхАктивов.Организация
//			|ИЗ
//			|	РегистрНакопления.ВыработкаВнеоборотныхАктивов КАК ВыработкаВнеоборотныхАктивов"
//		);
//		
//		РезультатЗапроса = Запрос.Выполнить();
//		Отказ = НЕ РезультатЗапроса.Пустой(); 
//		
//	КонецЕсли;
//	
//	Если Отказ Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В базе присутствуют движения по внеоборотным активам! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияУчетВнеоборотныхАктивов()

//// Процедура контроля снятия опции Использовать работы.
////
//Функция ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуРаботы() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ЗаказПокупателя.Ссылка
//	|ИЗ
//	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
//	|ГДЕ
//	|	ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)";
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В информационной базе присутствуют документы ""Заказ - наряд""! Снятие флага ""Работы"" запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуРаботы()

//// Процедура контроля снятия опции Использовать производство.
////
//Функция ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуПроизводство() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Отказ = Ложь;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ЗаказНаПроизводство.Ссылка
//	|ИЗ
//	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	СборкаЗапасов.Ссылка
//	|ИЗ
//	|	Документ.СборкаЗапасов КАК СборкаЗапасов
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ДокРаспределениеЗатрат.Ссылка
//	|ИЗ
//	|	Документ.РаспределениеЗатрат КАК ДокРаспределениеЗатрат
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ЗаказПокупателя.Ссылка
//	|ИЗ
//	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
//	|ГДЕ
//	|	ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	СдельныйНаряд.Ссылка
//	|ИЗ
//	|	Документ.СдельныйНаряд КАК СдельныйНаряд
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ПеремещениеПоЯчейкам.Ссылка
//	|ИЗ
//	|	Документ.ПеремещениеПоЯчейкам КАК ПеремещениеПоЯчейкам
//	|ГДЕ
//	|	ПеремещениеПоЯчейкам.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ПеремещениеЗапасов.Ссылка
//	|ИЗ
//	|	Документ.ПеремещениеЗапасов КАК ПеремещениеЗапасов
//	|ГДЕ
//	|	((ПеремещениеЗапасов.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
//	|				ИЛИ ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение))
//	|				И ПеремещениеЗапасов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.Перемещение)
//	|			ИЛИ ПеремещениеЗапасов.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты))
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ВводНачальныхОстатковВнеоборотныеАктивы.Ссылка
//	|ИЗ
//	|	Документ.ВводНачальныхОстатков.ВнеоборотныеАктивы КАК ВводНачальныхОстатковВнеоборотныеАктивы
//	|ГДЕ
//	|	(ВводНачальныхОстатковВнеоборотныеАктивы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
//	|			ИЛИ ВводНачальныхОстатковВнеоборотныеАктивы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ВводНачальныхОстатковЗапасы.Ссылка
//	|ИЗ
//	|	Документ.ВводНачальныхОстатков.Запасы КАК ВводНачальныхОстатковЗапасы
//	|ГДЕ
//	|	ВводНачальныхОстатковЗапасы.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ВводНачальныхОстатковПрямыеЗатраты.Ссылка
//	|ИЗ
//	|	Документ.ВводНачальныхОстатков.ПрямыеЗатраты КАК ВводНачальныхОстатковПрямыеЗатраты
//	|ГДЕ
//	|	ВводНачальныхОстатковПрямыеЗатраты.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ПринятиеКУчетуВАВнеоборотныеАктивы.Ссылка
//	|ИЗ
//	|	Документ.ПринятиеКУчетуВА.ВнеоборотныеАктивы КАК ПринятиеКУчетуВАВнеоборотныеАктивы
//	|ГДЕ
//	|	(ПринятиеКУчетуВАВнеоборотныеАктивы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
//	|			ИЛИ ПринятиеКУчетуВАВнеоборотныеАктивы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ОприходованиеЗапасов.Ссылка
//	|ИЗ
//	|	Документ.ОприходованиеЗапасов КАК ОприходованиеЗапасов
//	|ГДЕ
//	|	ОприходованиеЗапасов.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	БюджетОстатки.Ссылка
//	|ИЗ
//	|	Документ.Бюджет.Остатки КАК БюджетОстатки
//	|ГДЕ
//	|	(БюджетОстатки.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
//	|			ИЛИ БюджетОстатки.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	БюджетКосвенныеЗатраты.Ссылка
//	|ИЗ
//	|	Документ.Бюджет.КосвенныеЗатраты КАК БюджетКосвенныеЗатраты
//	|ГДЕ
//	|	(БюджетКосвенныеЗатраты.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
//	|			ИЛИ БюджетКосвенныеЗатраты.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
//	|			ИЛИ БюджетКосвенныеЗатраты.КоррСчет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
//	|			ИЛИ БюджетКосвенныеЗатраты.КоррСчет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	БюджетПрямыеЗатраты.Ссылка
//	|ИЗ
//	|	Документ.Бюджет.ПрямыеЗатраты КАК БюджетПрямыеЗатраты
//	|ГДЕ
//	|	(БюджетПрямыеЗатраты.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
//	|			ИЛИ БюджетПрямыеЗатраты.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
//	|			ИЛИ БюджетПрямыеЗатраты.КоррСчет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
//	|			ИЛИ БюджетПрямыеЗатраты.КоррСчет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	БюджетОперации.Ссылка
//	|ИЗ
//	|	Документ.Бюджет.Операции КАК БюджетОперации
//	|ГДЕ
//	|	(БюджетОперации.СчетДт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
//	|			ИЛИ БюджетОперации.СчетДт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
//	|			ИЛИ БюджетОперации.СчетКт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
//	|			ИЛИ БюджетОперации.СчетКт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ИзменениеПараметровВАВнеоборотныеАктивы.Ссылка
//	|ИЗ
//	|	Документ.ИзменениеПараметровВА.ВнеоборотныеАктивы КАК ИзменениеПараметровВАВнеоборотныеАктивы
//	|ГДЕ
//	|	(ИзменениеПараметровВАВнеоборотныеАктивы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
//	|			ИЛИ ИзменениеПараметровВАВнеоборотныеАктивы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	НачислениеЗарплатыНачисленияУдержания.Ссылка
//	|ИЗ
//	|	Документ.НачислениеЗарплаты.НачисленияУдержания КАК НачислениеЗарплатыНачисленияУдержания
//	|ГДЕ
//	|	(НачислениеЗарплатыНачисленияУдержания.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
//	|			ИЛИ НачислениеЗарплатыНачисленияУдержания.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	НачислениеНалоговНалоги.Ссылка
//	|ИЗ
//	|	Документ.НачислениеНалогов.Налоги КАК НачислениеНалоговНалоги
//	|ГДЕ
//	|	(НачислениеНалоговНалоги.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
//	|			ИЛИ НачислениеНалоговНалоги.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ОперацияПроводки.Ссылка
//	|ИЗ
//	|	Документ.Операция.Проводки КАК ОперацияПроводки
//	|ГДЕ
//	|	(ОперацияПроводки.СчетДт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
//	|			ИЛИ ОперацияПроводки.СчетДт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
//	|			ИЛИ ОперацияПроводки.СчетКт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
//	|			ИЛИ ОперацияПроводки.СчетКт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ПрочиеРасходыРасходы.Ссылка
//	|ИЗ
//	|	Документ.ПрочиеРасходы.Расходы КАК ПрочиеРасходыРасходы
//	|ГДЕ
//	|	(ПрочиеРасходыРасходы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
//	|			ИЛИ ПрочиеРасходыРасходы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	Номенклатура.Ссылка
//	|ИЗ
//	|	Справочник.Номенклатура КАК Номенклатура
//	|ГДЕ
//	|	(Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
//	|			ИЛИ Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
//	|			ИЛИ Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Производство))
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	СтруктурныеЕдиницы.Ссылка
//	|ИЗ
//	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
//	|ГДЕ
//	|	(СтруктурныеЕдиницы.ИсточникПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
//	|			ИЛИ СтруктурныеЕдиницы.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
//	|			ИЛИ СтруктурныеЕдиницы.ПолучательОтходов.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение))";
//	
//	МассивРезультатов = Запрос.ВыполнитьПакет();
//	
//	// 1. Документ Заказ на производство.
//	Если НЕ МассивРезультатов[0].Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В информационной базе присутствуют документы ""Заказ на производство""! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 2. Документ Производство.
//	Если НЕ МассивРезультатов[1].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Производство""! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 3. Документ Распределение затрат.
//	Если НЕ МассивРезультатов[2].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Распределение затрат""! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 4. Документ Заказ покупателя (Заказ на переработку).
//	Если НЕ МассивРезультатов[3].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Заказ покупателя"" с видом операции ""Заказ на переработку""! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 5. Документ Сдельный наряд.
//	Если НЕ МассивРезультатов[4].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Сдельный наряд""! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 6. Документ Перемещение по ячейкам (перемещение - подразделение).
//	Если НЕ МассивРезультатов[5].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Перемещение по ячейкам"", где структурная единица компании имеет тип Подразделение! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 7. Документ Перемещение запасов (подразделение, косвенные затраты).
//	Если НЕ МассивРезультатов[6].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Перемещение запасов"", где структурная единица компании имеет тип Подразделение и/или счет затрат имеет тип Косвенные затраты! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 8. Документ Ввод начальных остатков (подразделение, косвенные затраты).
//	Если НЕ МассивРезультатов[7].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Ввод начальных остатков"", где структурная единица компании имеет тип Подразделение  и/или счет затрат имеет тип Косвенные затраты или Незавершенное производство! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 9. Документ Принятие к учету имущества (незавершенное производство, косвенные затраты).
//	Если НЕ МассивРезультатов[8].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Принятие к учету имущества"", где счет затрат имеет тип Косвенные затраты или Незавершенное производство! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 10. Документ Оприходование запасов (подразделение).
//	Если НЕ МассивРезультатов[9].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Оприходование запасов"", где структурная единица компании имеет тип Подразделение! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 11. Документ Бюджет (незавершенное производство, косвенные затраты).
//	Если НЕ МассивРезультатов[10].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Бюджет"", где счета затрат имеют тип Косвенные затраты или Незавершенное производство! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 12. Документ Изменение параметров ВА (незавершенное производство, косвенные затраты).
//	Если НЕ МассивРезультатов[11].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Изменение параметров имущества"", где счет затрат имеет тип Косвенные затраты или Незавершенное производство! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 13. Документ Начисление зарплаты (незавершенное производство, косвенные затраты).
//	Если НЕ МассивРезультатов[12].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Начисление зарплаты"", где счет затрат имеет тип Косвенные затраты или Незавершенное производство! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 14. Документ Начисление налогов (незавершенное производство, косвенные затраты).
//	Если НЕ МассивРезультатов[13].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Начисление налогов"", где счет затрат имеет тип Косвенные затраты или Незавершенное производство! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 15. Документ Операция (незавершенное производство, косвенные затраты).
//	Если НЕ МассивРезультатов[14].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Операция"", где счет затрат имеет тип Косвенные затраты или Незавершенное производство! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 16. Документ Прочие расходы (незавершенное производство, косвенные затраты).
//	Если НЕ МассивРезультатов[15].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Прочие затраты (расходы)"", где счет затрат имеет тип Косвенные затраты или Незавершенное производство! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 17. Справочник Номенклатура (незавершенное производство, косвенные затраты).
//	Если НЕ МассивРезультатов[16].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют элементы справочника ""Номенклатура"", где счет учета затрат имеет тип Косвенные затраты, Незавершенное производство или способ пополнения запаса Производство! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 18. Справочник Структурные единицы (подразделение).
//	Если НЕ МассивРезультатов[17].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют элементы справочника ""Структурная единица"", где параметр автоперемещения (перемещение, комплектация) имеет тип Подразделение! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	Если ПустаяСтрока(ТекстОшибки) Тогда
//		
//		ТекстОшибки = ПроверитьДвиженияПоРегистрамПодсистемыПроизводство();
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуПроизводство()

//// Процедура контроля снятия опции Использовать производство по регистрам.
////
//Функция ПроверитьДвиженияПоРегистрамПодсистемыПроизводство()
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	Запасы.Организация
//	|ИЗ
//	|	РегистрНакопления.Запасы КАК Запасы
//	|ГДЕ
//	|	(Запасы.СчетУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
//	|			ИЛИ Запасы.СчетУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты))
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ЗапасыПринятые.Организация
//	|ИЗ
//	|	РегистрНакопления.ЗапасыПринятые КАК ЗапасыПринятые
//	|ГДЕ
//	|	ЗапасыПринятые.ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеВПереработку)";
//	
//	МассивРезультатов = Запрос.ВыполнитьПакет();
//	
//	// 1. Регистра Запасы.
//	Если НЕ МассивРезультатов[0].Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В информационной базе присутствуют движения по регистру ""Запасы"", где счет учета имеет тип Косвенные затраты или Незавершенное производство! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 2. Регистр Запасы принятые.
//	Если НЕ МассивРезультатов[1].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'Регистр накопления ""Запасы принятые"" содержит информацию о приеме в переработку! Снятие флага ""Производство"" запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ПроверитьДвиженияПоРегистрамПодсистемыПроизводство()

//// Проверка на возможность снятия опции ПереработкаДавальческогоСырья.
////
//Функция ОтказСнятьФункциональнаяОпцияПереработкаДавальческогоСырья() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ЗапасыПринятые.Организация
//		|ИЗ
//		|	РегистрНакопления.ЗапасыПринятые КАК ЗапасыПринятые
//		|ГДЕ
//		|	ЗапасыПринятые.ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеВПереработку)"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'Регистр накопления ""Запасы принятые"" содержит информацию о приеме в переработку! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияПереработкаДавальческогоСырья()

//// Проверка на возможность снятия опции ИспользоватьТехоперации.
////
//Функция ОтказСнятьФункциональнаяОпцияИспользоватьТехоперации() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	СдельныеНаряды.Операция
//		|ИЗ
//		|	РегистрНакопления.СдельныеНаряды КАК СдельныеНаряды"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//		
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В базе присутствует информация о загрузке рабочих центров или документы вида ""Сдельный наряд""! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Запрос.Текст = "Выбрать Первые 1 * Из Справочник.Номенклатура КАК СпрНоменклатура  Где СпрНоменклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Операция)";
//	
//	РезультатЗапроса = Запрос.Выполнить();
//		
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + 
//			НСтр("ru = 'В базе присутствует номенклатура с типом ""Операция""! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьТехоперации()

//// Процедура контроля снятия опции Использовать зарплату по регистрам.
////
//Функция ПроверитьДвиженияПоРегистрамПодсистемыЗарплата() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	НачисленияИУдержания.Организация
//	|ИЗ
//	|	РегистрНакопления.НачисленияИУдержания КАК НачисленияИУдержания
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	РасчетыСПерсоналом.Организация
//	|ИЗ
//	|	РегистрНакопления.РасчетыСПерсоналом КАК РасчетыСПерсоналом";
//	
//	МассивРезультатов = Запрос.ВыполнитьПакет();
//	
//	// 1. Регистра Начисления и удержания.
//	Если НЕ МассивРезультатов[0].Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В информационной базе присутствуют движения по регистру ""Начисления и удержания""! Снятие флага ""Зарплата"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 2. Регистр Расчеты с персоналом.
//	Если НЕ МассивРезультатов[1].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют движения по регистру ""Расчеты с персоналом""! Снятие флага ""Зарплата"" запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ПроверитьДвиженияПоРегистрамПодсистемыЗарплата()

//// Процедура контроля снятия опции Использовать зарплату по документам и справочникам.
////
//Функция ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуЗарплата() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	НачислениеЗарплаты.Ссылка
//	|ИЗ
//	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	НачисленияИУдержания.Организация,
//	|	СдельныйНаряд.Ссылка
//	|ИЗ
//	|	РегистрНакопления.НачисленияИУдержания КАК НачисленияИУдержания
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СдельныйНаряд КАК СдельныйНаряд
//	|		ПО НачисленияИУдержания.Регистратор = СдельныйНаряд.Ссылка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ЗаказПокупателяИсполнители.Сотрудник
//	|ИЗ
//	|	Документ.ЗаказПокупателя.Исполнители КАК ЗаказПокупателяИсполнители
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ВводНачальныхОстатков.Ссылка
//	|ИЗ
//	|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
//	|ГДЕ
//	|	ВводНачальныхОстатков.РазделУчета = &РазделУчета
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	РасходИзКассы.Ссылка
//	|ИЗ
//	|	Документ.РасходИзКассы КАК РасходИзКассы
//	|ГДЕ
//	|	(РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Зарплата)
//	|			ИЛИ РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику))
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	РасходСоСчета.Ссылка
//	|ИЗ
//	|	Документ.РасходСоСчета КАК РасходСоСчета
//	|ГДЕ
//	|	(РасходСоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСоСчета.Зарплата)
//	|			ИЛИ РасходСоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику))
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	Сотрудники.Ссылка
//	|ИЗ
//	|	Справочник.Сотрудники КАК Сотрудники
//	|ГДЕ
//	|	Сотрудники.ТипЗанятости = ЗНАЧЕНИЕ(Перечисление.ТипыЗанятости.Совместительство)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ВидыНачисленийИУдержаний.Ссылка
//	|ИЗ
//	|	Справочник.ВидыНачисленийИУдержаний КАК ВидыНачисленийИУдержаний
//	|ГДЕ
//	|	ВидыНачисленийИУдержаний.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Налог)
//	|		И НЕ ВидыНачисленийИУдержаний.Предопределенный";
//	
//	Запрос.УстановитьПараметр("РазделУчета", "Расчеты с персоналом");
//	
//	МассивРезультатов = Запрос.ВыполнитьПакет();
//	
//	// 1. Документ Начисление зарплаты.
//	Если НЕ МассивРезультатов[0].Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В информационной базе присутствуют документы ""Начисление зарплаты""! Снятие флага ""Зарплата"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 2. Документ Сдельный наряд.
//	Если НЕ МассивРезультатов[1].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Сдельный наряд"", которые начисляют зарплату сотрудникам! Снятие флага ""Зарплата"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 3. Документ Заказ - наряд.
//	Если НЕ МассивРезультатов[2].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Заказ - наряд"", которые начисляют зарплату сотрудникам! Снятие флага ""Зарплата"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 4. Документ Ввод начальных остатков.
//	Если НЕ МассивРезультатов[3].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) +  НСтр("ru = 'В информационной базе присутствуют документы ""Ввод начальных остатвков"", по разделу учета ""Расчеты с персоналом""! Снятие флага ""Зарплата"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 5. Документ Расход из кассы.
//	Если НЕ МассивРезультатов[4].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Расход из кассы"", с видом операции ""Зарплата по ведомости"" и/или ""Зарплата сотруднику""! Снятие флага ""Зарплата"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 6. Документ Расход со счета.
//	Если НЕ МассивРезультатов[5].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют документы ""Расод со счета"", с видом операции ""Зарплата""! Снятие флага ""Зарплата"" запрещено!'");
//		
//	КонецЕсли;
//	
//	// 7. Справочник Сотрудники.
//	Если НЕ МассивРезультатов[6].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе есть сотрудники с типом занятости ""Совместительство""! Снятие флага ""Зарплата"" запрещено!'");	
//		
//	КонецЕсли;
//	
//	// 8. Справочник Виды начислений и удержаний.
//	Если НЕ МассивРезультатов[7].Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В информационной базе присутствуют элементы справочника ""Виды начислений и удержаний"" с типом ""Налог""! Снятие флага ""Зарплата"" запрещено!'");
//		
//	КонецЕсли;
//	
//	Если ПустаяСтрока(ТекстОшибки) Тогда
//		
//		ТекстОшибки = ПроверитьДвиженияПоРегистрамПодсистемыЗарплата();
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуЗарплата()

//// Проверка на возможность снятия опции ИспользоватьСовместительство.
////
//Функция ОтказСнятьФункциональнаяОпцияИспользоватьСовместительство() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	Сотрудники.Ссылка
//	|ИЗ
//	|	Справочник.Сотрудники КАК Сотрудники
//	|ГДЕ
//	|	Сотрудники.ТипЗанятости = ЗНАЧЕНИЕ(Перечисление.ТипыЗанятости.Совместительство)";
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В базе есть сотрудники с типом занятости ""Совместительство""! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьСовместительство()

//// Проверка на возможность снятия опции ВестиУчетНалогаНаДоходыИВзносов.
////
//Функция ОтказСнятьФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ВидыНачисленийИУдержаний.Ссылка
//		|ИЗ
//		|	Справочник.ВидыНачисленийИУдержаний КАК ВидыНачисленийИУдержаний
//		|ГДЕ
//		|	ВидыНачисленийИУдержаний.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Налог)
//		|	И НЕ ВидыНачисленийИУдержаний.Предопределенный");
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В базе присутствуют элементы справочника ""Виды начислений и удержаний"" с типом ""Налог""! Снятие флага запрещено!'");	
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов()

//Функция ОтказСнятьФункциональнаяОпцияИспользоватьДисконтныеКарты() Экспорт
//	
//	ТекстОшибки = "";
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	ВыборкаДисконтныеКарты = Справочники.ДисконтныеКарты.Выбрать();
//	Пока ВыборкаДисконтныеКарты.Следующий() Цикл
//		
//		МассивСсылок = Новый Массив;
//		МассивСсылок.Добавить(ВыборкаДисконтныеКарты.Ссылка);
//		ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
//		
//		Если ТаблицаСсылок.Количество() > 0 Тогда
//			
//			ТекстОшибки = НСтр("ru = 'В базе используются дисконтные карты! Снятие опции запрещено!'");
//			Прервать;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	УстановитьПривилегированныйРежим(Ложь);
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции

//Функция ОтказСнятьФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки() Экспорт
//	
//	ТекстОшибки = "";
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Если Константы.ФункциональнаяОпцияИспользоватьДисконтныеКарты.Получить() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'Включено использование дисконтных карт! Снятие опции запрещено!'");
//		
//	КонецЕсли;
//	
//	ВыборкаАвтоматическиеСкидки = Справочники.АвтоматическиеСкидки.Выбрать();
//	Пока ВыборкаАвтоматическиеСкидки.Следующий() Цикл
//		
//		МассивСсылок = Новый Массив;
//		МассивСсылок.Добавить(ВыборкаАвтоматическиеСкидки.Ссылка);
//		ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
//		
//		Если ТаблицаСсылок.Количество() > 0 Тогда
//			
//			ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В базе используются виды автоматических скидок, наценок! Снятие опции запрещено!'");
//			Прервать;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	УстановитьПривилегированныйРежим(Ложь);
//	
//	МассивВидовДокументов = Новый Массив;
//	МассивВидовДокументов.Добавить("Документ.АктВыполненныхРабот.РаботыИУслуги");
//	МассивВидовДокументов.Добавить("Документ.ЗаказПокупателя.Запасы");
//	МассивВидовДокументов.Добавить("Документ.ЗаказПокупателя.Работы");
//	МассивВидовДокументов.Добавить("Документ.ОтчетОРозничныхПродажах.Запасы");
//	МассивВидовДокументов.Добавить("Документ.РасходнаяНакладная.Запасы");
//	МассивВидовДокументов.Добавить("Документ.СчетНаОплату.Запасы");
//	МассивВидовДокументов.Добавить("Документ.ЧекККМ.Запасы");
//	МассивВидовДокументов.Добавить("Документ.ЧекККМВозврат.Запасы");
//	МассивВидовДокументов.Добавить("Документ.ОтчетОПереработке.Продукция");
//	
//	ШаблонЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1 ТЧ_Документа.Ссылка ИЗ &ТабличнаяЧастьДокумента КАК ТЧ_Документа ГДЕ ТЧ_Документа.ПроцентАвтоматическойСкидки <> 0";
//	
//	Запрос = Новый Запрос;
//	
//	Для каждого ЭлементМассива Из МассивВидовДокументов Цикл
//		
//		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
//			
//			Запрос.Текст = Запрос.Текст + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
//			
//		КонецЕсли;
//		
//		Запрос.Текст = Запрос.Текст + СтрЗаменить(ШаблонЗапроса, "&ТабличнаяЧастьДокумента", ЭлементМассива);
//		
//	КонецЦикла;
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В документах используются автоматические скидки и наценки! Снятие опции запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции

//// Если есть остатки движения по регистру накопления РасчетыПоЭквайрингу, то менять значение флага нельзя.
//// Если установлен флаг "Кассовый метод учета доходов и расходов", то опция должна быть установлена.
////
//Функция ОтказСнятьФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Если ПолучитьФункциональнуюОпцию("КассовыйМетодУчетаДоходовИРасходов") Тогда
//		ТекстОшибки = НСтр("ru = 'При установленной опции ""Кассовый метод учета доходов и расходов"" снятие опции запрещено!'");
//	КонецЕсли;
//	
//	Если РегистрыНакопления.РасчетыПоЭквайрингу.ЕстьДвиженияПоЭквайрингу() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'Регистр накопления ""Расчеты по эквайрингу"" содержит информацию об эквайринговых операциях! Изменение флага запрещено!
//		|Выполнить анализ можно в отчете ""Расчеты по эквайрингу (сводно)"" с детализацией до регистратора. Отчет вызывается из раздела ""Деньги"".'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции

//// Если есть остатки движения по регистру накопления РасчетыПоЭквайрингу, то менять значение флага нельзя.
//// Если установлен флаг "Кассовый метод учета доходов и расходов", то опция должна быть установлена.
////
//Функция ОтказСнятьФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Если ПолучитьФункциональнуюОпцию("КассовыйМетодУчетаДоходовИРасходов") Тогда
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'При установленной опции ""Кассовый метод учета доходов и расходов"" снятие опции запрещено!'");
//	КонецЕсли;
//	
//	Если РегистрыНакопления.РасчетыПоЭквайрингу.ЕстьДвиженияПоЭквайрингу() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'Регистр накопления ""Расчеты по эквайрингу"" содержит информацию об эквайринговых операциях! Изменение флага запрещено!
//		|Выполнить анализ можно в отчете ""Расчеты по эквайрингу (сводно)"" с детализацией до регистратора. Отчет вызывается из раздела ""Деньги"".'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции

//// Если есть остатки движения по регистру накопления РасчетыПоЭквайрингу, то менять значение флага нельзя.
//// Если установлен флаг "Кассовый метод учета доходов и расходов", то опция должна быть установлена.
////
//Функция ОтказСнятьФункциональнаяОпцияКредитыИЗаймы() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Если РегистрыНакопления.РасчетыПоКредитамИЗаймам.ЕстьРасчетыПоКредитамИЗаймам() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'Регистр накопления ""Расчеты по кредитам и займам"" содержит информацию! Изменение флага запрещено!
//		|Выполнить анализ можно в отчетах ""Займы сотрудникам"" и ""Кредиты (полученные)"". Отчет вызывается из раздела ""Деньги"".'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции

//// Проверка на возможность снятия опции ИспользоватьЗаказыВРозничнойТорговле.
////
//Функция ОтказСнятьФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговле() Экспорт
//	
//	ТекстОшибки = "";
//	
//	МассивВидовДокументов = Новый Массив;
//	МассивВидовДокументов.Добавить("Документ.ОтчетОРозничныхПродажах.Запасы");
//	МассивВидовДокументов.Добавить("Документ.ЧекККМ.Запасы");
//	МассивВидовДокументов.Добавить("Документ.ЧекККМВозврат.Запасы");
//	
//	ШаблонЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1 ТЧ_Документа.Ссылка ИЗ &ТабличнаяЧастьДокумента КАК ТЧ_Документа ГДЕ ТЧ_Документа.Заказ Ссылка Документ.ЗаказПокупателя И ТЧ_Документа.Заказ <> Значение(Документ.ЗаказПокупателя.ПустаяСсылка)";
//	
//	Запрос = Новый Запрос;
//	
//	Для каждого ЭлементМассива Из МассивВидовДокументов Цикл
//		
//		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
//			
//			Запрос.Текст = Запрос.Текст + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
//			
//		КонецЕсли;
//		
//		Запрос.Текст = Запрос.Текст + СтрЗаменить(ШаблонЗапроса, "&ТабличнаяЧастьДокумента", ЭлементМассива);
//		
//	КонецЦикла;
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр("ru = 'В розничных документах используются заказы покупателей! Снятие опции запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции

//// Проверка на возможность снятия опции ИспользоватьРемонты.
////
//Функция ОтказСнятьФункциональнаяОпцияИспользоватьРемонты() Экспорт
//	
//	ТекстОшибки = "";
//	ЕстьДвижения = Ложь;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ЗапасыВРемонте.Регистратор
//	|ИЗ
//	|	РегистрНакопления.ЗапасыВРемонте КАК ЗапасыВРемонте";
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		ЕстьДвижения = Истина;
//	КонецЕсли;
//	
//	Если ЕстьДвижения Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В базе есть остатки по товарам в ремонте! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьРемонты()

//Функция ОтказСнятьИспользоватьНесколькоОрганизаций() Экспорт
//	
//	ТекстОшибки = "";
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	Организации.Ссылка КАК Организация
//		|ИЗ
//		|	Справочник.Организации КАК Организации
//		|ГДЕ
//		|	Организации.Ссылка <> &ОсновнаяОрганизация";
//	
//	Запрос.УстановитьПараметр("ОсновнаяОрганизация", Справочники.Организации.ОрганизацияПоУмолчанию());
//	
//	Если Не Запрос.Выполнить().Пустой() Тогда
//		ТекстОшибки = НСтр("ru='В базе есть организации помимо основной. Для выключения опции необходимо удалить все кроме основной.'");
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции

//Функция ЕстьДвиженияПоДругимОрганизациям(ПроверяемаяОрганизация) Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	ПорцияДляПроверки = 3;
//	Счетчик = 0;
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("ПроверяемаяОрганизация", ПроверяемаяОрганизация);
//	
//	ШаблонОбъединения = 
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ВнеоборотныеАктивы_1.Организация
//		|ИЗ
//		|	РегистрНакопления.ВнеоборотныеАктивы КАК ВнеоборотныеАктивы_1
//		|ГДЕ
//		|	ВнеоборотныеАктивы_1.Организация <> &ПроверяемаяОрганизация";
//		
//	Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл
//		
//		Если РегистрНакопления.Измерения.Найти("Организация") = Неопределено
//			Или РегистрНакопления = РегистрыНакопления.СдельныеНаряды Тогда
//			
//			Продолжить;
//		КонецЕсли;
//		
//		Счетчик = Счетчик + 1;
//		
//		Если Запрос.Текст <> "" Тогда
//			Запрос.Текст = Запрос.Текст + "
//				|
//				|ОБЪЕДИНИТЬ ВСЕ
//				|
//				|";
//			
//		КонецЕсли;
//		
//		ТекстОбъединения = СтрЗаменить(ШаблонОбъединения, "_1", "_" + Счетчик); // Для избежания ошибки неоднозначности полей
//		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "ВнеоборотныеАктивы", РегистрНакопления.Имя);
//		
//		Запрос.Текст = Запрос.Текст + ТекстОбъединения;
//		
//		Если Счетчик = ПорцияДляПроверки Тогда
//			Счетчик = 0;
//			Если Не Запрос.Выполнить().Пустой() Тогда
//				Возврат Истина;
//			КонецЕсли;
//			Запрос.Текст = "";
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Возврат Ложь;
//	
//КонецФункции

//Функция ОтказСнятьУчетПоКомпании() Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	ПорцияДляПроверки = 3;
//	Счетчик = 0;
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("ПроверяемаяОрганизация", Справочники.Организации.ОрганизацияКомпания());
//	
//	ШаблонОбъединения = 
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	АвансовыйОтчет_1.Организация
//		|ИЗ
//		|	Документ.АвансовыйОтчет КАК АвансовыйОтчет_1
//		|ГДЕ
//		|	АвансовыйОтчет_1.Организация <> &ПроверяемаяОрганизация";
//	
//	Для Каждого Документ Из Метаданные.Документы Цикл
//		
//		Если Документ.Реквизиты.Найти("Организация") = Неопределено
//			Или Документ.Проведение <> Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
//			
//			Продолжить;
//		КонецЕсли;
//		
//		Счетчик = Счетчик + 1;
//		
//		Если Запрос.Текст <> "" Тогда
//			Запрос.Текст = Запрос.Текст + "
//				|
//				|ОБЪЕДИНИТЬ ВСЕ
//				|
//				|";
//			
//		КонецЕсли;
//		
//		ТекстОбъединения = СтрЗаменить(ШаблонОбъединения, "_1", "_" + Счетчик); // Для избежания ошибки неоднозначности полей
//		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "АвансовыйОтчет", Документ.Имя);
//		
//		Запрос.Текст = Запрос.Текст + ТекстОбъединения;
//		
//		Если Счетчик = ПорцияДляПроверки Тогда
//			Счетчик = 0;
//			Если Не Запрос.Выполнить().Пустой() Тогда
//				Возврат НСтр("ru='В базе есть проведенные документы по организации, отличной от компании. Для выключения опции необходимо изменить организацию в таких документах.'");
//			КонецЕсли;
//			Запрос.Текст = "";
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Возврат "";
//	
//КонецФункции

//Функция ОтказСнятьФункциональнаяОпцияИспользоватьВидыЗаказовПокупателей() Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ВидыЗаказовПокупателей.Ссылка
//		|ИЗ
//		|	Справочник.ВидыЗаказовПокупателей КАК ВидыЗаказовПокупателей
//		|ГДЕ
//		|	ВидыЗаказовПокупателей.Предопределенный = ЛОЖЬ"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'Для выключения опции необходимо удалить все виды заказов покупателей кроме основного.'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции

//Функция ОтказСнятьФункциональнаяОпцияИспользоватьВидыЗаказНарядов() Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ВидыЗаказНарядов.Ссылка
//		|ИЗ
//		|	Справочник.ВидыЗаказНарядов КАК ВидыЗаказНарядов
//		|ГДЕ
//		|	ВидыЗаказНарядов.Предопределенный = ЛОЖЬ"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'Для выключения опции необходимо удалить все виды заказ-нарядов кроме основного.'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции

//// Если есть остатки движения по регистру накопления РасчетыПоЭквайрингу, то менять значение флага нельзя.
//// Если установлен флаг "Кассовый метод учета доходов и расходов", то опция должна быть установлена.
////
//Функция ОтказСнятьФункциональнаяИспользоватьСтатьиДвиженияДенежныхСредств() Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ПоступлениеВКассуРасшифровкаПлатежа.СтатьяДДС
//		|ИЗ
//		|	Документ.ПоступлениеВКассу.РасшифровкаПлатежа КАК ПоступлениеВКассуРасшифровкаПлатежа
//		|ГДЕ
//		|	ПоступлениеВКассуРасшифровкаПлатежа.Ссылка.Проведен
//		|	И ПоступлениеВКассуРасшифровкаПлатежа.СтатьяДДС <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ПоступлениеНаСчетРасшифровкаПлатежа.СтатьяДДС
//		|ИЗ
//		|	Документ.ПоступлениеНаСчет.РасшифровкаПлатежа КАК ПоступлениеНаСчетРасшифровкаПлатежа
//		|ГДЕ
//		|	ПоступлениеНаСчетРасшифровкаПлатежа.Ссылка.Проведен
//		|	И ПоступлениеНаСчетРасшифровкаПлатежа.СтатьяДДС <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ ПЕРВЫЕ 1
//		|	РасходИзКассыРасшифровкаПлатежа.СтатьяДДС
//		|ИЗ
//		|	Документ.РасходИзКассы.РасшифровкаПлатежа КАК РасходИзКассыРасшифровкаПлатежа
//		|ГДЕ
//		|	РасходИзКассыРасшифровкаПлатежа.Ссылка.Проведен
//		|	И РасходИзКассыРасшифровкаПлатежа.СтатьяДДС <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ ПЕРВЫЕ 1
//		|	РасходСоСчетаРасшифровкаПлатежа.СтатьяДДС
//		|ИЗ
//		|	Документ.РасходСоСчета.РасшифровкаПлатежа КАК РасходСоСчетаРасшифровкаПлатежа
//		|ГДЕ
//		|	РасходСоСчетаРасшифровкаПлатежа.Ссылка.Проведен
//		|	И РасходСоСчетаРасшифровкаПлатежа.СтатьяДДС <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'Для выключения опции необходимо очистить статью ДДС в табличной части всех документов следующих видов:
//			|Поступление в кассу, Поступление на счет, Расход со счета и Расход из кассы.'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;

//КонецФункции

//Функция ОтказСнятьФункциональнаяОпцияИспользоватьПодключаемоеОборудование() Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
//		|	КассыККМ.Ссылка КАК Ссылка
//		|ИЗ
//		|	Справочник.КассыККМ КАК КассыККМ
//		|ГДЕ
//		|	НЕ КассыККМ.ИспользоватьБезПодключенияОборудования
//		|	И КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ЭквайринговыеТерминалы.Ссылка
//		|ИЗ
//		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
//		|ГДЕ
//		|	НЕ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'Для выключения опции необходимо установить флаг ""Без подключения""
//			|во всех элементах справочников ""Кассы ККМ"" и ""Эквайринговые терминалы"" (раздел ""Компания"" - ""Все справочники"").'");
//		
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции

//Функция ОтказСнятьФункциональнаяОпцияНесколькоВариантовКП() Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ЗаказПокупателя.Ссылка
//		|ИЗ
//		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
//		|ГДЕ
//		|	ЗаказПокупателя.КоличествоВариантовКП > 0"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		ТекстОшибки = НСтр("ru = 'Для выключения опции необходимо удалить все заказы содержащие несколько вариантов КП.'");
//	КонецЕсли;
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции

//// Проверка на возможность снятия опции РазрешитьСкладыВТабличныхЧастях.
////
//Функция ОтказСнятиеРазрешитьСкладыВТабличныхЧастях() Экспорт
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ПриходнаяНакладная.Ссылка КАК Ссылка
//	|ИЗ
//	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
//	|ГДЕ
//	|	ПриходнаяНакладная.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	РасходнаяНакладная.Ссылка
//	|ИЗ
//	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
//	|ГДЕ
//	|	РасходнаяНакладная.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ЗаказНаПроизводство.Ссылка
//	|ИЗ
//	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
//	|ГДЕ
//	|	ЗаказНаПроизводство.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	СборкаЗапасов.Ссылка
//	|ИЗ
//	|	Документ.СборкаЗапасов КАК СборкаЗапасов
//	|ГДЕ
//	|	СборкаЗапасов.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат "";
//	КонецЕсли;
//	
//	Возврат НСтр("ru = 'В базе используются склады в табличной части! Снятие опции запрещено!'");
//	
//КонецФункции

//// Проверка на возможность снятия опции ИспользоватьХарактеристики.
////
//Функция ОтказСнятьФункциональнаяОпцияИспользоватьНаборы() Экспорт
//	
//	ТекстОшибки = "";
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	Номенклатура.Ссылка КАК Ссылка
//	|ИЗ
//	|	Справочник.Номенклатура КАК Номенклатура
//	|ГДЕ
//	|	Номенклатура.ЭтоНабор";
//	Если НЕ Запрос.Выполнить().Пустой() Тогда
//		
//		ТекстОшибки = НСтр("ru = 'В базе есть номенклатура с установленным признаком набора! Снятие флага запрещено!'");
//		
//	КонецЕсли; 
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьХарактеристики()

//Функция ОтказСнятьФункциональнаяОпцияИспользоватьПодарочныеСертификаты() Экспорт
//	
//	ТекстОшибки = "";
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	Номенклатура.Ссылка КАК Ссылка
//	|ИЗ
//	|	Справочник.Номенклатура КАК Номенклатура
//	|ГДЕ
//	|	Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)");
//	
//	РезультатЗапроса = Запрос.Выполнить();
//		
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + 
//			НСтр("ru = 'В базе присутствует номенклатура с типом ""Подарочный сертификат""! Снятие флага запрещено!'");
//		
//	КонецЕсли;
//	
//	УстановитьПривилегированныйРежим(Ложь);
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции

//Функция ОтказИзменитьКонтрагентДляПредоплаты() Экспорт
//	
//	ТекстОшибки = "";
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ПодарочныеСертификаты.Период КАК Период
//	|ИЗ
//	|	РегистрНакопления.ПодарочныеСертификаты КАК ПодарочныеСертификаты");
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если Не РезультатЗапроса.Пустой() Тогда
//		
//		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + 
//			НСтр("ru = 'В базе присутствуют движения по подарочным сертификатам! Смена контрагента запрещена!'");
//		
//	КонецЕсли;
//	
//	УстановитьПривилегированныйРежим(Ложь);
//	
//	Возврат ТекстОшибки;
//	
//КонецФункции

//// Проверка на возможность снятия опции ИспользоватьЭтапыПроизводства.
////
//Функция ОтказСнятиеФункциональнаяОпцияИспользоватьЭтапыПроизводства() Экспорт
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	Спецификации.ВидПроизводства КАК ВидПроизводства
//	|ИЗ
//	|	Справочник.Спецификации КАК Спецификации
//	|ГДЕ
//	|	Спецификации.ВидПроизводства <> ЗНАЧЕНИЕ(Справочник.ВидыПроизводства.ПустаяСсылка)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	СборкаЗапасовВыполненныеЭтапы.Этап
//	|ИЗ
//	|	Документ.СборкаЗапасов.ВыполненныеЭтапы КАК СборкаЗапасовВыполненныеЭтапы"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат "";
//	КонецЕсли;
//	
//	Возврат НСтр("ru = 'В базе используются этапы производства! Снятие опции запрещено!'");
//	
//КонецФункции

//// Проверка на возможность снятия опции ИспользоватьРезервированиеДенежныхСредств.
////
//Функция ОтказСнятьФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств() Экспорт
//	
//	ТекстСообщения = "";
//	
//	Запрос = Новый Запрос(
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ДенежныеСредстваВРезерве.БанковскийСчетКасса КАК БанковскийСчетКасса
//		|ИЗ
//		|	РегистрНакопления.ДенежныеСредстваВРезерве КАК ДенежныеСредстваВРезерве
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ ПЕРВЫЕ 1
//		|	НеснижаемыеОстаткиДенежныхСредств.БанковскийСчетКасса
//		|ИЗ
//		|	РегистрСведений.НеснижаемыеОстаткиДенежныхСредств КАК НеснижаемыеОстаткиДенежныхСредств"
//	);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		ТекстСообщения = НСтр("ru = 'В базе созданы документы резервирования денег либо установлены неснижаемые остатки. Изменение настройки невозможно!'");
//	КонецЕсли;
//	
//	Возврат ТекстСообщения;
//	
//КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств()

//#КонецОбласти

//#Область НастройкиЦентраМониторинга

//Функция ПолучитьПереключательОтправкиДанных() Экспорт
//	
//	ПараметрыЦентраМониторинга = ПолучитьПараметрыЦентраМониторинга();
//	
//	Состояние = ?(ПараметрыЦентраМониторинга.ВключитьЦентрМониторинга, "1", "0") + ?(ПараметрыЦентраМониторинга.ЦентрОбработкиИнформацииОПрограмме, "1", "0");
//	
//	Если Состояние = "00" Тогда
//		Результат = 2;
//	ИначеЕсли Состояние = "01" Тогда
//		Результат = 1;
//	ИначеЕсли Состояние = "10" Тогда
//		Результат = 0;
//	ИначеЕсли Состояние = "11" Тогда
//		// А такого быть не может...
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

//Процедура УстановитьПереключательОтправкиДанных(НовоеЗначение) Экспорт
//	
//	Если НовоеЗначение = 2 Тогда
//		ПараметрыЦентраМониторингаЗапись = Новый Структура("ВключитьЦентрМониторинга, ЦентрОбработкиИнформацииОПрограмме", Ложь, Ложь);
//	ИначеЕсли НовоеЗначение = 1 Тогда
//		ПараметрыЦентраМониторингаЗапись = Новый Структура("ВключитьЦентрМониторинга, ЦентрОбработкиИнформацииОПрограмме", Ложь, Истина);
//	ИначеЕсли НовоеЗначение = 0 Тогда
//		ПараметрыЦентраМониторингаЗапись = Новый Структура("ВключитьЦентрМониторинга, ЦентрОбработкиИнформацииОПрограмме", Истина, Ложь);
//	КонецЕсли;
//	
//	МодульЦентрМониторингаСлужебный = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторингаСлужебный");
//	МодульЦентрМониторингаСлужебный.УстановитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыЦентраМониторингаЗапись);
//	
//	Если НовоеЗначение = 0 Тогда
//		РегЗадание = МодульЦентрМониторингаСлужебный.ПолучитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики", Истина);
//		МодульЦентрМониторингаСлужебный.УстановитьРасписаниеПоУмолчаниюВнешнийВызов(РегЗадание);
//	ИначеЕсли НовоеЗначение = 1 Тогда
//		РегЗадание = МодульЦентрМониторингаСлужебный.ПолучитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики", Истина);
//		МодульЦентрМониторингаСлужебный.УстановитьРасписаниеПоУмолчаниюВнешнийВызов(РегЗадание);
//	ИначеЕсли НовоеЗначение = 2 Тогда
//		МодульЦентрМониторингаСлужебный.УдалитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики");
//	КонецЕсли;
//	
//КонецПроцедуры

//Функция ПолучитьАдресСервисаЦентраМониторинга() Экспорт
//	
//	ПараметрыСервиса = Новый Структура("Сервер, АдресРесурса, Порт");
//	ПараметрыЦентраМониторинга = ПолучитьПараметрыЦентраМониторинга();
//	ЦентрМониторингаРазрешитьОтправлятьДанные = ПолучитьПереключательОтправкиДанных();
//	
//	Если ЦентрМониторингаРазрешитьОтправлятьДанные = 0 Тогда
//		ПараметрыСервиса.Сервер = ПараметрыЦентраМониторинга.СерверПоУмолчанию;
//		ПараметрыСервиса.АдресРесурса = ПараметрыЦентраМониторинга.АдресРесурсаПоУмолчанию;
//		ПараметрыСервиса.Порт = ПараметрыЦентраМониторинга.ПортПоУмолчанию;
//	ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 1 Тогда
//		ПараметрыСервиса.Сервер = ПараметрыЦентраМониторинга.Сервер;
//		ПараметрыСервиса.АдресРесурса = ПараметрыЦентраМониторинга.АдресРесурса;
//		ПараметрыСервиса.Порт = ПараметрыЦентраМониторинга.Порт;
//	ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 2 Тогда
//		ПараметрыСервиса = Неопределено;
//	КонецЕсли;
//	
//	Если ПараметрыСервиса <> Неопределено Тогда
//		Если ПараметрыСервиса.Порт = 80 Тогда
//			Схема = "http://";
//			Порт = "";
//		ИначеЕсли ПараметрыСервиса.Порт = 443 Тогда
//			Схема = "https://";
//			Порт = "";
//		Иначе
//			Схема = "http://";
//			Порт = ":" + Формат(ПараметрыСервиса.Порт, "ЧН=0; ЧГ=");
//		КонецЕсли;
//		
//		ЦентрМониторингаАдресСервиса = Схема + ПараметрыСервиса.Сервер + Порт + "/" + ПараметрыСервиса.АдресРесурса;
//	Иначе
//		ЦентрМониторингаАдресСервиса = "";
//	КонецЕсли;
//	
//	Возврат ЦентрМониторингаАдресСервиса;
//	
//КонецФункции

//Процедура УстановитьАдресСервисаЦентраМониторинга(НовоеЗначение) Экспорт
//	
//	Попытка
//		СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(НовоеЗначение);
//		
//		Если СтруктураАдреса.Схема = "http" Тогда
//			СтруктураАдреса.Вставить("ЗащищенноеСоединение", Ложь);
//		ИначеЕсли СтруктураАдреса.Схема = "https" Тогда
//			СтруктураАдреса.Вставить("ЗащищенноеСоединение", Истина);
//		КонецЕсли;
//		
//		Если НЕ ЗначениеЗаполнено(СтруктураАдреса.Порт) Тогда
//			Если СтруктураАдреса.Схема = "http" Тогда
//				СтруктураАдреса.Порт = 80;
//			ИначеЕсли СтруктураАдреса.Схема = "https" Тогда
//				СтруктураАдреса.Порт = 443;
//			КонецЕсли;
//		КонецЕсли;
//	Исключение
//		// Внимание, формат адреса должен соответствовать RFC 3986 
//		// см. описание функции ОбщегоНазначенияКлиентСервер.СтруктураURI
//		ОписаниеОшибки = НСтр("ru = 'Адрес сервиса'") + " "
//			+ НовоеЗначение + " "
//			+ НСтр("ru = 'не является допустимым адресом веб-сервиса для отправки отчетов об использовании программы.'"); 
//		ВызватьИсключение(ОписаниеОшибки);
//	КонецПопытки;
//	
//	ПараметрыЦентраМониторинга = Новый Структура();
//	ПараметрыЦентраМониторинга.Вставить("Сервер", СтруктураАдреса.Хост);
//	ПараметрыЦентраМониторинга.Вставить("АдресРесурса", СтруктураАдреса.ПутьНаСервере);
//	ПараметрыЦентраМониторинга.Вставить("Порт", СтруктураАдреса.Порт);
//	ПараметрыЦентраМониторинга.Вставить("ЗащищенноеСоединение", СтруктураАдреса.ЗащищенноеСоединение);
//	
//	МодульЦентрМониторингаСлужебный = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторингаСлужебный");
//	МодульЦентрМониторингаСлужебный.УстановитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыЦентраМониторинга);
//	
//КонецПроцедуры

//Функция ПолучитьПараметрыЦентраМониторинга()
//	
//	МодульЦентрМониторингаСлужебный = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторингаСлужебный");
//	ПараметрыЦентраМониторинга = МодульЦентрМониторингаСлужебный.ПолучитьПараметрыЦентраМониторингаВнешнийВызов();
//	
//	ПараметрыСервисаПоУмолчанию = МодульЦентрМониторингаСлужебный.ПолучитьПараметрыПоУмолчаниюВнешнийВызов();
//	ПараметрыЦентраМониторинга.Вставить("СерверПоУмолчанию", ПараметрыСервисаПоУмолчанию.Сервер);
//	ПараметрыЦентраМониторинга.Вставить("АдресРесурсаПоУмолчанию", ПараметрыСервисаПоУмолчанию.АдресРесурса);
//	ПараметрыЦентраМониторинга.Вставить("ПортПоУмолчанию", ПараметрыСервисаПоУмолчанию.Порт);
//	
//	Возврат ПараметрыЦентраМониторинга;
//	
//КонецФункции

//#КонецОбласти

//#Область УправлениеПечатью

//// Процедура переопределяет отображение подменю "Печать" в формах
////
//// Параметры:
////  ГруппаФормыПечать	 - ГруппаФормы	 - элемент формы, содержащий команды печати
////
//Процедура УстановитьОтображаниеПодменюПечати(ГруппаФормыПечать) Экспорт
//	
//	ГруппаФормыПечать.Вид			= ВидГруппыФормы.Подменю;
//	ГруппаФормыПечать.Отображение	= ОтображениеКнопки.Картинка;
//	ГруппаФормыПечать.Картинка		= БиблиотекаКартинок.Печать;
//	ГруппаФормыПечать.Подсказка		= НСтр("ru='Печать с предварительным просмотром'");
//	ГруппаФормыПечать.Заголовок		= НСтр("ru='Печать'");
//	
//КонецПроцедуры

//// Функция проверяет возможность выполнения команды печати в серверном контексте
////
//// Параметры:
////  ОписаниеКомандыПечати	 - СтрокаТаблицыЗначений - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати(); ШаблоныСообщенийСлужебный.ОпределитьСписокПечатныхФорм();
//// 
//// Возвращаемое значение:
////  булево - истина означает, что для команды печати определен вывод в табличный документ с использованием процедуры Печать() в модуле менеджера печати
////
//Функция КомандаПечатаетсяВСерверномКонтексте(знач ОписаниеКомандыПечати, КолонкаИдентификаторКоманды = Неопределено) Экспорт
//	
//	Если ОписаниеКомандыПечати.Представление = НСтр("ru='Настраиваемый комплект документов'") Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если КолонкаИдентификаторКоманды = Неопределено Тогда
//		КолонкаИдентификаторКоманды = "Идентификатор";
//	КонецЕсли;
//	
//	КомандыИсключения = Новый Массив;
//	КомандыИсключения.Добавить("БланкДоговора");
//	КомандыИсключения.Добавить("Конверт");
//	КомандыИсключения.Добавить("ПечатьЭтикетокИзОприходованиеЗапасов");
//	КомандыИсключения.Добавить("ПечатьЦенниковИзОприходованиеЗапасов");
//	КомандыИсключения.Добавить("ПечатьЭтикетокИзПеремещенияТоваров");
//	КомандыИсключения.Добавить("ПечатьЦенниковИзПеремещенияТоваров");
//	КомандыИсключения.Добавить("ПечатьЭтикетокИзПриходнойНакладной");
//	КомандыИсключения.Добавить("ПечатьЦенниковИзПриходнойНакладной");
//	КомандыИсключения.Добавить("ПечатьЭтикетокИзРасходнойНакладной");
//	КомандыИсключения.Добавить("ПечатьЦенниковИзРасходнойНакладной");
//	КомандыИсключения.Добавить("ПечатьЭтикетокИзЗаказаПокупателя");
//	КомандыИсключения.Добавить("ПечатьЦенниковИзЗаказаПокупателя");
//	КомандыИсключения.Добавить("УниверсальныйПередаточныйДокумент");
//	КомандыИсключения.Добавить("УниверсальныйПередаточныйДокументФаксимиле");
//	КомандыИсключения.Добавить("УниверсальныйКорректировочныйДокумент");
//	КомандыИсключения.Добавить("ПечатьЭтикетокИзСборкиЗапасов");
//	КомандыИсключения.Добавить("ТН");
//	
//	Возврат КомандыИсключения.Найти(ОписаниеКомандыПечати[КолонкаИдентификаторКоманды]) = Неопределено;
//	
//КонецФункции

//Функция ОтображатьКомандуПриВыключеннойФО(ОписаниеКомандыПечати) Экспорт
//	
//	КомандыИсключения = Новый Массив;
//	
//	Если ПолучитьФункциональнуюОпцию("ИспользоватьБланкиДоговоров") Тогда
//		КомандыИсключения.Добавить("ДоговорКонтрагента_DOC");
//		КомандыИсключения.Добавить("ДоговорКонтрагента_HTML");
//	КонецЕсли;
//	
//	Возврат НЕ КомандыИсключения.Найти(ОписаниеКомандыПечати.Идентификатор) = Неопределено;
//	
//КонецФункции

//#КонецОбласти

//#Область РаботаСПодарочнымиСертификатами

//Процедура ОтразитьПодарочныеСертификаты(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаПодарочныеСертификаты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПодарочныеСертификаты;
//	
//	Если Отказ
//	 ИЛИ ТаблицаПодарочныеСертификаты.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияПодарочныеСертификаты = Движения.ПодарочныеСертификаты;
//	ДвиженияПодарочныеСертификаты.Записывать = Истина;
//	ДвиженияПодарочныеСертификаты.Загрузить(ТаблицаПодарочныеСертификаты);
//	
//КонецПроцедуры

//Процедура ОтразитьОплатаПодарочнымиСертификатами(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаОплатаПодарочнымиСертификатами = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОплатаПодарочнымиСертификатами;
//	
//	Если Отказ
//	 ИЛИ ТаблицаОплатаПодарочнымиСертификатами.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияОплатыПодарочнымиСертификатами = Движения.ОплатаПодарочнымиСертификатами;
//	ДвиженияОплатыПодарочнымиСертификатами.Записывать = Истина;
//	ДвиженияОплатыПодарочнымиСертификатами.Загрузить(ТаблицаОплатаПодарочнымиСертификатами);
//	
//КонецПроцедуры

//#КонецОбласти

//#Область РаботаСБонуснымиБаллами

//Процедура ОтразитьБонусныеБаллы(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаБонусныеБаллы = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаБонусныеБаллы;
//	
//	Если Отказ
//	 ИЛИ ТаблицаБонусныеБаллы.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияБонусныеБаллы = Движения.БонусныеБаллы;
//	ДвиженияБонусныеБаллы.Записывать = Истина;
//	ДвиженияБонусныеБаллы.Загрузить(ТаблицаБонусныеБаллы);
//	
//КонецПроцедуры

//Процедура ОтразитьНачисленияБонусныхБаллов(ДополнительныеСвойства, Движения, Отказ) Экспорт
//	
//	ТаблицаНачисленияБонусныхБаллов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНачисленияБонусныхБаллов;
//	
//	Если Отказ
//	 ИЛИ ТаблицаНачисленияБонусныхБаллов.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДвиженияНачисленияБонусныхБаллов = Движения.НачисленияБонусныхБаллов;
//	ДвиженияНачисленияБонусныхБаллов.Записывать = Истина;
//	ДвиженияНачисленияБонусныхБаллов.Загрузить(ТаблицаНачисленияБонусныхБаллов);
//	
//КонецПроцедуры

//#КонецОбласти

//#Область СборСтатистики

//Процедура ОтправитьСобытиеСДопДаннымиВФоне(ИмяСобытия, ДопДанные) Экспорт
//	
//	Параметры = Новый Массив();
//	Параметры.Добавить(ИмяСобытия);
//	Параметры.Добавить(ДопДанные);
//	
//	ФоновыеЗадания.Выполнить(
//		"УправлениеНебольшойФирмойСервер.ОтправитьСобытиеСДопДанными",
//		Параметры,
//		Новый УникальныйИдентификатор,
//		"ОтправкаСобытияСДопДанными"
//	);
//	
//КонецПроцедуры // ОтправитьСобытиеСДопДаннымиВФоне()

//Процедура ОтправитьСобытиеСДопДанными(ИмяСобытия, ДопДанные) Экспорт
//	
//	Попытка
//		HTTPСоединение = Новый HTTPСоединение(
//			"unf-stat1c-gpt-msk.1c.ru",
//			80
//		);
//		
//		ПутьНаСервере = 
//			"/unf-stat1c/hs/analytics/sendstats/"
//			+ ИдентификаторПриложения() + "/"
//			+ Константы.ИдентификаторИнформационнойБазы.Получить() + "/"
//			+ ИмяСобытия;
//		
//		HTTPЗапрос = Новый HTTPЗапрос(ПутьНаСервере);
//		HTTPЗапрос.УстановитьТелоИзСтроки(ДопДанные);
//		Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
//	Исключение
//	КонецПопытки;
//	
//КонецПроцедуры // ОтправитьСобытиеСДопДанными()

//Функция ИдентификаторПриложения()
//	
//	Возврат "9a94779e-fe04-11e8-429b-0050569f4ccd";
//	
//КонецФункции // ИдентификаторПриложения()

//#КонецОбласти

//#Область ТабачнаяПродукция

//Функция КодМаркировкиСоответствуетНоменклатуре(КодМаркировки, Номенклатура, ЕдиницаИзмерения) Экспорт
//	
//	РезультатПроверки = Ложь;
//	
//	ДанныеМаркировки = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьКодМаркировки(КодМаркировки);
//	Если ДанныеМаркировки.Разобран Тогда
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	Штрихкоды.Штрихкод КАК Штрихкод,
//		|	Штрихкоды.Номенклатура КАК Номенклатура,
//		|	Штрихкоды.Характеристика КАК Характеристика,
//		|	Штрихкоды.Партия КАК Партия,
//		|	Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения
//		|ИЗ
//		|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
//		|ГДЕ
//		|	Штрихкоды.Штрихкод = &EAN
//		|	И Штрихкоды.Номенклатура = &Номенклатура
//		|	И Штрихкоды.ЕдиницаИзмерения = &ЕдиницаИзмерения";
//		Запрос.УстановитьПараметр("EAN", ДанныеМаркировки.EAN);
//		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
//		Запрос.УстановитьПараметр("ЕдиницаИзмерения", ?(ЗначениеЗаполнено(ЕдиницаИзмерения) И ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), ЕдиницаИзмерения, Справочники.ЕдиницыИзмерения.ПустаяСсылка()));
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			РезультатПроверки = Истина;
//		Иначе
//			ТекстСообщения = НСтр("ru = 'Считанный код маркировки %1 не соответствует выбранной номенклатуре %2.'");
//			ПредставлениеНоменклатуры = Строка(Номенклатура) + ?(ЗначениеЗаполнено(ЕдиницаИзмерения), "[" + Строка(ЕдиницаИзмерения) + "]", "");
//			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КодМаркировки, ПредставлениеНоменклатуры);
//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
//		КонецЕсли;
//	Иначе
//		ТекстСообщения = НСтр("ru = 'Считанный код маркировки %1 не соответствует формату'");
//		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КодМаркировки);
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
//	КонецЕсли;
//	
//	Возврат РезультатПроверки;
//	
//КонецФункции

//#КонецОбласти