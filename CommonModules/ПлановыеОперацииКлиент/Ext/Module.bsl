////////////////////////////////////////////////////////////////////////////////
// ПлановыеОперацииКлиент: Интерактивный функционал для работы с шаблонами 
//	и плановыми операциями
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Отрывает диалог редактирования расписания для шаблона, редактируемого в указанной форме
Процедура ОткрытьРедакторРасписания(Форма) Экспорт
	
	ДанныеРасписания = Новый Структура;
	ДанныеРасписания.Вставить("ВладелецРасписания",  Форма.Объект.Ссылка);
	ДанныеРасписания.Вставить("НазваниеШаблона",     Форма.Объект.ОписаниеОперации);
	ДанныеРасписания.Вставить("ИДФормыВладельца",    Форма.УникальныйИдентификатор);
	ДанныеРасписания.Вставить("ПараметрыРасписания", Форма.ПараметрыРасписания);
	ДанныеРасписания.Вставить("АдресПроизвольныхДатРасписания", Форма.АдресПроизвольныхДатРасписания);
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.МыВернулиДолг") 
		ИЛИ ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.НамВернулиДолг") Тогда
		
		ДанныеРасписания.Вставить("ПараметрыГрафика",    Форма.ПараметрыГрафика);
		ОткрытьФорму("ОбщаяФорма.РедакторГрафикаПогашенияДолга", ДанныеРасписания, Форма);
		
	Иначе
		ОткрытьФорму("ОбщаяФорма.РедакторРасписания", ДанныеРасписания, Форма);
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Отрывает диалог редактирования расписания для шаблона, привязанного к долгу
Процедура ОткрытьРедакторРасписанияИзСправочникаДолги(Форма) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Форма.ПараметрыГрафика.Долг) И НЕ Форма.Объект.Ссылка.Пустая() Тогда
		Форма.ПараметрыГрафика.Долг = Форма.Объект.Ссылка;
	КонецЕсли;
	
	ДанныеРасписания = Новый Структура;
	ДанныеРасписания.Вставить("НазваниеШаблона",     Форма.ТекстШаблонаОперации);
	ДанныеРасписания.Вставить("ИДФормыВладельца",    Форма.УникальныйИдентификатор);
	ДанныеРасписания.Вставить("ПараметрыГрафика",    Форма.ПараметрыГрафика);
	ДанныеРасписания.Вставить("ПараметрыРасписания", Форма.ПараметрыРасписания);
	ДанныеРасписания.Вставить("АдресПроизвольныхДатРасписания",  Форма.АдресПроизвольныхДатРасписания);
	
	ОткрытьФорму("ОбщаяФорма.РедакторГрафикаПогашенияДолга", ДанныеРасписания, Форма);
	
КонецПроцедуры

// Отрывает диалог редактирования расписания для шаблона, привязанного к финансовой цели
Процедура ОткрытьРедакторРасписанияИзСправочникаФинансовыеЦели(Форма) Экспорт
	
	ДанныеРасписания = Новый Структура;
	ДанныеРасписания.Вставить("ПараметрыРасписания",         Форма.ПараметрыРасписания);
	ДанныеРасписания.Вставить("АдресПроизвольныхДатРасписания", Форма.АдресПроизвольныхДатРасписания);
	ДанныеРасписания.Вставить("ИДФормыВладельца",            Форма.УникальныйИдентификатор);
	ДанныеРасписания.Вставить("ВладелецРасписания",          Форма.Объект.ШаблонНакопления);
	ДанныеРасписания.Вставить("НазваниеШаблона",             Строка(ДанныеРасписания.ВладелецРасписания));
	ДанныеРасписания.Вставить("ДляПогашенияДолга",           Ложь);
	ДанныеРасписания.Вставить("ДляНакопленияНаЦель",         Истина);
	ДанныеРасписания.Вставить("ФинансоваяЦель", 			 Форма.Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.РедакторРасписания", ДанныеРасписания, Форма);
	
КонецПроцедуры

// Записывает изменения, следанные в расписании
//
// Параметры:
//   ФормаРедактора                 - УправляемаяФорма - форма редактора расписания
//   ФормаВладельцаРасписания       - УправляемаяФорма - форма, из который был открыт редактор расписания
//   СохранятьНезависимоОтВладельца - Булево - если ИСТИНА, изменения будут записаны в регистры независимо от сохранения владельца расписания,
//												если ЛОЖЬ, то изменения расписания будут записаны только в момент записи владельца расписания
//
Процедура СохранитьИзмененияРедактораРасписания(ФормаРедактора, ФормаВладельцаРасписания, СохранятьНезависимоОтВладельца = Ложь) Экспорт

	ЗаполнитьЗначенияСвойств(ФормаВладельцаРасписания.ПараметрыРасписания, ФормаРедактора.ПараметрыРасписания); 
	ФормаВладельцаРасписания.АдресПроизвольныхДатРасписания = ФормаРедактора.АдресПроизвольныхДатРасписания;
	Если ФормаРедактора.ПараметрыГрафика.Свойство("ДатаЗакрытия") И ЗначениеЗаполнено(ФормаРедактора.ПараметрыГрафика.ДатаЗакрытияДолга) Тогда
		ФормаВладельцаРасписания.Активность = Ложь;
	КонецЕсли; 
	
	Если ТипЗнч(ФормаВладельцаРасписания.Объект.Ссылка) = Тип("СправочникСсылка.Долги")
		ИЛИ ТипЗнч(ФормаВладельцаРасписания.Объект.Ссылка) = Тип("ДокументСсылка.МыВзялиВДолг") 
		ИЛИ ТипЗнч(ФормаВладельцаРасписания.Объект.Ссылка) = Тип("ДокументСсылка.МыВернулиДолг") 
		ИЛИ ТипЗнч(ФормаВладельцаРасписания.Объект.Ссылка) = Тип("ДокументСсылка.МыДалиВДолг")
		ИЛИ ТипЗнч(ФормаВладельцаРасписания.Объект.Ссылка) = Тип("ДокументСсылка.НамВернулиДолг") Тогда
		ЗаполнитьЗначенияСвойств(ФормаВладельцаРасписания.ПараметрыГрафика, ФормаРедактора.ПараметрыГрафика);
	КонецЕсли; 
	Оповестить("Изменено расписание", Новый Структура("ВладелецФормы", ФормаВладельцаРасписания.УникальныйИдентификатор));
	
	Если СохранятьНезависимоОтВладельца И ЗначениеЗаполнено(ФормаВладельцаРасписания.Объект.Ссылка) Тогда
		
		//Структуры = ПолучитьСтруктурыРасписанийИГрафика();
		ПараметрыРасписания = ПлановыеОперацииКлиентСервер.СтруктураПараметровРасписания();
		ПараметрыГрафика    = ПлановыеОперацииКлиентСервер.СтруктураПараметровГрафикаПогашенияДолга();
		ЗаполнитьЗначенияСвойств(ПараметрыРасписания, ФормаВладельцаРасписания.ПараметрыРасписания);
		ЗаполнитьЗначенияСвойств(ПараметрыГрафика, ФормаВладельцаРасписания.ПараметрыГрафика);
		
		ПлановыеОперацииВызовСервера.ПередЗаписьюОперацииСКлиента(ФормаВладельцаРасписания.ПараметрыРасписания.ВладелецРасписания, 
				ПараметрыРасписания, 
				ФормаВладельцаРасписания.АдресПроизвольныхДатРасписания, 
				ФормаВладельцаРасписания.СохранитьРасписание, 
				Истина, 
				Неопределено, 
				ПараметрыГрафика);

		ФормаВладельцаРасписания.СохранитьРасписание = Ложь;
		ФормаВладельцаРасписания.Модифицированность  = Ложь;
		
	Иначе
		
		ФормаВладельцаРасписания.СохранитьРасписание = Истина;
		ФормаВладельцаРасписания.Модифицированность  = Истина;
		
	КонецЕсли; 
	

КонецПроцедуры

// Выполняет проверку, при необходимости запрашивает у пользователя подтверждение на сохранение плановых операций
//
// Параметры:
//   Форма   - УправляемаяФорма - форма, в которой происходит запись операции
//   Отказ   - Булево - стандартный параметр события ПередЗаписью
//   ПараметрыЗаписи - Структура - содержит дополнительную информацию о сохранении операции: 
//		* РежимЗаписи - РежимЗаписиДокумента
//
Процедура ПередЗаписьюДокумента(Форма, Отказ, ПараметрыЗаписи) Экспорт

	ЗакрыватьФорму = ПараметрыЗаписи.Свойство("ЗакрыватьФорму") И ПараметрыЗаписи.ЗакрыватьФорму;
	Если Не ЗакрыватьФорму И ТипЗнч(Форма.ДополнительныеПараметрыНаКлиенте) = Тип("Структура") 
		И Форма.ДополнительныеПараметрыНаКлиенте.Свойство("ЗакрытьФормуПослеДиалогов") Тогда
		// поскольку событие могло возникнуть после системного диалога сохранения изменений, 
		//признак закрытия формы мог не поступить из команды, а быть отмечен в дополнительных параметрах формы
		ЗакрыватьФорму = Форма.ДополнительныеПараметрыНаКлиенте.Свойство("ЗакрытьФормуПослеДиалогов");
	КонецЕсли;
	
	//Уточним дату/время
	Если Форма.Объект.Ссылка.Пустая() И Форма.Объект.Дата = НачалоДня(Форма.Объект.Дата) Тогда
		Форма.Объект.Дата = Форма.Объект.Дата + (ТекущаяДата() - НачалоДня(ТекущаяДата()));
	КонецЕсли;
	
	Если Форма.Объект.ЭтоШаблон И Форма.СохранитьРасписание Тогда
		
		Состояние(НСтр("ru = 'Ожидайте, записывается расписание ввода операций'") );
		
	Иначе
		
		Сегодня = КонецДня(ТекущаяДата());
		ЭтоПлановаяОперация = ЗначениеЗаполнено(Форма.ЗаписьПлановойОперации.ВладелецРасписания) 
				И ЗначениеЗаполнено(Форма.ЗаписьПлановойОперации.ПлановаяДата);
		
		Если Форма.Объект.Дата > Сегодня И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ Форма.Объект.ПометкаУдаления Тогда
			
			Если Не ПараметрыЗаписи.Свойство("ПроверкаПлановойОперацииВыполнена") Тогда
						
				ТекстВопроса = НСтр("ru = 'Дата этой операции еше не наступила.
					|Запланировать эту операцию на %1?'");
				ТекстВопроса = СтрШаблон(ТекстВопроса, Формат(Форма.Объект.Дата, "ДФ=дд.ММ.гггг"));
							
				Кнопки = Новый СписокЗначений();
				Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Запланировать (рекомендуется)'"));
				Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Учесть будущей датой'"));
				Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
				
				ДополнительныеПараметры = Новый Структура("Форма, ЗакрыватьФорму", Форма, ЗакрыватьФорму);
				Оповещение   = Новый ОписаниеОповещения("ПодтверждениеЗаписиПлановойОперации", ПлановыеОперацииКлиент, ДополнительныеПараметры);
				
				ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Форма.Заголовок);
				
				Отказ = Истина;
			
			КонецЕсли;
			
		ИначеЕсли ЭтоПлановаяОперация И Форма.ЗаписьПлановойОперации.Пропустить И НЕ Форма.Объект.ПометкаУдаления Тогда
			
			Кнопки = Новый СписокЗначений();
			
			Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				// Попытка выполнить пропущенную плановую операцию
				ТекстВопроса = НСтр("ru = 'Эта плановая операция была исключена из планов как пропущенная. 
					|Хотите отменить пропуск и выполнить эту плановую операцию?'");
				Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Выполнить (учесть)'"));
				Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Не выполнять'"));
			Иначе
				// Попытка восстановить в планах пропущенную плановую операцию
				ТекстВопроса = НСтр("ru = 'Эта плановая операция была пропущенна.
					|Хотите отменить пропуск и восстановить эту операцию в планах?'");
				Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Отменить пропуск'"));
				Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Не отменять'"));
			КонецЕсли; 
			
			Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
			
			ДополнительныеПараметры = Новый Структура("Форма, ЗакрыватьФорму", Форма, ЗакрыватьФорму);
			Оповещение = Новый ОписаниеОповещения("ПодстверждениеИзмененияПропускаОперации", ПлановыеОперацииКлиент, ДополнительныеПараметры);
		
			ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Форма.Заголовок);
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли; 

КонецПроцедуры
 
// Предоставляет пользователю возможность использовать шаблон в плановой операции:
//	обновить операцию по щаблону, изменить шаблон, создать шаблон по операции
//
// Параметры:
//   Форма                 - УправляемаяФорма - форма, в которой редактируется операция
//   Элемент               - ЭлементФормы - элемент, к которому нужно привязать меню
//   СтандартнаяОбработка  - Булево - стандартный параметр события элемента формы 
//   ВидДокумента          - Строка - строковое представление вида операции, редактируемой в форме
//
Процедура ИнформацияОШаблонеНажатие(Форма, Элемент, СтандартнаяОбработка, ВидДокумента) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Элементы = Форма.Элементы;
	
	Меню = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Форма.ЗаписьОперацииШаблона.Шаблон) И Форма.ЗаписьОперацииШаблона.Шаблон <> Форма.ЗаписьПлановойОперации.ПлановаяОперация Тогда
		// Операция создана по шаблону
		Меню.Добавить("Открытьшаблон", НСтр("ru = 'Открыть шаблон'") );
		Меню.Добавить("ЗаполнитьОперациюПоШаблону", НСтр("ru = 'Заполнить операцию по шаблону'") );
		//Меню.Добавить("ЗаполнитьШаблонПоОперации",   НСтр("ru = 'Заполнить шаблон данными из этой операции'") );
	Иначе
		// Не использовалось расписание
		Меню.Добавить("СоздатьШаблон",   НСтр("ru = 'Создать шаблон'") );
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура("Форма, ВидДокумента", Форма, ВидДокумента);
	ОбработчикВыбора = Новый ОписаниеОповещения("ИнформацияОШаблонеНажатиеЗавершение", ПлановыеОперацииКлиент, ДополнительныеПараметры);
	Форма.ПоказатьВыборИзМеню(ОбработчикВыбора, Меню, Элемент);
	
КонецПроцедуры
 

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

//	Завершение интерактивного выбора из меню процедуры ИнформацияОШаблонеНажатие()
Процедура ИнформацияОШаблонеНажатиеЗавершение(ВыборПользователя, ДополнительныеПараметры) Экспорт

	Если ВыборПользователя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма    = ДополнительныеПараметры.Форма;
	Объект       = Форма.Объект;
	ВидДокумента = ДополнительныеПараметры.ВидДокумента;
	
	Если ВыборПользователя.Значение = "СоздатьШаблон" Тогда
		Если Форма.Модифицированность ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ТекстВопроса = НСтр("ru='Для создания шаблона из операции нужно сохранить сделанные в ней изменения.
				|Записать операцию?'");
				
			ОбработчикОтвета = Новый ОписаниеОповещения("ИнформацияОШаблонеВопросОСохраненииЗавершение", ПлановыеОперацииКлиент, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Иначе
			ПараметрыФормы = Новый Структура("ЗначениеКопирования, ЗначенияЗаполнения, ПлановаяДата",
					Объект.Ссылка, Новый Структура("ЭтоШаблон", Истина), Объект.Дата);
			ОткрытьФорму("Документ." + ВидДокумента + ".ФормаОбъекта", ПараметрыФормы, Форма, Истина,,,,);
		КонецЕсли;
	ИначеЕсли ВыборПользователя.Значение = "Открытьшаблон" Тогда
		ПоказатьЗначение(, Форма.ЗаписьОперацииШаблона.Шаблон);
	ИначеЕсли ВыборПользователя.Значение = "ЗаполнитьОперациюПоШаблону" Тогда
		
		ТекстВопроса = НСтр("ru = 'Заполнить эту операцию данными из шаблона?'") ;
		ОбработчикОтвета = Новый ОписаниеОповещения("ПодтверждениеПерезаполненияОперации", ПлановыеОперацииКлиент, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
	КонецЕсли;

КонецПроцедуры
 
//	Завершение ответа на вопрос пользователю процедуры ИнформацияОШаблонеНажатиеЗавершение()
Процедура ИнформацияОШаблонеВопросОСохраненииЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Форма        = ДополнительныеПараметры.Форма;
	Объект       = Форма.Объект;
	ВидДокумента = ДополнительныеПараметры.ВидДокумента;
	
	Если Ответ = КодВозвратаДиалога.Да И Форма.Записать() Тогда
		ПараметрыФормы = Новый Структура("ЗначениеКопирования, ЗначенияЗаполнения, ПлановаяДата",
				Объект.Ссылка, Новый Структура("ЭтоШаблон", Истина), Объект.Дата);
		ОткрытьФорму("Документ." + ВидДокумента + ".ФормаОбъекта", ПараметрыФормы, Форма, Истина,,,,);
	КонецЕсли;

КонецПроцедуры

// Завершение вопроса об учете или планировании 
Процедура ПодтверждениеЗаписиПлановойОперации(Ответ, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПроверкаПлановойОперацииВыполнена", Ложь);
	ПараметрыЗаписи.Вставить("ЗакрыватьФорму", ДополнительныеПараметры.ЗакрыватьФорму);
	ПараметрыЗаписи.Вставить("ИмяКоманды", "ЗаписьОперацииБудущейДатой");
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если  Не ЗначениеЗаполнено(Форма.ЗаписьПлановойОперации.ВладелецРасписания) 
				И Не ЗначениеЗаполнено(Форма.ЗаписьПлановойОперации.ПлановаяДата) Тогда
			Форма.ЗаписьПлановойОперации.ПлановаяДата = Форма.Объект.Дата;
		КонецЕсли;
		
		ПараметрыЗаписи.Вставить("РежимЗаписи", ?(Форма.Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись));
		ПараметрыЗаписи.Вставить("ПроверкаПлановойОперацииВыполнена", Истина);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		ПараметрыЗаписи.Вставить("ПроверкаПлановойОперацииВыполнена", Истина);
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.ПроверкаПлановойОперацииВыполнена Тогда
		
		Если Форма.Объект.ПометкаУдаления Тогда
			Форма.Объект.ПометкаУдаления = Ложь;
		КонецЕсли;
		
		Если Форма.Записать(ПараметрыЗаписи) И ДополнительныеПараметры.ЗакрыватьФорму и Форма.Открыта() Тогда
			Форма.Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Завершение вопроса о пропуске/восстановлении операции
Процедура ПодстверждениеИзмененияПропускаОперации(Ответ, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПроверкаПлановойОперацииВыполнена", Ложь);
	ПараметрыЗаписи.Вставить("ЗакрыватьФорму", ДополнительныеПараметры.ЗакрыватьФорму);
	ПараметрыЗаписи.Вставить("ИмяКоманды", "ЗаписьОперацииБудущейДатой");
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		// Отмена пропуска операции
		ПараметрыЗаписи.ПроверкаПлановойОперацииВыполнена = Истина;
		Форма.ЗаписьПлановойОперации.Пропустить = Ложь;
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		ПараметрыЗаписи.ПроверкаПлановойОперацииВыполнена = Истина;
		Форма.ЗаписьПлановойОперации.Пропустить = Форма.Объект.ПометкаУдаления;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
		ПараметрыЗаписи.Вставить("ПроверкаПлановойОперацииВыполнена", Истина);
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.ПроверкаПлановойОперацииВыполнена Тогда
		
		Если Форма.Записать(ПараметрыЗаписи) И ДополнительныеПараметры.ЗакрыватьФорму И Форма.Открыта() Тогда
			Форма.Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Завершение вопроса о перезаполнении операции из шаблона
Процедура ПодтверждениеПерезаполненияОперации(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Оповестить("Записана операция", Новый Структура("Дата, ВидДокумента, Ссылка, ЭтоШаблон, ВладелецФормы", 
				ДополнительныеПараметры.Форма.ЗаписьПлановойОперации.ПлановаяДата, "", ДополнительныеПараметры.Форма.ЗаписьОперацииШаблона.Шаблон, Истина, 
				?(ТипЗнч(ДополнительныеПараметры.Форма) = Тип("УправляемаяФорма"), ДополнительныеПараметры.Форма.УникальныйИдентификатор, Неопределено)));
	КонецЕсли;

КонецПроцедуры
 


#КонецОбласти




